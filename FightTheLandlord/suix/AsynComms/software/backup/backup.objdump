
backup.elf:     file format elf32-littlenios2
backup.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040150

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000162e4 memsz 0x000162e4 flags r-x
    LOAD off    0x00017304 vaddr 0x00056304 paddr 0x00057d90 align 2**12
         filesz 0x00001a8c memsz 0x00001a8c flags rw-
    LOAD off    0x0001981c vaddr 0x0005981c paddr 0x0005981c align 2**12
         filesz 0x00000000 memsz 0x00000290 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000130  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015538  00040150  00040150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c7c  00055688  00055688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a8c  00056304  00057d90  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000290  0005981c  0005981c  0001981c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00018d90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001238  00000000  00000000  00018db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00033f80  00000000  00000000  00019ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d3c2  00000000  00000000  0004df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000f33b  00000000  00000000  0005b332  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000021a8  00000000  00000000  0006a670  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003925  00000000  00000000  0006c818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00019464  00000000  00000000  0007013d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  000895a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00089608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0008e0d0  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000f  00000000  00000000  0008e0d3  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0008e0e2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0008e0e3  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  0008e0e4  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0008e0ed  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  0008e0f6  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0008e0ff  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000011  00000000  00000000  0008e105  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00071df7  00000000  00000000  0008e116  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040150 l    d  .text	00000000 .text
00055688 l    d  .rodata	00000000 .rodata
00056304 l    d  .rwdata	00000000 .rwdata
0005981c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../backup_bsp//obj/HAL/src/crt0.o
00040198 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 SRAMIO.c
00000000 l    df *ABS*	00000000 hangman.c
00000000 l    df *ABS*	00000000 landlord.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 patternDetection.c
00000000 l    df *ABS*	00000000 play.c
00000000 l    df *ABS*	00000000 playControl.c
00000000 l    df *ABS*	00000000 playerControl.c
00000000 l    df *ABS*	00000000 rand.c
00059840 l     O .bss	00000004 z1.2588
00059844 l     O .bss	00000004 z2.2589
00059848 l     O .bss	00000004 z3.2590
0005984c l     O .bss	00000004 z4.2591
00000000 l    df *ABS*	00000000 shuffle.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000456b4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00056304 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00045b58 l     F .text	00000034 __sprint_r
00055d3e l     O .rodata	00000010 blanks.3546
00055d4e l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 vfscanf.c
00055d66 l     O .rodata	00000022 basefix.3458
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00055e89 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00049254 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004ac90 l     F .text	00000008 __fp_lock
0004ac98 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0005602c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00056174 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0004e290 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
00056b18 l     O .rwdata	00000014 fpi.2046
00056190 l     O .rodata	00000028 tinytens
00056b2c l     O .rwdata	00000014 fpinan.2082
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00051190 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00052b74 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0005422c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0005451c l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00057d80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00054638 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00056ce8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00054784 l     F .text	00000050 altera_avalon_jtag_uart_timeout
000547d4 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00054f30 l     F .text	00000070 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0004594c g     F .text	0000001c putchar
0004d974 g     F .text	00000074 _mprec_log10
0004da64 g     F .text	00000084 __any_on
00051cfc g     F .text	00000064 _isatty_r
0005605c g     O .rodata	00000028 __mprec_tinytens
000544c4 g     F .text	00000050 alt_main
00053ff8 g     F .text	00000044 __ashldi3
00045968 g     F .text	00000084 _puts_r
000599ac g     O .bss	00000100 alt_irq
00051d60 g     F .text	0000006c _lseek_r
00057d90 g       *ABS*	00000000 __flash_rwdata_start
00053414 g     F .text	0000005c __eqdf2
00045130 g     F .text	00000030 setmul2
00059aac g       *ABS*	00000000 __alt_heap_start
00059820 g     O .bss	00000004 rand4
00045908 g     F .text	0000003c printf
0004e7cc g     F .text	0000005c __sseek
0004ad20 g     F .text	0000010c __sinit
00050cf4 g     F .text	0000013c __swbuf_r
0004bc5c g     F .text	0000009c _setlocale_r
0004acac g     F .text	00000064 __sfmoreglue
00050cd8 g     F .text	0000001c ungetc
00054518 g     F .text	00000004 __malloc_unlock
0004e8d4 g     F .text	00001458 _strtod_r
00059824 g     O .bss	00000004 rand1
00059828 g     O .bss	00000001 myNum
0004c93c g     F .text	00000128 memmove
0004ad10 g     F .text	00000010 _cleanup
0004cb40 g     F .text	000000a8 _Balloc
000534cc g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00051128 g     F .text	00000068 _fstat_r
00059868 g     O .bss	00000004 errno
00045a4c g     F .text	00000014 __srget
0004904c g     F .text	00000024 __svfscanf
000401fc g     F .text	00000090 sramwrite
00053b90 g     F .text	0000002c __make_fp
00059870 g     O .bss	00000004 alt_argv
0005fd48 g       *ABS*	00000000 _gp
00054634 g     F .text	00000004 usleep
00045048 g     F .text	00000038 incPCS
00056b40 g     O .rwdata	00000180 alt_fd_list
000457e4 g     F .text	00000070 _getc_r
00045854 g     F .text	00000088 getc
00045944 g     F .text	00000008 _putchar_r
00055284 g     F .text	00000070 alt_find_dev
0004c844 g     F .text	000000f8 memcpy
00051a70 g     F .text	0000028c __hexnan
0005982c g     O .bss	00000004 rand3
0004aca0 g     F .text	0000000c _cleanup_r
0005364c g     F .text	000000d4 __floatsidf
00054fa0 g     F .text	00000078 alt_io_redirect
00053594 g     F .text	0000005c __ltdf2
000459ec g     F .text	00000014 puts
00040474 g     F .text	000000a0 swap
0004c6c8 g     F .text	00000040 mbrtowc
00049000 g     F .text	0000004c _vfscanf_r
0004d8d0 g     F .text	000000a4 __ratio
000549e8 g     F .text	0000013c altera_avalon_jtag_uart_read
000458dc g     F .text	0000002c _printf_r
000457d4 g     F .text	00000008 __udivsi3
000542b4 g     F .text	00000080 isatty
0004bc24 g     F .text	00000038 iswspace
000560ac g     O .rodata	000000c8 __mprec_tens
00045100 g     F .text	00000030 setmul1
0004bcf8 g     F .text	0000000c __locale_charset
00051e98 g     F .text	00000084 __fixunsdfsi
000553e8 g     F .text	00000038 alt_icache_flush
00059864 g     O .bss	00000004 __malloc_top_pad
00045160 g     F .text	00000030 setmul3
00050694 g     F .text	00000024 strtoul
00057d5c g     O .rwdata	00000004 __mb_cur_max
0004bd04 g     F .text	0000000c _localeconv_r
000506b8 g     F .text	00000394 _strtoull_r
0004cf40 g     F .text	0000003c __i2b
0004b5e0 g     F .text	000004e4 __sfvwrite_r
00043868 g     F .text	00000148 seriesComp
0004e4fc g     F .text	00000064 _sbrk_r
00051dcc g     F .text	0000006c _read_r
00056704 g     O .rwdata	0000000c __lc_ctype
00057d68 g     O .rwdata	00000004 alt_max_fd
00053de0 g     F .text	00000104 __unpack_d
00050fd8 g     F .text	0000013c _fclose_r
0005981c g     O .bss	00000001 firstchoice
0004ac60 g     F .text	00000030 fflush
00059860 g     O .bss	00000004 __malloc_max_sbrked_mem
00052ec8 g     F .text	00000054 __adddf3
00052a70 g     F .text	00000054 __nesf2
00044c68 g     F .text	00000070 incCardNum
0004366c g     F .text	000001fc comp
00044b10 g     F .text	000000a4 deleteSRAM
0004d644 g     F .text	00000148 __b2d
000524e4 g     F .text	0000058c __umoddi3
00054438 g     F .text	0000008c lseek
00059830 g     O .bss	00000004 cch
00057d50 g     O .rwdata	00000004 _global_impure_ptr
0004dc94 g     F .text	000005fc _realloc_r
00059aac g       *ABS*	00000000 __bss_end
00054ec8 g     F .text	00000068 alt_iic_isr_register
00044914 g     F .text	000001fc display
000551c4 g     F .text	000000b8 alt_tick
000598ac g     O .bss	00000100 __hexdig
00051f1c g     F .text	000005c8 __udivdi3
00056084 g     O .rodata	00000028 __mprec_bigtens
0004cd24 g     F .text	00000104 __s2b
00053844 g     F .text	0000011c __floatunsidf
00044fb8 g     F .text	00000090 nextPlayer
0004d3e4 g     F .text	00000058 __mcmp
00057d58 g     O .rwdata	00000004 __ctype_ptr
0004af38 g     F .text	00000018 __fp_lock_all
00054eb0 g     F .text	00000018 alt_ic_irq_enabled
00055190 g     F .text	00000034 alt_alarm_stop
000500bc g     F .text	00000024 strtol
00059878 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	00000064 alt_irq_handler
00056cc0 g     O .rwdata	00000028 alt_dev_null
00053a0c g     F .text	000000c8 __unpack_f
00054d9c g     F .text	00000018 alt_dcache_flush_all
0004ce28 g     F .text	00000068 __hi0bits
00044258 g     F .text	00000258 haveWinner
00053720 g     F .text	000000c4 __fixdfsi
0004fd2c g     F .text	0000001c strtod
00057d90 g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00057d6c g     O .rwdata	00000008 alt_dev_list
00059834 g     O .bss	00000004 score
00054658 g     F .text	00000084 write
0004dae8 g     F .text	000000bc _putc_r
000450b0 g     F .text	00000050 waitNextPlayer
00052ac4 g     F .text	0000005c __gtsf2
00056304 g       *ABS*	00000000 __ram_rodata_end
00054234 g     F .text	00000080 fstat
00053fb4 g     F .text	00000044 __lshrdi3
00044f64 g     F .text	00000054 isCurrentPlayer
000535f0 g     F .text	0000005c __ledf2
0004d15c g     F .text	0000012c __pow5mult
00059858 g     O .bss	00000004 __nlocale_changed
000457dc g     F .text	00000008 __umodsi3
00044cd8 g     F .text	00000070 decCardNum
00045aa0 g     F .text	0000002c _scanf_r
00059aac g       *ABS*	00000000 end
0005403c g     F .text	0000012c __pack_f
000548bc g     F .text	00000080 altera_avalon_jtag_uart_init
00044e70 g     F .text	000000f4 sort
00059838 g     O .bss	00000004 rand2
00072000 g       *ABS*	00000000 __alt_stack_pointer
00053960 g     F .text	000000ac __clzsi2
00054b24 g     F .text	0000016c altera_avalon_jtag_uart_write
0004af28 g     F .text	00000004 __sfp_lock_acquire
0004c74c g     F .text	000000f8 memchr
00040b08 g     F .text	000000c8 sendchar2
00045b8c g     F .text	00001df8 ___vfprintf_internal_r
0004e62c g     F .text	00000058 _sprintf_r
0004b310 g     F .text	000002d0 _free_r
0005981f g     O .bss	00000001 ll
000439b0 g     F .text	00000080 seriesCompWithOnes
000554d4 g     F .text	000001a0 __call_exitprocs
00045a00 g     F .text	0000004c __srget_r
000455b8 g     F .text	00000064 getCard
00059854 g     O .bss	00000004 __mlocale_changed
00057d60 g     O .rwdata	00000004 __malloc_sbrk_base
00040150 g     F .text	0000004c _start
000403d8 g     F .text	0000009c recvchar
00059880 g     O .bss	00000004 _alt_tick_rate
000500e0 g     F .text	00000330 _strtoll_r
00040c30 g     F .text	000006b4 landlord
00045220 g     F .text	00000188 rand
0004d288 g     F .text	0000015c __lshift
0005987c g     O .bss	00000004 _alt_nticks
00043a30 g     F .text	00000828 play
0005453c g     F .text	00000088 read
000546fc g     F .text	00000040 alt_sys_init
0004cf7c g     F .text	000001e0 __multiply
0005493c g     F .text	00000038 altera_avalon_jtag_uart_close
00056304 g       *ABS*	00000000 __ram_rwdata_start
00055688 g       *ABS*	00000000 __ram_rodata_start
00059884 g     O .bss	00000028 __malloc_current_mallinfo
0004d78c g     F .text	00000144 __d2b
00044714 g     F .text	00000200 deleteCards
0005983c g     O .bss	00000001 multiplier
0005473c g     F .text	00000014 altera_avalon_jtag_uart_read_fd
00050410 g     F .text	00000284 _strtoul_r
0005539c g     F .text	0000004c alt_get_fd
00054d24 g     F .text	00000078 alt_busy_sleep
00053ee4 g     F .text	000000d0 __fpcmp_parts_d
00040bd0 g     F .text	00000060 recvchar2
00050f74 g     F .text	00000064 _close_r
00055458 g     F .text	0000007c memcmp
00054764 g     F .text	00000014 altera_avalon_jtag_uart_close_fd
00059aac g       *ABS*	00000000 __alt_stack_base
00054778 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
000490e0 g     F .text	00000174 __swsetup_r
00053260 g     F .text	000001b4 __divdf3
0004ae2c g     F .text	000000fc __sfp
0004d9e8 g     F .text	0000007c __copybits
0004028c g     F .text	000000d0 sendchar
00056710 g     O .rwdata	00000408 __malloc_av_
0004af34 g     F .text	00000004 __sinit_lock_release
00052f7c g     F .text	000002e4 __muldf3
0004e6f0 g     F .text	00000054 __sread
0004b194 g     F .text	00000040 fread
000552f4 g     F .text	000000a8 alt_find_file
00054db4 g     F .text	0000006c alt_dev_llist_insert
00054514 g     F .text	00000004 __malloc_lock
000545e8 g     F .text	0000004c sbrk
0004aa78 g     F .text	000001e8 _fflush_r
00050eb8 g     F .text	000000bc _calloc_r
0004019c g     F .text	00000060 sramread
0005981c g       *ABS*	00000000 __bss_start
0004ca64 g     F .text	000000dc memset
000412e4 g     F .text	00000128 main
0005986c g     O .bss	00000004 alt_envp
0005985c g     O .bss	00000004 __malloc_max_total_mem
00054750 g     F .text	00000014 altera_avalon_jtag_uart_write_fd
00050e30 g     F .text	0000001c __swbuf
00052b20 g     F .text	00000054 __ltsf2
0004af68 g     F .text	0000022c _fread_r
00057d48 g     O .rwdata	00000004 deleteCount
0005981d g     O .bss	00000001 secondchoice
00044bb4 g     F .text	00000064 syncDeleteSRAM
0004e828 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
000451c0 g     F .text	00000030 PCS1010
00051114 g     F .text	00000014 fclose
0004fe68 g     F .text	00000254 _strtol_r
000537e4 g     F .text	00000060 __truncdfsf2
0004945c g     F .text	0000161c _dtoa_r
0004bee0 g     F .text	00000784 _malloc_r
0004140c g     F .text	0000041c computell
00057d7c g     O .rwdata	00000004 alt_errno
00050a4c g     F .text	000000f0 __submore
0004bac4 g     F .text	000000a8 _fwalk
0004c708 g     F .text	00000044 _mbtowc_r
0004dba4 g     F .text	000000f0 putc
00045728 g     F .text	00000050 __divsi3
000561d4 g     O .rodata	00000014 __thenan_df
0004b1d4 g     F .text	0000013c _malloc_trim_r
0004e830 g     F .text	000000a4 strcmp
00055688 g       *ABS*	00000000 __flash_rodata_start
0005981e g     O .bss	00000001 thirdchoice
0004035c g     F .text	0000007c sendstr
00053470 g     F .text	0000005c __nedf2
000546dc g     F .text	00000020 alt_irq_init
000545c4 g     F .text	00000024 alt_release_fd
0004e684 g     F .text	0000006c sprintf
000561e8 g     O .rodata	00000100 __clz_tab
00059850 g     O .bss	00000004 _PathLocale
0004fd48 g     F .text	00000120 strtof
00050e4c g     F .text	0000006c _write_r
0004bd10 g     F .text	0000001c setlocale
00045a60 g     F .text	00000040 scanf
0004e624 g     F .text	00000008 nanf
00057d54 g     O .rwdata	00000004 _impure_ptr
00059874 g     O .bss	00000004 alt_argc
0004c664 g     F .text	00000064 _mbrtowc_r
0005983d g     O .bss	00000001 PCS
0004e2ac g     F .text	000001ec __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
0004d5e4 g     F .text	00000060 __ulp
0004e498 g     F .text	00000038 __isinfd
0004af50 g     F .text	00000018 __fp_unlock_all
00057d74 g     O .rwdata	00000008 alt_fs_list
00041934 g     F .text	00001d38 detectPattern
000405a8 g     F .text	00000560 hangman
00045080 g     F .text	00000030 resetPCS
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004bd2c g     F .text	0000000c localeconv
00054e2c g     F .text	00000004 alt_ic_isr_register
000512a0 g     F .text	00000090 __hexdig_init
00057d90 g       *ABS*	00000000 _edata
00059aac g       *ABS*	00000000 _end
00044c18 g     F .text	00000050 deleteRecv
00040150 g       *ABS*	00000000 __ram_exceptions_end
00049070 g     F .text	00000070 vfscanf
00054974 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00054e70 g     F .text	00000040 alt_ic_irq_disable
0004e744 g     F .text	00000088 __swrite
00057d64 g     O .rwdata	00000004 __malloc_trim_threshold
0005527c g     F .text	00000008 altera_nios2_qsys_irq_init
00055420 g     F .text	00000038 exit
0004bb6c g     F .text	000000b8 _fwalk_reent
0004d43c g     F .text	000001a8 __mdiff
00045778 g     F .text	0000005c __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004af2c g     F .text	00000004 __sfp_lock_release
00057d4c g     O .rwdata	00000004 firstrand
00044d48 g     F .text	00000074 syncCardNum
0004e560 g     F .text	000000c4 __sccl
00055d88 g     O .rodata	00000101 _ctype_
00053ad4 g     F .text	000000bc __fpcmp_parts_f
00055674 g     F .text	00000014 _exit
0004e4d0 g     F .text	0000002c __isnand
00044dbc g     F .text	000000b4 getCardNum
00045190 g     F .text	00000030 PCS0101
00054c90 g     F .text	00000094 alt_alarm_start
00051e38 g     F .text	00000060 __muldi3
0004bd38 g     F .text	000001a8 __smakebuf_r
000444b0 g     F .text	00000264 checkCards
00045acc g     F .text	0000008c strlen
00055018 g     F .text	00000178 open
0004561c g     F .text	00000098 initSRAM
00053530 g     F .text	00000064 __gedf2
00051330 g     F .text	00000740 __gethex
00054e20 g     F .text	0000000c alt_icache_flush_all
00057d84 g     O .rwdata	00000004 alt_priority_mask
00041828 g     F .text	0000010c checkPatternAndValue
00054e30 g     F .text	00000040 alt_ic_irq_enable
00047984 g     F .text	00000024 __vfprintf_internal
000451f0 g     F .text	00000030 PCS1111
00052f1c g     F .text	00000060 __subdf3
000453a8 g     F .text	00000210 shuffle
0004ce90 g     F .text	000000b0 __lo0bits
000479a8 g     F .text	00001658 __svfscanf_r
00057d88 g     O .rwdata	00000008 alt_alarm_list
00050b3c g     F .text	0000019c _ungetc_r
00054168 g     F .text	000000c4 close
00040514 g     F .text	00000094 addparity
00054334 g     F .text	00000104 alt_load
00053bbc g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0004af30 g     F .text	00000004 __sinit_lock_acquire
0004cc10 g     F .text	00000114 __multadd
0004cbe8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08405414 	ori	at,at,336
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defffe04 	addi	sp,sp,-8
   400f0:	dfc00115 	stw	ra,4(sp)
   400f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400f8:	0007313a 	rdctl	r3,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   400fc:	040001b4 	movhi	r16,6
   40100:	84266b04 	addi	r16,r16,-26196

  active = alt_irq_pending ();

  do
  {
    i = 0;
   40104:	0009883a 	mov	r4,zero
    mask = 1;
   40108:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4010c:	10ca703a 	and	r5,r2,r3
   40110:	28000826 	beq	r5,zero,40134 <alt_irq_handler+0x48>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40114:	200890fa 	slli	r4,r4,3
   40118:	8109883a 	add	r4,r16,r4
   4011c:	20800017 	ldw	r2,0(r4)
   40120:	21000117 	ldw	r4,4(r4)
   40124:	103ee83a 	callr	r2
   40128:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   4012c:	183ff51e 	bne	r3,zero,40104 <__alt_data_end+0xfffce104>
   40130:	00000306 	br	40140 <alt_irq_handler+0x54>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40134:	1085883a 	add	r2,r2,r2
      i++;
   40138:	21000044 	addi	r4,r4,1

    } while (1);
   4013c:	003ff306 	br	4010c <__alt_data_end+0xfffce10c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   40140:	dfc00117 	ldw	ra,4(sp)
   40144:	dc000017 	ldw	r16,0(sp)
   40148:	dec00204 	addi	sp,sp,8
   4014c:	f800283a 	ret

Disassembly of section .text:

00040150 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40150:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40154:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40158:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4015c:	00bffd16 	blt	zero,r2,40154 <__alt_data_end+0xfffce154>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40160:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40164:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40168:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4016c:	d6bf5214 	ori	gp,gp,64840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40170:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40174:	10a60714 	ori	r2,r2,38940

    movhi r3, %hi(__bss_end)
   40178:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4017c:	18e6ab14 	ori	r3,r3,39596

    beq r2, r3, 1f
   40180:	10c00326 	beq	r2,r3,40190 <_start+0x40>

0:
    stw zero, (r2)
   40184:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40188:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4018c:	10fffd36 	bltu	r2,r3,40184 <__alt_data_end+0xfffce184>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40190:	00543340 	call	54334 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40194:	00544c40 	call	544c4 <alt_main>

00040198 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40198:	003fff06 	br	40198 <__alt_data_end+0xfffce198>

0004019c <sramread>:
 * Read the value at given address in SRAM
 * Inputs:
 * 		addr: address in SRAM
 * Return: int value at give address in SRAM
 */
int sramread(char addr){
   4019c:	defffe04 	addi	sp,sp,-8
   401a0:	df000115 	stw	fp,4(sp)
   401a4:	df000104 	addi	fp,sp,4
   401a8:	2005883a 	mov	r2,r4
   401ac:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(noe, 0);
   401b0:	0007883a 	mov	r3,zero
   401b4:	00800234 	movhi	r2,8
   401b8:	10841c04 	addi	r2,r2,4208
   401bc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(rnw, 1);
   401c0:	00c00044 	movi	r3,1
   401c4:	00800234 	movhi	r2,8
   401c8:	10842004 	addi	r2,r2,4224
   401cc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(address, addr);
   401d0:	e0ffff07 	ldb	r3,-4(fp)
   401d4:	00800234 	movhi	r2,8
   401d8:	10842404 	addi	r2,r2,4240
   401dc:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_AVALON_PIO_DATA(data);
   401e0:	00800234 	movhi	r2,8
   401e4:	10842804 	addi	r2,r2,4256
   401e8:	10800037 	ldwio	r2,0(r2)
}
   401ec:	e037883a 	mov	sp,fp
   401f0:	df000017 	ldw	fp,0(sp)
   401f4:	dec00104 	addi	sp,sp,4
   401f8:	f800283a 	ret

000401fc <sramwrite>:
 * Inputs:
 * 		addr: address in SRAM
 * 		buf: value to be written into SRAM
 * Return: 0 if success
 */
int sramwrite(char addr, char buf){
   401fc:	defffd04 	addi	sp,sp,-12
   40200:	df000215 	stw	fp,8(sp)
   40204:	df000204 	addi	fp,sp,8
   40208:	2007883a 	mov	r3,r4
   4020c:	2805883a 	mov	r2,r5
   40210:	e0fffe05 	stb	r3,-8(fp)
   40214:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(rnw, 1);
   40218:	00c00044 	movi	r3,1
   4021c:	00800234 	movhi	r2,8
   40220:	10842004 	addi	r2,r2,4224
   40224:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(noe, 1);
   40228:	00c00044 	movi	r3,1
   4022c:	00800234 	movhi	r2,8
   40230:	10841c04 	addi	r2,r2,4208
   40234:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(address, addr);
   40238:	e0fffe07 	ldb	r3,-8(fp)
   4023c:	00800234 	movhi	r2,8
   40240:	10842404 	addi	r2,r2,4240
   40244:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(data, buf);
   40248:	e0ffff07 	ldb	r3,-4(fp)
   4024c:	00800234 	movhi	r2,8
   40250:	10842804 	addi	r2,r2,4256
   40254:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(rnw, 0);
   40258:	0007883a 	mov	r3,zero
   4025c:	00800234 	movhi	r2,8
   40260:	10842004 	addi	r2,r2,4224
   40264:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(rnw, 1);
   40268:	00c00044 	movi	r3,1
   4026c:	00800234 	movhi	r2,8
   40270:	10842004 	addi	r2,r2,4224
   40274:	10c00035 	stwio	r3,0(r2)
	return 0;
   40278:	0005883a 	mov	r2,zero
}
   4027c:	e037883a 	mov	sp,fp
   40280:	df000017 	ldw	fp,0(sp)
   40284:	dec00104 	addi	sp,sp,4
   40288:	f800283a 	ret

0004028c <sendchar>:
 * send given char to other boards
 * Inputs:
 * 		buf: char being sent out
 * Return: 0 if success
 */
int sendchar(int buf){
   4028c:	defffc04 	addi	sp,sp,-16
   40290:	dfc00315 	stw	ra,12(sp)
   40294:	df000215 	stw	fp,8(sp)
   40298:	dc000115 	stw	r16,4(sp)
   4029c:	df000104 	addi	fp,sp,4
   402a0:	e13fff15 	stw	r4,-4(fp)
//	*mpdataout=0x4b; //01001011
//	*mpdataout=0xff; //11111111
//	*mpdataout=0xaa; //10101010
//	*mpdataout=0x55; //01010101

	IOWR_ALTERA_AVALON_PIO_DATA(mpdataout, buf*2+addparity(buf));
   402a4:	e0bfff17 	ldw	r2,-4(fp)
   402a8:	1085883a 	add	r2,r2,r2
   402ac:	1021883a 	mov	r16,r2
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10803fcc 	andi	r2,r2,255
   402b8:	1080201c 	xori	r2,r2,128
   402bc:	10bfe004 	addi	r2,r2,-128
   402c0:	1009883a 	mov	r4,r2
   402c4:	00405140 	call	40514 <addparity>
   402c8:	10803fcc 	andi	r2,r2,255
   402cc:	1080201c 	xori	r2,r2,128
   402d0:	10bfe004 	addi	r2,r2,-128
   402d4:	8087883a 	add	r3,r16,r2
   402d8:	00800234 	movhi	r2,8
   402dc:	10841004 	addi	r2,r2,4160
   402e0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(load, 1);
   402e4:	00c00044 	movi	r3,1
   402e8:	00800234 	movhi	r2,8
   402ec:	10840404 	addi	r2,r2,4112
   402f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   402f4:	01001904 	movi	r4,100
   402f8:	00546340 	call	54634 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(load, 0);
   402fc:	0007883a 	mov	r3,zero
   40300:	00800234 	movhi	r2,8
   40304:	10840404 	addi	r2,r2,4112
   40308:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(asoe, 1);
   4030c:	00c00044 	movi	r3,1
   40310:	00800234 	movhi	r2,8
   40314:	10840c04 	addi	r2,r2,4144
   40318:	10c00035 	stwio	r3,0(r2)
	while(!IORD_ALTERA_AVALON_PIO_DATA(sent));
   4031c:	0001883a 	nop
   40320:	00800234 	movhi	r2,8
   40324:	10840804 	addi	r2,r2,4128
   40328:	10800037 	ldwio	r2,0(r2)
   4032c:	103ffc26 	beq	r2,zero,40320 <__alt_data_end+0xfffce320>
	IOWR_ALTERA_AVALON_PIO_DATA(asoe, 0);
   40330:	0007883a 	mov	r3,zero
   40334:	00800234 	movhi	r2,8
   40338:	10840c04 	addi	r2,r2,4144
   4033c:	10c00035 	stwio	r3,0(r2)
	//alt_printf("sent: %x\n", buf);
	return 0;
   40340:	0005883a 	mov	r2,zero
}
   40344:	e037883a 	mov	sp,fp
   40348:	dfc00217 	ldw	ra,8(sp)
   4034c:	df000117 	ldw	fp,4(sp)
   40350:	dc000017 	ldw	r16,0(sp)
   40354:	dec00304 	addi	sp,sp,12
   40358:	f800283a 	ret

0004035c <sendstr>:
 * Inputs:
 * 		bufc: number of chars in the string
 * 		bufv: string being sent out
 * Return: 0 if success
 */
int sendstr(int bufc, char* bufv){
   4035c:	defffb04 	addi	sp,sp,-20
   40360:	dfc00415 	stw	ra,16(sp)
   40364:	df000315 	stw	fp,12(sp)
   40368:	df000304 	addi	fp,sp,12
   4036c:	e13ffe15 	stw	r4,-8(fp)
   40370:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i=0; i<bufc; i++){
   40374:	e03ffd15 	stw	zero,-12(fp)
   40378:	00000e06 	br	403b4 <sendstr+0x58>
		sendchar(bufv[i]);
   4037c:	e0bffd17 	ldw	r2,-12(fp)
   40380:	e0ffff17 	ldw	r3,-4(fp)
   40384:	1885883a 	add	r2,r3,r2
   40388:	10800003 	ldbu	r2,0(r2)
   4038c:	10803fcc 	andi	r2,r2,255
   40390:	1080201c 	xori	r2,r2,128
   40394:	10bfe004 	addi	r2,r2,-128
   40398:	1009883a 	mov	r4,r2
   4039c:	004028c0 	call	4028c <sendchar>
		usleep(250);
   403a0:	01003e84 	movi	r4,250
   403a4:	00546340 	call	54634 <usleep>
 * 		bufv: string being sent out
 * Return: 0 if success
 */
int sendstr(int bufc, char* bufv){
	int i;
	for(i=0; i<bufc; i++){
   403a8:	e0bffd17 	ldw	r2,-12(fp)
   403ac:	10800044 	addi	r2,r2,1
   403b0:	e0bffd15 	stw	r2,-12(fp)
   403b4:	e0fffd17 	ldw	r3,-12(fp)
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	18bfef16 	blt	r3,r2,4037c <__alt_data_end+0xfffce37c>
		sendchar(bufv[i]);
		usleep(250);
	}

	return 0;
   403c0:	0005883a 	mov	r2,zero
}
   403c4:	e037883a 	mov	sp,fp
   403c8:	dfc00117 	ldw	ra,4(sp)
   403cc:	df000017 	ldw	fp,0(sp)
   403d0:	dec00204 	addi	sp,sp,8
   403d4:	f800283a 	ret

000403d8 <recvchar>:
 * Inputs:
 * 		buf: points to where the char received stored
 * Return: 0 if success
 *
 */
int recvchar(int* buf){
   403d8:	defffd04 	addi	sp,sp,-12
   403dc:	dfc00215 	stw	ra,8(sp)
   403e0:	df000115 	stw	fp,4(sp)
   403e4:	df000104 	addi	fp,sp,4
   403e8:	e13fff15 	stw	r4,-4(fp)
	//check for correctness not implemented so far
	while(!IORD_ALTERA_AVALON_PIO_DATA(chrec));
   403ec:	0001883a 	nop
   403f0:	00800234 	movhi	r2,8
   403f4:	10841404 	addi	r2,r2,4176
   403f8:	10800037 	ldwio	r2,0(r2)
   403fc:	103ffc26 	beq	r2,zero,403f0 <__alt_data_end+0xfffce3f0>
	*buf=(((int)IORD_ALTERA_AVALON_PIO_DATA(mpdatain))&0xff)/2;
   40400:	00800234 	movhi	r2,8
   40404:	10841804 	addi	r2,r2,4192
   40408:	10800037 	ldwio	r2,0(r2)
   4040c:	10803fcc 	andi	r2,r2,255
   40410:	1006d7fa 	srli	r3,r2,31
   40414:	1885883a 	add	r2,r3,r2
   40418:	1005d07a 	srai	r2,r2,1
   4041c:	1007883a 	mov	r3,r2
   40420:	e0bfff17 	ldw	r2,-4(fp)
   40424:	10c00015 	stw	r3,0(r2)
#ifdef FIGHT_THE_LANDLORD
	if((*buf)&0x40){
   40428:	e0bfff17 	ldw	r2,-4(fp)
   4042c:	10800017 	ldw	r2,0(r2)
   40430:	1080100c 	andi	r2,r2,64
   40434:	10000926 	beq	r2,zero,4045c <recvchar+0x84>
		*buf &= 0x3f;
   40438:	e0bfff17 	ldw	r2,-4(fp)
   4043c:	10800017 	ldw	r2,0(r2)
   40440:	10c00fcc 	andi	r3,r2,63
   40444:	e0bfff17 	ldw	r2,-4(fp)
   40448:	10c00015 	stw	r3,0(r2)
		sendchar(*buf);
   4044c:	e0bfff17 	ldw	r2,-4(fp)
   40450:	10800017 	ldw	r2,0(r2)
   40454:	1009883a 	mov	r4,r2
   40458:	004028c0 	call	4028c <sendchar>
	}
#endif
	return 0;
   4045c:	0005883a 	mov	r2,zero
}
   40460:	e037883a 	mov	sp,fp
   40464:	dfc00117 	ldw	ra,4(sp)
   40468:	df000017 	ldw	fp,0(sp)
   4046c:	dec00204 	addi	sp,sp,8
   40470:	f800283a 	ret

00040474 <swap>:
 * Inputs:
 * 		addr1
 * 		addr2
 * Return: 0 if success, 1 if repeat
 */
int swap(char addr1, char addr2){
   40474:	defffa04 	addi	sp,sp,-24
   40478:	dfc00515 	stw	ra,20(sp)
   4047c:	df000415 	stw	fp,16(sp)
   40480:	dc000315 	stw	r16,12(sp)
   40484:	df000304 	addi	fp,sp,12
   40488:	2007883a 	mov	r3,r4
   4048c:	2805883a 	mov	r2,r5
   40490:	e0fffe05 	stb	r3,-8(fp)
   40494:	e0bfff05 	stb	r2,-4(fp)
	if(addr1==addr2) return 1;
   40498:	e0fffe07 	ldb	r3,-8(fp)
   4049c:	e0bfff07 	ldb	r2,-4(fp)
   404a0:	1880021e 	bne	r3,r2,404ac <swap+0x38>
   404a4:	00800044 	movi	r2,1
   404a8:	00001406 	br	404fc <swap+0x88>
	char temp=sramread(addr1);
   404ac:	e0bffe07 	ldb	r2,-8(fp)
   404b0:	1009883a 	mov	r4,r2
   404b4:	004019c0 	call	4019c <sramread>
   404b8:	e0bffd05 	stb	r2,-12(fp)
	sramwrite(addr1, sramread(addr2));
   404bc:	e43ffe07 	ldb	r16,-8(fp)
   404c0:	e0bfff07 	ldb	r2,-4(fp)
   404c4:	1009883a 	mov	r4,r2
   404c8:	004019c0 	call	4019c <sramread>
   404cc:	10803fcc 	andi	r2,r2,255
   404d0:	1080201c 	xori	r2,r2,128
   404d4:	10bfe004 	addi	r2,r2,-128
   404d8:	8009883a 	mov	r4,r16
   404dc:	100b883a 	mov	r5,r2
   404e0:	00401fc0 	call	401fc <sramwrite>
	sramwrite(addr2, temp);
   404e4:	e0ffff07 	ldb	r3,-4(fp)
   404e8:	e0bffd07 	ldb	r2,-12(fp)
   404ec:	1809883a 	mov	r4,r3
   404f0:	100b883a 	mov	r5,r2
   404f4:	00401fc0 	call	401fc <sramwrite>
	return 0;
   404f8:	0005883a 	mov	r2,zero
}
   404fc:	e037883a 	mov	sp,fp
   40500:	dfc00217 	ldw	ra,8(sp)
   40504:	df000117 	ldw	fp,4(sp)
   40508:	dc000017 	ldw	r16,0(sp)
   4050c:	dec00304 	addi	sp,sp,12
   40510:	f800283a 	ret

00040514 <addparity>:
 * Adds parity bit for the given char
 * Inputs:
 * 		c: char where parity code need to be added
 * Return: char with parity code added
 */
char addparity(char c) {
   40514:	defffc04 	addi	sp,sp,-16
   40518:	df000315 	stw	fp,12(sp)
   4051c:	df000304 	addi	fp,sp,12
   40520:	2005883a 	mov	r2,r4
   40524:	e0bfff05 	stb	r2,-4(fp)
	char p = 0;
   40528:	e03ffd05 	stb	zero,-12(fp)
	int i;
	for(i=0;i<7;i++) {
   4052c:	e03ffe15 	stw	zero,-8(fp)
   40530:	00001506 	br	40588 <addparity+0x74>
		p^=c%2;
   40534:	e0ffff07 	ldb	r3,-4(fp)
   40538:	00a00034 	movhi	r2,32768
   4053c:	10800044 	addi	r2,r2,1
   40540:	1884703a 	and	r2,r3,r2
   40544:	1000040e 	bge	r2,zero,40558 <addparity+0x44>
   40548:	10bfffc4 	addi	r2,r2,-1
   4054c:	00ffff84 	movi	r3,-2
   40550:	10c4b03a 	or	r2,r2,r3
   40554:	10800044 	addi	r2,r2,1
   40558:	1007883a 	mov	r3,r2
   4055c:	e0bffd03 	ldbu	r2,-12(fp)
   40560:	1884f03a 	xor	r2,r3,r2
   40564:	e0bffd05 	stb	r2,-12(fp)
		c/=2;
   40568:	e0bfff07 	ldb	r2,-4(fp)
   4056c:	1006d7fa 	srli	r3,r2,31
   40570:	1885883a 	add	r2,r3,r2
   40574:	1005d07a 	srai	r2,r2,1
   40578:	e0bfff05 	stb	r2,-4(fp)
 * Return: char with parity code added
 */
char addparity(char c) {
	char p = 0;
	int i;
	for(i=0;i<7;i++) {
   4057c:	e0bffe17 	ldw	r2,-8(fp)
   40580:	10800044 	addi	r2,r2,1
   40584:	e0bffe15 	stw	r2,-8(fp)
   40588:	e0bffe17 	ldw	r2,-8(fp)
   4058c:	108001d0 	cmplti	r2,r2,7
   40590:	103fe81e 	bne	r2,zero,40534 <__alt_data_end+0xfffce534>
		p^=c%2;
		c/=2;
	}
	return p;
   40594:	e0bffd03 	ldbu	r2,-12(fp)
}
   40598:	e037883a 	mov	sp,fp
   4059c:	df000017 	ldw	fp,0(sp)
   405a0:	dec00104 	addi	sp,sp,4
   405a4:	f800283a 	ret

000405a8 <hangman>:

int sendchar2(char buf);
int recvchar2(char* buf);

int hangman()
{
   405a8:	deffa604 	addi	sp,sp,-360
   405ac:	dfc05915 	stw	ra,356(sp)
   405b0:	df005815 	stw	fp,352(sp)
   405b4:	df005804 	addi	fp,sp,352
	while(1);
#endif

	char ch[63];
	Boolean chb[63];
	Boolean hit=FALSE;
   405b8:	e03fa815 	stw	zero,-352(fp)
	char guess;
	int res;
	int length;
	int time;
	int myNum;
	int i=0, j;
   405bc:	e03fa915 	stw	zero,-348(fp)
	int cont=1;
   405c0:	00800044 	movi	r2,1
   405c4:	e0bfab15 	stw	r2,-340(fp)
	printf("Please tell me if you want to question(0) or play(1)\n");
   405c8:	01000174 	movhi	r4,5
   405cc:	2115a204 	addi	r4,r4,22152
   405d0:	00459ec0 	call	459ec <puts>
	scanf("%d", &myNum);
   405d4:	e0bfff04 	addi	r2,fp,-4
   405d8:	01000174 	movhi	r4,5
   405dc:	2115b004 	addi	r4,r4,22208
   405e0:	100b883a 	mov	r5,r2
   405e4:	0045a600 	call	45a60 <scanf>
	if(myNum==0){
   405e8:	e0bfff17 	ldw	r2,-4(fp)
   405ec:	1000541e 	bne	r2,zero,40740 <hangman+0x198>
		printf("Please tell me the length of your word\n");
   405f0:	01000174 	movhi	r4,5
   405f4:	2115b104 	addi	r4,r4,22212
   405f8:	00459ec0 	call	459ec <puts>
		scanf("%d", &length);
   405fc:	e0bffd04 	addi	r2,fp,-12
   40600:	01000174 	movhi	r4,5
   40604:	2115b004 	addi	r4,r4,22208
   40608:	100b883a 	mov	r5,r2
   4060c:	0045a600 	call	45a60 <scanf>
		sendchar(length);
   40610:	e0bffd17 	ldw	r2,-12(fp)
   40614:	1009883a 	mov	r4,r2
   40618:	004028c0 	call	4028c <sendchar>
		for(j=0; j<length; j++)
   4061c:	e03faa15 	stw	zero,-344(fp)
   40620:	00000a06 	br	4064c <hangman+0xa4>
			chb[j]=FALSE;
   40624:	e0bfaa17 	ldw	r2,-344(fp)
   40628:	1085883a 	add	r2,r2,r2
   4062c:	1085883a 	add	r2,r2,r2
   40630:	e0ffa804 	addi	r3,fp,-352
   40634:	1885883a 	add	r2,r3,r2
   40638:	10801404 	addi	r2,r2,80
   4063c:	10000015 	stw	zero,0(r2)
	scanf("%d", &myNum);
	if(myNum==0){
		printf("Please tell me the length of your word\n");
		scanf("%d", &length);
		sendchar(length);
		for(j=0; j<length; j++)
   40640:	e0bfaa17 	ldw	r2,-344(fp)
   40644:	10800044 	addi	r2,r2,1
   40648:	e0bfaa15 	stw	r2,-344(fp)
   4064c:	e0bffd17 	ldw	r2,-12(fp)
   40650:	e0ffaa17 	ldw	r3,-344(fp)
   40654:	18bff316 	blt	r3,r2,40624 <__alt_data_end+0xfffce624>
			chb[j]=FALSE;
		printf("Please tell me what is you word\n");
   40658:	01000174 	movhi	r4,5
   4065c:	2115bb04 	addi	r4,r4,22252
   40660:	00459ec0 	call	459ec <puts>
		scanf("%s", ch);
   40664:	e0bfac04 	addi	r2,fp,-336
   40668:	01000174 	movhi	r4,5
   4066c:	2115c304 	addi	r4,r4,22284
   40670:	100b883a 	mov	r5,r2
   40674:	0045a600 	call	45a60 <scanf>
		for(j=0; j<length; j++){
   40678:	e03faa15 	stw	zero,-344(fp)
   4067c:	00000e06 	br	406b8 <hangman+0x110>
			sendchar(ch[j]);
   40680:	e0ffac04 	addi	r3,fp,-336
   40684:	e0bfaa17 	ldw	r2,-344(fp)
   40688:	1885883a 	add	r2,r3,r2
   4068c:	10800003 	ldbu	r2,0(r2)
   40690:	10803fcc 	andi	r2,r2,255
   40694:	1080201c 	xori	r2,r2,128
   40698:	10bfe004 	addi	r2,r2,-128
   4069c:	1009883a 	mov	r4,r2
   406a0:	004028c0 	call	4028c <sendchar>
			usleep(100);
   406a4:	01001904 	movi	r4,100
   406a8:	00546340 	call	54634 <usleep>
		sendchar(length);
		for(j=0; j<length; j++)
			chb[j]=FALSE;
		printf("Please tell me what is you word\n");
		scanf("%s", ch);
		for(j=0; j<length; j++){
   406ac:	e0bfaa17 	ldw	r2,-344(fp)
   406b0:	10800044 	addi	r2,r2,1
   406b4:	e0bfaa15 	stw	r2,-344(fp)
   406b8:	e0bffd17 	ldw	r2,-12(fp)
   406bc:	e0ffaa17 	ldw	r3,-344(fp)
   406c0:	18bfef16 	blt	r3,r2,40680 <__alt_data_end+0xfffce680>
			sendchar(ch[j]);
			usleep(100);
		}
		printf("How many chance do you want to give to the player?\n");
   406c4:	01000174 	movhi	r4,5
   406c8:	2115c404 	addi	r4,r4,22288
   406cc:	00459ec0 	call	459ec <puts>
		while(time<length){
   406d0:	00000806 	br	406f4 <hangman+0x14c>
			printf("time should be longer or equal to the length of the word");
   406d4:	01000174 	movhi	r4,5
   406d8:	2115d104 	addi	r4,r4,22340
   406dc:	00459080 	call	45908 <printf>
			scanf("%d", &time);
   406e0:	e0bffe04 	addi	r2,fp,-8
   406e4:	01000174 	movhi	r4,5
   406e8:	2115b004 	addi	r4,r4,22208
   406ec:	100b883a 	mov	r5,r2
   406f0:	0045a600 	call	45a60 <scanf>
		for(j=0; j<length; j++){
			sendchar(ch[j]);
			usleep(100);
		}
		printf("How many chance do you want to give to the player?\n");
		while(time<length){
   406f4:	e0fffe17 	ldw	r3,-8(fp)
   406f8:	e0bffd17 	ldw	r2,-12(fp)
   406fc:	18bff516 	blt	r3,r2,406d4 <__alt_data_end+0xfffce6d4>
			printf("time should be longer or equal to the length of the word");
			scanf("%d", &time);
		}
		sendchar(time);
   40700:	e0bffe17 	ldw	r2,-8(fp)
   40704:	1009883a 	mov	r4,r2
   40708:	004028c0 	call	4028c <sendchar>
		recvchar(&res);
   4070c:	e0bffc04 	addi	r2,fp,-16
   40710:	1009883a 	mov	r4,r2
   40714:	00403d80 	call	403d8 <recvchar>
		if(!res){
   40718:	e0bffc17 	ldw	r2,-16(fp)
   4071c:	1000041e 	bne	r2,zero,40730 <hangman+0x188>
			printf("You Lose!");
   40720:	01000174 	movhi	r4,5
   40724:	2115e004 	addi	r4,r4,22400
   40728:	00459080 	call	45908 <printf>
   4072c:	0000f506 	br	40b04 <hangman+0x55c>
		}
		else{
			printf("You Win!");
   40730:	01000174 	movhi	r4,5
   40734:	2115e304 	addi	r4,r4,22412
   40738:	00459080 	call	45908 <printf>
   4073c:	0000f106 	br	40b04 <hangman+0x55c>
		}
	}
	else{
		recvchar(&length);
   40740:	e0bffd04 	addi	r2,fp,-12
   40744:	1009883a 	mov	r4,r2
   40748:	00403d80 	call	403d8 <recvchar>
		printf("length is: %d\n", length);
   4074c:	e0bffd17 	ldw	r2,-12(fp)
   40750:	01000174 	movhi	r4,5
   40754:	2115e604 	addi	r4,r4,22424
   40758:	100b883a 	mov	r5,r2
   4075c:	00459080 	call	45908 <printf>
		for(j=0; j<length; j++){
   40760:	e03faa15 	stw	zero,-344(fp)
   40764:	00000a06 	br	40790 <hangman+0x1e8>
			recvchar2(ch+j);
   40768:	e0bfaa17 	ldw	r2,-344(fp)
   4076c:	e0ffac04 	addi	r3,fp,-336
   40770:	1885883a 	add	r2,r3,r2
   40774:	1009883a 	mov	r4,r2
   40778:	0040bd00 	call	40bd0 <recvchar2>
			usleep(50);
   4077c:	01000c84 	movi	r4,50
   40780:	00546340 	call	54634 <usleep>
		}
	}
	else{
		recvchar(&length);
		printf("length is: %d\n", length);
		for(j=0; j<length; j++){
   40784:	e0bfaa17 	ldw	r2,-344(fp)
   40788:	10800044 	addi	r2,r2,1
   4078c:	e0bfaa15 	stw	r2,-344(fp)
   40790:	e0bffd17 	ldw	r2,-12(fp)
   40794:	e0ffaa17 	ldw	r3,-344(fp)
   40798:	18bff316 	blt	r3,r2,40768 <__alt_data_end+0xfffce768>
			recvchar2(ch+j);
			usleep(50);
		}
		for(j=0; j<length; j++)
   4079c:	e03faa15 	stw	zero,-344(fp)
   407a0:	00000a06 	br	407cc <hangman+0x224>
			chb[j]=FALSE;
   407a4:	e0bfaa17 	ldw	r2,-344(fp)
   407a8:	1085883a 	add	r2,r2,r2
   407ac:	1085883a 	add	r2,r2,r2
   407b0:	e13fa804 	addi	r4,fp,-352
   407b4:	2085883a 	add	r2,r4,r2
   407b8:	10801404 	addi	r2,r2,80
   407bc:	10000015 	stw	zero,0(r2)
		printf("length is: %d\n", length);
		for(j=0; j<length; j++){
			recvchar2(ch+j);
			usleep(50);
		}
		for(j=0; j<length; j++)
   407c0:	e0bfaa17 	ldw	r2,-344(fp)
   407c4:	10800044 	addi	r2,r2,1
   407c8:	e0bfaa15 	stw	r2,-344(fp)
   407cc:	e0bffd17 	ldw	r2,-12(fp)
   407d0:	e0ffaa17 	ldw	r3,-344(fp)
   407d4:	18bff316 	blt	r3,r2,407a4 <__alt_data_end+0xfffce7a4>
			chb[j]=FALSE;
		printf("The Word Is: ");
   407d8:	01000174 	movhi	r4,5
   407dc:	2115ea04 	addi	r4,r4,22440
   407e0:	00459080 	call	45908 <printf>
		for(j=0; j<length; j++)
   407e4:	e03faa15 	stw	zero,-344(fp)
   407e8:	00000e06 	br	40824 <hangman+0x27c>
			printf("%c ", ch[j]);
   407ec:	e0ffac04 	addi	r3,fp,-336
   407f0:	e0bfaa17 	ldw	r2,-344(fp)
   407f4:	1885883a 	add	r2,r3,r2
   407f8:	10800003 	ldbu	r2,0(r2)
   407fc:	10803fcc 	andi	r2,r2,255
   40800:	1080201c 	xori	r2,r2,128
   40804:	10bfe004 	addi	r2,r2,-128
   40808:	01000174 	movhi	r4,5
   4080c:	2115ee04 	addi	r4,r4,22456
   40810:	100b883a 	mov	r5,r2
   40814:	00459080 	call	45908 <printf>
			usleep(50);
		}
		for(j=0; j<length; j++)
			chb[j]=FALSE;
		printf("The Word Is: ");
		for(j=0; j<length; j++)
   40818:	e0bfaa17 	ldw	r2,-344(fp)
   4081c:	10800044 	addi	r2,r2,1
   40820:	e0bfaa15 	stw	r2,-344(fp)
   40824:	e0bffd17 	ldw	r2,-12(fp)
   40828:	e0ffaa17 	ldw	r3,-344(fp)
   4082c:	18bfef16 	blt	r3,r2,407ec <__alt_data_end+0xfffce7ec>
			printf("%c ", ch[j]);
		recvchar(&time);
   40830:	e0bffe04 	addi	r2,fp,-8
   40834:	1009883a 	mov	r4,r2
   40838:	00403d80 	call	403d8 <recvchar>
		printf("time is: %d\n", time);
   4083c:	e0bffe17 	ldw	r2,-8(fp)
   40840:	01000174 	movhi	r4,5
   40844:	2115ef04 	addi	r4,r4,22460
   40848:	100b883a 	mov	r5,r2
   4084c:	00459080 	call	45908 <printf>
		while(cont>0){
   40850:	0000aa06 	br	40afc <hangman+0x554>
			printf("The Word Now Looks Like: ");
   40854:	01000174 	movhi	r4,5
   40858:	2115f304 	addi	r4,r4,22476
   4085c:	00459080 	call	45908 <printf>
			for(j=0; j<length; j++){
   40860:	e03faa15 	stw	zero,-344(fp)
   40864:	00001a06 	br	408d0 <hangman+0x328>
				if(!chb[j])
   40868:	e0bfaa17 	ldw	r2,-344(fp)
   4086c:	1085883a 	add	r2,r2,r2
   40870:	1085883a 	add	r2,r2,r2
   40874:	e0ffa804 	addi	r3,fp,-352
   40878:	1885883a 	add	r2,r3,r2
   4087c:	10801404 	addi	r2,r2,80
   40880:	10800017 	ldw	r2,0(r2)
   40884:	1000041e 	bne	r2,zero,40898 <hangman+0x2f0>
					printf("_ ");
   40888:	01000174 	movhi	r4,5
   4088c:	2115fa04 	addi	r4,r4,22504
   40890:	00459080 	call	45908 <printf>
   40894:	00000b06 	br	408c4 <hangman+0x31c>
				else
					printf("%c ", ch[j]);
   40898:	e0ffac04 	addi	r3,fp,-336
   4089c:	e0bfaa17 	ldw	r2,-344(fp)
   408a0:	1885883a 	add	r2,r3,r2
   408a4:	10800003 	ldbu	r2,0(r2)
   408a8:	10803fcc 	andi	r2,r2,255
   408ac:	1080201c 	xori	r2,r2,128
   408b0:	10bfe004 	addi	r2,r2,-128
   408b4:	01000174 	movhi	r4,5
   408b8:	2115ee04 	addi	r4,r4,22456
   408bc:	100b883a 	mov	r5,r2
   408c0:	00459080 	call	45908 <printf>
			printf("%c ", ch[j]);
		recvchar(&time);
		printf("time is: %d\n", time);
		while(cont>0){
			printf("The Word Now Looks Like: ");
			for(j=0; j<length; j++){
   408c4:	e0bfaa17 	ldw	r2,-344(fp)
   408c8:	10800044 	addi	r2,r2,1
   408cc:	e0bfaa15 	stw	r2,-344(fp)
   408d0:	e0bffd17 	ldw	r2,-12(fp)
   408d4:	e0ffaa17 	ldw	r3,-344(fp)
   408d8:	18bfe316 	blt	r3,r2,40868 <__alt_data_end+0xfffce868>
				if(!chb[j])
					printf("_ ");
				else
					printf("%c ", ch[j]);
			}
			printf("\nPlease tell me the next letter you guess\n");
   408dc:	01000174 	movhi	r4,5
   408e0:	2115fb04 	addi	r4,r4,22508
   408e4:	00459ec0 	call	459ec <puts>
			scanf(" %c", &guess);
   408e8:	e0bffb04 	addi	r2,fp,-20
   408ec:	01000174 	movhi	r4,5
   408f0:	21160604 	addi	r4,r4,22552
   408f4:	100b883a 	mov	r5,r2
   408f8:	0045a600 	call	45a60 <scanf>
			printf("the letter you guessed is: %c\n", guess);
   408fc:	e0bffb03 	ldbu	r2,-20(fp)
   40900:	10803fcc 	andi	r2,r2,255
   40904:	1080201c 	xori	r2,r2,128
   40908:	10bfe004 	addi	r2,r2,-128
   4090c:	01000174 	movhi	r4,5
   40910:	21160704 	addi	r4,r4,22556
   40914:	100b883a 	mov	r5,r2
   40918:	00459080 	call	45908 <printf>
			for(j=0; j<length; j++){
   4091c:	e03faa15 	stw	zero,-344(fp)
   40920:	00002c06 	br	409d4 <hangman+0x42c>
				if(ch[j]==guess && !chb[j]){
   40924:	e0ffac04 	addi	r3,fp,-336
   40928:	e0bfaa17 	ldw	r2,-344(fp)
   4092c:	1885883a 	add	r2,r3,r2
   40930:	10c00003 	ldbu	r3,0(r2)
   40934:	e0bffb03 	ldbu	r2,-20(fp)
   40938:	18c03fcc 	andi	r3,r3,255
   4093c:	18c0201c 	xori	r3,r3,128
   40940:	18ffe004 	addi	r3,r3,-128
   40944:	10803fcc 	andi	r2,r2,255
   40948:	1080201c 	xori	r2,r2,128
   4094c:	10bfe004 	addi	r2,r2,-128
   40950:	18801d1e 	bne	r3,r2,409c8 <hangman+0x420>
   40954:	e0bfaa17 	ldw	r2,-344(fp)
   40958:	1085883a 	add	r2,r2,r2
   4095c:	1085883a 	add	r2,r2,r2
   40960:	e13fa804 	addi	r4,fp,-352
   40964:	2085883a 	add	r2,r4,r2
   40968:	10801404 	addi	r2,r2,80
   4096c:	10800017 	ldw	r2,0(r2)
   40970:	1000151e 	bne	r2,zero,409c8 <hangman+0x420>
					i++;
   40974:	e0bfa917 	ldw	r2,-348(fp)
   40978:	10800044 	addi	r2,r2,1
   4097c:	e0bfa915 	stw	r2,-348(fp)
					chb[j]=!chb[j];
   40980:	e0bfaa17 	ldw	r2,-344(fp)
   40984:	1085883a 	add	r2,r2,r2
   40988:	1085883a 	add	r2,r2,r2
   4098c:	e0ffa804 	addi	r3,fp,-352
   40990:	1885883a 	add	r2,r3,r2
   40994:	10801404 	addi	r2,r2,80
   40998:	10800017 	ldw	r2,0(r2)
   4099c:	1005003a 	cmpeq	r2,r2,zero
   409a0:	10c03fcc 	andi	r3,r2,255
   409a4:	e0bfaa17 	ldw	r2,-344(fp)
   409a8:	1085883a 	add	r2,r2,r2
   409ac:	1085883a 	add	r2,r2,r2
   409b0:	e13fa804 	addi	r4,fp,-352
   409b4:	2085883a 	add	r2,r4,r2
   409b8:	10801404 	addi	r2,r2,80
   409bc:	10c00015 	stw	r3,0(r2)
					hit=TRUE;
   409c0:	00800044 	movi	r2,1
   409c4:	e0bfa815 	stw	r2,-352(fp)
					printf("%c ", ch[j]);
			}
			printf("\nPlease tell me the next letter you guess\n");
			scanf(" %c", &guess);
			printf("the letter you guessed is: %c\n", guess);
			for(j=0; j<length; j++){
   409c8:	e0bfaa17 	ldw	r2,-344(fp)
   409cc:	10800044 	addi	r2,r2,1
   409d0:	e0bfaa15 	stw	r2,-344(fp)
   409d4:	e0bffd17 	ldw	r2,-12(fp)
   409d8:	e0ffaa17 	ldw	r3,-344(fp)
   409dc:	18bfd116 	blt	r3,r2,40924 <__alt_data_end+0xfffce924>
					i++;
					chb[j]=!chb[j];
					hit=TRUE;
				}
			}
			if(hit){
   409e0:	e0bfa817 	ldw	r2,-352(fp)
   409e4:	10000526 	beq	r2,zero,409fc <hangman+0x454>
				hit=FALSE;
   409e8:	e03fa815 	stw	zero,-352(fp)
				printf("Hit!\n");
   409ec:	01000174 	movhi	r4,5
   409f0:	21160f04 	addi	r4,r4,22588
   409f4:	00459ec0 	call	459ec <puts>
   409f8:	00000806 	br	40a1c <hangman+0x474>
			}
			else{
				time--;
   409fc:	e0bffe17 	ldw	r2,-8(fp)
   40a00:	10bfffc4 	addi	r2,r2,-1
   40a04:	e0bffe15 	stw	r2,-8(fp)
				printf("Nope...Times Remaining: %d\n", time);
   40a08:	e0bffe17 	ldw	r2,-8(fp)
   40a0c:	01000174 	movhi	r4,5
   40a10:	21161104 	addi	r4,r4,22596
   40a14:	100b883a 	mov	r5,r2
   40a18:	00459080 	call	45908 <printf>
			}
			if(i==length){
   40a1c:	e0bffd17 	ldw	r2,-12(fp)
   40a20:	e0ffa917 	ldw	r3,-348(fp)
   40a24:	18801a1e 	bne	r3,r2,40a90 <hangman+0x4e8>
				printf("You Win!\nThe Word Is: ");
   40a28:	01000174 	movhi	r4,5
   40a2c:	21161804 	addi	r4,r4,22624
   40a30:	00459080 	call	45908 <printf>
				sendchar(0);
   40a34:	0009883a 	mov	r4,zero
   40a38:	004028c0 	call	4028c <sendchar>
				for(j=0; j<length; j++)
   40a3c:	e03faa15 	stw	zero,-344(fp)
   40a40:	00000e06 	br	40a7c <hangman+0x4d4>
					printf("%c ", ch[j]);
   40a44:	e0ffac04 	addi	r3,fp,-336
   40a48:	e0bfaa17 	ldw	r2,-344(fp)
   40a4c:	1885883a 	add	r2,r3,r2
   40a50:	10800003 	ldbu	r2,0(r2)
   40a54:	10803fcc 	andi	r2,r2,255
   40a58:	1080201c 	xori	r2,r2,128
   40a5c:	10bfe004 	addi	r2,r2,-128
   40a60:	01000174 	movhi	r4,5
   40a64:	2115ee04 	addi	r4,r4,22456
   40a68:	100b883a 	mov	r5,r2
   40a6c:	00459080 	call	45908 <printf>
				printf("Nope...Times Remaining: %d\n", time);
			}
			if(i==length){
				printf("You Win!\nThe Word Is: ");
				sendchar(0);
				for(j=0; j<length; j++)
   40a70:	e0bfaa17 	ldw	r2,-344(fp)
   40a74:	10800044 	addi	r2,r2,1
   40a78:	e0bfaa15 	stw	r2,-344(fp)
   40a7c:	e0bffd17 	ldw	r2,-12(fp)
   40a80:	e0ffaa17 	ldw	r3,-344(fp)
   40a84:	18bfef16 	blt	r3,r2,40a44 <__alt_data_end+0xfffcea44>
					printf("%c ", ch[j]);
				cont=0;
   40a88:	e03fab15 	stw	zero,-340(fp)
   40a8c:	00001b06 	br	40afc <hangman+0x554>
			}
			else if(time<0){
   40a90:	e0bffe17 	ldw	r2,-8(fp)
   40a94:	1000190e 	bge	r2,zero,40afc <hangman+0x554>
				printf("You Lose!\nThe Word Is: ");
   40a98:	01000174 	movhi	r4,5
   40a9c:	21161e04 	addi	r4,r4,22648
   40aa0:	00459080 	call	45908 <printf>
				sendchar(1);
   40aa4:	01000044 	movi	r4,1
   40aa8:	004028c0 	call	4028c <sendchar>
				for(j=0; j<length; j++)
   40aac:	e03faa15 	stw	zero,-344(fp)
   40ab0:	00000e06 	br	40aec <hangman+0x544>
					printf("%c ", ch[j]);
   40ab4:	e0ffac04 	addi	r3,fp,-336
   40ab8:	e0bfaa17 	ldw	r2,-344(fp)
   40abc:	1885883a 	add	r2,r3,r2
   40ac0:	10800003 	ldbu	r2,0(r2)
   40ac4:	10803fcc 	andi	r2,r2,255
   40ac8:	1080201c 	xori	r2,r2,128
   40acc:	10bfe004 	addi	r2,r2,-128
   40ad0:	01000174 	movhi	r4,5
   40ad4:	2115ee04 	addi	r4,r4,22456
   40ad8:	100b883a 	mov	r5,r2
   40adc:	00459080 	call	45908 <printf>
				cont=0;
			}
			else if(time<0){
				printf("You Lose!\nThe Word Is: ");
				sendchar(1);
				for(j=0; j<length; j++)
   40ae0:	e0bfaa17 	ldw	r2,-344(fp)
   40ae4:	10800044 	addi	r2,r2,1
   40ae8:	e0bfaa15 	stw	r2,-344(fp)
   40aec:	e0bffd17 	ldw	r2,-12(fp)
   40af0:	e0ffaa17 	ldw	r3,-344(fp)
   40af4:	18bfef16 	blt	r3,r2,40ab4 <__alt_data_end+0xfffceab4>
					printf("%c ", ch[j]);
				cont=0;
   40af8:	e03fab15 	stw	zero,-340(fp)
		printf("The Word Is: ");
		for(j=0; j<length; j++)
			printf("%c ", ch[j]);
		recvchar(&time);
		printf("time is: %d\n", time);
		while(cont>0){
   40afc:	e0bfab17 	ldw	r2,-340(fp)
   40b00:	00bf5416 	blt	zero,r2,40854 <__alt_data_end+0xfffce854>
					printf("%c ", ch[j]);
				cont=0;
			}
		}
	}
	while(1);
   40b04:	003fff06 	br	40b04 <__alt_data_end+0xfffceb04>

00040b08 <sendchar2>:
	return 0;
}

int sendchar2(char buf){
   40b08:	defffc04 	addi	sp,sp,-16
   40b0c:	dfc00315 	stw	ra,12(sp)
   40b10:	df000215 	stw	fp,8(sp)
   40b14:	dc000115 	stw	r16,4(sp)
   40b18:	df000104 	addi	fp,sp,4
   40b1c:	2005883a 	mov	r2,r4
   40b20:	e0bfff05 	stb	r2,-4(fp)
//	*mpdataout=0x4b; //01001011
//	*mpdataout=0xff; //11111111
//	*mpdataout=0xaa; //10101010
//	*mpdataout=0x55; //01010101

	IOWR_ALTERA_AVALON_PIO_DATA(mpdataout, buf*2+addparity(buf));
   40b24:	e0bfff07 	ldb	r2,-4(fp)
   40b28:	1085883a 	add	r2,r2,r2
   40b2c:	1021883a 	mov	r16,r2
   40b30:	e0bfff07 	ldb	r2,-4(fp)
   40b34:	1009883a 	mov	r4,r2
   40b38:	00405140 	call	40514 <addparity>
   40b3c:	10803fcc 	andi	r2,r2,255
   40b40:	1080201c 	xori	r2,r2,128
   40b44:	10bfe004 	addi	r2,r2,-128
   40b48:	8087883a 	add	r3,r16,r2
   40b4c:	00800234 	movhi	r2,8
   40b50:	10841004 	addi	r2,r2,4160
   40b54:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(load, 1);
   40b58:	00c00044 	movi	r3,1
   40b5c:	00800234 	movhi	r2,8
   40b60:	10840404 	addi	r2,r2,4112
   40b64:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   40b68:	01001904 	movi	r4,100
   40b6c:	00546340 	call	54634 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(load, 0);
   40b70:	0007883a 	mov	r3,zero
   40b74:	00800234 	movhi	r2,8
   40b78:	10840404 	addi	r2,r2,4112
   40b7c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(asoe, 1);
   40b80:	00c00044 	movi	r3,1
   40b84:	00800234 	movhi	r2,8
   40b88:	10840c04 	addi	r2,r2,4144
   40b8c:	10c00035 	stwio	r3,0(r2)
	while(!IORD_ALTERA_AVALON_PIO_DATA(sent));
   40b90:	0001883a 	nop
   40b94:	00800234 	movhi	r2,8
   40b98:	10840804 	addi	r2,r2,4128
   40b9c:	10800037 	ldwio	r2,0(r2)
   40ba0:	103ffc26 	beq	r2,zero,40b94 <__alt_data_end+0xfffceb94>
	IOWR_ALTERA_AVALON_PIO_DATA(asoe, 0);
   40ba4:	0007883a 	mov	r3,zero
   40ba8:	00800234 	movhi	r2,8
   40bac:	10840c04 	addi	r2,r2,4144
   40bb0:	10c00035 	stwio	r3,0(r2)
	//alt_printf("sent: %x\n", buf);
	return 0;
   40bb4:	0005883a 	mov	r2,zero
}
   40bb8:	e037883a 	mov	sp,fp
   40bbc:	dfc00217 	ldw	ra,8(sp)
   40bc0:	df000117 	ldw	fp,4(sp)
   40bc4:	dc000017 	ldw	r16,0(sp)
   40bc8:	dec00304 	addi	sp,sp,12
   40bcc:	f800283a 	ret

00040bd0 <recvchar2>:

int recvchar2(char* buf){
   40bd0:	defffe04 	addi	sp,sp,-8
   40bd4:	df000115 	stw	fp,4(sp)
   40bd8:	df000104 	addi	fp,sp,4
   40bdc:	e13fff15 	stw	r4,-4(fp)
	//check for correctness not implemented so far
	while(!IORD_ALTERA_AVALON_PIO_DATA(chrec));
   40be0:	0001883a 	nop
   40be4:	00800234 	movhi	r2,8
   40be8:	10841404 	addi	r2,r2,4176
   40bec:	10800037 	ldwio	r2,0(r2)
   40bf0:	103ffc26 	beq	r2,zero,40be4 <__alt_data_end+0xfffcebe4>
	*buf=(((int)IORD_ALTERA_AVALON_PIO_DATA(mpdatain))&0xff)/2;
   40bf4:	00800234 	movhi	r2,8
   40bf8:	10841804 	addi	r2,r2,4192
   40bfc:	10800037 	ldwio	r2,0(r2)
   40c00:	10803fcc 	andi	r2,r2,255
   40c04:	1006d7fa 	srli	r3,r2,31
   40c08:	1885883a 	add	r2,r3,r2
   40c0c:	1005d07a 	srai	r2,r2,1
   40c10:	1007883a 	mov	r3,r2
   40c14:	e0bfff17 	ldw	r2,-4(fp)
   40c18:	10c00005 	stb	r3,0(r2)
	return 0;
   40c1c:	0005883a 	mov	r2,zero
}
   40c20:	e037883a 	mov	sp,fp
   40c24:	df000017 	ldw	fp,0(sp)
   40c28:	dec00104 	addi	sp,sp,4
   40c2c:	f800283a 	ret

00040c30 <landlord>:
/**
 * pick the landlord
 * Inputs: NONE
 * Return: int
 */
int landlord(){
   40c30:	defffc04 	addi	sp,sp,-16
   40c34:	dfc00315 	stw	ra,12(sp)
   40c38:	df000215 	stw	fp,8(sp)
   40c3c:	df000204 	addi	fp,sp,8
	int i;
	int choice;
	int opcode;
	while(!isCurrentPlayer()){
   40c40:	00007106 	br	40e08 <landlord+0x1d8>
		recvchar(&opcode);
   40c44:	e0bfff04 	addi	r2,fp,-4
   40c48:	1009883a 	mov	r4,r2
   40c4c:	00403d80 	call	403d8 <recvchar>
		usleep(50);
   40c50:	01000c84 	movi	r4,50
   40c54:	00546340 	call	54634 <usleep>
		switch(opcode){
   40c58:	e0bfff17 	ldw	r2,-4(fp)
   40c5c:	10c00160 	cmpeqi	r3,r2,5
   40c60:	18000c1e 	bne	r3,zero,40c94 <landlord+0x64>
   40c64:	10c00188 	cmpgei	r3,r2,6
   40c68:	1800031e 	bne	r3,zero,40c78 <landlord+0x48>
   40c6c:	10800060 	cmpeqi	r2,r2,1
   40c70:	1000061e 	bne	r2,zero,40c8c <landlord+0x5c>
   40c74:	00006406 	br	40e08 <landlord+0x1d8>
   40c78:	10c001a0 	cmpeqi	r3,r2,6
   40c7c:	1800241e 	bne	r3,zero,40d10 <landlord+0xe0>
   40c80:	108001e0 	cmpeqi	r2,r2,7
   40c84:	1000411e 	bne	r2,zero,40d8c <landlord+0x15c>
   40c88:	00005f06 	br	40e08 <landlord+0x1d8>
		case 1:
				nextPlayer();
   40c8c:	0044fb80 	call	44fb8 <nextPlayer>
				break;
   40c90:	00005d06 	br	40e08 <landlord+0x1d8>
		case 5:
				if(PCS==1){
   40c94:	008001b4 	movhi	r2,6
   40c98:	10a60f44 	addi	r2,r2,-26563
   40c9c:	10800003 	ldbu	r2,0(r2)
   40ca0:	10803fcc 	andi	r2,r2,255
   40ca4:	1080201c 	xori	r2,r2,128
   40ca8:	10bfe004 	addi	r2,r2,-128
   40cac:	10800058 	cmpnei	r2,r2,1
   40cb0:	1000051e 	bne	r2,zero,40cc8 <landlord+0x98>
					firstchoice=1;
   40cb4:	008001b4 	movhi	r2,6
   40cb8:	10a60704 	addi	r2,r2,-26596
   40cbc:	00c00044 	movi	r3,1
   40cc0:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=1;
				} else {
					thirdchoice=1;
				}
				break;
   40cc4:	00005006 	br	40e08 <landlord+0x1d8>
				nextPlayer();
				break;
		case 5:
				if(PCS==1){
					firstchoice=1;
				} else if(PCS==2){
   40cc8:	008001b4 	movhi	r2,6
   40ccc:	10a60f44 	addi	r2,r2,-26563
   40cd0:	10800003 	ldbu	r2,0(r2)
   40cd4:	10803fcc 	andi	r2,r2,255
   40cd8:	1080201c 	xori	r2,r2,128
   40cdc:	10bfe004 	addi	r2,r2,-128
   40ce0:	10800098 	cmpnei	r2,r2,2
   40ce4:	1000051e 	bne	r2,zero,40cfc <landlord+0xcc>
					secondchoice=1;
   40ce8:	008001b4 	movhi	r2,6
   40cec:	10a60744 	addi	r2,r2,-26595
   40cf0:	00c00044 	movi	r3,1
   40cf4:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=1;
				}
				break;
   40cf8:	00004306 	br	40e08 <landlord+0x1d8>
				if(PCS==1){
					firstchoice=1;
				} else if(PCS==2){
					secondchoice=1;
				} else {
					thirdchoice=1;
   40cfc:	008001b4 	movhi	r2,6
   40d00:	10a60784 	addi	r2,r2,-26594
   40d04:	00c00044 	movi	r3,1
   40d08:	10c00005 	stb	r3,0(r2)
				}
				break;
   40d0c:	00003e06 	br	40e08 <landlord+0x1d8>
		case 6:
				if(PCS==1){
   40d10:	008001b4 	movhi	r2,6
   40d14:	10a60f44 	addi	r2,r2,-26563
   40d18:	10800003 	ldbu	r2,0(r2)
   40d1c:	10803fcc 	andi	r2,r2,255
   40d20:	1080201c 	xori	r2,r2,128
   40d24:	10bfe004 	addi	r2,r2,-128
   40d28:	10800058 	cmpnei	r2,r2,1
   40d2c:	1000051e 	bne	r2,zero,40d44 <landlord+0x114>
					firstchoice=2;
   40d30:	008001b4 	movhi	r2,6
   40d34:	10a60704 	addi	r2,r2,-26596
   40d38:	00c00084 	movi	r3,2
   40d3c:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=2;
				} else {
					thirdchoice=2;
				}
				break;
   40d40:	00003106 	br	40e08 <landlord+0x1d8>
				}
				break;
		case 6:
				if(PCS==1){
					firstchoice=2;
				} else if(PCS==2){
   40d44:	008001b4 	movhi	r2,6
   40d48:	10a60f44 	addi	r2,r2,-26563
   40d4c:	10800003 	ldbu	r2,0(r2)
   40d50:	10803fcc 	andi	r2,r2,255
   40d54:	1080201c 	xori	r2,r2,128
   40d58:	10bfe004 	addi	r2,r2,-128
   40d5c:	10800098 	cmpnei	r2,r2,2
   40d60:	1000051e 	bne	r2,zero,40d78 <landlord+0x148>
					secondchoice=2;
   40d64:	008001b4 	movhi	r2,6
   40d68:	10a60744 	addi	r2,r2,-26595
   40d6c:	00c00084 	movi	r3,2
   40d70:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=2;
				}
				break;
   40d74:	00002406 	br	40e08 <landlord+0x1d8>
				if(PCS==1){
					firstchoice=2;
				} else if(PCS==2){
					secondchoice=2;
				} else {
					thirdchoice=2;
   40d78:	008001b4 	movhi	r2,6
   40d7c:	10a60784 	addi	r2,r2,-26594
   40d80:	00c00084 	movi	r3,2
   40d84:	10c00005 	stb	r3,0(r2)
				}
				break;
   40d88:	00001f06 	br	40e08 <landlord+0x1d8>
		case 7:
				if(PCS==1){
   40d8c:	008001b4 	movhi	r2,6
   40d90:	10a60f44 	addi	r2,r2,-26563
   40d94:	10800003 	ldbu	r2,0(r2)
   40d98:	10803fcc 	andi	r2,r2,255
   40d9c:	1080201c 	xori	r2,r2,128
   40da0:	10bfe004 	addi	r2,r2,-128
   40da4:	10800058 	cmpnei	r2,r2,1
   40da8:	1000051e 	bne	r2,zero,40dc0 <landlord+0x190>
					firstchoice=3;
   40dac:	008001b4 	movhi	r2,6
   40db0:	10a60704 	addi	r2,r2,-26596
   40db4:	00c000c4 	movi	r3,3
   40db8:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=3;
				} else {
					thirdchoice=3;
				}
				break;
   40dbc:	00001106 	br	40e04 <landlord+0x1d4>
				}
				break;
		case 7:
				if(PCS==1){
					firstchoice=3;
				} else if(PCS==2){
   40dc0:	008001b4 	movhi	r2,6
   40dc4:	10a60f44 	addi	r2,r2,-26563
   40dc8:	10800003 	ldbu	r2,0(r2)
   40dcc:	10803fcc 	andi	r2,r2,255
   40dd0:	1080201c 	xori	r2,r2,128
   40dd4:	10bfe004 	addi	r2,r2,-128
   40dd8:	10800098 	cmpnei	r2,r2,2
   40ddc:	1000051e 	bne	r2,zero,40df4 <landlord+0x1c4>
					secondchoice=3;
   40de0:	008001b4 	movhi	r2,6
   40de4:	10a60744 	addi	r2,r2,-26595
   40de8:	00c000c4 	movi	r3,3
   40dec:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=3;
				}
				break;
   40df0:	00000406 	br	40e04 <landlord+0x1d4>
				if(PCS==1){
					firstchoice=3;
				} else if(PCS==2){
					secondchoice=3;
				} else {
					thirdchoice=3;
   40df4:	008001b4 	movhi	r2,6
   40df8:	10a60784 	addi	r2,r2,-26594
   40dfc:	00c000c4 	movi	r3,3
   40e00:	10c00005 	stb	r3,0(r2)
				}
				break;
   40e04:	0001883a 	nop
 */
int landlord(){
	int i;
	int choice;
	int opcode;
	while(!isCurrentPlayer()){
   40e08:	0044f640 	call	44f64 <isCurrentPlayer>
   40e0c:	103f8d26 	beq	r2,zero,40c44 <__alt_data_end+0xfffcec44>
					thirdchoice=3;
				}
				break;
		}
	}
	alt_printf("Pick a score from 1, 2 or 3. The score you choose will determine who will be landlord and multiplier\n");
   40e10:	01000174 	movhi	r4,5
   40e14:	21162404 	addi	r4,r4,22672
   40e18:	00459ec0 	call	459ec <puts>
	alt_printf("Make your choice #%d player!",PCS);
   40e1c:	008001b4 	movhi	r2,6
   40e20:	10a60f44 	addi	r2,r2,-26563
   40e24:	10800003 	ldbu	r2,0(r2)
   40e28:	10803fcc 	andi	r2,r2,255
   40e2c:	1080201c 	xori	r2,r2,128
   40e30:	10bfe004 	addi	r2,r2,-128
   40e34:	01000174 	movhi	r4,5
   40e38:	21163e04 	addi	r4,r4,22776
   40e3c:	100b883a 	mov	r5,r2
   40e40:	00459080 	call	45908 <printf>
	scanf (" %d",&choice);
   40e44:	01000174 	movhi	r4,5
   40e48:	21164604 	addi	r4,r4,22808
   40e4c:	e17ffe04 	addi	r5,fp,-8
   40e50:	0045a600 	call	45a60 <scanf>
	printf("your choice is %d\n",choice);
   40e54:	e0bffe17 	ldw	r2,-8(fp)
   40e58:	01000174 	movhi	r4,5
   40e5c:	21164704 	addi	r4,r4,22812
   40e60:	100b883a 	mov	r5,r2
   40e64:	00459080 	call	45908 <printf>
	if(choice==1) {
   40e68:	e0bffe17 	ldw	r2,-8(fp)
   40e6c:	10800058 	cmpnei	r2,r2,1
   40e70:	1000231e 	bne	r2,zero,40f00 <landlord+0x2d0>
		sendchar(5|0x40);
   40e74:	01001144 	movi	r4,69
   40e78:	004028c0 	call	4028c <sendchar>
		usleep(250);
   40e7c:	01003e84 	movi	r4,250
   40e80:	00546340 	call	54634 <usleep>
		if(PCS==1){
   40e84:	008001b4 	movhi	r2,6
   40e88:	10a60f44 	addi	r2,r2,-26563
   40e8c:	10800003 	ldbu	r2,0(r2)
   40e90:	10803fcc 	andi	r2,r2,255
   40e94:	1080201c 	xori	r2,r2,128
   40e98:	10bfe004 	addi	r2,r2,-128
   40e9c:	10800058 	cmpnei	r2,r2,1
   40ea0:	1000051e 	bne	r2,zero,40eb8 <landlord+0x288>
			firstchoice=1;
   40ea4:	008001b4 	movhi	r2,6
   40ea8:	10a60704 	addi	r2,r2,-26596
   40eac:	00c00044 	movi	r3,1
   40eb0:	10c00005 	stb	r3,0(r2)
   40eb4:	00005d06 	br	4102c <landlord+0x3fc>
		} else if(PCS==2){
   40eb8:	008001b4 	movhi	r2,6
   40ebc:	10a60f44 	addi	r2,r2,-26563
   40ec0:	10800003 	ldbu	r2,0(r2)
   40ec4:	10803fcc 	andi	r2,r2,255
   40ec8:	1080201c 	xori	r2,r2,128
   40ecc:	10bfe004 	addi	r2,r2,-128
   40ed0:	10800098 	cmpnei	r2,r2,2
   40ed4:	1000051e 	bne	r2,zero,40eec <landlord+0x2bc>
			secondchoice=1;
   40ed8:	008001b4 	movhi	r2,6
   40edc:	10a60744 	addi	r2,r2,-26595
   40ee0:	00c00044 	movi	r3,1
   40ee4:	10c00005 	stb	r3,0(r2)
   40ee8:	00005006 	br	4102c <landlord+0x3fc>
		} else {
			thirdchoice=1;
   40eec:	008001b4 	movhi	r2,6
   40ef0:	10a60784 	addi	r2,r2,-26594
   40ef4:	00c00044 	movi	r3,1
   40ef8:	10c00005 	stb	r3,0(r2)
   40efc:	00004b06 	br	4102c <landlord+0x3fc>
		}
	} else if (choice ==2) {
   40f00:	e0bffe17 	ldw	r2,-8(fp)
   40f04:	10800098 	cmpnei	r2,r2,2
   40f08:	1000231e 	bne	r2,zero,40f98 <landlord+0x368>
		sendchar(6|0x40);
   40f0c:	01001184 	movi	r4,70
   40f10:	004028c0 	call	4028c <sendchar>
		usleep(250);
   40f14:	01003e84 	movi	r4,250
   40f18:	00546340 	call	54634 <usleep>
		if(PCS==1){
   40f1c:	008001b4 	movhi	r2,6
   40f20:	10a60f44 	addi	r2,r2,-26563
   40f24:	10800003 	ldbu	r2,0(r2)
   40f28:	10803fcc 	andi	r2,r2,255
   40f2c:	1080201c 	xori	r2,r2,128
   40f30:	10bfe004 	addi	r2,r2,-128
   40f34:	10800058 	cmpnei	r2,r2,1
   40f38:	1000051e 	bne	r2,zero,40f50 <landlord+0x320>
			firstchoice=2;
   40f3c:	008001b4 	movhi	r2,6
   40f40:	10a60704 	addi	r2,r2,-26596
   40f44:	00c00084 	movi	r3,2
   40f48:	10c00005 	stb	r3,0(r2)
   40f4c:	00003706 	br	4102c <landlord+0x3fc>
		} else if(PCS==2){
   40f50:	008001b4 	movhi	r2,6
   40f54:	10a60f44 	addi	r2,r2,-26563
   40f58:	10800003 	ldbu	r2,0(r2)
   40f5c:	10803fcc 	andi	r2,r2,255
   40f60:	1080201c 	xori	r2,r2,128
   40f64:	10bfe004 	addi	r2,r2,-128
   40f68:	10800098 	cmpnei	r2,r2,2
   40f6c:	1000051e 	bne	r2,zero,40f84 <landlord+0x354>
			secondchoice=2;
   40f70:	008001b4 	movhi	r2,6
   40f74:	10a60744 	addi	r2,r2,-26595
   40f78:	00c00084 	movi	r3,2
   40f7c:	10c00005 	stb	r3,0(r2)
   40f80:	00002a06 	br	4102c <landlord+0x3fc>
		} else {
			thirdchoice=2;
   40f84:	008001b4 	movhi	r2,6
   40f88:	10a60784 	addi	r2,r2,-26594
   40f8c:	00c00084 	movi	r3,2
   40f90:	10c00005 	stb	r3,0(r2)
   40f94:	00002506 	br	4102c <landlord+0x3fc>
		}
	} else if(choice == 3) {
   40f98:	e0bffe17 	ldw	r2,-8(fp)
   40f9c:	108000d8 	cmpnei	r2,r2,3
   40fa0:	1000221e 	bne	r2,zero,4102c <landlord+0x3fc>
		sendchar(7|0x40);
   40fa4:	010011c4 	movi	r4,71
   40fa8:	004028c0 	call	4028c <sendchar>
		usleep(250);
   40fac:	01003e84 	movi	r4,250
   40fb0:	00546340 	call	54634 <usleep>
		if(PCS==1){
   40fb4:	008001b4 	movhi	r2,6
   40fb8:	10a60f44 	addi	r2,r2,-26563
   40fbc:	10800003 	ldbu	r2,0(r2)
   40fc0:	10803fcc 	andi	r2,r2,255
   40fc4:	1080201c 	xori	r2,r2,128
   40fc8:	10bfe004 	addi	r2,r2,-128
   40fcc:	10800058 	cmpnei	r2,r2,1
   40fd0:	1000051e 	bne	r2,zero,40fe8 <landlord+0x3b8>
			firstchoice=3;
   40fd4:	008001b4 	movhi	r2,6
   40fd8:	10a60704 	addi	r2,r2,-26596
   40fdc:	00c000c4 	movi	r3,3
   40fe0:	10c00005 	stb	r3,0(r2)
   40fe4:	00001106 	br	4102c <landlord+0x3fc>
		} else if(PCS==2){
   40fe8:	008001b4 	movhi	r2,6
   40fec:	10a60f44 	addi	r2,r2,-26563
   40ff0:	10800003 	ldbu	r2,0(r2)
   40ff4:	10803fcc 	andi	r2,r2,255
   40ff8:	1080201c 	xori	r2,r2,128
   40ffc:	10bfe004 	addi	r2,r2,-128
   41000:	10800098 	cmpnei	r2,r2,2
   41004:	1000051e 	bne	r2,zero,4101c <landlord+0x3ec>
			secondchoice=3;
   41008:	008001b4 	movhi	r2,6
   4100c:	10a60744 	addi	r2,r2,-26595
   41010:	00c000c4 	movi	r3,3
   41014:	10c00005 	stb	r3,0(r2)
   41018:	00000406 	br	4102c <landlord+0x3fc>
		} else {
			thirdchoice=3;
   4101c:	008001b4 	movhi	r2,6
   41020:	10a60784 	addi	r2,r2,-26594
   41024:	00c000c4 	movi	r3,3
   41028:	10c00005 	stb	r3,0(r2)
		}
	}
	usleep(250);
   4102c:	01003e84 	movi	r4,250
   41030:	00546340 	call	54634 <usleep>
	nextPlayer();
   41034:	0044fb80 	call	44fb8 <nextPlayer>
	usleep(250);
   41038:	01003e84 	movi	r4,250
   4103c:	00546340 	call	54634 <usleep>
	incPCS();
   41040:	00450480 	call	45048 <incPCS>
	while(PCS!=1){
   41044:	00007106 	br	4120c <landlord+0x5dc>
		recvchar(&opcode);
   41048:	e0bfff04 	addi	r2,fp,-4
   4104c:	1009883a 	mov	r4,r2
   41050:	00403d80 	call	403d8 <recvchar>
		usleep(50);
   41054:	01000c84 	movi	r4,50
   41058:	00546340 	call	54634 <usleep>
		switch(opcode){
   4105c:	e0bfff17 	ldw	r2,-4(fp)
   41060:	10c00160 	cmpeqi	r3,r2,5
   41064:	18000c1e 	bne	r3,zero,41098 <landlord+0x468>
   41068:	10c00188 	cmpgei	r3,r2,6
   4106c:	1800031e 	bne	r3,zero,4107c <landlord+0x44c>
   41070:	10800060 	cmpeqi	r2,r2,1
   41074:	1000061e 	bne	r2,zero,41090 <landlord+0x460>
   41078:	00006406 	br	4120c <landlord+0x5dc>
   4107c:	10c001a0 	cmpeqi	r3,r2,6
   41080:	1800241e 	bne	r3,zero,41114 <landlord+0x4e4>
   41084:	108001e0 	cmpeqi	r2,r2,7
   41088:	1000411e 	bne	r2,zero,41190 <landlord+0x560>
   4108c:	00005f06 	br	4120c <landlord+0x5dc>
		case 1:
				nextPlayer();
   41090:	0044fb80 	call	44fb8 <nextPlayer>
				break;
   41094:	00005d06 	br	4120c <landlord+0x5dc>
		case 5:
				if(PCS==1){
   41098:	008001b4 	movhi	r2,6
   4109c:	10a60f44 	addi	r2,r2,-26563
   410a0:	10800003 	ldbu	r2,0(r2)
   410a4:	10803fcc 	andi	r2,r2,255
   410a8:	1080201c 	xori	r2,r2,128
   410ac:	10bfe004 	addi	r2,r2,-128
   410b0:	10800058 	cmpnei	r2,r2,1
   410b4:	1000051e 	bne	r2,zero,410cc <landlord+0x49c>
					firstchoice=1;
   410b8:	008001b4 	movhi	r2,6
   410bc:	10a60704 	addi	r2,r2,-26596
   410c0:	00c00044 	movi	r3,1
   410c4:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=1;
				} else {
					thirdchoice=1;
				}
				break;
   410c8:	00005006 	br	4120c <landlord+0x5dc>
				nextPlayer();
				break;
		case 5:
				if(PCS==1){
					firstchoice=1;
				} else if(PCS==2){
   410cc:	008001b4 	movhi	r2,6
   410d0:	10a60f44 	addi	r2,r2,-26563
   410d4:	10800003 	ldbu	r2,0(r2)
   410d8:	10803fcc 	andi	r2,r2,255
   410dc:	1080201c 	xori	r2,r2,128
   410e0:	10bfe004 	addi	r2,r2,-128
   410e4:	10800098 	cmpnei	r2,r2,2
   410e8:	1000051e 	bne	r2,zero,41100 <landlord+0x4d0>
					secondchoice=1;
   410ec:	008001b4 	movhi	r2,6
   410f0:	10a60744 	addi	r2,r2,-26595
   410f4:	00c00044 	movi	r3,1
   410f8:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=1;
				}
				break;
   410fc:	00004306 	br	4120c <landlord+0x5dc>
				if(PCS==1){
					firstchoice=1;
				} else if(PCS==2){
					secondchoice=1;
				} else {
					thirdchoice=1;
   41100:	008001b4 	movhi	r2,6
   41104:	10a60784 	addi	r2,r2,-26594
   41108:	00c00044 	movi	r3,1
   4110c:	10c00005 	stb	r3,0(r2)
				}
				break;
   41110:	00003e06 	br	4120c <landlord+0x5dc>
		case 6:
				if(PCS==1){
   41114:	008001b4 	movhi	r2,6
   41118:	10a60f44 	addi	r2,r2,-26563
   4111c:	10800003 	ldbu	r2,0(r2)
   41120:	10803fcc 	andi	r2,r2,255
   41124:	1080201c 	xori	r2,r2,128
   41128:	10bfe004 	addi	r2,r2,-128
   4112c:	10800058 	cmpnei	r2,r2,1
   41130:	1000051e 	bne	r2,zero,41148 <landlord+0x518>
					firstchoice=2;
   41134:	008001b4 	movhi	r2,6
   41138:	10a60704 	addi	r2,r2,-26596
   4113c:	00c00084 	movi	r3,2
   41140:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=2;
				} else {
					thirdchoice=2;
				}
				break;
   41144:	00003106 	br	4120c <landlord+0x5dc>
				}
				break;
		case 6:
				if(PCS==1){
					firstchoice=2;
				} else if(PCS==2){
   41148:	008001b4 	movhi	r2,6
   4114c:	10a60f44 	addi	r2,r2,-26563
   41150:	10800003 	ldbu	r2,0(r2)
   41154:	10803fcc 	andi	r2,r2,255
   41158:	1080201c 	xori	r2,r2,128
   4115c:	10bfe004 	addi	r2,r2,-128
   41160:	10800098 	cmpnei	r2,r2,2
   41164:	1000051e 	bne	r2,zero,4117c <landlord+0x54c>
					secondchoice=2;
   41168:	008001b4 	movhi	r2,6
   4116c:	10a60744 	addi	r2,r2,-26595
   41170:	00c00084 	movi	r3,2
   41174:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=2;
				}
				break;
   41178:	00002406 	br	4120c <landlord+0x5dc>
				if(PCS==1){
					firstchoice=2;
				} else if(PCS==2){
					secondchoice=2;
				} else {
					thirdchoice=2;
   4117c:	008001b4 	movhi	r2,6
   41180:	10a60784 	addi	r2,r2,-26594
   41184:	00c00084 	movi	r3,2
   41188:	10c00005 	stb	r3,0(r2)
				}
				break;
   4118c:	00001f06 	br	4120c <landlord+0x5dc>
		case 7:
				if(PCS==1){
   41190:	008001b4 	movhi	r2,6
   41194:	10a60f44 	addi	r2,r2,-26563
   41198:	10800003 	ldbu	r2,0(r2)
   4119c:	10803fcc 	andi	r2,r2,255
   411a0:	1080201c 	xori	r2,r2,128
   411a4:	10bfe004 	addi	r2,r2,-128
   411a8:	10800058 	cmpnei	r2,r2,1
   411ac:	1000051e 	bne	r2,zero,411c4 <landlord+0x594>
					firstchoice=3;
   411b0:	008001b4 	movhi	r2,6
   411b4:	10a60704 	addi	r2,r2,-26596
   411b8:	00c000c4 	movi	r3,3
   411bc:	10c00005 	stb	r3,0(r2)
				} else if(PCS==2){
					secondchoice=3;
				} else {
					thirdchoice=3;
				}
				break;
   411c0:	00001106 	br	41208 <landlord+0x5d8>
				}
				break;
		case 7:
				if(PCS==1){
					firstchoice=3;
				} else if(PCS==2){
   411c4:	008001b4 	movhi	r2,6
   411c8:	10a60f44 	addi	r2,r2,-26563
   411cc:	10800003 	ldbu	r2,0(r2)
   411d0:	10803fcc 	andi	r2,r2,255
   411d4:	1080201c 	xori	r2,r2,128
   411d8:	10bfe004 	addi	r2,r2,-128
   411dc:	10800098 	cmpnei	r2,r2,2
   411e0:	1000051e 	bne	r2,zero,411f8 <landlord+0x5c8>
					secondchoice=3;
   411e4:	008001b4 	movhi	r2,6
   411e8:	10a60744 	addi	r2,r2,-26595
   411ec:	00c000c4 	movi	r3,3
   411f0:	10c00005 	stb	r3,0(r2)
				} else {
					thirdchoice=3;
				}
				break;
   411f4:	00000406 	br	41208 <landlord+0x5d8>
				if(PCS==1){
					firstchoice=3;
				} else if(PCS==2){
					secondchoice=3;
				} else {
					thirdchoice=3;
   411f8:	008001b4 	movhi	r2,6
   411fc:	10a60784 	addi	r2,r2,-26594
   41200:	00c000c4 	movi	r3,3
   41204:	10c00005 	stb	r3,0(r2)
				}
				break;
   41208:	0001883a 	nop
	}
	usleep(250);
	nextPlayer();
	usleep(250);
	incPCS();
	while(PCS!=1){
   4120c:	008001b4 	movhi	r2,6
   41210:	10a60f44 	addi	r2,r2,-26563
   41214:	10800003 	ldbu	r2,0(r2)
   41218:	10803fcc 	andi	r2,r2,255
   4121c:	1080201c 	xori	r2,r2,128
   41220:	10bfe004 	addi	r2,r2,-128
   41224:	10800058 	cmpnei	r2,r2,1
   41228:	103f871e 	bne	r2,zero,41048 <__alt_data_end+0xfffcf048>
					thirdchoice=3;
				}
				break;
		}
	}
	alt_printf("current player: %x\n", PCS);
   4122c:	008001b4 	movhi	r2,6
   41230:	10a60f44 	addi	r2,r2,-26563
   41234:	10800003 	ldbu	r2,0(r2)
   41238:	10803fcc 	andi	r2,r2,255
   4123c:	1080201c 	xori	r2,r2,128
   41240:	10bfe004 	addi	r2,r2,-128
   41244:	01000174 	movhi	r4,5
   41248:	21164c04 	addi	r4,r4,22832
   4124c:	100b883a 	mov	r5,r2
   41250:	00459080 	call	45908 <printf>
	alt_printf("first player chooses %d\n",firstchoice);
   41254:	008001b4 	movhi	r2,6
   41258:	10a60704 	addi	r2,r2,-26596
   4125c:	10800003 	ldbu	r2,0(r2)
   41260:	10803fcc 	andi	r2,r2,255
   41264:	1080201c 	xori	r2,r2,128
   41268:	10bfe004 	addi	r2,r2,-128
   4126c:	01000174 	movhi	r4,5
   41270:	21165104 	addi	r4,r4,22852
   41274:	100b883a 	mov	r5,r2
   41278:	00459080 	call	45908 <printf>
	alt_printf("second player chooses %d\n",secondchoice);
   4127c:	008001b4 	movhi	r2,6
   41280:	10a60744 	addi	r2,r2,-26595
   41284:	10800003 	ldbu	r2,0(r2)
   41288:	10803fcc 	andi	r2,r2,255
   4128c:	1080201c 	xori	r2,r2,128
   41290:	10bfe004 	addi	r2,r2,-128
   41294:	01000174 	movhi	r4,5
   41298:	21165804 	addi	r4,r4,22880
   4129c:	100b883a 	mov	r5,r2
   412a0:	00459080 	call	45908 <printf>
	alt_printf("third player chooses %d\n",thirdchoice);
   412a4:	008001b4 	movhi	r2,6
   412a8:	10a60784 	addi	r2,r2,-26594
   412ac:	10800003 	ldbu	r2,0(r2)
   412b0:	10803fcc 	andi	r2,r2,255
   412b4:	1080201c 	xori	r2,r2,128
   412b8:	10bfe004 	addi	r2,r2,-128
   412bc:	01000174 	movhi	r4,5
   412c0:	21165f04 	addi	r4,r4,22908
   412c4:	100b883a 	mov	r5,r2
   412c8:	00459080 	call	45908 <printf>
	return 0;
   412cc:	0005883a 	mov	r2,zero
}
   412d0:	e037883a 	mov	sp,fp
   412d4:	dfc00117 	ldw	ra,4(sp)
   412d8:	df000017 	ldw	fp,0(sp)
   412dc:	dec00204 	addi	sp,sp,8
   412e0:	f800283a 	ret

000412e4 <main>:
int score;
int rand1, rand2, rand3, rand4;
Boolean firstrand=TRUE;

int main()
{
   412e4:	defff804 	addi	sp,sp,-32
   412e8:	dfc00715 	stw	ra,28(sp)
   412ec:	df000615 	stw	fp,24(sp)
   412f0:	df000604 	addi	fp,sp,24
	char cardsInHand[20];
	myNum=0;
   412f4:	d026b805 	stb	zero,-25888(gp)
	PCS=1;
   412f8:	00800044 	movi	r2,1
   412fc:	d0a6bd45 	stb	r2,-25867(gp)
	cch=cardsInHand;
   41300:	e0bffb04 	addi	r2,fp,-20
   41304:	d0a6ba15 	stw	r2,-25880(gp)
	multiplier=0;
   41308:	d026bd05 	stb	zero,-25868(gp)
	int i;

	alt_putstr("Fight The Landlord!\n");
   4130c:	01000174 	movhi	r4,5
   41310:	21166604 	addi	r4,r4,22936
   41314:	00459ec0 	call	459ec <puts>
	alt_putstr("Please input your number\n");
   41318:	01000174 	movhi	r4,5
   4131c:	21166b04 	addi	r4,r4,22956
   41320:	00459ec0 	call	459ec <puts>
	alt_putstr("It should be 1, 2, or 3 and unique\n");
   41324:	01000174 	movhi	r4,5
   41328:	21167204 	addi	r4,r4,22984
   4132c:	00459ec0 	call	459ec <puts>
	while(1);
#endif
/******************************/

#ifdef FIGHT_THE_LANDLORD
	while(myNum!=1 && myNum!=2 && myNum!=3){
   41330:	00001006 	br	41374 <main+0x90>
		myNum=(char)getchar()-'0';
   41334:	00800174 	movhi	r2,5
   41338:	109f5504 	addi	r2,r2,32084
   4133c:	10800017 	ldw	r2,0(r2)
   41340:	10800117 	ldw	r2,4(r2)
   41344:	1009883a 	mov	r4,r2
   41348:	00458540 	call	45854 <getc>
   4134c:	10bff404 	addi	r2,r2,-48
   41350:	d0a6b805 	stb	r2,-25888(gp)
		printf("OK, you num is: %d\n", myNum);
   41354:	d0a6b803 	ldbu	r2,-25888(gp)
   41358:	10803fcc 	andi	r2,r2,255
   4135c:	1080201c 	xori	r2,r2,128
   41360:	10bfe004 	addi	r2,r2,-128
   41364:	01000174 	movhi	r4,5
   41368:	21167b04 	addi	r4,r4,23020
   4136c:	100b883a 	mov	r5,r2
   41370:	00459080 	call	45908 <printf>
	while(1);
#endif
/******************************/

#ifdef FIGHT_THE_LANDLORD
	while(myNum!=1 && myNum!=2 && myNum!=3){
   41374:	d0a6b803 	ldbu	r2,-25888(gp)
   41378:	10803fcc 	andi	r2,r2,255
   4137c:	1080201c 	xori	r2,r2,128
   41380:	10bfe004 	addi	r2,r2,-128
   41384:	10800060 	cmpeqi	r2,r2,1
   41388:	10000c1e 	bne	r2,zero,413bc <main+0xd8>
   4138c:	d0a6b803 	ldbu	r2,-25888(gp)
   41390:	10803fcc 	andi	r2,r2,255
   41394:	1080201c 	xori	r2,r2,128
   41398:	10bfe004 	addi	r2,r2,-128
   4139c:	108000a0 	cmpeqi	r2,r2,2
   413a0:	1000061e 	bne	r2,zero,413bc <main+0xd8>
   413a4:	d0a6b803 	ldbu	r2,-25888(gp)
   413a8:	10803fcc 	andi	r2,r2,255
   413ac:	1080201c 	xori	r2,r2,128
   413b0:	10bfe004 	addi	r2,r2,-128
   413b4:	108000d8 	cmpnei	r2,r2,3
   413b8:	103fde1e 	bne	r2,zero,41334 <__alt_data_end+0xfffcf334>
		myNum=(char)getchar()-'0';
		printf("OK, you num is: %d\n", myNum);
	}
	printf("Please Input 4 numbers, separated by space, to generate random number");
   413bc:	01000174 	movhi	r4,5
   413c0:	21168004 	addi	r4,r4,23040
   413c4:	00459080 	call	45908 <printf>
	scanf("%d %d %d %d", &rand1, &rand2, &rand3, &rand4);
   413c8:	d0a6b604 	addi	r2,gp,-25896
   413cc:	d8800015 	stw	r2,0(sp)
   413d0:	01000174 	movhi	r4,5
   413d4:	21169204 	addi	r4,r4,23112
   413d8:	d166b704 	addi	r5,gp,-25892
   413dc:	d1a6bc04 	addi	r6,gp,-25872
   413e0:	d1e6b904 	addi	r7,gp,-25884
   413e4:	0045a600 	call	45a60 <scanf>
	printf("OK, plase wait...\n");
   413e8:	01000174 	movhi	r4,5
   413ec:	21169504 	addi	r4,r4,23124
   413f0:	00459ec0 	call	459ec <puts>
	rand();
   413f4:	00452200 	call	45220 <rand>

	shuffle();
   413f8:	00453a80 	call	453a8 <shuffle>
	landlord();
   413fc:	0040c300 	call	40c30 <landlord>
	computell();
   41400:	004140c0 	call	4140c <computell>
	play();
   41404:	0043a300 	call	43a30 <play>
	while (1){
	}
   41408:	003fff06 	br	41408 <__alt_data_end+0xfffcf408>

0004140c <computell>:
	hangman();
#endif
	return 0;
}

void computell() {
   4140c:	defffb04 	addi	sp,sp,-20
   41410:	dfc00415 	stw	ra,16(sp)
   41414:	df000315 	stw	fp,12(sp)
   41418:	df000304 	addi	fp,sp,12
	int card1=sramread(0);
   4141c:	0009883a 	mov	r4,zero
   41420:	004019c0 	call	4019c <sramread>
   41424:	e0bffd15 	stw	r2,-12(fp)
	card1=card1%13+13*(card1==52)+13*(card1==53);
   41428:	e0bffd17 	ldw	r2,-12(fp)
   4142c:	1009883a 	mov	r4,r2
   41430:	01400344 	movi	r5,13
   41434:	00457780 	call	45778 <__modsi3>
   41438:	1007883a 	mov	r3,r2
   4143c:	e0bffd17 	ldw	r2,-12(fp)
   41440:	10800d18 	cmpnei	r2,r2,52
   41444:	1000021e 	bne	r2,zero,41450 <computell+0x44>
   41448:	00800344 	movi	r2,13
   4144c:	00000106 	br	41454 <computell+0x48>
   41450:	0005883a 	mov	r2,zero
   41454:	1887883a 	add	r3,r3,r2
   41458:	e0bffd17 	ldw	r2,-12(fp)
   4145c:	10800d58 	cmpnei	r2,r2,53
   41460:	1000021e 	bne	r2,zero,4146c <computell+0x60>
   41464:	00800344 	movi	r2,13
   41468:	00000106 	br	41470 <computell+0x64>
   4146c:	0005883a 	mov	r2,zero
   41470:	1885883a 	add	r2,r3,r2
   41474:	e0bffd15 	stw	r2,-12(fp)
	int card2=sramread(1);
   41478:	01000044 	movi	r4,1
   4147c:	004019c0 	call	4019c <sramread>
   41480:	e0bffe15 	stw	r2,-8(fp)
	card2=card2%13+13*(card2==52)+13*(card2==53);
   41484:	e0bffe17 	ldw	r2,-8(fp)
   41488:	1009883a 	mov	r4,r2
   4148c:	01400344 	movi	r5,13
   41490:	00457780 	call	45778 <__modsi3>
   41494:	1007883a 	mov	r3,r2
   41498:	e0bffe17 	ldw	r2,-8(fp)
   4149c:	10800d18 	cmpnei	r2,r2,52
   414a0:	1000021e 	bne	r2,zero,414ac <computell+0xa0>
   414a4:	00800344 	movi	r2,13
   414a8:	00000106 	br	414b0 <computell+0xa4>
   414ac:	0005883a 	mov	r2,zero
   414b0:	1887883a 	add	r3,r3,r2
   414b4:	e0bffe17 	ldw	r2,-8(fp)
   414b8:	10800d58 	cmpnei	r2,r2,53
   414bc:	1000021e 	bne	r2,zero,414c8 <computell+0xbc>
   414c0:	00800344 	movi	r2,13
   414c4:	00000106 	br	414cc <computell+0xc0>
   414c8:	0005883a 	mov	r2,zero
   414cc:	1885883a 	add	r2,r3,r2
   414d0:	e0bffe15 	stw	r2,-8(fp)
	int card3=sramread(2);
   414d4:	01000084 	movi	r4,2
   414d8:	004019c0 	call	4019c <sramread>
   414dc:	e0bfff15 	stw	r2,-4(fp)
	card3=card3%13+13*(card3==52)+13*(card3==53);
   414e0:	e0bfff17 	ldw	r2,-4(fp)
   414e4:	1009883a 	mov	r4,r2
   414e8:	01400344 	movi	r5,13
   414ec:	00457780 	call	45778 <__modsi3>
   414f0:	1007883a 	mov	r3,r2
   414f4:	e0bfff17 	ldw	r2,-4(fp)
   414f8:	10800d18 	cmpnei	r2,r2,52
   414fc:	1000021e 	bne	r2,zero,41508 <computell+0xfc>
   41500:	00800344 	movi	r2,13
   41504:	00000106 	br	4150c <computell+0x100>
   41508:	0005883a 	mov	r2,zero
   4150c:	1887883a 	add	r3,r3,r2
   41510:	e0bfff17 	ldw	r2,-4(fp)
   41514:	10800d58 	cmpnei	r2,r2,53
   41518:	1000021e 	bne	r2,zero,41524 <computell+0x118>
   4151c:	00800344 	movi	r2,13
   41520:	00000106 	br	41528 <computell+0x11c>
   41524:	0005883a 	mov	r2,zero
   41528:	1885883a 	add	r2,r3,r2
   4152c:	e0bfff15 	stw	r2,-4(fp)
    if(firstchoice>=secondchoice && firstchoice>=thirdchoice){
   41530:	d0e6b503 	ldbu	r3,-25900(gp)
   41534:	d0a6b543 	ldbu	r2,-25899(gp)
   41538:	18c03fcc 	andi	r3,r3,255
   4153c:	18c0201c 	xori	r3,r3,128
   41540:	18ffe004 	addi	r3,r3,-128
   41544:	10803fcc 	andi	r2,r2,255
   41548:	1080201c 	xori	r2,r2,128
   4154c:	10bfe004 	addi	r2,r2,-128
   41550:	18803016 	blt	r3,r2,41614 <computell+0x208>
   41554:	d0e6b503 	ldbu	r3,-25900(gp)
   41558:	d0a6b583 	ldbu	r2,-25898(gp)
   4155c:	18c03fcc 	andi	r3,r3,255
   41560:	18c0201c 	xori	r3,r3,128
   41564:	18ffe004 	addi	r3,r3,-128
   41568:	10803fcc 	andi	r2,r2,255
   4156c:	1080201c 	xori	r2,r2,128
   41570:	10bfe004 	addi	r2,r2,-128
   41574:	18802716 	blt	r3,r2,41614 <computell+0x208>
    	ll = 1;
   41578:	00800044 	movi	r2,1
   4157c:	d0a6b5c5 	stb	r2,-25897(gp)
    	multiplier=firstchoice;
   41580:	d0a6b503 	ldbu	r2,-25900(gp)
   41584:	d0a6bd05 	stb	r2,-25868(gp)
    	sramwrite(CHNP, 20);
   41588:	01000d84 	movi	r4,54
   4158c:	01400504 	movi	r5,20
   41590:	00401fc0 	call	401fc <sramwrite>
    	if(myNum==1){
   41594:	d0a6b803 	ldbu	r2,-25888(gp)
   41598:	10803fcc 	andi	r2,r2,255
   4159c:	1080201c 	xori	r2,r2,128
   415a0:	10bfe004 	addi	r2,r2,-128
   415a4:	10800058 	cmpnei	r2,r2,1
   415a8:	1000131e 	bne	r2,zero,415f8 <computell+0x1ec>
    		score=2;
   415ac:	00800084 	movi	r2,2
   415b0:	d0a6bb15 	stw	r2,-25876(gp)
    		cch[17]=card1;
   415b4:	d0a6ba17 	ldw	r2,-25880(gp)
   415b8:	10800444 	addi	r2,r2,17
   415bc:	e0fffd17 	ldw	r3,-12(fp)
   415c0:	10c00005 	stb	r3,0(r2)
    		cch[18]=card2;
   415c4:	d0a6ba17 	ldw	r2,-25880(gp)
   415c8:	10800484 	addi	r2,r2,18
   415cc:	e0fffe17 	ldw	r3,-8(fp)
   415d0:	10c00005 	stb	r3,0(r2)
    		cch[19]=card3;
   415d4:	d0a6ba17 	ldw	r2,-25880(gp)
   415d8:	108004c4 	addi	r2,r2,19
   415dc:	e0ffff17 	ldw	r3,-4(fp)
   415e0:	10c00005 	stb	r3,0(r2)
        	sort(20, cch);
   415e4:	d0a6ba17 	ldw	r2,-25880(gp)
   415e8:	01000504 	movi	r4,20
   415ec:	100b883a 	mov	r5,r2
   415f0:	0044e700 	call	44e70 <sort>
	card3=card3%13+13*(card3==52)+13*(card3==53);
    if(firstchoice>=secondchoice && firstchoice>=thirdchoice){
    	ll = 1;
    	multiplier=firstchoice;
    	sramwrite(CHNP, 20);
    	if(myNum==1){
   415f4:	00007806 	br	417d8 <computell+0x3cc>
    		cch[18]=card2;
    		cch[19]=card3;
        	sort(20, cch);
    	}
    	else{
    		sort(17, cch);
   415f8:	d0a6ba17 	ldw	r2,-25880(gp)
   415fc:	01000444 	movi	r4,17
   41600:	100b883a 	mov	r5,r2
   41604:	0044e700 	call	44e70 <sort>
    		score=1;
   41608:	00800044 	movi	r2,1
   4160c:	d0a6bb15 	stw	r2,-25876(gp)
	card3=card3%13+13*(card3==52)+13*(card3==53);
    if(firstchoice>=secondchoice && firstchoice>=thirdchoice){
    	ll = 1;
    	multiplier=firstchoice;
    	sramwrite(CHNP, 20);
    	if(myNum==1){
   41610:	00007106 	br	417d8 <computell+0x3cc>
    	}
    	else{
    		sort(17, cch);
    		score=1;
    	}
    } else if(secondchoice>=firstchoice && secondchoice>=thirdchoice){
   41614:	d0e6b543 	ldbu	r3,-25899(gp)
   41618:	d0a6b503 	ldbu	r2,-25900(gp)
   4161c:	18c03fcc 	andi	r3,r3,255
   41620:	18c0201c 	xori	r3,r3,128
   41624:	18ffe004 	addi	r3,r3,-128
   41628:	10803fcc 	andi	r2,r2,255
   4162c:	1080201c 	xori	r2,r2,128
   41630:	10bfe004 	addi	r2,r2,-128
   41634:	18803016 	blt	r3,r2,416f8 <computell+0x2ec>
   41638:	d0e6b543 	ldbu	r3,-25899(gp)
   4163c:	d0a6b583 	ldbu	r2,-25898(gp)
   41640:	18c03fcc 	andi	r3,r3,255
   41644:	18c0201c 	xori	r3,r3,128
   41648:	18ffe004 	addi	r3,r3,-128
   4164c:	10803fcc 	andi	r2,r2,255
   41650:	1080201c 	xori	r2,r2,128
   41654:	10bfe004 	addi	r2,r2,-128
   41658:	18802716 	blt	r3,r2,416f8 <computell+0x2ec>
		ll = 2;
   4165c:	00800084 	movi	r2,2
   41660:	d0a6b5c5 	stb	r2,-25897(gp)
		multiplier=secondchoice;
   41664:	d0a6b543 	ldbu	r2,-25899(gp)
   41668:	d0a6bd05 	stb	r2,-25868(gp)
    	sramwrite(CHNP+1, 20);
   4166c:	01000dc4 	movi	r4,55
   41670:	01400504 	movi	r5,20
   41674:	00401fc0 	call	401fc <sramwrite>
    	if(myNum==2){
   41678:	d0a6b803 	ldbu	r2,-25888(gp)
   4167c:	10803fcc 	andi	r2,r2,255
   41680:	1080201c 	xori	r2,r2,128
   41684:	10bfe004 	addi	r2,r2,-128
   41688:	10800098 	cmpnei	r2,r2,2
   4168c:	1000131e 	bne	r2,zero,416dc <computell+0x2d0>
    		score=2;
   41690:	00800084 	movi	r2,2
   41694:	d0a6bb15 	stw	r2,-25876(gp)
    		cch[17]=card1;
   41698:	d0a6ba17 	ldw	r2,-25880(gp)
   4169c:	10800444 	addi	r2,r2,17
   416a0:	e0fffd17 	ldw	r3,-12(fp)
   416a4:	10c00005 	stb	r3,0(r2)
    		cch[18]=card2;
   416a8:	d0a6ba17 	ldw	r2,-25880(gp)
   416ac:	10800484 	addi	r2,r2,18
   416b0:	e0fffe17 	ldw	r3,-8(fp)
   416b4:	10c00005 	stb	r3,0(r2)
    		cch[19]=card3;
   416b8:	d0a6ba17 	ldw	r2,-25880(gp)
   416bc:	108004c4 	addi	r2,r2,19
   416c0:	e0ffff17 	ldw	r3,-4(fp)
   416c4:	10c00005 	stb	r3,0(r2)
        	sort(20, cch);
   416c8:	d0a6ba17 	ldw	r2,-25880(gp)
   416cc:	01000504 	movi	r4,20
   416d0:	100b883a 	mov	r5,r2
   416d4:	0044e700 	call	44e70 <sort>
    	}
    } else if(secondchoice>=firstchoice && secondchoice>=thirdchoice){
		ll = 2;
		multiplier=secondchoice;
    	sramwrite(CHNP+1, 20);
    	if(myNum==2){
   416d8:	00003f06 	br	417d8 <computell+0x3cc>
    		cch[18]=card2;
    		cch[19]=card3;
        	sort(20, cch);
    	}
    	else{
    		sort(17, cch);
   416dc:	d0a6ba17 	ldw	r2,-25880(gp)
   416e0:	01000444 	movi	r4,17
   416e4:	100b883a 	mov	r5,r2
   416e8:	0044e700 	call	44e70 <sort>
    		score=1;
   416ec:	00800044 	movi	r2,1
   416f0:	d0a6bb15 	stw	r2,-25876(gp)
    	}
    } else if(secondchoice>=firstchoice && secondchoice>=thirdchoice){
		ll = 2;
		multiplier=secondchoice;
    	sramwrite(CHNP+1, 20);
    	if(myNum==2){
   416f4:	00003806 	br	417d8 <computell+0x3cc>
    	}
    	else{
    		sort(17, cch);
    		score=1;
    	}
	} else if(thirdchoice>=firstchoice && thirdchoice>=secondchoice){
   416f8:	d0e6b583 	ldbu	r3,-25898(gp)
   416fc:	d0a6b503 	ldbu	r2,-25900(gp)
   41700:	18c03fcc 	andi	r3,r3,255
   41704:	18c0201c 	xori	r3,r3,128
   41708:	18ffe004 	addi	r3,r3,-128
   4170c:	10803fcc 	andi	r2,r2,255
   41710:	1080201c 	xori	r2,r2,128
   41714:	10bfe004 	addi	r2,r2,-128
   41718:	18802f16 	blt	r3,r2,417d8 <computell+0x3cc>
   4171c:	d0e6b583 	ldbu	r3,-25898(gp)
   41720:	d0a6b543 	ldbu	r2,-25899(gp)
   41724:	18c03fcc 	andi	r3,r3,255
   41728:	18c0201c 	xori	r3,r3,128
   4172c:	18ffe004 	addi	r3,r3,-128
   41730:	10803fcc 	andi	r2,r2,255
   41734:	1080201c 	xori	r2,r2,128
   41738:	10bfe004 	addi	r2,r2,-128
   4173c:	18802616 	blt	r3,r2,417d8 <computell+0x3cc>
		ll = 3;
   41740:	008000c4 	movi	r2,3
   41744:	d0a6b5c5 	stb	r2,-25897(gp)
		multiplier=thirdchoice;
   41748:	d0a6b583 	ldbu	r2,-25898(gp)
   4174c:	d0a6bd05 	stb	r2,-25868(gp)
    	sramwrite(CHNP+2, 20);
   41750:	01000e04 	movi	r4,56
   41754:	01400504 	movi	r5,20
   41758:	00401fc0 	call	401fc <sramwrite>
    	if(myNum==3){
   4175c:	d0a6b803 	ldbu	r2,-25888(gp)
   41760:	10803fcc 	andi	r2,r2,255
   41764:	1080201c 	xori	r2,r2,128
   41768:	10bfe004 	addi	r2,r2,-128
   4176c:	108000d8 	cmpnei	r2,r2,3
   41770:	1000131e 	bne	r2,zero,417c0 <computell+0x3b4>
    		score=2;
   41774:	00800084 	movi	r2,2
   41778:	d0a6bb15 	stw	r2,-25876(gp)
    		cch[17]=card1;
   4177c:	d0a6ba17 	ldw	r2,-25880(gp)
   41780:	10800444 	addi	r2,r2,17
   41784:	e0fffd17 	ldw	r3,-12(fp)
   41788:	10c00005 	stb	r3,0(r2)
    		cch[18]=card2;
   4178c:	d0a6ba17 	ldw	r2,-25880(gp)
   41790:	10800484 	addi	r2,r2,18
   41794:	e0fffe17 	ldw	r3,-8(fp)
   41798:	10c00005 	stb	r3,0(r2)
    		cch[19]=card3;
   4179c:	d0a6ba17 	ldw	r2,-25880(gp)
   417a0:	108004c4 	addi	r2,r2,19
   417a4:	e0ffff17 	ldw	r3,-4(fp)
   417a8:	10c00005 	stb	r3,0(r2)
        	sort(20, cch);
   417ac:	d0a6ba17 	ldw	r2,-25880(gp)
   417b0:	01000504 	movi	r4,20
   417b4:	100b883a 	mov	r5,r2
   417b8:	0044e700 	call	44e70 <sort>
   417bc:	00000606 	br	417d8 <computell+0x3cc>
    	}
    	else{
    		sort(17, cch);
   417c0:	d0a6ba17 	ldw	r2,-25880(gp)
   417c4:	01000444 	movi	r4,17
   417c8:	100b883a 	mov	r5,r2
   417cc:	0044e700 	call	44e70 <sort>
    		score=1;
   417d0:	00800044 	movi	r2,1
   417d4:	d0a6bb15 	stw	r2,-25876(gp)
    	}
	}
	printf("#%d player is the landlord\n", ll);
   417d8:	d0a6b5c3 	ldbu	r2,-25897(gp)
   417dc:	10803fcc 	andi	r2,r2,255
   417e0:	1080201c 	xori	r2,r2,128
   417e4:	10bfe004 	addi	r2,r2,-128
   417e8:	01000174 	movhi	r4,5
   417ec:	21169a04 	addi	r4,r4,23144
   417f0:	100b883a 	mov	r5,r2
   417f4:	00459080 	call	45908 <printf>
	printf("The Three Cards Are: %d, %d, %d", card1, card2, card3);
   417f8:	01000174 	movhi	r4,5
   417fc:	2116a104 	addi	r4,r4,23172
   41800:	e17ffd17 	ldw	r5,-12(fp)
   41804:	e1bffe17 	ldw	r6,-8(fp)
   41808:	e1ffff17 	ldw	r7,-4(fp)
   4180c:	00459080 	call	45908 <printf>
    display();
   41810:	00449140 	call	44914 <display>
}
   41814:	e037883a 	mov	sp,fp
   41818:	dfc00117 	ldw	ra,4(sp)
   4181c:	df000017 	ldw	fp,0(sp)
   41820:	dec00204 	addi	sp,sp,8
   41824:	f800283a 	ret

00041828 <checkPatternAndValue>:
 * 		*key: key value of cards played currently
 * 		**analyzer: analyzed pattern by detectPattern
 * Return: if play is legal
 */
Boolean checkPatternAndValue(int* pattern, char* ccp, char num,	int* keyValue)
{
   41828:	defff804 	addi	sp,sp,-32
   4182c:	dfc00715 	stw	ra,28(sp)
   41830:	df000615 	stw	fp,24(sp)
   41834:	df000604 	addi	fp,sp,24
   41838:	e13ffc15 	stw	r4,-16(fp)
   4183c:	e17ffd15 	stw	r5,-12(fp)
   41840:	3005883a 	mov	r2,r6
   41844:	e1ffff15 	stw	r7,-4(fp)
   41848:	e0bffe05 	stb	r2,-8(fp)
	int i;
	int mypat;
	char key;
	sort(num, ccp);
   4184c:	e0bffe07 	ldb	r2,-8(fp)
   41850:	1009883a 	mov	r4,r2
   41854:	e17ffd17 	ldw	r5,-12(fp)
   41858:	0044e700 	call	44e70 <sort>

	mypat=detectPattern(ccp, num, &key);
   4185c:	e0fffe07 	ldb	r3,-8(fp)
   41860:	e0bffb04 	addi	r2,fp,-20
   41864:	e13ffd17 	ldw	r4,-12(fp)
   41868:	180b883a 	mov	r5,r3
   4186c:	100d883a 	mov	r6,r2
   41870:	00419340 	call	41934 <detectPattern>
   41874:	e0bffa15 	stw	r2,-24(fp)

	if(mypat==-1)
   41878:	e0bffa17 	ldw	r2,-24(fp)
   4187c:	10bfffd8 	cmpnei	r2,r2,-1
   41880:	1000021e 	bne	r2,zero,4188c <checkPatternAndValue+0x64>
		return FALSE;
   41884:	0005883a 	mov	r2,zero
   41888:	00002506 	br	41920 <checkPatternAndValue+0xf8>
	//check
	if(*pattern==0 || mypat==42){
   4188c:	e0bffc17 	ldw	r2,-16(fp)
   41890:	10800017 	ldw	r2,0(r2)
   41894:	10000326 	beq	r2,zero,418a4 <checkPatternAndValue+0x7c>
   41898:	e0bffa17 	ldw	r2,-24(fp)
   4189c:	10800a98 	cmpnei	r2,r2,42
   418a0:	10000b1e 	bne	r2,zero,418d0 <checkPatternAndValue+0xa8>
		*pattern=mypat;
   418a4:	e0bffc17 	ldw	r2,-16(fp)
   418a8:	e0fffa17 	ldw	r3,-24(fp)
   418ac:	10c00015 	stw	r3,0(r2)
		*keyValue=key;
   418b0:	e0bffb03 	ldbu	r2,-20(fp)
   418b4:	10c03fcc 	andi	r3,r2,255
   418b8:	18c0201c 	xori	r3,r3,128
   418bc:	18ffe004 	addi	r3,r3,-128
   418c0:	e0bfff17 	ldw	r2,-4(fp)
   418c4:	10c00015 	stw	r3,0(r2)
		return TRUE;
   418c8:	00800044 	movi	r2,1
   418cc:	00001406 	br	41920 <checkPatternAndValue+0xf8>
	}
	else if(*pattern==mypat && key>*keyValue){
   418d0:	e0bffc17 	ldw	r2,-16(fp)
   418d4:	10c00017 	ldw	r3,0(r2)
   418d8:	e0bffa17 	ldw	r2,-24(fp)
   418dc:	18800f1e 	bne	r3,r2,4191c <checkPatternAndValue+0xf4>
   418e0:	e0bffb03 	ldbu	r2,-20(fp)
   418e4:	10803fcc 	andi	r2,r2,255
   418e8:	1080201c 	xori	r2,r2,128
   418ec:	10bfe004 	addi	r2,r2,-128
   418f0:	e0ffff17 	ldw	r3,-4(fp)
   418f4:	18c00017 	ldw	r3,0(r3)
   418f8:	1880080e 	bge	r3,r2,4191c <checkPatternAndValue+0xf4>
		*keyValue=key;
   418fc:	e0bffb03 	ldbu	r2,-20(fp)
   41900:	10c03fcc 	andi	r3,r2,255
   41904:	18c0201c 	xori	r3,r3,128
   41908:	18ffe004 	addi	r3,r3,-128
   4190c:	e0bfff17 	ldw	r2,-4(fp)
   41910:	10c00015 	stw	r3,0(r2)
		return TRUE;
   41914:	00800044 	movi	r2,1
   41918:	00000106 	br	41920 <checkPatternAndValue+0xf8>
	}
	return FALSE;
   4191c:	0005883a 	mov	r2,zero
}
   41920:	e037883a 	mov	sp,fp
   41924:	dfc00117 	ldw	ra,4(sp)
   41928:	df000017 	ldw	fp,0(sp)
   4192c:	dec00204 	addi	sp,sp,8
   41930:	f800283a 	ret

00041934 <detectPattern>:

/**
 *
 */
int detectPattern(char* ccp, char num,	char* key)
{
   41934:	defff904 	addi	sp,sp,-28
   41938:	dfc00615 	stw	ra,24(sp)
   4193c:	df000515 	stw	fp,20(sp)
   41940:	df000504 	addi	fp,sp,20
   41944:	e13ffd15 	stw	r4,-12(fp)
   41948:	2805883a 	mov	r2,r5
   4194c:	e1bfff15 	stw	r6,-4(fp)
   41950:	e0bffe05 	stb	r2,-8(fp)
	int i;
	int pat;

	//Analyzation
	if(num>4 && num<13){
   41954:	e0bffe07 	ldb	r2,-8(fp)
   41958:	10800150 	cmplti	r2,r2,5
   4195c:	1000361e 	bne	r2,zero,41a38 <detectPattern+0x104>
   41960:	e0bffe07 	ldb	r2,-8(fp)
   41964:	10800348 	cmpgei	r2,r2,13
   41968:	1000331e 	bne	r2,zero,41a38 <detectPattern+0x104>
		for(i=0; i<num-1; i++)
   4196c:	e03ffb15 	stw	zero,-20(fp)
   41970:	00001406 	br	419c4 <detectPattern+0x90>
			if(ccp[i]+1 != ccp[i+1])
   41974:	e0bffb17 	ldw	r2,-20(fp)
   41978:	e0fffd17 	ldw	r3,-12(fp)
   4197c:	1885883a 	add	r2,r3,r2
   41980:	10800003 	ldbu	r2,0(r2)
   41984:	10803fcc 	andi	r2,r2,255
   41988:	1080201c 	xori	r2,r2,128
   4198c:	10bfe004 	addi	r2,r2,-128
   41990:	10c00044 	addi	r3,r2,1
   41994:	e0bffb17 	ldw	r2,-20(fp)
   41998:	10800044 	addi	r2,r2,1
   4199c:	e13ffd17 	ldw	r4,-12(fp)
   419a0:	2085883a 	add	r2,r4,r2
   419a4:	10800003 	ldbu	r2,0(r2)
   419a8:	10803fcc 	andi	r2,r2,255
   419ac:	1080201c 	xori	r2,r2,128
   419b0:	10bfe004 	addi	r2,r2,-128
   419b4:	18801f1e 	bne	r3,r2,41a34 <detectPattern+0x100>
	int i;
	int pat;

	//Analyzation
	if(num>4 && num<13){
		for(i=0; i<num-1; i++)
   419b8:	e0bffb17 	ldw	r2,-20(fp)
   419bc:	10800044 	addi	r2,r2,1
   419c0:	e0bffb15 	stw	r2,-20(fp)
   419c4:	e0bffe07 	ldb	r2,-8(fp)
   419c8:	10bfffc4 	addi	r2,r2,-1
   419cc:	e0fffb17 	ldw	r3,-20(fp)
   419d0:	18bfe816 	blt	r3,r2,41974 <__alt_data_end+0xfffcf974>
			if(ccp[i]+1 != ccp[i+1])
				goto Label;
		if(ccp[num-1]>11)
   419d4:	e0bffe07 	ldb	r2,-8(fp)
   419d8:	10bfffc4 	addi	r2,r2,-1
   419dc:	e0fffd17 	ldw	r3,-12(fp)
   419e0:	1885883a 	add	r2,r3,r2
   419e4:	10800003 	ldbu	r2,0(r2)
   419e8:	10803fcc 	andi	r2,r2,255
   419ec:	1080201c 	xori	r2,r2,128
   419f0:	10bfe004 	addi	r2,r2,-128
   419f4:	10800310 	cmplti	r2,r2,12
   419f8:	1000021e 	bne	r2,zero,41a04 <detectPattern+0xd0>
			return -1;
   419fc:	00bfffc4 	movi	r2,-1
   41a00:	00071506 	br	43658 <detectPattern+0x1d24>
		pat=num*10;
   41a04:	e0bffe07 	ldb	r2,-8(fp)
   41a08:	108002a4 	muli	r2,r2,10
   41a0c:	e0bffc15 	stw	r2,-16(fp)
		*key=ccp[num-1];
   41a10:	e0bffe07 	ldb	r2,-8(fp)
   41a14:	10bfffc4 	addi	r2,r2,-1
   41a18:	e0fffd17 	ldw	r3,-12(fp)
   41a1c:	1885883a 	add	r2,r3,r2
   41a20:	10c00003 	ldbu	r3,0(r2)
   41a24:	e0bfff17 	ldw	r2,-4(fp)
   41a28:	10c00005 	stb	r3,0(r2)
		return pat;
   41a2c:	e0bffc17 	ldw	r2,-16(fp)
   41a30:	00070906 	br	43658 <detectPattern+0x1d24>

	//Analyzation
	if(num>4 && num<13){
		for(i=0; i<num-1; i++)
			if(ccp[i]+1 != ccp[i+1])
				goto Label;
   41a34:	0001883a 	nop
		*key=ccp[num-1];
		return pat;
	}

	Label:
	switch(num){
   41a38:	e0bffe07 	ldb	r2,-8(fp)
   41a3c:	10c00568 	cmpgeui	r3,r2,21
   41a40:	1807011e 	bne	r3,zero,43648 <detectPattern+0x1d14>
   41a44:	1085883a 	add	r2,r2,r2
   41a48:	1087883a 	add	r3,r2,r2
   41a4c:	00800134 	movhi	r2,4
   41a50:	10869804 	addi	r2,r2,6752
   41a54:	1885883a 	add	r2,r3,r2
   41a58:	10800017 	ldw	r2,0(r2)
   41a5c:	1000683a 	jmp	r2
   41a60:	00043648 	cmpgei	zero,zero,4313
   41a64:	00041ab4 	movhi	zero,4202
   41a68:	00041ad0 	cmplti	zero,zero,4203
   41a6c:	00041b9c 	xori	zero,zero,4206
   41a70:	00041bd8 	cmpnei	zero,zero,4207
   41a74:	00041c58 	cmpnei	zero,zero,4209
   41a78:	00041d18 	cmpnei	zero,zero,4212
   41a7c:	00041e2c 	andhi	zero,zero,4216
   41a80:	00041e6c 	andhi	zero,zero,4217
   41a84:	00042084 	movi	zero,4226
   41a88:	000420f4 	movhi	zero,4227
   41a8c:	00042318 	cmpnei	zero,zero,4236
   41a90:	000423cc 	andi	zero,zero,4239
   41a94:	000425cc 	andi	zero,zero,4247
   41a98:	00042748 	cmpgei	zero,zero,4253
   41a9c:	000428dc 	xori	zero,zero,4259
   41aa0:	000429ac 	andhi	zero,zero,4262
   41aa4:	00042bcc 	andi	zero,zero,4271
   41aa8:	00042cb4 	movhi	zero,4274
   41aac:	00042fd8 	cmpnei	zero,zero,4287
   41ab0:	000430bc 	xorhi	zero,zero,4290
	case 1:
		pat=11;
   41ab4:	008002c4 	movi	r2,11
   41ab8:	e0bffc15 	stw	r2,-16(fp)
		*key=ccp[0];
   41abc:	e0bffd17 	ldw	r2,-12(fp)
   41ac0:	10c00003 	ldbu	r3,0(r2)
   41ac4:	e0bfff17 	ldw	r2,-4(fp)
   41ac8:	10c00005 	stb	r3,0(r2)
		break;
   41acc:	0006e106 	br	43654 <detectPattern+0x1d20>
	case 2:
		if(comp(2, ccp, 0)){
   41ad0:	01000084 	movi	r4,2
   41ad4:	e17ffd17 	ldw	r5,-12(fp)
   41ad8:	000d883a 	mov	r6,zero
   41adc:	004366c0 	call	4366c <comp>
   41ae0:	10000726 	beq	r2,zero,41b00 <detectPattern+0x1cc>
			pat=21;
   41ae4:	00800544 	movi	r2,21
   41ae8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[0];
   41aec:	e0bffd17 	ldw	r2,-12(fp)
   41af0:	10c00003 	ldbu	r3,0(r2)
   41af4:	e0bfff17 	ldw	r2,-4(fp)
   41af8:	10c00005 	stb	r3,0(r2)
			pat=42;
			*key=RED_JOCKER;
		}
		else
			pat=-1;
		break;
   41afc:	0006d506 	br	43654 <detectPattern+0x1d20>
	case 2:
		if(comp(2, ccp, 0)){
			pat=21;
			*key=ccp[0];
		}
		else if((ccp[0]==BLACK_JOCKER && ccp[1]==RED_JOCKER)||
   41b00:	e0bffd17 	ldw	r2,-12(fp)
   41b04:	10800003 	ldbu	r2,0(r2)
   41b08:	10803fcc 	andi	r2,r2,255
   41b0c:	1080201c 	xori	r2,r2,128
   41b10:	10bfe004 	addi	r2,r2,-128
   41b14:	10800358 	cmpnei	r2,r2,13
   41b18:	1000081e 	bne	r2,zero,41b3c <detectPattern+0x208>
   41b1c:	e0bffd17 	ldw	r2,-12(fp)
   41b20:	10800044 	addi	r2,r2,1
   41b24:	10800003 	ldbu	r2,0(r2)
   41b28:	10803fcc 	andi	r2,r2,255
   41b2c:	1080201c 	xori	r2,r2,128
   41b30:	10bfe004 	addi	r2,r2,-128
   41b34:	108003a0 	cmpeqi	r2,r2,14
   41b38:	10000f1e 	bne	r2,zero,41b78 <detectPattern+0x244>
				(ccp[0]==RED_JOCKER && ccp[1]==BLACK_JOCKER))
   41b3c:	e0bffd17 	ldw	r2,-12(fp)
   41b40:	10800003 	ldbu	r2,0(r2)
	case 2:
		if(comp(2, ccp, 0)){
			pat=21;
			*key=ccp[0];
		}
		else if((ccp[0]==BLACK_JOCKER && ccp[1]==RED_JOCKER)||
   41b44:	10803fcc 	andi	r2,r2,255
   41b48:	1080201c 	xori	r2,r2,128
   41b4c:	10bfe004 	addi	r2,r2,-128
   41b50:	10800398 	cmpnei	r2,r2,14
   41b54:	10000e1e 	bne	r2,zero,41b90 <detectPattern+0x25c>
				(ccp[0]==RED_JOCKER && ccp[1]==BLACK_JOCKER))
   41b58:	e0bffd17 	ldw	r2,-12(fp)
   41b5c:	10800044 	addi	r2,r2,1
   41b60:	10800003 	ldbu	r2,0(r2)
   41b64:	10803fcc 	andi	r2,r2,255
   41b68:	1080201c 	xori	r2,r2,128
   41b6c:	10bfe004 	addi	r2,r2,-128
   41b70:	10800358 	cmpnei	r2,r2,13
   41b74:	1000061e 	bne	r2,zero,41b90 <detectPattern+0x25c>
		{
			pat=42;
   41b78:	00800a84 	movi	r2,42
   41b7c:	e0bffc15 	stw	r2,-16(fp)
			*key=RED_JOCKER;
   41b80:	e0bfff17 	ldw	r2,-4(fp)
   41b84:	00c00384 	movi	r3,14
   41b88:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   41b8c:	0006b106 	br	43654 <detectPattern+0x1d20>
		{
			pat=42;
			*key=RED_JOCKER;
		}
		else
			pat=-1;
   41b90:	00bfffc4 	movi	r2,-1
   41b94:	e0bffc15 	stw	r2,-16(fp)
		break;
   41b98:	0006ae06 	br	43654 <detectPattern+0x1d20>
	case 3:
		// 3
		if(comp(3, ccp, 0)){
   41b9c:	010000c4 	movi	r4,3
   41ba0:	e17ffd17 	ldw	r5,-12(fp)
   41ba4:	000d883a 	mov	r6,zero
   41ba8:	004366c0 	call	4366c <comp>
   41bac:	10000726 	beq	r2,zero,41bcc <detectPattern+0x298>
			pat=31;
   41bb0:	008007c4 	movi	r2,31
   41bb4:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[0];
   41bb8:	e0bffd17 	ldw	r2,-12(fp)
   41bbc:	10c00003 	ldbu	r3,0(r2)
   41bc0:	e0bfff17 	ldw	r2,-4(fp)
   41bc4:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   41bc8:	0006a206 	br	43654 <detectPattern+0x1d20>
		if(comp(3, ccp, 0)){
			pat=31;
			*key=ccp[0];
		}
		else
			pat=-1;
   41bcc:	00bfffc4 	movi	r2,-1
   41bd0:	e0bffc15 	stw	r2,-16(fp)
		break;
   41bd4:	00069f06 	br	43654 <detectPattern+0x1d20>
	case 4:
		// 3+1 || 1+3
		if(comp(3, ccp, 0) || comp(3, ccp, 1))
   41bd8:	010000c4 	movi	r4,3
   41bdc:	e17ffd17 	ldw	r5,-12(fp)
   41be0:	000d883a 	mov	r6,zero
   41be4:	004366c0 	call	4366c <comp>
   41be8:	1000051e 	bne	r2,zero,41c00 <detectPattern+0x2cc>
   41bec:	010000c4 	movi	r4,3
   41bf0:	e17ffd17 	ldw	r5,-12(fp)
   41bf4:	01800044 	movi	r6,1
   41bf8:	004366c0 	call	4366c <comp>
   41bfc:	10000726 	beq	r2,zero,41c1c <detectPattern+0x2e8>
		{
			pat=41;
   41c00:	00800a44 	movi	r2,41
   41c04:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[1];
   41c08:	e0bffd17 	ldw	r2,-12(fp)
   41c0c:	10c00043 	ldbu	r3,1(r2)
   41c10:	e0bfff17 	ldw	r2,-4(fp)
   41c14:	10c00005 	stb	r3,0(r2)
			pat=42;
			*key=ccp[0];
		}
		else
			pat=-1;
		break;
   41c18:	00068e06 	br	43654 <detectPattern+0x1d20>
		{
			pat=41;
			*key=ccp[1];
		}
		// 4
		else if(comp(4, ccp, 0)){
   41c1c:	01000104 	movi	r4,4
   41c20:	e17ffd17 	ldw	r5,-12(fp)
   41c24:	000d883a 	mov	r6,zero
   41c28:	004366c0 	call	4366c <comp>
   41c2c:	10000726 	beq	r2,zero,41c4c <detectPattern+0x318>
			pat=42;
   41c30:	00800a84 	movi	r2,42
   41c34:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[0];
   41c38:	e0bffd17 	ldw	r2,-12(fp)
   41c3c:	10c00003 	ldbu	r3,0(r2)
   41c40:	e0bfff17 	ldw	r2,-4(fp)
   41c44:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   41c48:	00068206 	br	43654 <detectPattern+0x1d20>
		else if(comp(4, ccp, 0)){
			pat=42;
			*key=ccp[0];
		}
		else
			pat=-1;
   41c4c:	00bfffc4 	movi	r2,-1
   41c50:	e0bffc15 	stw	r2,-16(fp)
		break;
   41c54:	00067f06 	br	43654 <detectPattern+0x1d20>
	case 5:
		// 3+2 || 2+3
		if((comp(3, ccp, 0) && comp(2, ccp, 3))||
   41c58:	010000c4 	movi	r4,3
   41c5c:	e17ffd17 	ldw	r5,-12(fp)
   41c60:	000d883a 	mov	r6,zero
   41c64:	004366c0 	call	4366c <comp>
   41c68:	10000526 	beq	r2,zero,41c80 <detectPattern+0x34c>
   41c6c:	01000084 	movi	r4,2
   41c70:	e17ffd17 	ldw	r5,-12(fp)
   41c74:	018000c4 	movi	r6,3
   41c78:	004366c0 	call	4366c <comp>
   41c7c:	10000a1e 	bne	r2,zero,41ca8 <detectPattern+0x374>
				(comp(2, ccp, 0) && comp(3, ccp, 2)))
   41c80:	01000084 	movi	r4,2
   41c84:	e17ffd17 	ldw	r5,-12(fp)
   41c88:	000d883a 	mov	r6,zero
   41c8c:	004366c0 	call	4366c <comp>
		else
			pat=-1;
		break;
	case 5:
		// 3+2 || 2+3
		if((comp(3, ccp, 0) && comp(2, ccp, 3))||
   41c90:	10000c26 	beq	r2,zero,41cc4 <detectPattern+0x390>
				(comp(2, ccp, 0) && comp(3, ccp, 2)))
   41c94:	010000c4 	movi	r4,3
   41c98:	e17ffd17 	ldw	r5,-12(fp)
   41c9c:	01800084 	movi	r6,2
   41ca0:	004366c0 	call	4366c <comp>
   41ca4:	10000726 	beq	r2,zero,41cc4 <detectPattern+0x390>
		{
			pat=51;
   41ca8:	00800cc4 	movi	r2,51
   41cac:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[2];
   41cb0:	e0bffd17 	ldw	r2,-12(fp)
   41cb4:	10c00083 	ldbu	r3,2(r2)
   41cb8:	e0bfff17 	ldw	r2,-4(fp)
   41cbc:	10c00005 	stb	r3,0(r2)
   41cc0:	00001406 	br	41d14 <detectPattern+0x3e0>
		}
		// 4+1 || 1+4
		else if(comp(4, ccp, 0) || comp(4, ccp, 1))
   41cc4:	01000104 	movi	r4,4
   41cc8:	e17ffd17 	ldw	r5,-12(fp)
   41ccc:	000d883a 	mov	r6,zero
   41cd0:	004366c0 	call	4366c <comp>
   41cd4:	1000051e 	bne	r2,zero,41cec <detectPattern+0x3b8>
   41cd8:	01000104 	movi	r4,4
   41cdc:	e17ffd17 	ldw	r5,-12(fp)
   41ce0:	01800044 	movi	r6,1
   41ce4:	004366c0 	call	4366c <comp>
   41ce8:	10000726 	beq	r2,zero,41d08 <detectPattern+0x3d4>
		{
			pat=52;
   41cec:	00800d04 	movi	r2,52
   41cf0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[1];
   41cf4:	e0bffd17 	ldw	r2,-12(fp)
   41cf8:	10c00043 	ldbu	r3,1(r2)
   41cfc:	e0bfff17 	ldw	r2,-4(fp)
   41d00:	10c00005 	stb	r3,0(r2)
   41d04:	00000306 	br	41d14 <detectPattern+0x3e0>
		}
		else
			pat=-1;
   41d08:	00bfffc4 	movi	r2,-1
   41d0c:	e0bffc15 	stw	r2,-16(fp)
		break;
   41d10:	00065006 	br	43654 <detectPattern+0x1d20>
   41d14:	00064f06 	br	43654 <detectPattern+0x1d20>
	case 6:
		// 3x2
		if(seriesComp(ccp, 3, 2, 0)){
   41d18:	e13ffd17 	ldw	r4,-12(fp)
   41d1c:	014000c4 	movi	r5,3
   41d20:	01800084 	movi	r6,2
   41d24:	000f883a 	mov	r7,zero
   41d28:	00438680 	call	43868 <seriesComp>
   41d2c:	10000726 	beq	r2,zero,41d4c <detectPattern+0x418>
			pat=61;
   41d30:	00800f44 	movi	r2,61
   41d34:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[3];
   41d38:	e0bffd17 	ldw	r2,-12(fp)
   41d3c:	10c000c3 	ldbu	r3,3(r2)
   41d40:	e0bfff17 	ldw	r2,-4(fp)
   41d44:	10c00005 	stb	r3,0(r2)
			pat=64;
			*key=ccp[2];
		}
		else
			pat=-1;
		break;
   41d48:	00064206 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 3, 2, 0)){
			pat=61;
			*key=ccp[3];
		}
		// 4+2 || 2+4
		else if((comp(4, ccp, 0) && comp(2, ccp, 4))||
   41d4c:	01000104 	movi	r4,4
   41d50:	e17ffd17 	ldw	r5,-12(fp)
   41d54:	000d883a 	mov	r6,zero
   41d58:	004366c0 	call	4366c <comp>
   41d5c:	10000526 	beq	r2,zero,41d74 <detectPattern+0x440>
   41d60:	01000084 	movi	r4,2
   41d64:	e17ffd17 	ldw	r5,-12(fp)
   41d68:	01800104 	movi	r6,4
   41d6c:	004366c0 	call	4366c <comp>
   41d70:	10000a1e 	bne	r2,zero,41d9c <detectPattern+0x468>
				(comp(2, ccp, 0) && comp(4, ccp, 2)))
   41d74:	01000084 	movi	r4,2
   41d78:	e17ffd17 	ldw	r5,-12(fp)
   41d7c:	000d883a 	mov	r6,zero
   41d80:	004366c0 	call	4366c <comp>
		if(seriesComp(ccp, 3, 2, 0)){
			pat=61;
			*key=ccp[3];
		}
		// 4+2 || 2+4
		else if((comp(4, ccp, 0) && comp(2, ccp, 4))||
   41d84:	10000c26 	beq	r2,zero,41db8 <detectPattern+0x484>
				(comp(2, ccp, 0) && comp(4, ccp, 2)))
   41d88:	01000104 	movi	r4,4
   41d8c:	e17ffd17 	ldw	r5,-12(fp)
   41d90:	01800084 	movi	r6,2
   41d94:	004366c0 	call	4366c <comp>
   41d98:	10000726 	beq	r2,zero,41db8 <detectPattern+0x484>
		{
			pat=62;
   41d9c:	00800f84 	movi	r2,62
   41da0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[2];
   41da4:	e0bffd17 	ldw	r2,-12(fp)
   41da8:	10c00083 	ldbu	r3,2(r2)
   41dac:	e0bfff17 	ldw	r2,-4(fp)
   41db0:	10c00005 	stb	r3,0(r2)
			pat=64;
			*key=ccp[2];
		}
		else
			pat=-1;
		break;
   41db4:	00062706 	br	43654 <detectPattern+0x1d20>
		{
			pat=62;
			*key=ccp[2];
		}
		// 2x3
		else if(seriesComp(ccp, 2, 3, 0))
   41db8:	e13ffd17 	ldw	r4,-12(fp)
   41dbc:	01400084 	movi	r5,2
   41dc0:	018000c4 	movi	r6,3
   41dc4:	000f883a 	mov	r7,zero
   41dc8:	00438680 	call	43868 <seriesComp>
   41dcc:	10000726 	beq	r2,zero,41dec <detectPattern+0x4b8>
		{
			pat=63;
   41dd0:	00800fc4 	movi	r2,63
   41dd4:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[4];
   41dd8:	e0bffd17 	ldw	r2,-12(fp)
   41ddc:	10c00103 	ldbu	r3,4(r2)
   41de0:	e0bfff17 	ldw	r2,-4(fp)
   41de4:	10c00005 	stb	r3,0(r2)
			pat=64;
			*key=ccp[2];
		}
		else
			pat=-1;
		break;
   41de8:	00061a06 	br	43654 <detectPattern+0x1d20>
		{
			pat=63;
			*key=ccp[4];
		}
		// 4+1x2 || 1+4+1 || 1x2+4
		else if(seriesCompWithOnes(ccp, 4, 1, 2)){
   41dec:	e13ffd17 	ldw	r4,-12(fp)
   41df0:	01400104 	movi	r5,4
   41df4:	01800044 	movi	r6,1
   41df8:	01c00084 	movi	r7,2
   41dfc:	00439b00 	call	439b0 <seriesCompWithOnes>
   41e00:	10000726 	beq	r2,zero,41e20 <detectPattern+0x4ec>
			pat=64;
   41e04:	00801004 	movi	r2,64
   41e08:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[2];
   41e0c:	e0bffd17 	ldw	r2,-12(fp)
   41e10:	10c00083 	ldbu	r3,2(r2)
   41e14:	e0bfff17 	ldw	r2,-4(fp)
   41e18:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   41e1c:	00060d06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 1, 2)){
			pat=64;
			*key=ccp[2];
		}
		else
			pat=-1;
   41e20:	00bfffc4 	movi	r2,-1
   41e24:	e0bffc15 	stw	r2,-16(fp)
		break;
   41e28:	00060a06 	br	43654 <detectPattern+0x1d20>
	case 7:
		// 3x2+1 || 1+3x2
		if(seriesCompWithOnes(ccp, 3, 2, 1))
   41e2c:	e13ffd17 	ldw	r4,-12(fp)
   41e30:	014000c4 	movi	r5,3
   41e34:	01800084 	movi	r6,2
   41e38:	01c00044 	movi	r7,1
   41e3c:	00439b00 	call	439b0 <seriesCompWithOnes>
   41e40:	10000726 	beq	r2,zero,41e60 <detectPattern+0x52c>
		{
			pat=71;
   41e44:	008011c4 	movi	r2,71
   41e48:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[4];
   41e4c:	e0bffd17 	ldw	r2,-12(fp)
   41e50:	10c00103 	ldbu	r3,4(r2)
   41e54:	e0bfff17 	ldw	r2,-4(fp)
   41e58:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   41e5c:	0005fd06 	br	43654 <detectPattern+0x1d20>
		{
			pat=71;
			*key=ccp[4];
		}
		else
			pat=-1;
   41e60:	00bfffc4 	movi	r2,-1
   41e64:	e0bffc15 	stw	r2,-16(fp)
		break;
   41e68:	0005fa06 	br	43654 <detectPattern+0x1d20>
	case 8:
		// 4x2
		if(seriesComp(ccp, 4, 2, 0)){
   41e6c:	e13ffd17 	ldw	r4,-12(fp)
   41e70:	01400104 	movi	r5,4
   41e74:	01800084 	movi	r6,2
   41e78:	000f883a 	mov	r7,zero
   41e7c:	00438680 	call	43868 <seriesComp>
   41e80:	10000726 	beq	r2,zero,41ea0 <detectPattern+0x56c>
			pat=81;
   41e84:	00801444 	movi	r2,81
   41e88:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[4];
   41e8c:	e0bffd17 	ldw	r2,-12(fp)
   41e90:	10c00103 	ldbu	r3,4(r2)
   41e94:	e0bfff17 	ldw	r2,-4(fp)
   41e98:	10c00005 	stb	r3,0(r2)
			pat=85;
			*key=ccp[5];
		}
		else
			pat=-1;
		break;
   41e9c:	0005ed06 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 4, 2, 0)){
			pat=81;
			*key=ccp[4];
		}
		// 2x4
		else if(seriesComp(ccp, 2, 4, 0))
   41ea0:	e13ffd17 	ldw	r4,-12(fp)
   41ea4:	01400084 	movi	r5,2
   41ea8:	01800104 	movi	r6,4
   41eac:	000f883a 	mov	r7,zero
   41eb0:	00438680 	call	43868 <seriesComp>
   41eb4:	10000726 	beq	r2,zero,41ed4 <detectPattern+0x5a0>
		{
			pat=82;
   41eb8:	00801484 	movi	r2,82
   41ebc:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[6];
   41ec0:	e0bffd17 	ldw	r2,-12(fp)
   41ec4:	10c00183 	ldbu	r3,6(r2)
   41ec8:	e0bfff17 	ldw	r2,-4(fp)
   41ecc:	10c00005 	stb	r3,0(r2)
			pat=85;
			*key=ccp[5];
		}
		else
			pat=-1;
		break;
   41ed0:	0005e006 	br	43654 <detectPattern+0x1d20>
		{
			pat=82;
			*key=ccp[6];
		}
		// 4+2x2 || 2+4+2 || 2x2+4
		else if((comp(4, ccp, 0) && comp(2, ccp, 4) && comp(2, ccp, 6)) ||
   41ed4:	01000104 	movi	r4,4
   41ed8:	e17ffd17 	ldw	r5,-12(fp)
   41edc:	000d883a 	mov	r6,zero
   41ee0:	004366c0 	call	4366c <comp>
   41ee4:	10000a26 	beq	r2,zero,41f10 <detectPattern+0x5dc>
   41ee8:	01000084 	movi	r4,2
   41eec:	e17ffd17 	ldw	r5,-12(fp)
   41ef0:	01800104 	movi	r6,4
   41ef4:	004366c0 	call	4366c <comp>
   41ef8:	10000526 	beq	r2,zero,41f10 <detectPattern+0x5dc>
   41efc:	01000084 	movi	r4,2
   41f00:	e17ffd17 	ldw	r5,-12(fp)
   41f04:	01800184 	movi	r6,6
   41f08:	004366c0 	call	4366c <comp>
   41f0c:	10001e1e 	bne	r2,zero,41f88 <detectPattern+0x654>
				(comp(2, ccp, 0) && comp(4, ccp, 2) && comp(2, ccp, 6)) ||
   41f10:	01000084 	movi	r4,2
   41f14:	e17ffd17 	ldw	r5,-12(fp)
   41f18:	000d883a 	mov	r6,zero
   41f1c:	004366c0 	call	4366c <comp>
		{
			pat=82;
			*key=ccp[6];
		}
		// 4+2x2 || 2+4+2 || 2x2+4
		else if((comp(4, ccp, 0) && comp(2, ccp, 4) && comp(2, ccp, 6)) ||
   41f20:	10000a26 	beq	r2,zero,41f4c <detectPattern+0x618>
				(comp(2, ccp, 0) && comp(4, ccp, 2) && comp(2, ccp, 6)) ||
   41f24:	01000104 	movi	r4,4
   41f28:	e17ffd17 	ldw	r5,-12(fp)
   41f2c:	01800084 	movi	r6,2
   41f30:	004366c0 	call	4366c <comp>
   41f34:	10000526 	beq	r2,zero,41f4c <detectPattern+0x618>
   41f38:	01000084 	movi	r4,2
   41f3c:	e17ffd17 	ldw	r5,-12(fp)
   41f40:	01800184 	movi	r6,6
   41f44:	004366c0 	call	4366c <comp>
   41f48:	10000f1e 	bne	r2,zero,41f88 <detectPattern+0x654>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(4, ccp, 4)))
   41f4c:	01000084 	movi	r4,2
   41f50:	e17ffd17 	ldw	r5,-12(fp)
   41f54:	000d883a 	mov	r6,zero
   41f58:	004366c0 	call	4366c <comp>
			pat=82;
			*key=ccp[6];
		}
		// 4+2x2 || 2+4+2 || 2x2+4
		else if((comp(4, ccp, 0) && comp(2, ccp, 4) && comp(2, ccp, 6)) ||
				(comp(2, ccp, 0) && comp(4, ccp, 2) && comp(2, ccp, 6)) ||
   41f5c:	10001b26 	beq	r2,zero,41fcc <detectPattern+0x698>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(4, ccp, 4)))
   41f60:	01000084 	movi	r4,2
   41f64:	e17ffd17 	ldw	r5,-12(fp)
   41f68:	01800084 	movi	r6,2
   41f6c:	004366c0 	call	4366c <comp>
   41f70:	10001626 	beq	r2,zero,41fcc <detectPattern+0x698>
   41f74:	01000104 	movi	r4,4
   41f78:	e17ffd17 	ldw	r5,-12(fp)
   41f7c:	01800104 	movi	r6,4
   41f80:	004366c0 	call	4366c <comp>
   41f84:	10001126 	beq	r2,zero,41fcc <detectPattern+0x698>
		{
			pat=83;
   41f88:	008014c4 	movi	r2,83
   41f8c:	e0bffc15 	stw	r2,-16(fp)
			if(comp(4, ccp, 0))
   41f90:	01000104 	movi	r4,4
   41f94:	e17ffd17 	ldw	r5,-12(fp)
   41f98:	000d883a 	mov	r6,zero
   41f9c:	004366c0 	call	4366c <comp>
   41fa0:	10000526 	beq	r2,zero,41fb8 <detectPattern+0x684>
				*key=ccp[0];
   41fa4:	e0bffd17 	ldw	r2,-12(fp)
   41fa8:	10c00003 	ldbu	r3,0(r2)
   41fac:	e0bfff17 	ldw	r2,-4(fp)
   41fb0:	10c00005 	stb	r3,0(r2)
		else if((comp(4, ccp, 0) && comp(2, ccp, 4) && comp(2, ccp, 6)) ||
				(comp(2, ccp, 0) && comp(4, ccp, 2) && comp(2, ccp, 6)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(4, ccp, 4)))
		{
			pat=83;
			if(comp(4, ccp, 0))
   41fb4:	00003206 	br	42080 <detectPattern+0x74c>
				*key=ccp[0];
			else
				*key=ccp[4];
   41fb8:	e0bffd17 	ldw	r2,-12(fp)
   41fbc:	10c00103 	ldbu	r3,4(r2)
   41fc0:	e0bfff17 	ldw	r2,-4(fp)
   41fc4:	10c00005 	stb	r3,0(r2)
		else if((comp(4, ccp, 0) && comp(2, ccp, 4) && comp(2, ccp, 6)) ||
				(comp(2, ccp, 0) && comp(4, ccp, 2) && comp(2, ccp, 6)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(4, ccp, 4)))
		{
			pat=83;
			if(comp(4, ccp, 0))
   41fc8:	00002d06 	br	42080 <detectPattern+0x74c>
				*key=ccp[0];
			else
				*key=ccp[4];
		}
		// 3x2+2 || 2+3x2
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6)) ||
   41fcc:	e13ffd17 	ldw	r4,-12(fp)
   41fd0:	014000c4 	movi	r5,3
   41fd4:	01800084 	movi	r6,2
   41fd8:	000f883a 	mov	r7,zero
   41fdc:	00438680 	call	43868 <seriesComp>
   41fe0:	10000526 	beq	r2,zero,41ff8 <detectPattern+0x6c4>
   41fe4:	01000084 	movi	r4,2
   41fe8:	e17ffd17 	ldw	r5,-12(fp)
   41fec:	01800184 	movi	r6,6
   41ff0:	004366c0 	call	4366c <comp>
   41ff4:	10000b1e 	bne	r2,zero,42024 <detectPattern+0x6f0>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2)))
   41ff8:	01000084 	movi	r4,2
   41ffc:	e17ffd17 	ldw	r5,-12(fp)
   42000:	000d883a 	mov	r6,zero
   42004:	004366c0 	call	4366c <comp>
				*key=ccp[0];
			else
				*key=ccp[4];
		}
		// 3x2+2 || 2+3x2
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6)) ||
   42008:	10000d26 	beq	r2,zero,42040 <detectPattern+0x70c>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2)))
   4200c:	e13ffd17 	ldw	r4,-12(fp)
   42010:	014000c4 	movi	r5,3
   42014:	01800084 	movi	r6,2
   42018:	01c00084 	movi	r7,2
   4201c:	00438680 	call	43868 <seriesComp>
   42020:	10000726 	beq	r2,zero,42040 <detectPattern+0x70c>
		{
			pat=84;
   42024:	00801504 	movi	r2,84
   42028:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[5];
   4202c:	e0bffd17 	ldw	r2,-12(fp)
   42030:	10c00143 	ldbu	r3,5(r2)
   42034:	e0bfff17 	ldw	r2,-4(fp)
   42038:	10c00005 	stb	r3,0(r2)
   4203c:	00001006 	br	42080 <detectPattern+0x74c>
		}
		// 3x2+1x2 || 1+3x2+1 || 1x2+3x2
		else if(seriesCompWithOnes(ccp, 3, 2, 2))
   42040:	e13ffd17 	ldw	r4,-12(fp)
   42044:	014000c4 	movi	r5,3
   42048:	01800084 	movi	r6,2
   4204c:	01c00084 	movi	r7,2
   42050:	00439b00 	call	439b0 <seriesCompWithOnes>
   42054:	10000726 	beq	r2,zero,42074 <detectPattern+0x740>
		{
			pat=85;
   42058:	00801544 	movi	r2,85
   4205c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[5];
   42060:	e0bffd17 	ldw	r2,-12(fp)
   42064:	10c00143 	ldbu	r3,5(r2)
   42068:	e0bfff17 	ldw	r2,-4(fp)
   4206c:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   42070:	00057806 	br	43654 <detectPattern+0x1d20>
		{
			pat=85;
			*key=ccp[5];
		}
		else
			pat=-1;
   42074:	00bfffc4 	movi	r2,-1
   42078:	e0bffc15 	stw	r2,-16(fp)
		break;
   4207c:	00057506 	br	43654 <detectPattern+0x1d20>
   42080:	00057406 	br	43654 <detectPattern+0x1d20>
	case 9:
		// 4x2+1 || 1+4x2
		if(seriesCompWithOnes(ccp, 4, 2, 1))
   42084:	e13ffd17 	ldw	r4,-12(fp)
   42088:	01400104 	movi	r5,4
   4208c:	01800084 	movi	r6,2
   42090:	01c00044 	movi	r7,1
   42094:	00439b00 	call	439b0 <seriesCompWithOnes>
   42098:	10000626 	beq	r2,zero,420b4 <detectPattern+0x780>
		{
			pat=91;
   4209c:	008016c4 	movi	r2,91
   420a0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[5];
   420a4:	e0bffd17 	ldw	r2,-12(fp)
   420a8:	10c00143 	ldbu	r3,5(r2)
   420ac:	e0bfff17 	ldw	r2,-4(fp)
   420b0:	10c00005 	stb	r3,0(r2)
		}
		// 3x3
		if(seriesComp(ccp, 3, 3, 0))
   420b4:	e13ffd17 	ldw	r4,-12(fp)
   420b8:	014000c4 	movi	r5,3
   420bc:	018000c4 	movi	r6,3
   420c0:	000f883a 	mov	r7,zero
   420c4:	00438680 	call	43868 <seriesComp>
   420c8:	10000726 	beq	r2,zero,420e8 <detectPattern+0x7b4>
		{
			pat=92;
   420cc:	00801704 	movi	r2,92
   420d0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[6];
   420d4:	e0bffd17 	ldw	r2,-12(fp)
   420d8:	10c00183 	ldbu	r3,6(r2)
   420dc:	e0bfff17 	ldw	r2,-4(fp)
   420e0:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   420e4:	00055b06 	br	43654 <detectPattern+0x1d20>
		{
			pat=92;
			*key=ccp[6];
		}
		else
			pat=-1;
   420e8:	00bfffc4 	movi	r2,-1
   420ec:	e0bffc15 	stw	r2,-16(fp)
		break;
   420f0:	00055806 	br	43654 <detectPattern+0x1d20>
	case 10:
		// 4x2+2 || 2+4x2
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8)) ||
   420f4:	e13ffd17 	ldw	r4,-12(fp)
   420f8:	01400104 	movi	r5,4
   420fc:	01800084 	movi	r6,2
   42100:	000f883a 	mov	r7,zero
   42104:	00438680 	call	43868 <seriesComp>
   42108:	10000526 	beq	r2,zero,42120 <detectPattern+0x7ec>
   4210c:	01000084 	movi	r4,2
   42110:	e17ffd17 	ldw	r5,-12(fp)
   42114:	01800204 	movi	r6,8
   42118:	004366c0 	call	4366c <comp>
   4211c:	10000b1e 	bne	r2,zero,4214c <detectPattern+0x818>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2)))
   42120:	01000084 	movi	r4,2
   42124:	e17ffd17 	ldw	r5,-12(fp)
   42128:	000d883a 	mov	r6,zero
   4212c:	004366c0 	call	4366c <comp>
		else
			pat=-1;
		break;
	case 10:
		// 4x2+2 || 2+4x2
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8)) ||
   42130:	10000d26 	beq	r2,zero,42168 <detectPattern+0x834>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2)))
   42134:	e13ffd17 	ldw	r4,-12(fp)
   42138:	01400104 	movi	r5,4
   4213c:	01800084 	movi	r6,2
   42140:	01c00084 	movi	r7,2
   42144:	00438680 	call	43868 <seriesComp>
   42148:	10000726 	beq	r2,zero,42168 <detectPattern+0x834>
		{
			pat=101;
   4214c:	00801944 	movi	r2,101
   42150:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[6];
   42154:	e0bffd17 	ldw	r2,-12(fp)
   42158:	10c00183 	ldbu	r3,6(r2)
   4215c:	e0bfff17 	ldw	r2,-4(fp)
   42160:	10c00005 	stb	r3,0(r2)
   42164:	00006b06 	br	42314 <detectPattern+0x9e0>
		}
		// 4x2+1x2 || 1+4x2+1 || 1x2+4x2
		else if(seriesCompWithOnes(ccp, 4, 2, 2))
   42168:	e13ffd17 	ldw	r4,-12(fp)
   4216c:	01400104 	movi	r5,4
   42170:	01800084 	movi	r6,2
   42174:	01c00084 	movi	r7,2
   42178:	00439b00 	call	439b0 <seriesCompWithOnes>
   4217c:	10000726 	beq	r2,zero,4219c <detectPattern+0x868>
		{
			pat=102;
   42180:	00801984 	movi	r2,102
   42184:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[6];
   42188:	e0bffd17 	ldw	r2,-12(fp)
   4218c:	10c00183 	ldbu	r3,6(r2)
   42190:	e0bfff17 	ldw	r2,-4(fp)
   42194:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[7];
		}
		else
			pat=-1;
		break;
   42198:	00052e06 	br	43654 <detectPattern+0x1d20>
		{
			pat=102;
			*key=ccp[6];
		}
		// 3x3+1 || 1+3x3
		else if(seriesCompWithOnes(ccp, 3, 3, 1))
   4219c:	e13ffd17 	ldw	r4,-12(fp)
   421a0:	014000c4 	movi	r5,3
   421a4:	018000c4 	movi	r6,3
   421a8:	01c00044 	movi	r7,1
   421ac:	00439b00 	call	439b0 <seriesCompWithOnes>
   421b0:	10000726 	beq	r2,zero,421d0 <detectPattern+0x89c>
		{
			pat=103;
   421b4:	008019c4 	movi	r2,103
   421b8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[7];
   421bc:	e0bffd17 	ldw	r2,-12(fp)
   421c0:	10c001c3 	ldbu	r3,7(r2)
   421c4:	e0bfff17 	ldw	r2,-4(fp)
   421c8:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[7];
		}
		else
			pat=-1;
		break;
   421cc:	00052106 	br	43654 <detectPattern+0x1d20>
		{
			pat=103;
			*key=ccp[7];
		}
		// 2x5
		else if(seriesComp(ccp, 2, 5, 0))
   421d0:	e13ffd17 	ldw	r4,-12(fp)
   421d4:	01400084 	movi	r5,2
   421d8:	01800144 	movi	r6,5
   421dc:	000f883a 	mov	r7,zero
   421e0:	00438680 	call	43868 <seriesComp>
   421e4:	10000726 	beq	r2,zero,42204 <detectPattern+0x8d0>
		{
			pat=104;
   421e8:	00801a04 	movi	r2,104
   421ec:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[8];
   421f0:	e0bffd17 	ldw	r2,-12(fp)
   421f4:	10c00203 	ldbu	r3,8(r2)
   421f8:	e0bfff17 	ldw	r2,-4(fp)
   421fc:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[7];
		}
		else
			pat=-1;
		break;
   42200:	00051406 	br	43654 <detectPattern+0x1d20>
		{
			pat=104;
			*key=ccp[8];
		}
		// 3x2+2x2 || 2+3x2+2 || 2x2+3x2
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6) && comp(2, ccp, 8)) ||
   42204:	e13ffd17 	ldw	r4,-12(fp)
   42208:	014000c4 	movi	r5,3
   4220c:	01800084 	movi	r6,2
   42210:	000f883a 	mov	r7,zero
   42214:	00438680 	call	43868 <seriesComp>
   42218:	10000a26 	beq	r2,zero,42244 <detectPattern+0x910>
   4221c:	01000084 	movi	r4,2
   42220:	e17ffd17 	ldw	r5,-12(fp)
   42224:	01800184 	movi	r6,6
   42228:	004366c0 	call	4366c <comp>
   4222c:	10000526 	beq	r2,zero,42244 <detectPattern+0x910>
   42230:	01000084 	movi	r4,2
   42234:	e17ffd17 	ldw	r5,-12(fp)
   42238:	01800204 	movi	r6,8
   4223c:	004366c0 	call	4366c <comp>
   42240:	1000201e 	bne	r2,zero,422c4 <detectPattern+0x990>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2) && comp(2, ccp, 8)) ||
   42244:	01000084 	movi	r4,2
   42248:	e17ffd17 	ldw	r5,-12(fp)
   4224c:	000d883a 	mov	r6,zero
   42250:	004366c0 	call	4366c <comp>
		{
			pat=104;
			*key=ccp[8];
		}
		// 3x2+2x2 || 2+3x2+2 || 2x2+3x2
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6) && comp(2, ccp, 8)) ||
   42254:	10000b26 	beq	r2,zero,42284 <detectPattern+0x950>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2) && comp(2, ccp, 8)) ||
   42258:	e13ffd17 	ldw	r4,-12(fp)
   4225c:	014000c4 	movi	r5,3
   42260:	01800084 	movi	r6,2
   42264:	01c00084 	movi	r7,2
   42268:	00438680 	call	43868 <seriesComp>
   4226c:	10000526 	beq	r2,zero,42284 <detectPattern+0x950>
   42270:	01000084 	movi	r4,2
   42274:	e17ffd17 	ldw	r5,-12(fp)
   42278:	01800204 	movi	r6,8
   4227c:	004366c0 	call	4366c <comp>
   42280:	1000101e 	bne	r2,zero,422c4 <detectPattern+0x990>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 2, 4)))
   42284:	01000084 	movi	r4,2
   42288:	e17ffd17 	ldw	r5,-12(fp)
   4228c:	000d883a 	mov	r6,zero
   42290:	004366c0 	call	4366c <comp>
			pat=104;
			*key=ccp[8];
		}
		// 3x2+2x2 || 2+3x2+2 || 2x2+3x2
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6) && comp(2, ccp, 8)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2) && comp(2, ccp, 8)) ||
   42294:	10001c26 	beq	r2,zero,42308 <detectPattern+0x9d4>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 2, 4)))
   42298:	01000084 	movi	r4,2
   4229c:	e17ffd17 	ldw	r5,-12(fp)
   422a0:	01800084 	movi	r6,2
   422a4:	004366c0 	call	4366c <comp>
   422a8:	10001726 	beq	r2,zero,42308 <detectPattern+0x9d4>
   422ac:	e13ffd17 	ldw	r4,-12(fp)
   422b0:	014000c4 	movi	r5,3
   422b4:	01800084 	movi	r6,2
   422b8:	01c00104 	movi	r7,4
   422bc:	00438680 	call	43868 <seriesComp>
   422c0:	10001126 	beq	r2,zero,42308 <detectPattern+0x9d4>
		{
			pat=105;
   422c4:	00801a44 	movi	r2,105
   422c8:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0))
   422cc:	010000c4 	movi	r4,3
   422d0:	e17ffd17 	ldw	r5,-12(fp)
   422d4:	000d883a 	mov	r6,zero
   422d8:	004366c0 	call	4366c <comp>
   422dc:	10000526 	beq	r2,zero,422f4 <detectPattern+0x9c0>
				*key=ccp[3];
   422e0:	e0bffd17 	ldw	r2,-12(fp)
   422e4:	10c000c3 	ldbu	r3,3(r2)
   422e8:	e0bfff17 	ldw	r2,-4(fp)
   422ec:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6) && comp(2, ccp, 8)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2) && comp(2, ccp, 8)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 2, 4)))
		{
			pat=105;
			if(comp(3, ccp, 0))
   422f0:	00000806 	br	42314 <detectPattern+0x9e0>
				*key=ccp[3];
			else
				*key=ccp[7];
   422f4:	e0bffd17 	ldw	r2,-12(fp)
   422f8:	10c001c3 	ldbu	r3,7(r2)
   422fc:	e0bfff17 	ldw	r2,-4(fp)
   42300:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 3, 2, 0) && comp(2, ccp, 6) && comp(2, ccp, 8)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 2, 2) && comp(2, ccp, 8)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 2, 4)))
		{
			pat=105;
			if(comp(3, ccp, 0))
   42304:	00000306 	br	42314 <detectPattern+0x9e0>
				*key=ccp[3];
			else
				*key=ccp[7];
		}
		else
			pat=-1;
   42308:	00bfffc4 	movi	r2,-1
   4230c:	e0bffc15 	stw	r2,-16(fp)
		break;
   42310:	0004d006 	br	43654 <detectPattern+0x1d20>
   42314:	0004cf06 	br	43654 <detectPattern+0x1d20>
	case 11:
		// 3x3+2 || 2+3x3
		if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9))||
   42318:	e13ffd17 	ldw	r4,-12(fp)
   4231c:	014000c4 	movi	r5,3
   42320:	018000c4 	movi	r6,3
   42324:	000f883a 	mov	r7,zero
   42328:	00438680 	call	43868 <seriesComp>
   4232c:	10000526 	beq	r2,zero,42344 <detectPattern+0xa10>
   42330:	01000084 	movi	r4,2
   42334:	e17ffd17 	ldw	r5,-12(fp)
   42338:	01800244 	movi	r6,9
   4233c:	004366c0 	call	4366c <comp>
   42340:	10000b1e 	bne	r2,zero,42370 <detectPattern+0xa3c>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2)))
   42344:	01000084 	movi	r4,2
   42348:	e17ffd17 	ldw	r5,-12(fp)
   4234c:	000d883a 	mov	r6,zero
   42350:	004366c0 	call	4366c <comp>
		else
			pat=-1;
		break;
	case 11:
		// 3x3+2 || 2+3x3
		if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9))||
   42354:	10000d26 	beq	r2,zero,4238c <detectPattern+0xa58>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2)))
   42358:	e13ffd17 	ldw	r4,-12(fp)
   4235c:	014000c4 	movi	r5,3
   42360:	018000c4 	movi	r6,3
   42364:	01c00084 	movi	r7,2
   42368:	00438680 	call	43868 <seriesComp>
   4236c:	10000726 	beq	r2,zero,4238c <detectPattern+0xa58>
		{
			pat=111;
   42370:	00801bc4 	movi	r2,111
   42374:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[8];
   42378:	e0bffd17 	ldw	r2,-12(fp)
   4237c:	10c00203 	ldbu	r3,8(r2)
   42380:	e0bfff17 	ldw	r2,-4(fp)
   42384:	10c00005 	stb	r3,0(r2)
			pat=112;
			*key=ccp[8];
		}
		else
			pat=-1;
		break;
   42388:	0004b206 	br	43654 <detectPattern+0x1d20>
		{
			pat=111;
			*key=ccp[8];
		}
		// 3x3+1x2 || 1+3x3+1 || 1x2+3x3
		else if(seriesCompWithOnes(ccp, 3, 3, 2))
   4238c:	e13ffd17 	ldw	r4,-12(fp)
   42390:	014000c4 	movi	r5,3
   42394:	018000c4 	movi	r6,3
   42398:	01c00084 	movi	r7,2
   4239c:	00439b00 	call	439b0 <seriesCompWithOnes>
   423a0:	10000726 	beq	r2,zero,423c0 <detectPattern+0xa8c>
		{
			pat=112;
   423a4:	00801c04 	movi	r2,112
   423a8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[8];
   423ac:	e0bffd17 	ldw	r2,-12(fp)
   423b0:	10c00203 	ldbu	r3,8(r2)
   423b4:	e0bfff17 	ldw	r2,-4(fp)
   423b8:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   423bc:	0004a506 	br	43654 <detectPattern+0x1d20>
		{
			pat=112;
			*key=ccp[8];
		}
		else
			pat=-1;
   423c0:	00bfffc4 	movi	r2,-1
   423c4:	e0bffc15 	stw	r2,-16(fp)
		break;
   423c8:	0004a206 	br	43654 <detectPattern+0x1d20>
	case 12:
		// 2x6
		if(seriesComp(ccp, 2, 6, 0)){
   423cc:	e13ffd17 	ldw	r4,-12(fp)
   423d0:	01400084 	movi	r5,2
   423d4:	01800184 	movi	r6,6
   423d8:	000f883a 	mov	r7,zero
   423dc:	00438680 	call	43868 <seriesComp>
   423e0:	10000626 	beq	r2,zero,423fc <detectPattern+0xac8>
			pat=121;
   423e4:	00801e44 	movi	r2,121
   423e8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[10];
   423ec:	e0bffd17 	ldw	r2,-12(fp)
   423f0:	10c00283 	ldbu	r3,10(r2)
   423f4:	e0bfff17 	ldw	r2,-4(fp)
   423f8:	10c00005 	stb	r3,0(r2)
		}
		// 3x4
		if(seriesComp(ccp, 3, 4, 0)){
   423fc:	e13ffd17 	ldw	r4,-12(fp)
   42400:	014000c4 	movi	r5,3
   42404:	01800104 	movi	r6,4
   42408:	000f883a 	mov	r7,zero
   4240c:	00438680 	call	43868 <seriesComp>
   42410:	10000626 	beq	r2,zero,4242c <detectPattern+0xaf8>
			pat=122;
   42414:	00801e84 	movi	r2,122
   42418:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[9];
   4241c:	e0bffd17 	ldw	r2,-12(fp)
   42420:	10c00243 	ldbu	r3,9(r2)
   42424:	e0bfff17 	ldw	r2,-4(fp)
   42428:	10c00005 	stb	r3,0(r2)
		}
		// 4x3
		if(seriesComp(ccp, 4, 3, 0)){
   4242c:	e13ffd17 	ldw	r4,-12(fp)
   42430:	01400104 	movi	r5,4
   42434:	018000c4 	movi	r6,3
   42438:	000f883a 	mov	r7,zero
   4243c:	00438680 	call	43868 <seriesComp>
   42440:	10000626 	beq	r2,zero,4245c <detectPattern+0xb28>
			pat=123;
   42444:	00801ec4 	movi	r2,123
   42448:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[8];
   4244c:	e0bffd17 	ldw	r2,-12(fp)
   42450:	10c00203 	ldbu	r3,8(r2)
   42454:	e0bfff17 	ldw	r2,-4(fp)
   42458:	10c00005 	stb	r3,0(r2)
		}
		// 4x2+2x2 || 2+4x2+2 || 2x2+4x2
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8) && comp(2, ccp, 10)) ||
   4245c:	e13ffd17 	ldw	r4,-12(fp)
   42460:	01400104 	movi	r5,4
   42464:	01800084 	movi	r6,2
   42468:	000f883a 	mov	r7,zero
   4246c:	00438680 	call	43868 <seriesComp>
   42470:	10000a26 	beq	r2,zero,4249c <detectPattern+0xb68>
   42474:	01000084 	movi	r4,2
   42478:	e17ffd17 	ldw	r5,-12(fp)
   4247c:	01800204 	movi	r6,8
   42480:	004366c0 	call	4366c <comp>
   42484:	10000526 	beq	r2,zero,4249c <detectPattern+0xb68>
   42488:	01000084 	movi	r4,2
   4248c:	e17ffd17 	ldw	r5,-12(fp)
   42490:	01800284 	movi	r6,10
   42494:	004366c0 	call	4366c <comp>
   42498:	1000201e 	bne	r2,zero,4251c <detectPattern+0xbe8>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2) && comp(2, ccp, 10))||
   4249c:	01000084 	movi	r4,2
   424a0:	e17ffd17 	ldw	r5,-12(fp)
   424a4:	000d883a 	mov	r6,zero
   424a8:	004366c0 	call	4366c <comp>
		if(seriesComp(ccp, 4, 3, 0)){
			pat=123;
			*key=ccp[8];
		}
		// 4x2+2x2 || 2+4x2+2 || 2x2+4x2
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8) && comp(2, ccp, 10)) ||
   424ac:	10000b26 	beq	r2,zero,424dc <detectPattern+0xba8>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2) && comp(2, ccp, 10))||
   424b0:	e13ffd17 	ldw	r4,-12(fp)
   424b4:	01400104 	movi	r5,4
   424b8:	01800084 	movi	r6,2
   424bc:	01c00084 	movi	r7,2
   424c0:	00438680 	call	43868 <seriesComp>
   424c4:	10000526 	beq	r2,zero,424dc <detectPattern+0xba8>
   424c8:	01000084 	movi	r4,2
   424cc:	e17ffd17 	ldw	r5,-12(fp)
   424d0:	01800284 	movi	r6,10
   424d4:	004366c0 	call	4366c <comp>
   424d8:	1000101e 	bne	r2,zero,4251c <detectPattern+0xbe8>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 2, 4)))
   424dc:	01000084 	movi	r4,2
   424e0:	e17ffd17 	ldw	r5,-12(fp)
   424e4:	000d883a 	mov	r6,zero
   424e8:	004366c0 	call	4366c <comp>
			pat=123;
			*key=ccp[8];
		}
		// 4x2+2x2 || 2+4x2+2 || 2x2+4x2
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8) && comp(2, ccp, 10)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2) && comp(2, ccp, 10))||
   424ec:	10001c26 	beq	r2,zero,42560 <detectPattern+0xc2c>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 2, 4)))
   424f0:	01000084 	movi	r4,2
   424f4:	e17ffd17 	ldw	r5,-12(fp)
   424f8:	01800084 	movi	r6,2
   424fc:	004366c0 	call	4366c <comp>
   42500:	10001726 	beq	r2,zero,42560 <detectPattern+0xc2c>
   42504:	e13ffd17 	ldw	r4,-12(fp)
   42508:	01400104 	movi	r5,4
   4250c:	01800084 	movi	r6,2
   42510:	01c00104 	movi	r7,4
   42514:	00438680 	call	43868 <seriesComp>
   42518:	10001126 	beq	r2,zero,42560 <detectPattern+0xc2c>
		{
			pat=124;
   4251c:	00801f04 	movi	r2,124
   42520:	e0bffc15 	stw	r2,-16(fp)
			if(comp(4, ccp, 0))
   42524:	01000104 	movi	r4,4
   42528:	e17ffd17 	ldw	r5,-12(fp)
   4252c:	000d883a 	mov	r6,zero
   42530:	004366c0 	call	4366c <comp>
   42534:	10000526 	beq	r2,zero,4254c <detectPattern+0xc18>
				*key=ccp[4];
   42538:	e0bffd17 	ldw	r2,-12(fp)
   4253c:	10c00103 	ldbu	r3,4(r2)
   42540:	e0bfff17 	ldw	r2,-4(fp)
   42544:	10c00005 	stb	r3,0(r2)
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8) && comp(2, ccp, 10)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2) && comp(2, ccp, 10))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 2, 4)))
		{
			pat=124;
			if(comp(4, ccp, 0))
   42548:	00001f06 	br	425c8 <detectPattern+0xc94>
				*key=ccp[4];
			else
				*key=ccp[8];
   4254c:	e0bffd17 	ldw	r2,-12(fp)
   42550:	10c00203 	ldbu	r3,8(r2)
   42554:	e0bfff17 	ldw	r2,-4(fp)
   42558:	10c00005 	stb	r3,0(r2)
		if((seriesComp(ccp, 4, 2, 0) && comp(2, ccp, 8) && comp(2, ccp, 10)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 2, 2) && comp(2, ccp, 10))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 2, 4)))
		{
			pat=124;
			if(comp(4, ccp, 0))
   4255c:	00001a06 	br	425c8 <detectPattern+0xc94>
				*key=ccp[4];
			else
				*key=ccp[8];
		}
		// 3x3+1x3
		else if(seriesCompWithOnes(ccp, 3, 3, 3)){
   42560:	e13ffd17 	ldw	r4,-12(fp)
   42564:	014000c4 	movi	r5,3
   42568:	018000c4 	movi	r6,3
   4256c:	01c000c4 	movi	r7,3
   42570:	00439b00 	call	439b0 <seriesCompWithOnes>
   42574:	10001126 	beq	r2,zero,425bc <detectPattern+0xc88>
			pat=125;
   42578:	00801f44 	movi	r2,125
   4257c:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0))
   42580:	010000c4 	movi	r4,3
   42584:	e17ffd17 	ldw	r5,-12(fp)
   42588:	000d883a 	mov	r6,zero
   4258c:	004366c0 	call	4366c <comp>
   42590:	10000526 	beq	r2,zero,425a8 <detectPattern+0xc74>
				*key=ccp[6];
   42594:	e0bffd17 	ldw	r2,-12(fp)
   42598:	10c00183 	ldbu	r3,6(r2)
   4259c:	e0bfff17 	ldw	r2,-4(fp)
   425a0:	10c00005 	stb	r3,0(r2)
				*key=ccp[9];

		}
		else
			pat=-1;
		break;
   425a4:	00042b06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 3, 3)){
			pat=125;
			if(comp(3, ccp, 0))
				*key=ccp[6];
			else
				*key=ccp[9];
   425a8:	e0bffd17 	ldw	r2,-12(fp)
   425ac:	10c00243 	ldbu	r3,9(r2)
   425b0:	e0bfff17 	ldw	r2,-4(fp)
   425b4:	10c00005 	stb	r3,0(r2)

		}
		else
			pat=-1;
		break;
   425b8:	00042606 	br	43654 <detectPattern+0x1d20>
			else
				*key=ccp[9];

		}
		else
			pat=-1;
   425bc:	00bfffc4 	movi	r2,-1
   425c0:	e0bffc15 	stw	r2,-16(fp)
		break;
   425c4:	00042306 	br	43654 <detectPattern+0x1d20>
   425c8:	00042206 	br	43654 <detectPattern+0x1d20>
	case 13:
		// 3x4+1
		if(seriesCompWithOnes(ccp, 3, 4, 1)){
   425cc:	e13ffd17 	ldw	r4,-12(fp)
   425d0:	014000c4 	movi	r5,3
   425d4:	01800104 	movi	r6,4
   425d8:	01c00044 	movi	r7,1
   425dc:	00439b00 	call	439b0 <seriesCompWithOnes>
   425e0:	10000726 	beq	r2,zero,42600 <detectPattern+0xccc>
			pat=131;
   425e4:	008020c4 	movi	r2,131
   425e8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[10];
   425ec:	e0bffd17 	ldw	r2,-12(fp)
   425f0:	10c00283 	ldbu	r3,10(r2)
   425f4:	e0bfff17 	ldw	r2,-4(fp)
   425f8:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[10];
		}
		else
			pat=-1;
		break;
   425fc:	00041506 	br	43654 <detectPattern+0x1d20>
		if(seriesCompWithOnes(ccp, 3, 4, 1)){
			pat=131;
			*key=ccp[10];
		}
		// 4x3+1
		else if(seriesCompWithOnes(ccp, 4, 3, 1)){
   42600:	e13ffd17 	ldw	r4,-12(fp)
   42604:	01400104 	movi	r5,4
   42608:	018000c4 	movi	r6,3
   4260c:	01c00044 	movi	r7,1
   42610:	00439b00 	call	439b0 <seriesCompWithOnes>
   42614:	10000726 	beq	r2,zero,42634 <detectPattern+0xd00>
			pat=132;
   42618:	00802104 	movi	r2,132
   4261c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[9];
   42620:	e0bffd17 	ldw	r2,-12(fp)
   42624:	10c00243 	ldbu	r3,9(r2)
   42628:	e0bfff17 	ldw	r2,-4(fp)
   4262c:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[10];
		}
		else
			pat=-1;
		break;
   42630:	00040806 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 3, 1)){
			pat=132;
			*key=ccp[9];
		}
		// 3x3+2x2
		else if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9) && comp(2, ccp, 11)) ||
   42634:	e13ffd17 	ldw	r4,-12(fp)
   42638:	014000c4 	movi	r5,3
   4263c:	018000c4 	movi	r6,3
   42640:	000f883a 	mov	r7,zero
   42644:	00438680 	call	43868 <seriesComp>
   42648:	10000a26 	beq	r2,zero,42674 <detectPattern+0xd40>
   4264c:	01000084 	movi	r4,2
   42650:	e17ffd17 	ldw	r5,-12(fp)
   42654:	01800244 	movi	r6,9
   42658:	004366c0 	call	4366c <comp>
   4265c:	10000526 	beq	r2,zero,42674 <detectPattern+0xd40>
   42660:	01000084 	movi	r4,2
   42664:	e17ffd17 	ldw	r5,-12(fp)
   42668:	018002c4 	movi	r6,11
   4266c:	004366c0 	call	4366c <comp>
   42670:	1000201e 	bne	r2,zero,426f4 <detectPattern+0xdc0>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2) && comp(2, ccp, 11))||
   42674:	01000084 	movi	r4,2
   42678:	e17ffd17 	ldw	r5,-12(fp)
   4267c:	000d883a 	mov	r6,zero
   42680:	004366c0 	call	4366c <comp>
		else if(seriesCompWithOnes(ccp, 4, 3, 1)){
			pat=132;
			*key=ccp[9];
		}
		// 3x3+2x2
		else if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9) && comp(2, ccp, 11)) ||
   42684:	10000b26 	beq	r2,zero,426b4 <detectPattern+0xd80>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2) && comp(2, ccp, 11))||
   42688:	e13ffd17 	ldw	r4,-12(fp)
   4268c:	014000c4 	movi	r5,3
   42690:	018000c4 	movi	r6,3
   42694:	01c00084 	movi	r7,2
   42698:	00438680 	call	43868 <seriesComp>
   4269c:	10000526 	beq	r2,zero,426b4 <detectPattern+0xd80>
   426a0:	01000084 	movi	r4,2
   426a4:	e17ffd17 	ldw	r5,-12(fp)
   426a8:	018002c4 	movi	r6,11
   426ac:	004366c0 	call	4366c <comp>
   426b0:	1000101e 	bne	r2,zero,426f4 <detectPattern+0xdc0>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 3, 4)))
   426b4:	01000084 	movi	r4,2
   426b8:	e17ffd17 	ldw	r5,-12(fp)
   426bc:	000d883a 	mov	r6,zero
   426c0:	004366c0 	call	4366c <comp>
			pat=132;
			*key=ccp[9];
		}
		// 3x3+2x2
		else if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9) && comp(2, ccp, 11)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2) && comp(2, ccp, 11))||
   426c4:	10001c26 	beq	r2,zero,42738 <detectPattern+0xe04>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 3, 4)))
   426c8:	01000084 	movi	r4,2
   426cc:	e17ffd17 	ldw	r5,-12(fp)
   426d0:	01800084 	movi	r6,2
   426d4:	004366c0 	call	4366c <comp>
   426d8:	10001726 	beq	r2,zero,42738 <detectPattern+0xe04>
   426dc:	e13ffd17 	ldw	r4,-12(fp)
   426e0:	014000c4 	movi	r5,3
   426e4:	018000c4 	movi	r6,3
   426e8:	01c00104 	movi	r7,4
   426ec:	00438680 	call	43868 <seriesComp>
   426f0:	10001126 	beq	r2,zero,42738 <detectPattern+0xe04>
		{
			pat=133;
   426f4:	00802144 	movi	r2,133
   426f8:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0))
   426fc:	010000c4 	movi	r4,3
   42700:	e17ffd17 	ldw	r5,-12(fp)
   42704:	000d883a 	mov	r6,zero
   42708:	004366c0 	call	4366c <comp>
   4270c:	10000526 	beq	r2,zero,42724 <detectPattern+0xdf0>
				*key=ccp[6];
   42710:	e0bffd17 	ldw	r2,-12(fp)
   42714:	10c00183 	ldbu	r3,6(r2)
   42718:	e0bfff17 	ldw	r2,-4(fp)
   4271c:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9) && comp(2, ccp, 11)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2) && comp(2, ccp, 11))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 3, 4)))
		{
			pat=133;
			if(comp(3, ccp, 0))
   42720:	00000806 	br	42744 <detectPattern+0xe10>
				*key=ccp[6];
			else
				*key=ccp[10];
   42724:	e0bffd17 	ldw	r2,-12(fp)
   42728:	10c00283 	ldbu	r3,10(r2)
   4272c:	e0bfff17 	ldw	r2,-4(fp)
   42730:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 3, 3, 0) && comp(2, ccp, 9) && comp(2, ccp, 11)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 3, 2) && comp(2, ccp, 11))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 3, 4)))
		{
			pat=133;
			if(comp(3, ccp, 0))
   42734:	00000306 	br	42744 <detectPattern+0xe10>
				*key=ccp[6];
			else
				*key=ccp[10];
		}
		else
			pat=-1;
   42738:	00bfffc4 	movi	r2,-1
   4273c:	e0bffc15 	stw	r2,-16(fp)
		break;
   42740:	0003c406 	br	43654 <detectPattern+0x1d20>
   42744:	0003c306 	br	43654 <detectPattern+0x1d20>
	case 14:
		// 2x7
		if(seriesComp(ccp, 2, 7, 0)){
   42748:	e13ffd17 	ldw	r4,-12(fp)
   4274c:	01400084 	movi	r5,2
   42750:	018001c4 	movi	r6,7
   42754:	000f883a 	mov	r7,zero
   42758:	00438680 	call	43868 <seriesComp>
   4275c:	10000726 	beq	r2,zero,4277c <detectPattern+0xe48>
			pat=141;
   42760:	00802344 	movi	r2,141
   42764:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[12];
   42768:	e0bffd17 	ldw	r2,-12(fp)
   4276c:	10c00303 	ldbu	r3,12(r2)
   42770:	e0bfff17 	ldw	r2,-4(fp)
   42774:	10c00005 	stb	r3,0(r2)
			pat=145;
			*key=ccp[10];
		}
		else
			pat=-1;
		break;
   42778:	0003b606 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 2, 7, 0)){
			pat=141;
			*key=ccp[12];
		}
		// 3x4+2
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12)) ||
   4277c:	e13ffd17 	ldw	r4,-12(fp)
   42780:	014000c4 	movi	r5,3
   42784:	01800104 	movi	r6,4
   42788:	000f883a 	mov	r7,zero
   4278c:	00438680 	call	43868 <seriesComp>
   42790:	10000526 	beq	r2,zero,427a8 <detectPattern+0xe74>
   42794:	01000084 	movi	r4,2
   42798:	e17ffd17 	ldw	r5,-12(fp)
   4279c:	01800304 	movi	r6,12
   427a0:	004366c0 	call	4366c <comp>
   427a4:	10000b1e 	bne	r2,zero,427d4 <detectPattern+0xea0>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2)))
   427a8:	01000084 	movi	r4,2
   427ac:	e17ffd17 	ldw	r5,-12(fp)
   427b0:	000d883a 	mov	r6,zero
   427b4:	004366c0 	call	4366c <comp>
		if(seriesComp(ccp, 2, 7, 0)){
			pat=141;
			*key=ccp[12];
		}
		// 3x4+2
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12)) ||
   427b8:	10000d26 	beq	r2,zero,427f0 <detectPattern+0xebc>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2)))
   427bc:	e13ffd17 	ldw	r4,-12(fp)
   427c0:	014000c4 	movi	r5,3
   427c4:	01800104 	movi	r6,4
   427c8:	01c00084 	movi	r7,2
   427cc:	00438680 	call	43868 <seriesComp>
   427d0:	10000726 	beq	r2,zero,427f0 <detectPattern+0xebc>
		{
			pat=142;
   427d4:	00802384 	movi	r2,142
   427d8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[11];
   427dc:	e0bffd17 	ldw	r2,-12(fp)
   427e0:	10c002c3 	ldbu	r3,11(r2)
   427e4:	e0bfff17 	ldw	r2,-4(fp)
   427e8:	10c00005 	stb	r3,0(r2)
   427ec:	00003a06 	br	428d8 <detectPattern+0xfa4>
		}
		// 3x4+1x2
		else if(seriesCompWithOnes(ccp, 3, 4, 2)){
   427f0:	e13ffd17 	ldw	r4,-12(fp)
   427f4:	014000c4 	movi	r5,3
   427f8:	01800104 	movi	r6,4
   427fc:	01c00084 	movi	r7,2
   42800:	00439b00 	call	439b0 <seriesCompWithOnes>
   42804:	10000726 	beq	r2,zero,42824 <detectPattern+0xef0>
			pat=143;
   42808:	008023c4 	movi	r2,143
   4280c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[11];
   42810:	e0bffd17 	ldw	r2,-12(fp)
   42814:	10c002c3 	ldbu	r3,11(r2)
   42818:	e0bfff17 	ldw	r2,-4(fp)
   4281c:	10c00005 	stb	r3,0(r2)
			pat=145;
			*key=ccp[10];
		}
		else
			pat=-1;
		break;
   42820:	00038c06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 4, 2)){
			pat=143;
			*key=ccp[11];
		}
		// 4x3+2
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12)) ||
   42824:	e13ffd17 	ldw	r4,-12(fp)
   42828:	01400104 	movi	r5,4
   4282c:	018000c4 	movi	r6,3
   42830:	000f883a 	mov	r7,zero
   42834:	00438680 	call	43868 <seriesComp>
   42838:	10000526 	beq	r2,zero,42850 <detectPattern+0xf1c>
   4283c:	01000084 	movi	r4,2
   42840:	e17ffd17 	ldw	r5,-12(fp)
   42844:	01800304 	movi	r6,12
   42848:	004366c0 	call	4366c <comp>
   4284c:	10000b1e 	bne	r2,zero,4287c <detectPattern+0xf48>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2))){
   42850:	01000084 	movi	r4,2
   42854:	e17ffd17 	ldw	r5,-12(fp)
   42858:	000d883a 	mov	r6,zero
   4285c:	004366c0 	call	4366c <comp>
		else if(seriesCompWithOnes(ccp, 3, 4, 2)){
			pat=143;
			*key=ccp[11];
		}
		// 4x3+2
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12)) ||
   42860:	10000d26 	beq	r2,zero,42898 <detectPattern+0xf64>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2))){
   42864:	e13ffd17 	ldw	r4,-12(fp)
   42868:	01400104 	movi	r5,4
   4286c:	018000c4 	movi	r6,3
   42870:	01c00084 	movi	r7,2
   42874:	00438680 	call	43868 <seriesComp>
   42878:	10000726 	beq	r2,zero,42898 <detectPattern+0xf64>
			pat=144;
   4287c:	00802404 	movi	r2,144
   42880:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[10];
   42884:	e0bffd17 	ldw	r2,-12(fp)
   42888:	10c00283 	ldbu	r3,10(r2)
   4288c:	e0bfff17 	ldw	r2,-4(fp)
   42890:	10c00005 	stb	r3,0(r2)
   42894:	00001006 	br	428d8 <detectPattern+0xfa4>
		}
		// 4x3+1x2
		else if(seriesCompWithOnes(ccp, 4, 3, 2)){
   42898:	e13ffd17 	ldw	r4,-12(fp)
   4289c:	01400104 	movi	r5,4
   428a0:	018000c4 	movi	r6,3
   428a4:	01c00084 	movi	r7,2
   428a8:	00439b00 	call	439b0 <seriesCompWithOnes>
   428ac:	10000726 	beq	r2,zero,428cc <detectPattern+0xf98>
			pat=145;
   428b0:	00802444 	movi	r2,145
   428b4:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[10];
   428b8:	e0bffd17 	ldw	r2,-12(fp)
   428bc:	10c00283 	ldbu	r3,10(r2)
   428c0:	e0bfff17 	ldw	r2,-4(fp)
   428c4:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   428c8:	00036206 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 3, 2)){
			pat=145;
			*key=ccp[10];
		}
		else
			pat=-1;
   428cc:	00bfffc4 	movi	r2,-1
   428d0:	e0bffc15 	stw	r2,-16(fp)
		break;
   428d4:	00035f06 	br	43654 <detectPattern+0x1d20>
   428d8:	00035e06 	br	43654 <detectPattern+0x1d20>
	case 15:
		// 3x5
		if(seriesComp(ccp, 3, 5, 0)){
   428dc:	e13ffd17 	ldw	r4,-12(fp)
   428e0:	014000c4 	movi	r5,3
   428e4:	01800144 	movi	r6,5
   428e8:	000f883a 	mov	r7,zero
   428ec:	00438680 	call	43868 <seriesComp>
   428f0:	10000726 	beq	r2,zero,42910 <detectPattern+0xfdc>
			pat=151;
   428f4:	008025c4 	movi	r2,151
   428f8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[12];
   428fc:	e0bffd17 	ldw	r2,-12(fp)
   42900:	10c00303 	ldbu	r3,12(r2)
   42904:	e0bfff17 	ldw	r2,-4(fp)
   42908:	10c00005 	stb	r3,0(r2)
			pat=153;
			*key=ccp[11];
		}
		else
			pat=-1;
		break;
   4290c:	00035106 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 3, 5, 0)){
			pat=151;
			*key=ccp[12];
		}
		// 3x4+1x3
		else if(seriesCompWithOnes(ccp, 3, 4, 3)){
   42910:	e13ffd17 	ldw	r4,-12(fp)
   42914:	014000c4 	movi	r5,3
   42918:	01800104 	movi	r6,4
   4291c:	01c000c4 	movi	r7,3
   42920:	00439b00 	call	439b0 <seriesCompWithOnes>
   42924:	10001126 	beq	r2,zero,4296c <detectPattern+0x1038>
			pat=152;
   42928:	00802604 	movi	r2,152
   4292c:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0))
   42930:	010000c4 	movi	r4,3
   42934:	e17ffd17 	ldw	r5,-12(fp)
   42938:	000d883a 	mov	r6,zero
   4293c:	004366c0 	call	4366c <comp>
   42940:	10000526 	beq	r2,zero,42958 <detectPattern+0x1024>
				*key=ccp[9];
   42944:	e0bffd17 	ldw	r2,-12(fp)
   42948:	10c00243 	ldbu	r3,9(r2)
   4294c:	e0bfff17 	ldw	r2,-4(fp)
   42950:	10c00005 	stb	r3,0(r2)
			pat=153;
			*key=ccp[11];
		}
		else
			pat=-1;
		break;
   42954:	00033f06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 4, 3)){
			pat=152;
			if(comp(3, ccp, 0))
				*key=ccp[9];
			else
				*key=ccp[12];
   42958:	e0bffd17 	ldw	r2,-12(fp)
   4295c:	10c00303 	ldbu	r3,12(r2)
   42960:	e0bfff17 	ldw	r2,-4(fp)
   42964:	10c00005 	stb	r3,0(r2)
			pat=153;
			*key=ccp[11];
		}
		else
			pat=-1;
		break;
   42968:	00033a06 	br	43654 <detectPattern+0x1d20>
				*key=ccp[9];
			else
				*key=ccp[12];
		}
		// 4x3+1x3
		else if(seriesCompWithOnes(ccp, 4, 3, 3)){
   4296c:	e13ffd17 	ldw	r4,-12(fp)
   42970:	01400104 	movi	r5,4
   42974:	018000c4 	movi	r6,3
   42978:	01c000c4 	movi	r7,3
   4297c:	00439b00 	call	439b0 <seriesCompWithOnes>
   42980:	10000726 	beq	r2,zero,429a0 <detectPattern+0x106c>
			pat=153;
   42984:	00802644 	movi	r2,153
   42988:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[11];
   4298c:	e0bffd17 	ldw	r2,-12(fp)
   42990:	10c002c3 	ldbu	r3,11(r2)
   42994:	e0bfff17 	ldw	r2,-4(fp)
   42998:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   4299c:	00032d06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 3, 3)){
			pat=153;
			*key=ccp[11];
		}
		else
			pat=-1;
   429a0:	00bfffc4 	movi	r2,-1
   429a4:	e0bffc15 	stw	r2,-16(fp)
		break;
   429a8:	00032a06 	br	43654 <detectPattern+0x1d20>
	case 16:
		// 4x4
		if(seriesComp(ccp, 4, 4, 0)){
   429ac:	e13ffd17 	ldw	r4,-12(fp)
   429b0:	01400104 	movi	r5,4
   429b4:	01800104 	movi	r6,4
   429b8:	000f883a 	mov	r7,zero
   429bc:	00438680 	call	43868 <seriesComp>
   429c0:	10000726 	beq	r2,zero,429e0 <detectPattern+0x10ac>
			pat=161;
   429c4:	00802844 	movi	r2,161
   429c8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[13];
   429cc:	e0bffd17 	ldw	r2,-12(fp)
   429d0:	10c00343 	ldbu	r3,13(r2)
   429d4:	e0bfff17 	ldw	r2,-4(fp)
   429d8:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[13];
		}
		else
			pat=-1;
		break;
   429dc:	00031d06 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 4, 4, 0)){
			pat=161;
			*key=ccp[13];
		}
		// 2x8
		else if(seriesComp(ccp, 2, 8, 0)){
   429e0:	e13ffd17 	ldw	r4,-12(fp)
   429e4:	01400084 	movi	r5,2
   429e8:	01800204 	movi	r6,8
   429ec:	000f883a 	mov	r7,zero
   429f0:	00438680 	call	43868 <seriesComp>
   429f4:	10000726 	beq	r2,zero,42a14 <detectPattern+0x10e0>
			pat=162;
   429f8:	00802884 	movi	r2,162
   429fc:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[14];
   42a00:	e0bffd17 	ldw	r2,-12(fp)
   42a04:	10c00383 	ldbu	r3,14(r2)
   42a08:	e0bfff17 	ldw	r2,-4(fp)
   42a0c:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[13];
		}
		else
			pat=-1;
		break;
   42a10:	00031006 	br	43654 <detectPattern+0x1d20>
		else if(seriesComp(ccp, 2, 8, 0)){
			pat=162;
			*key=ccp[14];
		}
		// 3x5+1
		else if(seriesCompWithOnes(ccp, 3, 5, 1)){
   42a14:	e13ffd17 	ldw	r4,-12(fp)
   42a18:	014000c4 	movi	r5,3
   42a1c:	01800144 	movi	r6,5
   42a20:	01c00044 	movi	r7,1
   42a24:	00439b00 	call	439b0 <seriesCompWithOnes>
   42a28:	10000726 	beq	r2,zero,42a48 <detectPattern+0x1114>
			pat=163;
   42a2c:	008028c4 	movi	r2,163
   42a30:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[13];
   42a34:	e0bffd17 	ldw	r2,-12(fp)
   42a38:	10c00343 	ldbu	r3,13(r2)
   42a3c:	e0bfff17 	ldw	r2,-4(fp)
   42a40:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[13];
		}
		else
			pat=-1;
		break;
   42a44:	00030306 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 5, 1)){
			pat=163;
			*key=ccp[13];
		}
		// 4x3+2x2
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12) && comp(2, ccp, 14)) ||
   42a48:	e13ffd17 	ldw	r4,-12(fp)
   42a4c:	01400104 	movi	r5,4
   42a50:	018000c4 	movi	r6,3
   42a54:	000f883a 	mov	r7,zero
   42a58:	00438680 	call	43868 <seriesComp>
   42a5c:	10000a26 	beq	r2,zero,42a88 <detectPattern+0x1154>
   42a60:	01000084 	movi	r4,2
   42a64:	e17ffd17 	ldw	r5,-12(fp)
   42a68:	01800304 	movi	r6,12
   42a6c:	004366c0 	call	4366c <comp>
   42a70:	10000526 	beq	r2,zero,42a88 <detectPattern+0x1154>
   42a74:	01000084 	movi	r4,2
   42a78:	e17ffd17 	ldw	r5,-12(fp)
   42a7c:	01800384 	movi	r6,14
   42a80:	004366c0 	call	4366c <comp>
   42a84:	1000201e 	bne	r2,zero,42b08 <detectPattern+0x11d4>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2) && comp(2, ccp, 14))||
   42a88:	01000084 	movi	r4,2
   42a8c:	e17ffd17 	ldw	r5,-12(fp)
   42a90:	000d883a 	mov	r6,zero
   42a94:	004366c0 	call	4366c <comp>
		else if(seriesCompWithOnes(ccp, 3, 5, 1)){
			pat=163;
			*key=ccp[13];
		}
		// 4x3+2x2
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12) && comp(2, ccp, 14)) ||
   42a98:	10000b26 	beq	r2,zero,42ac8 <detectPattern+0x1194>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2) && comp(2, ccp, 14))||
   42a9c:	e13ffd17 	ldw	r4,-12(fp)
   42aa0:	01400104 	movi	r5,4
   42aa4:	018000c4 	movi	r6,3
   42aa8:	01c00084 	movi	r7,2
   42aac:	00438680 	call	43868 <seriesComp>
   42ab0:	10000526 	beq	r2,zero,42ac8 <detectPattern+0x1194>
   42ab4:	01000084 	movi	r4,2
   42ab8:	e17ffd17 	ldw	r5,-12(fp)
   42abc:	01800384 	movi	r6,14
   42ac0:	004366c0 	call	4366c <comp>
   42ac4:	1000101e 	bne	r2,zero,42b08 <detectPattern+0x11d4>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 3, 4)))
   42ac8:	01000084 	movi	r4,2
   42acc:	e17ffd17 	ldw	r5,-12(fp)
   42ad0:	000d883a 	mov	r6,zero
   42ad4:	004366c0 	call	4366c <comp>
			pat=163;
			*key=ccp[13];
		}
		// 4x3+2x2
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12) && comp(2, ccp, 14)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2) && comp(2, ccp, 14))||
   42ad8:	10001c26 	beq	r2,zero,42b4c <detectPattern+0x1218>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 3, 4)))
   42adc:	01000084 	movi	r4,2
   42ae0:	e17ffd17 	ldw	r5,-12(fp)
   42ae4:	01800084 	movi	r6,2
   42ae8:	004366c0 	call	4366c <comp>
   42aec:	10001726 	beq	r2,zero,42b4c <detectPattern+0x1218>
   42af0:	e13ffd17 	ldw	r4,-12(fp)
   42af4:	01400104 	movi	r5,4
   42af8:	018000c4 	movi	r6,3
   42afc:	01c00104 	movi	r7,4
   42b00:	00438680 	call	43868 <seriesComp>
   42b04:	10001126 	beq	r2,zero,42b4c <detectPattern+0x1218>
		{
			pat=164;
   42b08:	00802904 	movi	r2,164
   42b0c:	e0bffc15 	stw	r2,-16(fp)
			if(comp(4, ccp, 0))
   42b10:	01000104 	movi	r4,4
   42b14:	e17ffd17 	ldw	r5,-12(fp)
   42b18:	000d883a 	mov	r6,zero
   42b1c:	004366c0 	call	4366c <comp>
   42b20:	10000526 	beq	r2,zero,42b38 <detectPattern+0x1204>
				*key=ccp[8];
   42b24:	e0bffd17 	ldw	r2,-12(fp)
   42b28:	10c00203 	ldbu	r3,8(r2)
   42b2c:	e0bfff17 	ldw	r2,-4(fp)
   42b30:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12) && comp(2, ccp, 14)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2) && comp(2, ccp, 14))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 3, 4)))
		{
			pat=164;
			if(comp(4, ccp, 0))
   42b34:	00002406 	br	42bc8 <detectPattern+0x1294>
				*key=ccp[8];
			else
				*key=ccp[12];
   42b38:	e0bffd17 	ldw	r2,-12(fp)
   42b3c:	10c00303 	ldbu	r3,12(r2)
   42b40:	e0bfff17 	ldw	r2,-4(fp)
   42b44:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 4, 3, 0) && comp(2, ccp, 12) && comp(2, ccp, 14)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 3, 2) && comp(2, ccp, 14))||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 3, 4)))
		{
			pat=164;
			if(comp(4, ccp, 0))
   42b48:	00001f06 	br	42bc8 <detectPattern+0x1294>
				*key=ccp[8];
			else
				*key=ccp[12];
		}
		// 3x4+1x4
		else if(seriesCompWithOnes(ccp, 3, 4, 4)){
   42b4c:	e13ffd17 	ldw	r4,-12(fp)
   42b50:	014000c4 	movi	r5,3
   42b54:	01800104 	movi	r6,4
   42b58:	01c00104 	movi	r7,4
   42b5c:	00439b00 	call	439b0 <seriesCompWithOnes>
   42b60:	10001626 	beq	r2,zero,42bbc <detectPattern+0x1288>
			pat=165;
   42b64:	00802944 	movi	r2,165
   42b68:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0) || comp(3, ccp, 1))
   42b6c:	010000c4 	movi	r4,3
   42b70:	e17ffd17 	ldw	r5,-12(fp)
   42b74:	000d883a 	mov	r6,zero
   42b78:	004366c0 	call	4366c <comp>
   42b7c:	1000051e 	bne	r2,zero,42b94 <detectPattern+0x1260>
   42b80:	010000c4 	movi	r4,3
   42b84:	e17ffd17 	ldw	r5,-12(fp)
   42b88:	01800044 	movi	r6,1
   42b8c:	004366c0 	call	4366c <comp>
   42b90:	10000526 	beq	r2,zero,42ba8 <detectPattern+0x1274>
				*key=ccp[10];
   42b94:	e0bffd17 	ldw	r2,-12(fp)
   42b98:	10c00283 	ldbu	r3,10(r2)
   42b9c:	e0bfff17 	ldw	r2,-4(fp)
   42ba0:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[13];
		}
		else
			pat=-1;
		break;
   42ba4:	0002ab06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 4, 4)){
			pat=165;
			if(comp(3, ccp, 0) || comp(3, ccp, 1))
				*key=ccp[10];
			else
				*key=ccp[13];
   42ba8:	e0bffd17 	ldw	r2,-12(fp)
   42bac:	10c00343 	ldbu	r3,13(r2)
   42bb0:	e0bfff17 	ldw	r2,-4(fp)
   42bb4:	10c00005 	stb	r3,0(r2)
   42bb8:	00000306 	br	42bc8 <detectPattern+0x1294>
		}
		else
			pat=-1;
   42bbc:	00bfffc4 	movi	r2,-1
   42bc0:	e0bffc15 	stw	r2,-16(fp)
		break;
   42bc4:	0002a306 	br	43654 <detectPattern+0x1d20>
   42bc8:	0002a206 	br	43654 <detectPattern+0x1d20>
	case 17:
		// 4x4+1
		if(seriesCompWithOnes(ccp, 4, 4, 1)){
   42bcc:	e13ffd17 	ldw	r4,-12(fp)
   42bd0:	01400104 	movi	r5,4
   42bd4:	01800104 	movi	r6,4
   42bd8:	01c00044 	movi	r7,1
   42bdc:	00439b00 	call	439b0 <seriesCompWithOnes>
   42be0:	10000726 	beq	r2,zero,42c00 <detectPattern+0x12cc>
			pat=171;
   42be4:	00802ac4 	movi	r2,171
   42be8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[14];
   42bec:	e0bffd17 	ldw	r2,-12(fp)
   42bf0:	10c00383 	ldbu	r3,14(r2)
   42bf4:	e0bfff17 	ldw	r2,-4(fp)
   42bf8:	10c00005 	stb	r3,0(r2)
			pat=173;
			*key=ccp[15];
		}
		else
			pat=-1;
		break;
   42bfc:	00029506 	br	43654 <detectPattern+0x1d20>
		if(seriesCompWithOnes(ccp, 4, 4, 1)){
			pat=171;
			*key=ccp[14];
		}
		// 3x5+2
		else if((comp(2, ccp, 0) && seriesComp(ccp, 3, 5, 2)) ||
   42c00:	01000084 	movi	r4,2
   42c04:	e17ffd17 	ldw	r5,-12(fp)
   42c08:	000d883a 	mov	r6,zero
   42c0c:	004366c0 	call	4366c <comp>
   42c10:	10000626 	beq	r2,zero,42c2c <detectPattern+0x12f8>
   42c14:	e13ffd17 	ldw	r4,-12(fp)
   42c18:	014000c4 	movi	r5,3
   42c1c:	01800144 	movi	r6,5
   42c20:	01c00084 	movi	r7,2
   42c24:	00438680 	call	43868 <seriesComp>
   42c28:	10000b1e 	bne	r2,zero,42c58 <detectPattern+0x1324>
				(seriesComp(ccp, 3, 5, 0) && comp(2, ccp, 15)))
   42c2c:	e13ffd17 	ldw	r4,-12(fp)
   42c30:	014000c4 	movi	r5,3
   42c34:	01800144 	movi	r6,5
   42c38:	000f883a 	mov	r7,zero
   42c3c:	00438680 	call	43868 <seriesComp>
		if(seriesCompWithOnes(ccp, 4, 4, 1)){
			pat=171;
			*key=ccp[14];
		}
		// 3x5+2
		else if((comp(2, ccp, 0) && seriesComp(ccp, 3, 5, 2)) ||
   42c40:	10000c26 	beq	r2,zero,42c74 <detectPattern+0x1340>
				(seriesComp(ccp, 3, 5, 0) && comp(2, ccp, 15)))
   42c44:	01000084 	movi	r4,2
   42c48:	e17ffd17 	ldw	r5,-12(fp)
   42c4c:	018003c4 	movi	r6,15
   42c50:	004366c0 	call	4366c <comp>
   42c54:	10000726 	beq	r2,zero,42c74 <detectPattern+0x1340>
		{
			pat=172;
   42c58:	00802b04 	movi	r2,172
   42c5c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[15];
   42c60:	e0bffd17 	ldw	r2,-12(fp)
   42c64:	10c003c3 	ldbu	r3,15(r2)
   42c68:	e0bfff17 	ldw	r2,-4(fp)
   42c6c:	10c00005 	stb	r3,0(r2)
			pat=173;
			*key=ccp[15];
		}
		else
			pat=-1;
		break;
   42c70:	00027806 	br	43654 <detectPattern+0x1d20>
		{
			pat=172;
			*key=ccp[15];
		}
		// 3x5+1x2
		else if(seriesCompWithOnes(ccp, 3, 5, 2)){
   42c74:	e13ffd17 	ldw	r4,-12(fp)
   42c78:	014000c4 	movi	r5,3
   42c7c:	01800144 	movi	r6,5
   42c80:	01c00084 	movi	r7,2
   42c84:	00439b00 	call	439b0 <seriesCompWithOnes>
   42c88:	10000726 	beq	r2,zero,42ca8 <detectPattern+0x1374>
			pat=173;
   42c8c:	00802b44 	movi	r2,173
   42c90:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[15];
   42c94:	e0bffd17 	ldw	r2,-12(fp)
   42c98:	10c003c3 	ldbu	r3,15(r2)
   42c9c:	e0bfff17 	ldw	r2,-4(fp)
   42ca0:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   42ca4:	00026b06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 5, 2)){
			pat=173;
			*key=ccp[15];
		}
		else
			pat=-1;
   42ca8:	00bfffc4 	movi	r2,-1
   42cac:	e0bffc15 	stw	r2,-16(fp)
		break;
   42cb0:	00026806 	br	43654 <detectPattern+0x1d20>
	case 18:
		// 2x9
		if(seriesComp(ccp, 2, 9, 0)){
   42cb4:	e13ffd17 	ldw	r4,-12(fp)
   42cb8:	01400084 	movi	r5,2
   42cbc:	01800244 	movi	r6,9
   42cc0:	000f883a 	mov	r7,zero
   42cc4:	00438680 	call	43868 <seriesComp>
   42cc8:	10000726 	beq	r2,zero,42ce8 <detectPattern+0x13b4>
			pat=181;
   42ccc:	00802d44 	movi	r2,181
   42cd0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[16];
   42cd4:	e0bffd17 	ldw	r2,-12(fp)
   42cd8:	10c00403 	ldbu	r3,16(r2)
   42cdc:	e0bfff17 	ldw	r2,-4(fp)
   42ce0:	10c00005 	stb	r3,0(r2)
			pat=186;
			*key=ccp[14];
		}
		else
			pat=-1;
		break;
   42ce4:	00025b06 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 2, 9, 0)){
			pat=181;
			*key=ccp[16];
		}
		// 3x6
		else if(seriesComp(ccp, 3, 6, 0)){
   42ce8:	e13ffd17 	ldw	r4,-12(fp)
   42cec:	014000c4 	movi	r5,3
   42cf0:	01800184 	movi	r6,6
   42cf4:	000f883a 	mov	r7,zero
   42cf8:	00438680 	call	43868 <seriesComp>
   42cfc:	10000726 	beq	r2,zero,42d1c <detectPattern+0x13e8>
			pat=182;
   42d00:	00802d84 	movi	r2,182
   42d04:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[15];
   42d08:	e0bffd17 	ldw	r2,-12(fp)
   42d0c:	10c003c3 	ldbu	r3,15(r2)
   42d10:	e0bfff17 	ldw	r2,-4(fp)
   42d14:	10c00005 	stb	r3,0(r2)
			pat=186;
			*key=ccp[14];
		}
		else
			pat=-1;
		break;
   42d18:	00024e06 	br	43654 <detectPattern+0x1d20>
		else if(seriesComp(ccp, 3, 6, 0)){
			pat=182;
			*key=ccp[15];
		}
		// 3x5+1x3
		else if(seriesCompWithOnes(ccp, 3, 5, 3)){
   42d1c:	e13ffd17 	ldw	r4,-12(fp)
   42d20:	014000c4 	movi	r5,3
   42d24:	01800144 	movi	r6,5
   42d28:	01c000c4 	movi	r7,3
   42d2c:	00439b00 	call	439b0 <seriesCompWithOnes>
   42d30:	10001126 	beq	r2,zero,42d78 <detectPattern+0x1444>
			pat=183;
   42d34:	00802dc4 	movi	r2,183
   42d38:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0))
   42d3c:	010000c4 	movi	r4,3
   42d40:	e17ffd17 	ldw	r5,-12(fp)
   42d44:	000d883a 	mov	r6,zero
   42d48:	004366c0 	call	4366c <comp>
   42d4c:	10000526 	beq	r2,zero,42d64 <detectPattern+0x1430>
				*key=ccp[12];
   42d50:	e0bffd17 	ldw	r2,-12(fp)
   42d54:	10c00303 	ldbu	r3,12(r2)
   42d58:	e0bfff17 	ldw	r2,-4(fp)
   42d5c:	10c00005 	stb	r3,0(r2)
			pat=186;
			*key=ccp[14];
		}
		else
			pat=-1;
		break;
   42d60:	00023c06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 5, 3)){
			pat=183;
			if(comp(3, ccp, 0))
				*key=ccp[12];
			else
				*key=ccp[14];
   42d64:	e0bffd17 	ldw	r2,-12(fp)
   42d68:	10c00383 	ldbu	r3,14(r2)
   42d6c:	e0bfff17 	ldw	r2,-4(fp)
   42d70:	10c00005 	stb	r3,0(r2)
			pat=186;
			*key=ccp[14];
		}
		else
			pat=-1;
		break;
   42d74:	00023706 	br	43654 <detectPattern+0x1d20>
				*key=ccp[12];
			else
				*key=ccp[14];
		}
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
   42d78:	e13ffd17 	ldw	r4,-12(fp)
   42d7c:	014000c4 	movi	r5,3
   42d80:	01800104 	movi	r6,4
   42d84:	000f883a 	mov	r7,zero
   42d88:	00438680 	call	43868 <seriesComp>
   42d8c:	10000f26 	beq	r2,zero,42dcc <detectPattern+0x1498>
   42d90:	01000084 	movi	r4,2
   42d94:	e17ffd17 	ldw	r5,-12(fp)
   42d98:	01800304 	movi	r6,12
   42d9c:	004366c0 	call	4366c <comp>
   42da0:	10000a26 	beq	r2,zero,42dcc <detectPattern+0x1498>
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42da4:	01000084 	movi	r4,2
   42da8:	e17ffd17 	ldw	r5,-12(fp)
   42dac:	01800384 	movi	r6,14
   42db0:	004366c0 	call	4366c <comp>
				*key=ccp[12];
			else
				*key=ccp[14];
		}
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
   42db4:	10000526 	beq	r2,zero,42dcc <detectPattern+0x1498>
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42db8:	01000084 	movi	r4,2
   42dbc:	e17ffd17 	ldw	r5,-12(fp)
   42dc0:	01800404 	movi	r6,16
   42dc4:	004366c0 	call	4366c <comp>
   42dc8:	10003f1e 	bne	r2,zero,42ec8 <detectPattern+0x1594>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
   42dcc:	01000084 	movi	r4,2
   42dd0:	e17ffd17 	ldw	r5,-12(fp)
   42dd4:	000d883a 	mov	r6,zero
   42dd8:	004366c0 	call	4366c <comp>
			else
				*key=ccp[14];
		}
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42ddc:	10001026 	beq	r2,zero,42e20 <detectPattern+0x14ec>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
   42de0:	e13ffd17 	ldw	r4,-12(fp)
   42de4:	014000c4 	movi	r5,3
   42de8:	01800104 	movi	r6,4
   42dec:	01c00084 	movi	r7,2
   42df0:	00438680 	call	43868 <seriesComp>
   42df4:	10000a26 	beq	r2,zero,42e20 <detectPattern+0x14ec>
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42df8:	01000084 	movi	r4,2
   42dfc:	e17ffd17 	ldw	r5,-12(fp)
   42e00:	01800384 	movi	r6,14
   42e04:	004366c0 	call	4366c <comp>
				*key=ccp[14];
		}
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
   42e08:	10000526 	beq	r2,zero,42e20 <detectPattern+0x14ec>
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42e0c:	01000084 	movi	r4,2
   42e10:	e17ffd17 	ldw	r5,-12(fp)
   42e14:	01800404 	movi	r6,16
   42e18:	004366c0 	call	4366c <comp>
   42e1c:	10002a1e 	bne	r2,zero,42ec8 <detectPattern+0x1594>
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42e20:	01000084 	movi	r4,2
   42e24:	e17ffd17 	ldw	r5,-12(fp)
   42e28:	000d883a 	mov	r6,zero
   42e2c:	004366c0 	call	4366c <comp>
		}
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
   42e30:	10001026 	beq	r2,zero,42e74 <detectPattern+0x1540>
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42e34:	01000084 	movi	r4,2
   42e38:	e17ffd17 	ldw	r5,-12(fp)
   42e3c:	01800084 	movi	r6,2
   42e40:	004366c0 	call	4366c <comp>
   42e44:	10000b26 	beq	r2,zero,42e74 <detectPattern+0x1540>
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
   42e48:	e13ffd17 	ldw	r4,-12(fp)
   42e4c:	014000c4 	movi	r5,3
   42e50:	01800104 	movi	r6,4
   42e54:	01c00104 	movi	r7,4
   42e58:	00438680 	call	43868 <seriesComp>
		// 3x4+2x3 || 2+3x4+2x2 || 2x2+3x4+2 || 2x3+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42e5c:	10000526 	beq	r2,zero,42e74 <detectPattern+0x1540>
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
   42e60:	01000084 	movi	r4,2
   42e64:	e17ffd17 	ldw	r5,-12(fp)
   42e68:	01800404 	movi	r6,16
   42e6c:	004366c0 	call	4366c <comp>
   42e70:	1000151e 	bne	r2,zero,42ec8 <detectPattern+0x1594>
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42e74:	01000084 	movi	r4,2
   42e78:	e17ffd17 	ldw	r5,-12(fp)
   42e7c:	000d883a 	mov	r6,zero
   42e80:	004366c0 	call	4366c <comp>
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
   42e84:	10002626 	beq	r2,zero,42f20 <detectPattern+0x15ec>
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42e88:	01000084 	movi	r4,2
   42e8c:	e17ffd17 	ldw	r5,-12(fp)
   42e90:	01800084 	movi	r6,2
   42e94:	004366c0 	call	4366c <comp>
   42e98:	10002126 	beq	r2,zero,42f20 <detectPattern+0x15ec>
				comp(2, ccp, 4) && seriesComp(ccp, 3, 4, 6)))
   42e9c:	01000084 	movi	r4,2
   42ea0:	e17ffd17 	ldw	r5,-12(fp)
   42ea4:	01800104 	movi	r6,4
   42ea8:	004366c0 	call	4366c <comp>
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) &&
				comp(2, ccp, 14) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
   42eac:	10001c26 	beq	r2,zero,42f20 <detectPattern+0x15ec>
				comp(2, ccp, 4) && seriesComp(ccp, 3, 4, 6)))
   42eb0:	e13ffd17 	ldw	r4,-12(fp)
   42eb4:	014000c4 	movi	r5,3
   42eb8:	01800104 	movi	r6,4
   42ebc:	01c00184 	movi	r7,6
   42ec0:	00438680 	call	43868 <seriesComp>
   42ec4:	10001626 	beq	r2,zero,42f20 <detectPattern+0x15ec>
		{
			pat=184;
   42ec8:	00802e04 	movi	r2,184
   42ecc:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   42ed0:	010000c4 	movi	r4,3
   42ed4:	e17ffd17 	ldw	r5,-12(fp)
   42ed8:	000d883a 	mov	r6,zero
   42edc:	004366c0 	call	4366c <comp>
   42ee0:	1000051e 	bne	r2,zero,42ef8 <detectPattern+0x15c4>
   42ee4:	010000c4 	movi	r4,3
   42ee8:	e17ffd17 	ldw	r5,-12(fp)
   42eec:	01800084 	movi	r6,2
   42ef0:	004366c0 	call	4366c <comp>
   42ef4:	10000526 	beq	r2,zero,42f0c <detectPattern+0x15d8>
				*key=ccp[11];
   42ef8:	e0bffd17 	ldw	r2,-12(fp)
   42efc:	10c002c3 	ldbu	r3,11(r2)
   42f00:	e0bfff17 	ldw	r2,-4(fp)
   42f04:	10c00005 	stb	r3,0(r2)
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
				comp(2, ccp, 4) && seriesComp(ccp, 3, 4, 6)))
		{
			pat=184;
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   42f08:	00003206 	br	42fd4 <detectPattern+0x16a0>
				*key=ccp[11];
			else
				*key=ccp[15];
   42f0c:	e0bffd17 	ldw	r2,-12(fp)
   42f10:	10c003c3 	ldbu	r3,15(r2)
   42f14:	e0bfff17 	ldw	r2,-4(fp)
   42f18:	10c00005 	stb	r3,0(r2)
				seriesComp(ccp, 3, 4, 4) && comp(2, ccp, 16)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) &&
				comp(2, ccp, 4) && seriesComp(ccp, 3, 4, 6)))
		{
			pat=184;
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   42f1c:	00002d06 	br	42fd4 <detectPattern+0x16a0>
				*key=ccp[11];
			else
				*key=ccp[15];
		}
		// 4x4+2
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16)) ||
   42f20:	e13ffd17 	ldw	r4,-12(fp)
   42f24:	01400104 	movi	r5,4
   42f28:	01800104 	movi	r6,4
   42f2c:	000f883a 	mov	r7,zero
   42f30:	00438680 	call	43868 <seriesComp>
   42f34:	10000526 	beq	r2,zero,42f4c <detectPattern+0x1618>
   42f38:	01000084 	movi	r4,2
   42f3c:	e17ffd17 	ldw	r5,-12(fp)
   42f40:	01800404 	movi	r6,16
   42f44:	004366c0 	call	4366c <comp>
   42f48:	10000b1e 	bne	r2,zero,42f78 <detectPattern+0x1644>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2)))
   42f4c:	01000084 	movi	r4,2
   42f50:	e17ffd17 	ldw	r5,-12(fp)
   42f54:	000d883a 	mov	r6,zero
   42f58:	004366c0 	call	4366c <comp>
				*key=ccp[11];
			else
				*key=ccp[15];
		}
		// 4x4+2
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16)) ||
   42f5c:	10000d26 	beq	r2,zero,42f94 <detectPattern+0x1660>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2)))
   42f60:	e13ffd17 	ldw	r4,-12(fp)
   42f64:	01400104 	movi	r5,4
   42f68:	01800104 	movi	r6,4
   42f6c:	01c00084 	movi	r7,2
   42f70:	00438680 	call	43868 <seriesComp>
   42f74:	10000726 	beq	r2,zero,42f94 <detectPattern+0x1660>
		{
			pat=185;
   42f78:	00802e44 	movi	r2,185
   42f7c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[14];
   42f80:	e0bffd17 	ldw	r2,-12(fp)
   42f84:	10c00383 	ldbu	r3,14(r2)
   42f88:	e0bfff17 	ldw	r2,-4(fp)
   42f8c:	10c00005 	stb	r3,0(r2)
   42f90:	00001006 	br	42fd4 <detectPattern+0x16a0>
		}
		// 4x4+1x2
		else if(seriesCompWithOnes(ccp, 4, 4, 2)){
   42f94:	e13ffd17 	ldw	r4,-12(fp)
   42f98:	01400104 	movi	r5,4
   42f9c:	01800104 	movi	r6,4
   42fa0:	01c00084 	movi	r7,2
   42fa4:	00439b00 	call	439b0 <seriesCompWithOnes>
   42fa8:	10000726 	beq	r2,zero,42fc8 <detectPattern+0x1694>
			pat=186;
   42fac:	00802e84 	movi	r2,186
   42fb0:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[14];
   42fb4:	e0bffd17 	ldw	r2,-12(fp)
   42fb8:	10c00383 	ldbu	r3,14(r2)
   42fbc:	e0bfff17 	ldw	r2,-4(fp)
   42fc0:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   42fc4:	0001a306 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 4, 2)){
			pat=186;
			*key=ccp[14];
		}
		else
			pat=-1;
   42fc8:	00bfffc4 	movi	r2,-1
   42fcc:	e0bffc15 	stw	r2,-16(fp)
		break;
   42fd0:	0001a006 	br	43654 <detectPattern+0x1d20>
   42fd4:	00019f06 	br	43654 <detectPattern+0x1d20>
	case 19:
		// 3x6+1
		if(seriesCompWithOnes(ccp, 3, 6, 1)){
   42fd8:	e13ffd17 	ldw	r4,-12(fp)
   42fdc:	014000c4 	movi	r5,3
   42fe0:	01800184 	movi	r6,6
   42fe4:	01c00044 	movi	r7,1
   42fe8:	00439b00 	call	439b0 <seriesCompWithOnes>
   42fec:	10000726 	beq	r2,zero,4300c <detectPattern+0x16d8>
			pat=191;
   42ff0:	00802fc4 	movi	r2,191
   42ff4:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[15];
   42ff8:	e0bffd17 	ldw	r2,-12(fp)
   42ffc:	10c003c3 	ldbu	r3,15(r2)
   43000:	e0bfff17 	ldw	r2,-4(fp)
   43004:	10c00005 	stb	r3,0(r2)
			pat=193;
			*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43008:	00019206 	br	43654 <detectPattern+0x1d20>
		if(seriesCompWithOnes(ccp, 3, 6, 1)){
			pat=191;
			*key=ccp[15];
		}
		// 3x5+1x4
		else if(seriesCompWithOnes(ccp, 3, 5, 4)){
   4300c:	e13ffd17 	ldw	r4,-12(fp)
   43010:	014000c4 	movi	r5,3
   43014:	01800144 	movi	r6,5
   43018:	01c00104 	movi	r7,4
   4301c:	00439b00 	call	439b0 <seriesCompWithOnes>
   43020:	10001626 	beq	r2,zero,4307c <detectPattern+0x1748>
			pat=192;
   43024:	00803004 	movi	r2,192
   43028:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0) || comp(3, ccp, 1))
   4302c:	010000c4 	movi	r4,3
   43030:	e17ffd17 	ldw	r5,-12(fp)
   43034:	000d883a 	mov	r6,zero
   43038:	004366c0 	call	4366c <comp>
   4303c:	1000051e 	bne	r2,zero,43054 <detectPattern+0x1720>
   43040:	010000c4 	movi	r4,3
   43044:	e17ffd17 	ldw	r5,-12(fp)
   43048:	01800044 	movi	r6,1
   4304c:	004366c0 	call	4366c <comp>
   43050:	10000526 	beq	r2,zero,43068 <detectPattern+0x1734>
				*key=ccp[13];
   43054:	e0bffd17 	ldw	r2,-12(fp)
   43058:	10c00343 	ldbu	r3,13(r2)
   4305c:	e0bfff17 	ldw	r2,-4(fp)
   43060:	10c00005 	stb	r3,0(r2)
			pat=193;
			*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43064:	00017b06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 5, 4)){
			pat=192;
			if(comp(3, ccp, 0) || comp(3, ccp, 1))
				*key=ccp[13];
			else
				*key=ccp[16];
   43068:	e0bffd17 	ldw	r2,-12(fp)
   4306c:	10c00403 	ldbu	r3,16(r2)
   43070:	e0bfff17 	ldw	r2,-4(fp)
   43074:	10c00005 	stb	r3,0(r2)
			pat=193;
			*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43078:	00017606 	br	43654 <detectPattern+0x1d20>
				*key=ccp[13];
			else
				*key=ccp[16];
		}
		// 4x4+1x3
		else if(seriesCompWithOnes(ccp, 4, 4, 3)){
   4307c:	e13ffd17 	ldw	r4,-12(fp)
   43080:	01400104 	movi	r5,4
   43084:	01800104 	movi	r6,4
   43088:	01c000c4 	movi	r7,3
   4308c:	00439b00 	call	439b0 <seriesCompWithOnes>
   43090:	10000726 	beq	r2,zero,430b0 <detectPattern+0x177c>
			pat=193;
   43094:	00803044 	movi	r2,193
   43098:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[15];
   4309c:	e0bffd17 	ldw	r2,-12(fp)
   430a0:	10c003c3 	ldbu	r3,15(r2)
   430a4:	e0bfff17 	ldw	r2,-4(fp)
   430a8:	10c00005 	stb	r3,0(r2)
		}
		else
			pat=-1;
		break;
   430ac:	00016906 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 4, 3)){
			pat=193;
			*key=ccp[15];
		}
		else
			pat=-1;
   430b0:	00bfffc4 	movi	r2,-1
   430b4:	e0bffc15 	stw	r2,-16(fp)
		break;
   430b8:	00016606 	br	43654 <detectPattern+0x1d20>
	case 20:
		// 2x6+1x2: seriesCompWithOnes(ccp, 2, 6, 2);
		// 2x6: seriesComp(ccp, 2, 6, 0);
		// 2x10
		if(seriesComp(ccp, 2, 10, 0)){
   430bc:	e13ffd17 	ldw	r4,-12(fp)
   430c0:	01400084 	movi	r5,2
   430c4:	01800284 	movi	r6,10
   430c8:	000f883a 	mov	r7,zero
   430cc:	00438680 	call	43868 <seriesComp>
   430d0:	10000726 	beq	r2,zero,430f0 <detectPattern+0x17bc>
			pat=201;
   430d4:	00803244 	movi	r2,201
   430d8:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[18];
   430dc:	e0bffd17 	ldw	r2,-12(fp)
   430e0:	10c00483 	ldbu	r3,18(r2)
   430e4:	e0bfff17 	ldw	r2,-4(fp)
   430e8:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   430ec:	00015906 	br	43654 <detectPattern+0x1d20>
		if(seriesComp(ccp, 2, 10, 0)){
			pat=201;
			*key=ccp[18];
		}
		// 3x6+2
		else if((seriesComp(ccp, 3, 6, 0) && comp(2, ccp, 18))||
   430f0:	e13ffd17 	ldw	r4,-12(fp)
   430f4:	014000c4 	movi	r5,3
   430f8:	01800184 	movi	r6,6
   430fc:	000f883a 	mov	r7,zero
   43100:	00438680 	call	43868 <seriesComp>
   43104:	10000526 	beq	r2,zero,4311c <detectPattern+0x17e8>
   43108:	01000084 	movi	r4,2
   4310c:	e17ffd17 	ldw	r5,-12(fp)
   43110:	01800484 	movi	r6,18
   43114:	004366c0 	call	4366c <comp>
   43118:	10000b1e 	bne	r2,zero,43148 <detectPattern+0x1814>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 6, 2)))
   4311c:	01000084 	movi	r4,2
   43120:	e17ffd17 	ldw	r5,-12(fp)
   43124:	000d883a 	mov	r6,zero
   43128:	004366c0 	call	4366c <comp>
		if(seriesComp(ccp, 2, 10, 0)){
			pat=201;
			*key=ccp[18];
		}
		// 3x6+2
		else if((seriesComp(ccp, 3, 6, 0) && comp(2, ccp, 18))||
   4312c:	10000d26 	beq	r2,zero,43164 <detectPattern+0x1830>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 6, 2)))
   43130:	e13ffd17 	ldw	r4,-12(fp)
   43134:	014000c4 	movi	r5,3
   43138:	01800184 	movi	r6,6
   4313c:	01c00084 	movi	r7,2
   43140:	00438680 	call	43868 <seriesComp>
   43144:	10000726 	beq	r2,zero,43164 <detectPattern+0x1830>
		{
			pat=202;
   43148:	00803284 	movi	r2,202
   4314c:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[17];
   43150:	e0bffd17 	ldw	r2,-12(fp)
   43154:	10c00443 	ldbu	r3,17(r2)
   43158:	e0bfff17 	ldw	r2,-4(fp)
   4315c:	10c00005 	stb	r3,0(r2)
   43160:	00013806 	br	43644 <detectPattern+0x1d10>
		}
		// 3x6+1x2
		else if(seriesCompWithOnes(ccp, 3, 6, 2)){
   43164:	e13ffd17 	ldw	r4,-12(fp)
   43168:	014000c4 	movi	r5,3
   4316c:	01800184 	movi	r6,6
   43170:	01c00084 	movi	r7,2
   43174:	00439b00 	call	439b0 <seriesCompWithOnes>
   43178:	10000726 	beq	r2,zero,43198 <detectPattern+0x1864>
			pat=203;
   4317c:	008032c4 	movi	r2,203
   43180:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[17];
   43184:	e0bffd17 	ldw	r2,-12(fp)
   43188:	10c00443 	ldbu	r3,17(r2)
   4318c:	e0bfff17 	ldw	r2,-4(fp)
   43190:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43194:	00012f06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 6, 2)){
			pat=203;
			*key=ccp[17];
		}
		// 3x5+1x5
		else if(seriesCompWithOnes(ccp, 3, 5, 5)){
   43198:	e13ffd17 	ldw	r4,-12(fp)
   4319c:	014000c4 	movi	r5,3
   431a0:	01800144 	movi	r6,5
   431a4:	01c00144 	movi	r7,5
   431a8:	00439b00 	call	439b0 <seriesCompWithOnes>
   431ac:	10001b26 	beq	r2,zero,4321c <detectPattern+0x18e8>
			pat=204;
   431b0:	00803304 	movi	r2,204
   431b4:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0) || comp(3, ccp, 1) || comp(3, ccp, 2))
   431b8:	010000c4 	movi	r4,3
   431bc:	e17ffd17 	ldw	r5,-12(fp)
   431c0:	000d883a 	mov	r6,zero
   431c4:	004366c0 	call	4366c <comp>
   431c8:	10000a1e 	bne	r2,zero,431f4 <detectPattern+0x18c0>
   431cc:	010000c4 	movi	r4,3
   431d0:	e17ffd17 	ldw	r5,-12(fp)
   431d4:	01800044 	movi	r6,1
   431d8:	004366c0 	call	4366c <comp>
   431dc:	1000051e 	bne	r2,zero,431f4 <detectPattern+0x18c0>
   431e0:	010000c4 	movi	r4,3
   431e4:	e17ffd17 	ldw	r5,-12(fp)
   431e8:	01800084 	movi	r6,2
   431ec:	004366c0 	call	4366c <comp>
   431f0:	10000526 	beq	r2,zero,43208 <detectPattern+0x18d4>
				*key=ccp[14];
   431f4:	e0bffd17 	ldw	r2,-12(fp)
   431f8:	10c00383 	ldbu	r3,14(r2)
   431fc:	e0bfff17 	ldw	r2,-4(fp)
   43200:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43204:	00011306 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 3, 5, 5)){
			pat=204;
			if(comp(3, ccp, 0) || comp(3, ccp, 1) || comp(3, ccp, 2))
				*key=ccp[14];
			else
				*key=ccp[17];
   43208:	e0bffd17 	ldw	r2,-12(fp)
   4320c:	10c00443 	ldbu	r3,17(r2)
   43210:	e0bfff17 	ldw	r2,-4(fp)
   43214:	10c00005 	stb	r3,0(r2)
   43218:	00010a06 	br	43644 <detectPattern+0x1d10>
		}
		// 4x5
		else if(seriesComp(ccp, 4, 5, 0)){
   4321c:	e13ffd17 	ldw	r4,-12(fp)
   43220:	01400104 	movi	r5,4
   43224:	01800144 	movi	r6,5
   43228:	000f883a 	mov	r7,zero
   4322c:	00438680 	call	43868 <seriesComp>
   43230:	10000726 	beq	r2,zero,43250 <detectPattern+0x191c>
			pat=205;
   43234:	00803344 	movi	r2,205
   43238:	e0bffc15 	stw	r2,-16(fp)
			*key=ccp[16];
   4323c:	e0bffd17 	ldw	r2,-12(fp)
   43240:	10c00403 	ldbu	r3,16(r2)
   43244:	e0bfff17 	ldw	r2,-4(fp)
   43248:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   4324c:	00010106 	br	43654 <detectPattern+0x1d20>
		else if(seriesComp(ccp, 4, 5, 0)){
			pat=205;
			*key=ccp[16];
		}
		// 4x4+2x2 || 2+4x4+2 || 2x2+4x4
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   43250:	e13ffd17 	ldw	r4,-12(fp)
   43254:	01400104 	movi	r5,4
   43258:	01800104 	movi	r6,4
   4325c:	000f883a 	mov	r7,zero
   43260:	00438680 	call	43868 <seriesComp>
   43264:	10000a26 	beq	r2,zero,43290 <detectPattern+0x195c>
   43268:	01000084 	movi	r4,2
   4326c:	e17ffd17 	ldw	r5,-12(fp)
   43270:	01800404 	movi	r6,16
   43274:	004366c0 	call	4366c <comp>
   43278:	10000526 	beq	r2,zero,43290 <detectPattern+0x195c>
   4327c:	01000084 	movi	r4,2
   43280:	e17ffd17 	ldw	r5,-12(fp)
   43284:	01800484 	movi	r6,18
   43288:	004366c0 	call	4366c <comp>
   4328c:	1000201e 	bne	r2,zero,43310 <detectPattern+0x19dc>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2) && comp(2, ccp, 18)) ||
   43290:	01000084 	movi	r4,2
   43294:	e17ffd17 	ldw	r5,-12(fp)
   43298:	000d883a 	mov	r6,zero
   4329c:	004366c0 	call	4366c <comp>
		else if(seriesComp(ccp, 4, 5, 0)){
			pat=205;
			*key=ccp[16];
		}
		// 4x4+2x2 || 2+4x4+2 || 2x2+4x4
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   432a0:	10000b26 	beq	r2,zero,432d0 <detectPattern+0x199c>
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2) && comp(2, ccp, 18)) ||
   432a4:	e13ffd17 	ldw	r4,-12(fp)
   432a8:	01400104 	movi	r5,4
   432ac:	01800104 	movi	r6,4
   432b0:	01c00084 	movi	r7,2
   432b4:	00438680 	call	43868 <seriesComp>
   432b8:	10000526 	beq	r2,zero,432d0 <detectPattern+0x199c>
   432bc:	01000084 	movi	r4,2
   432c0:	e17ffd17 	ldw	r5,-12(fp)
   432c4:	01800484 	movi	r6,18
   432c8:	004366c0 	call	4366c <comp>
   432cc:	1000101e 	bne	r2,zero,43310 <detectPattern+0x19dc>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 4, 4)))
   432d0:	01000084 	movi	r4,2
   432d4:	e17ffd17 	ldw	r5,-12(fp)
   432d8:	000d883a 	mov	r6,zero
   432dc:	004366c0 	call	4366c <comp>
			pat=205;
			*key=ccp[16];
		}
		// 4x4+2x2 || 2+4x4+2 || 2x2+4x4
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2) && comp(2, ccp, 18)) ||
   432e0:	10001c26 	beq	r2,zero,43354 <detectPattern+0x1a20>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 4, 4)))
   432e4:	01000084 	movi	r4,2
   432e8:	e17ffd17 	ldw	r5,-12(fp)
   432ec:	01800084 	movi	r6,2
   432f0:	004366c0 	call	4366c <comp>
   432f4:	10001726 	beq	r2,zero,43354 <detectPattern+0x1a20>
   432f8:	e13ffd17 	ldw	r4,-12(fp)
   432fc:	01400104 	movi	r5,4
   43300:	01800104 	movi	r6,4
   43304:	01c00104 	movi	r7,4
   43308:	00438680 	call	43868 <seriesComp>
   4330c:	10001126 	beq	r2,zero,43354 <detectPattern+0x1a20>
		{
			pat=206;
   43310:	00803384 	movi	r2,206
   43314:	e0bffc15 	stw	r2,-16(fp)
			if(comp(4, ccp, 0))
   43318:	01000104 	movi	r4,4
   4331c:	e17ffd17 	ldw	r5,-12(fp)
   43320:	000d883a 	mov	r6,zero
   43324:	004366c0 	call	4366c <comp>
   43328:	10000526 	beq	r2,zero,43340 <detectPattern+0x1a0c>
				*key=ccp[12];
   4332c:	e0bffd17 	ldw	r2,-12(fp)
   43330:	10c00303 	ldbu	r3,12(r2)
   43334:	e0bfff17 	ldw	r2,-4(fp)
   43338:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 4, 4)))
		{
			pat=206;
			if(comp(4, ccp, 0))
   4333c:	0000c106 	br	43644 <detectPattern+0x1d10>
				*key=ccp[12];
			else
				*key=ccp[16];
   43340:	e0bffd17 	ldw	r2,-12(fp)
   43344:	10c00403 	ldbu	r3,16(r2)
   43348:	e0bfff17 	ldw	r2,-4(fp)
   4334c:	10c00005 	stb	r3,0(r2)
		else if((seriesComp(ccp, 4, 4, 0) && comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 4, 4, 2) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 4, 4, 4)))
		{
			pat=206;
			if(comp(4, ccp, 0))
   43350:	0000bc06 	br	43644 <detectPattern+0x1d10>
				*key=ccp[12];
			else
				*key=ccp[16];
		}
		// 4x4+1x4
		else if(seriesCompWithOnes(ccp, 4, 4, 1)){
   43354:	e13ffd17 	ldw	r4,-12(fp)
   43358:	01400104 	movi	r5,4
   4335c:	01800104 	movi	r6,4
   43360:	01c00044 	movi	r7,1
   43364:	00439b00 	call	439b0 <seriesCompWithOnes>
   43368:	10001126 	beq	r2,zero,433b0 <detectPattern+0x1a7c>
			pat=207;
   4336c:	008033c4 	movi	r2,207
   43370:	e0bffc15 	stw	r2,-16(fp)
			if(comp(4, ccp, 0))
   43374:	01000104 	movi	r4,4
   43378:	e17ffd17 	ldw	r5,-12(fp)
   4337c:	000d883a 	mov	r6,zero
   43380:	004366c0 	call	4366c <comp>
   43384:	10000526 	beq	r2,zero,4339c <detectPattern+0x1a68>
				*key=ccp[12];
   43388:	e0bffd17 	ldw	r2,-12(fp)
   4338c:	10c00303 	ldbu	r3,12(r2)
   43390:	e0bfff17 	ldw	r2,-4(fp)
   43394:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   43398:	0000ae06 	br	43654 <detectPattern+0x1d20>
		else if(seriesCompWithOnes(ccp, 4, 4, 1)){
			pat=207;
			if(comp(4, ccp, 0))
				*key=ccp[12];
			else
				*key=ccp[16];
   4339c:	e0bffd17 	ldw	r2,-12(fp)
   433a0:	10c00403 	ldbu	r3,16(r2)
   433a4:	e0bfff17 	ldw	r2,-4(fp)
   433a8:	10c00005 	stb	r3,0(r2)
			else
				*key=ccp[15];
		}
		else
			pat=-1;
		break;
   433ac:	0000a906 	br	43654 <detectPattern+0x1d20>
				*key=ccp[12];
			else
				*key=ccp[16];
		}
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
   433b0:	e13ffd17 	ldw	r4,-12(fp)
   433b4:	014000c4 	movi	r5,3
   433b8:	01800104 	movi	r6,4
   433bc:	000f883a 	mov	r7,zero
   433c0:	00438680 	call	43868 <seriesComp>
   433c4:	10001426 	beq	r2,zero,43418 <detectPattern+0x1ae4>
   433c8:	01000084 	movi	r4,2
   433cc:	e17ffd17 	ldw	r5,-12(fp)
   433d0:	01800304 	movi	r6,12
   433d4:	004366c0 	call	4366c <comp>
   433d8:	10000f26 	beq	r2,zero,43418 <detectPattern+0x1ae4>
   433dc:	01000084 	movi	r4,2
   433e0:	e17ffd17 	ldw	r5,-12(fp)
   433e4:	01800384 	movi	r6,14
   433e8:	004366c0 	call	4366c <comp>
   433ec:	10000a26 	beq	r2,zero,43418 <detectPattern+0x1ae4>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   433f0:	01000084 	movi	r4,2
   433f4:	e17ffd17 	ldw	r5,-12(fp)
   433f8:	01800404 	movi	r6,16
   433fc:	004366c0 	call	4366c <comp>
				*key=ccp[12];
			else
				*key=ccp[16];
		}
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
   43400:	10000526 	beq	r2,zero,43418 <detectPattern+0x1ae4>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   43404:	01000084 	movi	r4,2
   43408:	e17ffd17 	ldw	r5,-12(fp)
   4340c:	01800484 	movi	r6,18
   43410:	004366c0 	call	4366c <comp>
   43414:	1000681e 	bne	r2,zero,435b8 <detectPattern+0x1c84>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
   43418:	01000084 	movi	r4,2
   4341c:	e17ffd17 	ldw	r5,-12(fp)
   43420:	000d883a 	mov	r6,zero
   43424:	004366c0 	call	4366c <comp>
			else
				*key=ccp[16];
		}
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   43428:	10001526 	beq	r2,zero,43480 <detectPattern+0x1b4c>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
   4342c:	e13ffd17 	ldw	r4,-12(fp)
   43430:	014000c4 	movi	r5,3
   43434:	01800104 	movi	r6,4
   43438:	01c00084 	movi	r7,2
   4343c:	00438680 	call	43868 <seriesComp>
   43440:	10000f26 	beq	r2,zero,43480 <detectPattern+0x1b4c>
   43444:	01000084 	movi	r4,2
   43448:	e17ffd17 	ldw	r5,-12(fp)
   4344c:	01800384 	movi	r6,14
   43450:	004366c0 	call	4366c <comp>
   43454:	10000a26 	beq	r2,zero,43480 <detectPattern+0x1b4c>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   43458:	01000084 	movi	r4,2
   4345c:	e17ffd17 	ldw	r5,-12(fp)
   43460:	01800404 	movi	r6,16
   43464:	004366c0 	call	4366c <comp>
				*key=ccp[16];
		}
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
   43468:	10000526 	beq	r2,zero,43480 <detectPattern+0x1b4c>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   4346c:	01000084 	movi	r4,2
   43470:	e17ffd17 	ldw	r5,-12(fp)
   43474:	01800484 	movi	r6,18
   43478:	004366c0 	call	4366c <comp>
   4347c:	10004e1e 	bne	r2,zero,435b8 <detectPattern+0x1c84>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
   43480:	01000084 	movi	r4,2
   43484:	e17ffd17 	ldw	r5,-12(fp)
   43488:	000d883a 	mov	r6,zero
   4348c:	004366c0 	call	4366c <comp>
		}
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   43490:	10001526 	beq	r2,zero,434e8 <detectPattern+0x1bb4>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
   43494:	01000084 	movi	r4,2
   43498:	e17ffd17 	ldw	r5,-12(fp)
   4349c:	01800084 	movi	r6,2
   434a0:	004366c0 	call	4366c <comp>
   434a4:	10001026 	beq	r2,zero,434e8 <detectPattern+0x1bb4>
   434a8:	e13ffd17 	ldw	r4,-12(fp)
   434ac:	014000c4 	movi	r5,3
   434b0:	01800104 	movi	r6,4
   434b4:	01c00104 	movi	r7,4
   434b8:	00438680 	call	43868 <seriesComp>
   434bc:	10000a26 	beq	r2,zero,434e8 <detectPattern+0x1bb4>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   434c0:	01000084 	movi	r4,2
   434c4:	e17ffd17 	ldw	r5,-12(fp)
   434c8:	01800404 	movi	r6,16
   434cc:	004366c0 	call	4366c <comp>
		// 3x4+2x4 || 2+3x4+2x3 || 2x2+3x4+2x2 || 2x3+3x4+2 || 2x4+3x4
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
   434d0:	10000526 	beq	r2,zero,434e8 <detectPattern+0x1bb4>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   434d4:	01000084 	movi	r4,2
   434d8:	e17ffd17 	ldw	r5,-12(fp)
   434dc:	01800484 	movi	r6,18
   434e0:	004366c0 	call	4366c <comp>
   434e4:	1000341e 	bne	r2,zero,435b8 <detectPattern+0x1c84>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   434e8:	01000084 	movi	r4,2
   434ec:	e17ffd17 	ldw	r5,-12(fp)
   434f0:	000d883a 	mov	r6,zero
   434f4:	004366c0 	call	4366c <comp>
		else if((seriesComp(ccp, 3, 4, 0) && comp(2, ccp, 12) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
   434f8:	10001526 	beq	r2,zero,43550 <detectPattern+0x1c1c>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   434fc:	01000084 	movi	r4,2
   43500:	e17ffd17 	ldw	r5,-12(fp)
   43504:	01800084 	movi	r6,2
   43508:	004366c0 	call	4366c <comp>
   4350c:	10001026 	beq	r2,zero,43550 <detectPattern+0x1c1c>
   43510:	01000084 	movi	r4,2
   43514:	e17ffd17 	ldw	r5,-12(fp)
   43518:	01800104 	movi	r6,4
   4351c:	004366c0 	call	4366c <comp>
   43520:	10000b26 	beq	r2,zero,43550 <detectPattern+0x1c1c>
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
   43524:	e13ffd17 	ldw	r4,-12(fp)
   43528:	014000c4 	movi	r5,3
   4352c:	01800104 	movi	r6,4
   43530:	01c00184 	movi	r7,6
   43534:	00438680 	call	43868 <seriesComp>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   43538:	10000526 	beq	r2,zero,43550 <detectPattern+0x1c1c>
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
   4353c:	01000084 	movi	r4,2
   43540:	e17ffd17 	ldw	r5,-12(fp)
   43544:	01800484 	movi	r6,18
   43548:	004366c0 	call	4366c <comp>
   4354c:	10001a1e 	bne	r2,zero,435b8 <detectPattern+0x1c84>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   43550:	01000084 	movi	r4,2
   43554:	e17ffd17 	ldw	r5,-12(fp)
   43558:	000d883a 	mov	r6,zero
   4355c:	004366c0 	call	4366c <comp>
				(comp(2, ccp, 0) && seriesComp(ccp, 3, 4, 2) && comp(2, ccp, 14) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
   43560:	10003526 	beq	r2,zero,43638 <detectPattern+0x1d04>
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   43564:	01000084 	movi	r4,2
   43568:	e17ffd17 	ldw	r5,-12(fp)
   4356c:	01800084 	movi	r6,2
   43570:	004366c0 	call	4366c <comp>
   43574:	10003026 	beq	r2,zero,43638 <detectPattern+0x1d04>
   43578:	01000084 	movi	r4,2
   4357c:	e17ffd17 	ldw	r5,-12(fp)
   43580:	01800104 	movi	r6,4
   43584:	004366c0 	call	4366c <comp>
   43588:	10002b26 	beq	r2,zero,43638 <detectPattern+0x1d04>
				comp(2, ccp, 6) && seriesComp(ccp, 3, 4, 8)))
   4358c:	01000084 	movi	r4,2
   43590:	e17ffd17 	ldw	r5,-12(fp)
   43594:	01800184 	movi	r6,6
   43598:	004366c0 	call	4366c <comp>
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && seriesComp(ccp, 3, 4, 4) &&
				comp(2, ccp, 16) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
   4359c:	10002626 	beq	r2,zero,43638 <detectPattern+0x1d04>
				comp(2, ccp, 6) && seriesComp(ccp, 3, 4, 8)))
   435a0:	e13ffd17 	ldw	r4,-12(fp)
   435a4:	014000c4 	movi	r5,3
   435a8:	01800104 	movi	r6,4
   435ac:	01c00204 	movi	r7,8
   435b0:	00438680 	call	43868 <seriesComp>
   435b4:	10002026 	beq	r2,zero,43638 <detectPattern+0x1d04>
		{
			pat=208;
   435b8:	00803404 	movi	r2,208
   435bc:	e0bffc15 	stw	r2,-16(fp)
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   435c0:	010000c4 	movi	r4,3
   435c4:	e17ffd17 	ldw	r5,-12(fp)
   435c8:	000d883a 	mov	r6,zero
   435cc:	004366c0 	call	4366c <comp>
   435d0:	1000051e 	bne	r2,zero,435e8 <detectPattern+0x1cb4>
   435d4:	010000c4 	movi	r4,3
   435d8:	e17ffd17 	ldw	r5,-12(fp)
   435dc:	01800084 	movi	r6,2
   435e0:	004366c0 	call	4366c <comp>
   435e4:	10000526 	beq	r2,zero,435fc <detectPattern+0x1cc8>
				*key=ccp[11];
   435e8:	e0bffd17 	ldw	r2,-12(fp)
   435ec:	10c002c3 	ldbu	r3,11(r2)
   435f0:	e0bfff17 	ldw	r2,-4(fp)
   435f4:	10c00005 	stb	r3,0(r2)
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
				comp(2, ccp, 6) && seriesComp(ccp, 3, 4, 8)))
		{
			pat=208;
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   435f8:	00001206 	br	43644 <detectPattern+0x1d10>
				*key=ccp[11];
			else if(comp(3, ccp, 17))
   435fc:	010000c4 	movi	r4,3
   43600:	e17ffd17 	ldw	r5,-12(fp)
   43604:	01800444 	movi	r6,17
   43608:	004366c0 	call	4366c <comp>
   4360c:	10000526 	beq	r2,zero,43624 <detectPattern+0x1cf0>
				*key=ccp[17];
   43610:	e0bffd17 	ldw	r2,-12(fp)
   43614:	10c00443 	ldbu	r3,17(r2)
   43618:	e0bfff17 	ldw	r2,-4(fp)
   4361c:	10c00005 	stb	r3,0(r2)
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
				comp(2, ccp, 6) && seriesComp(ccp, 3, 4, 8)))
		{
			pat=208;
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   43620:	00000806 	br	43644 <detectPattern+0x1d10>
				*key=ccp[11];
			else if(comp(3, ccp, 17))
				*key=ccp[17];
			else
				*key=ccp[15];
   43624:	e0bffd17 	ldw	r2,-12(fp)
   43628:	10c003c3 	ldbu	r3,15(r2)
   4362c:	e0bfff17 	ldw	r2,-4(fp)
   43630:	10c00005 	stb	r3,0(r2)
				seriesComp(ccp, 3, 4, 6) && comp(2, ccp, 18)) ||
				(comp(2, ccp, 0) && comp(2, ccp, 2) && comp(2, ccp, 4) &&
				comp(2, ccp, 6) && seriesComp(ccp, 3, 4, 8)))
		{
			pat=208;
			if(comp(3, ccp, 0) || comp(3, ccp, 2))
   43634:	00000306 	br	43644 <detectPattern+0x1d10>
				*key=ccp[17];
			else
				*key=ccp[15];
		}
		else
			pat=-1;
   43638:	00bfffc4 	movi	r2,-1
   4363c:	e0bffc15 	stw	r2,-16(fp)
		break;
   43640:	00000406 	br	43654 <detectPattern+0x1d20>
   43644:	00000306 	br	43654 <detectPattern+0x1d20>
	default:
		pat=-1;
   43648:	00bfffc4 	movi	r2,-1
   4364c:	e0bffc15 	stw	r2,-16(fp)
		break;
   43650:	0001883a 	nop
	}

	return pat;
   43654:	e0bffc17 	ldw	r2,-16(fp)
}
   43658:	e037883a 	mov	sp,fp
   4365c:	dfc00117 	ldw	ra,4(sp)
   43660:	df000017 	ldw	fp,0(sp)
   43664:	dec00204 	addi	sp,sp,8
   43668:	f800283a 	ret

0004366c <comp>:

Boolean comp(int num, char* ch, int start){
   4366c:	defffb04 	addi	sp,sp,-20
   43670:	df000415 	stw	fp,16(sp)
   43674:	df000404 	addi	fp,sp,16
   43678:	e13ffd15 	stw	r4,-12(fp)
   4367c:	e17ffe15 	stw	r5,-8(fp)
   43680:	e1bfff15 	stw	r6,-4(fp)
	Boolean res;
	switch(num){
   43684:	e0bffd17 	ldw	r2,-12(fp)
   43688:	10c000e0 	cmpeqi	r3,r2,3
   4368c:	1800171e 	bne	r3,zero,436ec <comp+0x80>
   43690:	10c00120 	cmpeqi	r3,r2,4
   43694:	18003a1e 	bne	r3,zero,43780 <comp+0x114>
   43698:	108000a0 	cmpeqi	r2,r2,2
   4369c:	10006d26 	beq	r2,zero,43854 <comp+0x1e8>
	case 2:
		res=(ch[start]==ch[start+1]);
   436a0:	e0bfff17 	ldw	r2,-4(fp)
   436a4:	e0fffe17 	ldw	r3,-8(fp)
   436a8:	1885883a 	add	r2,r3,r2
   436ac:	10c00003 	ldbu	r3,0(r2)
   436b0:	e0bfff17 	ldw	r2,-4(fp)
   436b4:	10800044 	addi	r2,r2,1
   436b8:	e13ffe17 	ldw	r4,-8(fp)
   436bc:	2085883a 	add	r2,r4,r2
   436c0:	10800003 	ldbu	r2,0(r2)
   436c4:	18c03fcc 	andi	r3,r3,255
   436c8:	18c0201c 	xori	r3,r3,128
   436cc:	18ffe004 	addi	r3,r3,-128
   436d0:	10803fcc 	andi	r2,r2,255
   436d4:	1080201c 	xori	r2,r2,128
   436d8:	10bfe004 	addi	r2,r2,-128
   436dc:	1885003a 	cmpeq	r2,r3,r2
   436e0:	10803fcc 	andi	r2,r2,255
   436e4:	e0bffc15 	stw	r2,-16(fp)
		break;
   436e8:	00005a06 	br	43854 <comp+0x1e8>
	case 3:
		res=(ch[start]==ch[start+1] && ch[start]==ch[start+2]);
   436ec:	e0bfff17 	ldw	r2,-4(fp)
   436f0:	e0fffe17 	ldw	r3,-8(fp)
   436f4:	1885883a 	add	r2,r3,r2
   436f8:	10c00003 	ldbu	r3,0(r2)
   436fc:	e0bfff17 	ldw	r2,-4(fp)
   43700:	10800044 	addi	r2,r2,1
   43704:	e13ffe17 	ldw	r4,-8(fp)
   43708:	2085883a 	add	r2,r4,r2
   4370c:	10800003 	ldbu	r2,0(r2)
   43710:	18c03fcc 	andi	r3,r3,255
   43714:	18c0201c 	xori	r3,r3,128
   43718:	18ffe004 	addi	r3,r3,-128
   4371c:	10803fcc 	andi	r2,r2,255
   43720:	1080201c 	xori	r2,r2,128
   43724:	10bfe004 	addi	r2,r2,-128
   43728:	1880121e 	bne	r3,r2,43774 <comp+0x108>
   4372c:	e0bfff17 	ldw	r2,-4(fp)
   43730:	e0fffe17 	ldw	r3,-8(fp)
   43734:	1885883a 	add	r2,r3,r2
   43738:	10c00003 	ldbu	r3,0(r2)
   4373c:	e0bfff17 	ldw	r2,-4(fp)
   43740:	10800084 	addi	r2,r2,2
   43744:	e13ffe17 	ldw	r4,-8(fp)
   43748:	2085883a 	add	r2,r4,r2
   4374c:	10800003 	ldbu	r2,0(r2)
   43750:	18c03fcc 	andi	r3,r3,255
   43754:	18c0201c 	xori	r3,r3,128
   43758:	18ffe004 	addi	r3,r3,-128
   4375c:	10803fcc 	andi	r2,r2,255
   43760:	1080201c 	xori	r2,r2,128
   43764:	10bfe004 	addi	r2,r2,-128
   43768:	1880021e 	bne	r3,r2,43774 <comp+0x108>
   4376c:	00800044 	movi	r2,1
   43770:	00000106 	br	43778 <comp+0x10c>
   43774:	0005883a 	mov	r2,zero
   43778:	e0bffc15 	stw	r2,-16(fp)
		break;
   4377c:	00003506 	br	43854 <comp+0x1e8>
	case 4:
		res=(ch[start]==ch[start+1] && ch[start]==ch[start+2] && ch[start]==ch[start+3]);
   43780:	e0bfff17 	ldw	r2,-4(fp)
   43784:	e0fffe17 	ldw	r3,-8(fp)
   43788:	1885883a 	add	r2,r3,r2
   4378c:	10c00003 	ldbu	r3,0(r2)
   43790:	e0bfff17 	ldw	r2,-4(fp)
   43794:	10800044 	addi	r2,r2,1
   43798:	e13ffe17 	ldw	r4,-8(fp)
   4379c:	2085883a 	add	r2,r4,r2
   437a0:	10800003 	ldbu	r2,0(r2)
   437a4:	18c03fcc 	andi	r3,r3,255
   437a8:	18c0201c 	xori	r3,r3,128
   437ac:	18ffe004 	addi	r3,r3,-128
   437b0:	10803fcc 	andi	r2,r2,255
   437b4:	1080201c 	xori	r2,r2,128
   437b8:	10bfe004 	addi	r2,r2,-128
   437bc:	1880221e 	bne	r3,r2,43848 <comp+0x1dc>
   437c0:	e0bfff17 	ldw	r2,-4(fp)
   437c4:	e0fffe17 	ldw	r3,-8(fp)
   437c8:	1885883a 	add	r2,r3,r2
   437cc:	10c00003 	ldbu	r3,0(r2)
   437d0:	e0bfff17 	ldw	r2,-4(fp)
   437d4:	10800084 	addi	r2,r2,2
   437d8:	e13ffe17 	ldw	r4,-8(fp)
   437dc:	2085883a 	add	r2,r4,r2
   437e0:	10800003 	ldbu	r2,0(r2)
   437e4:	18c03fcc 	andi	r3,r3,255
   437e8:	18c0201c 	xori	r3,r3,128
   437ec:	18ffe004 	addi	r3,r3,-128
   437f0:	10803fcc 	andi	r2,r2,255
   437f4:	1080201c 	xori	r2,r2,128
   437f8:	10bfe004 	addi	r2,r2,-128
   437fc:	1880121e 	bne	r3,r2,43848 <comp+0x1dc>
   43800:	e0bfff17 	ldw	r2,-4(fp)
   43804:	e0fffe17 	ldw	r3,-8(fp)
   43808:	1885883a 	add	r2,r3,r2
   4380c:	10c00003 	ldbu	r3,0(r2)
   43810:	e0bfff17 	ldw	r2,-4(fp)
   43814:	108000c4 	addi	r2,r2,3
   43818:	e13ffe17 	ldw	r4,-8(fp)
   4381c:	2085883a 	add	r2,r4,r2
   43820:	10800003 	ldbu	r2,0(r2)
   43824:	18c03fcc 	andi	r3,r3,255
   43828:	18c0201c 	xori	r3,r3,128
   4382c:	18ffe004 	addi	r3,r3,-128
   43830:	10803fcc 	andi	r2,r2,255
   43834:	1080201c 	xori	r2,r2,128
   43838:	10bfe004 	addi	r2,r2,-128
   4383c:	1880021e 	bne	r3,r2,43848 <comp+0x1dc>
   43840:	00800044 	movi	r2,1
   43844:	00000106 	br	4384c <comp+0x1e0>
   43848:	0005883a 	mov	r2,zero
   4384c:	e0bffc15 	stw	r2,-16(fp)
		break;
   43850:	0001883a 	nop
	}
	return res;
   43854:	e0bffc17 	ldw	r2,-16(fp)
}
   43858:	e037883a 	mov	sp,fp
   4385c:	df000017 	ldw	fp,0(sp)
   43860:	dec00104 	addi	sp,sp,4
   43864:	f800283a 	ret

00043868 <seriesComp>:

// 2x6: seriesComp(ccp, 2, 6, 0);
Boolean seriesComp(char* ch, int num, int sn, int start){
   43868:	defff804 	addi	sp,sp,-32
   4386c:	dfc00715 	stw	ra,28(sp)
   43870:	df000615 	stw	fp,24(sp)
   43874:	df000604 	addi	fp,sp,24
   43878:	e13ffc15 	stw	r4,-16(fp)
   4387c:	e17ffd15 	stw	r5,-12(fp)
   43880:	e1bffe15 	stw	r6,-8(fp)
   43884:	e1ffff15 	stw	r7,-4(fp)
	int i;
	Boolean res=TRUE;
   43888:	00800044 	movi	r2,1
   4388c:	e0bffb15 	stw	r2,-20(fp)
	for(i=0; i<sn-1; i++){
   43890:	e03ffa15 	stw	zero,-24(fp)
   43894:	00003006 	br	43958 <seriesComp+0xf0>
		res &= comp(num, ch, start+i*num);
   43898:	e0fffa17 	ldw	r3,-24(fp)
   4389c:	e0bffd17 	ldw	r2,-12(fp)
   438a0:	1887383a 	mul	r3,r3,r2
   438a4:	e0bfff17 	ldw	r2,-4(fp)
   438a8:	1885883a 	add	r2,r3,r2
   438ac:	e13ffd17 	ldw	r4,-12(fp)
   438b0:	e17ffc17 	ldw	r5,-16(fp)
   438b4:	100d883a 	mov	r6,r2
   438b8:	004366c0 	call	4366c <comp>
   438bc:	e0fffb17 	ldw	r3,-20(fp)
   438c0:	1884703a 	and	r2,r3,r2
   438c4:	e0bffb15 	stw	r2,-20(fp)
		res &= (ch[num+start+i*num-1]+1==ch[num+start+i*num]);
   438c8:	e0fffd17 	ldw	r3,-12(fp)
   438cc:	e0bfff17 	ldw	r2,-4(fp)
   438d0:	1887883a 	add	r3,r3,r2
   438d4:	e13ffa17 	ldw	r4,-24(fp)
   438d8:	e0bffd17 	ldw	r2,-12(fp)
   438dc:	2085383a 	mul	r2,r4,r2
   438e0:	1885883a 	add	r2,r3,r2
   438e4:	10bfffc4 	addi	r2,r2,-1
   438e8:	e0fffc17 	ldw	r3,-16(fp)
   438ec:	1885883a 	add	r2,r3,r2
   438f0:	10800003 	ldbu	r2,0(r2)
   438f4:	10803fcc 	andi	r2,r2,255
   438f8:	1080201c 	xori	r2,r2,128
   438fc:	10bfe004 	addi	r2,r2,-128
   43900:	10c00044 	addi	r3,r2,1
   43904:	e13ffd17 	ldw	r4,-12(fp)
   43908:	e0bfff17 	ldw	r2,-4(fp)
   4390c:	2089883a 	add	r4,r4,r2
   43910:	e17ffa17 	ldw	r5,-24(fp)
   43914:	e0bffd17 	ldw	r2,-12(fp)
   43918:	2885383a 	mul	r2,r5,r2
   4391c:	2085883a 	add	r2,r4,r2
   43920:	e13ffc17 	ldw	r4,-16(fp)
   43924:	2085883a 	add	r2,r4,r2
   43928:	10800003 	ldbu	r2,0(r2)
   4392c:	10803fcc 	andi	r2,r2,255
   43930:	1080201c 	xori	r2,r2,128
   43934:	10bfe004 	addi	r2,r2,-128
   43938:	1885003a 	cmpeq	r2,r3,r2
   4393c:	10803fcc 	andi	r2,r2,255
   43940:	e0fffb17 	ldw	r3,-20(fp)
   43944:	1884703a 	and	r2,r3,r2
   43948:	e0bffb15 	stw	r2,-20(fp)

// 2x6: seriesComp(ccp, 2, 6, 0);
Boolean seriesComp(char* ch, int num, int sn, int start){
	int i;
	Boolean res=TRUE;
	for(i=0; i<sn-1; i++){
   4394c:	e0bffa17 	ldw	r2,-24(fp)
   43950:	10800044 	addi	r2,r2,1
   43954:	e0bffa15 	stw	r2,-24(fp)
   43958:	e0bffe17 	ldw	r2,-8(fp)
   4395c:	10bfffc4 	addi	r2,r2,-1
   43960:	e0fffa17 	ldw	r3,-24(fp)
   43964:	18bfcc16 	blt	r3,r2,43898 <__alt_data_end+0xfffd1898>
		res &= comp(num, ch, start+i*num);
		res &= (ch[num+start+i*num-1]+1==ch[num+start+i*num]);
	}
	res &= comp(num, ch, start+i*num);
   43968:	e0fffa17 	ldw	r3,-24(fp)
   4396c:	e0bffd17 	ldw	r2,-12(fp)
   43970:	1887383a 	mul	r3,r3,r2
   43974:	e0bfff17 	ldw	r2,-4(fp)
   43978:	1885883a 	add	r2,r3,r2
   4397c:	e13ffd17 	ldw	r4,-12(fp)
   43980:	e17ffc17 	ldw	r5,-16(fp)
   43984:	100d883a 	mov	r6,r2
   43988:	004366c0 	call	4366c <comp>
   4398c:	e0fffb17 	ldw	r3,-20(fp)
   43990:	1884703a 	and	r2,r3,r2
   43994:	e0bffb15 	stw	r2,-20(fp)
	return res;
   43998:	e0bffb17 	ldw	r2,-20(fp)
}
   4399c:	e037883a 	mov	sp,fp
   439a0:	dfc00117 	ldw	ra,4(sp)
   439a4:	df000017 	ldw	fp,0(sp)
   439a8:	dec00204 	addi	sp,sp,8
   439ac:	f800283a 	ret

000439b0 <seriesCompWithOnes>:

// 2x6+1x2: seriesCompWithOnes(ccp, 2, 6, 2);
Boolean seriesCompWithOnes(char* ch, int num, int sn, int one){
   439b0:	defff804 	addi	sp,sp,-32
   439b4:	dfc00715 	stw	ra,28(sp)
   439b8:	df000615 	stw	fp,24(sp)
   439bc:	df000604 	addi	fp,sp,24
   439c0:	e13ffc15 	stw	r4,-16(fp)
   439c4:	e17ffd15 	stw	r5,-12(fp)
   439c8:	e1bffe15 	stw	r6,-8(fp)
   439cc:	e1ffff15 	stw	r7,-4(fp)
	Boolean res=TRUE;
   439d0:	00800044 	movi	r2,1
   439d4:	e0bffa15 	stw	r2,-24(fp)
	int i;
	for (i=0; i<=one; i++)
   439d8:	e03ffb15 	stw	zero,-20(fp)
   439dc:	00000b06 	br	43a0c <seriesCompWithOnes+0x5c>
		res&=seriesComp(ch, num, sn, i);
   439e0:	e13ffc17 	ldw	r4,-16(fp)
   439e4:	e17ffd17 	ldw	r5,-12(fp)
   439e8:	e1bffe17 	ldw	r6,-8(fp)
   439ec:	e1fffb17 	ldw	r7,-20(fp)
   439f0:	00438680 	call	43868 <seriesComp>
   439f4:	e0fffa17 	ldw	r3,-24(fp)
   439f8:	1884703a 	and	r2,r3,r2
   439fc:	e0bffa15 	stw	r2,-24(fp)

// 2x6+1x2: seriesCompWithOnes(ccp, 2, 6, 2);
Boolean seriesCompWithOnes(char* ch, int num, int sn, int one){
	Boolean res=TRUE;
	int i;
	for (i=0; i<=one; i++)
   43a00:	e0bffb17 	ldw	r2,-20(fp)
   43a04:	10800044 	addi	r2,r2,1
   43a08:	e0bffb15 	stw	r2,-20(fp)
   43a0c:	e0bffb17 	ldw	r2,-20(fp)
   43a10:	e0ffff17 	ldw	r3,-4(fp)
   43a14:	18bff20e 	bge	r3,r2,439e0 <__alt_data_end+0xfffd19e0>
		res&=seriesComp(ch, num, sn, i);
	return res;
   43a18:	e0bffa17 	ldw	r2,-24(fp)
}
   43a1c:	e037883a 	mov	sp,fp
   43a20:	dfc00117 	ldw	ra,4(sp)
   43a24:	df000017 	ldw	fp,0(sp)
   43a28:	dec00204 	addi	sp,sp,8
   43a2c:	f800283a 	ret

00043a30 <play>:
#include "comsheader.h"

/**
 *
 */
int play(){
   43a30:	deffee04 	addi	sp,sp,-72
   43a34:	dfc01115 	stw	ra,68(sp)
   43a38:	df001015 	stw	fp,64(sp)
   43a3c:	dc400f15 	stw	r17,60(sp)
   43a40:	dc000e15 	stw	r16,56(sp)
   43a44:	df000e04 	addi	fp,sp,56
	int pass=0;
   43a48:	e03ff215 	stw	zero,-56(fp)
	Boolean firstRound=FALSE;
   43a4c:	e03ff315 	stw	zero,-52(fp)
	// true if first round
	if(ll==myNum)
   43a50:	008001b4 	movhi	r2,6
   43a54:	10a607c4 	addi	r2,r2,-26593
   43a58:	10c00003 	ldbu	r3,0(r2)
   43a5c:	008001b4 	movhi	r2,6
   43a60:	10a60a04 	addi	r2,r2,-26584
   43a64:	10800003 	ldbu	r2,0(r2)
   43a68:	18c03fcc 	andi	r3,r3,255
   43a6c:	18c0201c 	xori	r3,r3,128
   43a70:	18ffe004 	addi	r3,r3,-128
   43a74:	10803fcc 	andi	r2,r2,255
   43a78:	1080201c 	xori	r2,r2,128
   43a7c:	10bfe004 	addi	r2,r2,-128
   43a80:	1880021e 	bne	r3,r2,43a8c <play+0x5c>
		firstRound=TRUE;
   43a84:	00800044 	movi	r2,1
   43a88:	e0bff315 	stw	r2,-52(fp)
	// use for "for loop"
	int i;
	// number of cards played
	int number = 0;
   43a8c:	e03ff615 	stw	zero,-40(fp)
	// pattern code
	int pattern=0; //sync
   43a90:	e03ff715 	stw	zero,-36(fp)
	int temp; //for sync
	// current card played, no need to init
	char ccp[20];
	// key value of card played
	int key=CUTOFF; //sync
   43a94:	008003c4 	movi	r2,15
   43a98:	e0bffe15 	stw	r2,-8(fp)
	char card[3];
	Boolean check;
	//checkPattern
	printf("Current Player: %d\n", PCS);
   43a9c:	008001b4 	movhi	r2,6
   43aa0:	10a60f44 	addi	r2,r2,-26563
   43aa4:	10800003 	ldbu	r2,0(r2)
   43aa8:	10803fcc 	andi	r2,r2,255
   43aac:	1080201c 	xori	r2,r2,128
   43ab0:	10bfe004 	addi	r2,r2,-128
   43ab4:	01000174 	movhi	r4,5
   43ab8:	2116a904 	addi	r4,r4,23204
   43abc:	100b883a 	mov	r5,r2
   43ac0:	00459080 	call	45908 <printf>
	while(!haveWinner()){
   43ac4:	0001da06 	br	44230 <play+0x800>
		if(isCurrentPlayer()){
   43ac8:	0044f640 	call	44f64 <isCurrentPlayer>
   43acc:	10014e26 	beq	r2,zero,44008 <play+0x5d8>
			check=TRUE;
   43ad0:	00800044 	movi	r2,1
   43ad4:	e0bff515 	stw	r2,-44(fp)
			do{
				if(!check)
   43ad8:	e0bff517 	ldw	r2,-44(fp)
   43adc:	1000031e 	bne	r2,zero,43aec <play+0xbc>
					printf("Your Inputs Are Illegal, Please Input Again\n");
   43ae0:	01000174 	movhi	r4,5
   43ae4:	2116ae04 	addi	r4,r4,23224
   43ae8:	00459ec0 	call	459ec <puts>
				check=FALSE;
   43aec:	e03ff515 	stw	zero,-44(fp)
				//input to ccp, check num here
				display();
   43af0:	00449140 	call	44914 <display>
				printf("hey player, tell me the number of cards you want to play this round."
   43af4:	01000174 	movhi	r4,5
   43af8:	2116b904 	addi	r4,r4,23268
   43afc:	00459ec0 	call	459ec <puts>
						"You can input 0 if you want to give up\n");
				scanf(" %d", &number);
   43b00:	e0bff604 	addi	r2,fp,-40
   43b04:	01000174 	movhi	r4,5
   43b08:	2116d404 	addi	r4,r4,23376
   43b0c:	100b883a 	mov	r5,r2
   43b10:	0045a600 	call	45a60 <scanf>
				for(i=0;i<number;i++) {
   43b14:	e03ff415 	stw	zero,-48(fp)
   43b18:	0000ba06 	br	43e04 <play+0x3d4>
					if(!i)
   43b1c:	e0bff417 	ldw	r2,-48(fp)
   43b20:	1000041e 	bne	r2,zero,43b34 <play+0x104>
						printf("please tell me the card you want to play this round. One by One please. \n");
   43b24:	01000174 	movhi	r4,5
   43b28:	2116d504 	addi	r4,r4,23380
   43b2c:	00459ec0 	call	459ec <puts>
   43b30:	00000306 	br	43b40 <play+0x110>
					else
						printf("please tell me the next card you want to play. \n");
   43b34:	01000174 	movhi	r4,5
   43b38:	2116e804 	addi	r4,r4,23456
   43b3c:	00459ec0 	call	459ec <puts>
					scanf("%s", card);
   43b40:	e0bfff04 	addi	r2,fp,-4
   43b44:	01000174 	movhi	r4,5
   43b48:	2116f404 	addi	r4,r4,23504
   43b4c:	100b883a 	mov	r5,r2
   43b50:	0045a600 	call	45a60 <scanf>
					switch(card[0]){
   43b54:	e0bfff03 	ldbu	r2,-4(fp)
   43b58:	10803fcc 	andi	r2,r2,255
   43b5c:	1080201c 	xori	r2,r2,128
   43b60:	10bfe004 	addi	r2,r2,-128
   43b64:	10bff3c4 	addi	r2,r2,-49
   43b68:	10c010a8 	cmpgeui	r3,r2,66
   43b6c:	1800a21e 	bne	r3,zero,43df8 <play+0x3c8>
   43b70:	1085883a 	add	r2,r2,r2
   43b74:	1087883a 	add	r3,r2,r2
   43b78:	00800134 	movhi	r2,4
   43b7c:	108ee304 	addi	r2,r2,15244
   43b80:	1885883a 	add	r2,r3,r2
   43b84:	10800017 	ldw	r2,0(r2)
   43b88:	1000683a 	jmp	r2
   43b8c:	00043d68 	cmpgeui	zero,zero,4341
   43b90:	00043cac 	andhi	zero,zero,4338
   43b94:	00043cc4 	movi	zero,4339
   43b98:	00043cd8 	cmpnei	zero,zero,4339
   43b9c:	00043cf0 	cmpltui	zero,zero,4339
   43ba0:	00043d08 	cmpgei	zero,zero,4340
   43ba4:	00043d20 	cmpeqi	zero,zero,4340
   43ba8:	00043d38 	rdprs	zero,zero,4340
   43bac:	00043d50 	cmplti	zero,zero,4341
   43bb0:	00043df8 	rdprs	zero,zero,4343
   43bb4:	00043df8 	rdprs	zero,zero,4343
   43bb8:	00043df8 	rdprs	zero,zero,4343
   43bbc:	00043df8 	rdprs	zero,zero,4343
   43bc0:	00043df8 	rdprs	zero,zero,4343
   43bc4:	00043df8 	rdprs	zero,zero,4343
   43bc8:	00043df8 	rdprs	zero,zero,4343
   43bcc:	00043c94 	movui	zero,4338
   43bd0:	00043dc8 	cmpgei	zero,zero,4343
   43bd4:	00043df8 	rdprs	zero,zero,4343
   43bd8:	00043df8 	rdprs	zero,zero,4343
   43bdc:	00043df8 	rdprs	zero,zero,4343
   43be0:	00043df8 	rdprs	zero,zero,4343
   43be4:	00043df8 	rdprs	zero,zero,4343
   43be8:	00043df8 	rdprs	zero,zero,4343
   43bec:	00043df8 	rdprs	zero,zero,4343
   43bf0:	00043d80 	call	43d8 <__reset-0x3bc28>
   43bf4:	00043db0 	cmpltui	zero,zero,4342
   43bf8:	00043df8 	rdprs	zero,zero,4343
   43bfc:	00043df8 	rdprs	zero,zero,4343
   43c00:	00043df8 	rdprs	zero,zero,4343
   43c04:	00043df8 	rdprs	zero,zero,4343
   43c08:	00043df8 	rdprs	zero,zero,4343
   43c0c:	00043d98 	cmpnei	zero,zero,4342
   43c10:	00043de0 	cmpeqi	zero,zero,4343
   43c14:	00043df8 	rdprs	zero,zero,4343
   43c18:	00043df8 	rdprs	zero,zero,4343
   43c1c:	00043df8 	rdprs	zero,zero,4343
   43c20:	00043df8 	rdprs	zero,zero,4343
   43c24:	00043df8 	rdprs	zero,zero,4343
   43c28:	00043df8 	rdprs	zero,zero,4343
   43c2c:	00043df8 	rdprs	zero,zero,4343
   43c30:	00043df8 	rdprs	zero,zero,4343
   43c34:	00043df8 	rdprs	zero,zero,4343
   43c38:	00043df8 	rdprs	zero,zero,4343
   43c3c:	00043df8 	rdprs	zero,zero,4343
   43c40:	00043df8 	rdprs	zero,zero,4343
   43c44:	00043df8 	rdprs	zero,zero,4343
   43c48:	00043df8 	rdprs	zero,zero,4343
   43c4c:	00043c94 	movui	zero,4338
   43c50:	00043dc8 	cmpgei	zero,zero,4343
   43c54:	00043df8 	rdprs	zero,zero,4343
   43c58:	00043df8 	rdprs	zero,zero,4343
   43c5c:	00043df8 	rdprs	zero,zero,4343
   43c60:	00043df8 	rdprs	zero,zero,4343
   43c64:	00043df8 	rdprs	zero,zero,4343
   43c68:	00043df8 	rdprs	zero,zero,4343
   43c6c:	00043df8 	rdprs	zero,zero,4343
   43c70:	00043d80 	call	43d8 <__reset-0x3bc28>
   43c74:	00043db0 	cmpltui	zero,zero,4342
   43c78:	00043df8 	rdprs	zero,zero,4343
   43c7c:	00043df8 	rdprs	zero,zero,4343
   43c80:	00043df8 	rdprs	zero,zero,4343
   43c84:	00043df8 	rdprs	zero,zero,4343
   43c88:	00043df8 	rdprs	zero,zero,4343
   43c8c:	00043d98 	cmpnei	zero,zero,4342
   43c90:	00043de0 	cmpeqi	zero,zero,4343
						case 'a':
						case 'A':
							ccp[i]=11;
   43c94:	e0fff904 	addi	r3,fp,-28
   43c98:	e0bff417 	ldw	r2,-48(fp)
   43c9c:	1885883a 	add	r2,r3,r2
   43ca0:	00c002c4 	movi	r3,11
   43ca4:	10c00005 	stb	r3,0(r2)
							break;
   43ca8:	00005306 	br	43df8 <play+0x3c8>
						case '2':
							ccp[i]=12;
   43cac:	e0fff904 	addi	r3,fp,-28
   43cb0:	e0bff417 	ldw	r2,-48(fp)
   43cb4:	1885883a 	add	r2,r3,r2
   43cb8:	00c00304 	movi	r3,12
   43cbc:	10c00005 	stb	r3,0(r2)
							break;
   43cc0:	00004d06 	br	43df8 <play+0x3c8>
						case '3':
							ccp[i]=0;
   43cc4:	e0fff904 	addi	r3,fp,-28
   43cc8:	e0bff417 	ldw	r2,-48(fp)
   43ccc:	1885883a 	add	r2,r3,r2
   43cd0:	10000005 	stb	zero,0(r2)
							break;
   43cd4:	00004806 	br	43df8 <play+0x3c8>
						case '4':
							ccp[i]=1;
   43cd8:	e0fff904 	addi	r3,fp,-28
   43cdc:	e0bff417 	ldw	r2,-48(fp)
   43ce0:	1885883a 	add	r2,r3,r2
   43ce4:	00c00044 	movi	r3,1
   43ce8:	10c00005 	stb	r3,0(r2)
							break;
   43cec:	00004206 	br	43df8 <play+0x3c8>
						case '5':
							ccp[i]=2;
   43cf0:	e0fff904 	addi	r3,fp,-28
   43cf4:	e0bff417 	ldw	r2,-48(fp)
   43cf8:	1885883a 	add	r2,r3,r2
   43cfc:	00c00084 	movi	r3,2
   43d00:	10c00005 	stb	r3,0(r2)
							break;
   43d04:	00003c06 	br	43df8 <play+0x3c8>
						case '6':
							ccp[i]=3;
   43d08:	e0fff904 	addi	r3,fp,-28
   43d0c:	e0bff417 	ldw	r2,-48(fp)
   43d10:	1885883a 	add	r2,r3,r2
   43d14:	00c000c4 	movi	r3,3
   43d18:	10c00005 	stb	r3,0(r2)
							break;
   43d1c:	00003606 	br	43df8 <play+0x3c8>
						case '7':
							ccp[i]=4;
   43d20:	e0fff904 	addi	r3,fp,-28
   43d24:	e0bff417 	ldw	r2,-48(fp)
   43d28:	1885883a 	add	r2,r3,r2
   43d2c:	00c00104 	movi	r3,4
   43d30:	10c00005 	stb	r3,0(r2)
							break;
   43d34:	00003006 	br	43df8 <play+0x3c8>
						case '8':
							ccp[i]=5;
   43d38:	e0fff904 	addi	r3,fp,-28
   43d3c:	e0bff417 	ldw	r2,-48(fp)
   43d40:	1885883a 	add	r2,r3,r2
   43d44:	00c00144 	movi	r3,5
   43d48:	10c00005 	stb	r3,0(r2)
							break;
   43d4c:	00002a06 	br	43df8 <play+0x3c8>
						case '9':
							ccp[i]=6;
   43d50:	e0fff904 	addi	r3,fp,-28
   43d54:	e0bff417 	ldw	r2,-48(fp)
   43d58:	1885883a 	add	r2,r3,r2
   43d5c:	00c00184 	movi	r3,6
   43d60:	10c00005 	stb	r3,0(r2)
							break;
   43d64:	00002406 	br	43df8 <play+0x3c8>
						case '1':
							ccp[i]=7;
   43d68:	e0fff904 	addi	r3,fp,-28
   43d6c:	e0bff417 	ldw	r2,-48(fp)
   43d70:	1885883a 	add	r2,r3,r2
   43d74:	00c001c4 	movi	r3,7
   43d78:	10c00005 	stb	r3,0(r2)
							break;
   43d7c:	00001e06 	br	43df8 <play+0x3c8>
						case 'j':
						case 'J':
							ccp[i]=8;
   43d80:	e0fff904 	addi	r3,fp,-28
   43d84:	e0bff417 	ldw	r2,-48(fp)
   43d88:	1885883a 	add	r2,r3,r2
   43d8c:	00c00204 	movi	r3,8
   43d90:	10c00005 	stb	r3,0(r2)
							break;
   43d94:	00001806 	br	43df8 <play+0x3c8>
						case 'q':
						case 'Q':
							ccp[i]=9;
   43d98:	e0fff904 	addi	r3,fp,-28
   43d9c:	e0bff417 	ldw	r2,-48(fp)
   43da0:	1885883a 	add	r2,r3,r2
   43da4:	00c00244 	movi	r3,9
   43da8:	10c00005 	stb	r3,0(r2)
							break;
   43dac:	00001206 	br	43df8 <play+0x3c8>
						case 'k':
						case 'K':
							ccp[i]=10;
   43db0:	e0fff904 	addi	r3,fp,-28
   43db4:	e0bff417 	ldw	r2,-48(fp)
   43db8:	1885883a 	add	r2,r3,r2
   43dbc:	00c00284 	movi	r3,10
   43dc0:	10c00005 	stb	r3,0(r2)
							break;
   43dc4:	00000c06 	br	43df8 <play+0x3c8>
						case 'b':
						case 'B':
							ccp[i]=13;
   43dc8:	e0fff904 	addi	r3,fp,-28
   43dcc:	e0bff417 	ldw	r2,-48(fp)
   43dd0:	1885883a 	add	r2,r3,r2
   43dd4:	00c00344 	movi	r3,13
   43dd8:	10c00005 	stb	r3,0(r2)
							break;
   43ddc:	00000606 	br	43df8 <play+0x3c8>
						case 'r':
						case 'R':
							ccp[i]=14;
   43de0:	e0fff904 	addi	r3,fp,-28
   43de4:	e0bff417 	ldw	r2,-48(fp)
   43de8:	1885883a 	add	r2,r3,r2
   43dec:	00c00384 	movi	r3,14
   43df0:	10c00005 	stb	r3,0(r2)
							break;
   43df4:	0001883a 	nop
				//input to ccp, check num here
				display();
				printf("hey player, tell me the number of cards you want to play this round."
						"You can input 0 if you want to give up\n");
				scanf(" %d", &number);
				for(i=0;i<number;i++) {
   43df8:	e0bff417 	ldw	r2,-48(fp)
   43dfc:	10800044 	addi	r2,r2,1
   43e00:	e0bff415 	stw	r2,-48(fp)
   43e04:	e0bff617 	ldw	r2,-40(fp)
   43e08:	e0fff417 	ldw	r3,-48(fp)
   43e0c:	18bf4316 	blt	r3,r2,43b1c <__alt_data_end+0xfffd1b1c>
						case 'R':
							ccp[i]=14;
							break;
					}
				}
				if(number && checkCards(number, ccp))
   43e10:	e0bff617 	ldw	r2,-40(fp)
   43e14:	10001126 	beq	r2,zero,43e5c <play+0x42c>
   43e18:	e0fff617 	ldw	r3,-40(fp)
   43e1c:	e0bff904 	addi	r2,fp,-28
   43e20:	1809883a 	mov	r4,r3
   43e24:	100b883a 	mov	r5,r2
   43e28:	00444b00 	call	444b0 <checkCards>
   43e2c:	10000b26 	beq	r2,zero,43e5c <play+0x42c>
					check=checkPatternAndValue(&pattern, ccp, number, &key);
   43e30:	e0bff617 	ldw	r2,-40(fp)
   43e34:	10c03fcc 	andi	r3,r2,255
   43e38:	18c0201c 	xori	r3,r3,128
   43e3c:	18ffe004 	addi	r3,r3,-128
   43e40:	e13ff704 	addi	r4,fp,-36
   43e44:	e17ff904 	addi	r5,fp,-28
   43e48:	e0bffe04 	addi	r2,fp,-8
   43e4c:	180d883a 	mov	r6,r3
   43e50:	100f883a 	mov	r7,r2
   43e54:	00418280 	call	41828 <checkPatternAndValue>
   43e58:	e0bff515 	stw	r2,-44(fp)
				printf("check: %d\nkey: %d\n", pattern, key);
   43e5c:	e0fff717 	ldw	r3,-36(fp)
   43e60:	e0bffe17 	ldw	r2,-8(fp)
   43e64:	01000174 	movhi	r4,5
   43e68:	2116f504 	addi	r4,r4,23508
   43e6c:	180b883a 	mov	r5,r3
   43e70:	100d883a 	mov	r6,r2
   43e74:	00459080 	call	45908 <printf>
			}while((number && !check) || (!number && firstRound));
   43e78:	e0bff617 	ldw	r2,-40(fp)
   43e7c:	10000226 	beq	r2,zero,43e88 <play+0x458>
   43e80:	e0bff517 	ldw	r2,-44(fp)
   43e84:	103f1426 	beq	r2,zero,43ad8 <__alt_data_end+0xfffd1ad8>
   43e88:	e0bff617 	ldw	r2,-40(fp)
   43e8c:	1000021e 	bne	r2,zero,43e98 <play+0x468>
   43e90:	e0bff317 	ldw	r2,-52(fp)
   43e94:	103f101e 	bne	r2,zero,43ad8 <__alt_data_end+0xfffd1ad8>
			if(!number){
   43e98:	e0bff617 	ldw	r2,-40(fp)
   43e9c:	1000051e 	bne	r2,zero,43eb4 <play+0x484>
				sendchar(CUTOFF | 0x40);
   43ea0:	010013c4 	movi	r4,79
   43ea4:	004028c0 	call	4028c <sendchar>
				usleep(10000);
   43ea8:	0109c404 	movi	r4,10000
   43eac:	00546340 	call	54634 <usleep>
   43eb0:	00009c06 	br	44124 <play+0x6f4>
			}
			else{
				if(firstRound)
   43eb4:	e0bff317 	ldw	r2,-52(fp)
   43eb8:	10000426 	beq	r2,zero,43ecc <play+0x49c>
					firstRound=!firstRound;
   43ebc:	e0bff317 	ldw	r2,-52(fp)
   43ec0:	1005003a 	cmpeq	r2,r2,zero
   43ec4:	10803fcc 	andi	r2,r2,255
   43ec8:	e0bff315 	stw	r2,-52(fp)
				sendchar(key | 0x40);
   43ecc:	e0bffe17 	ldw	r2,-8(fp)
   43ed0:	10801014 	ori	r2,r2,64
   43ed4:	1009883a 	mov	r4,r2
   43ed8:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43edc:	0100fa04 	movi	r4,1000
   43ee0:	00546340 	call	54634 <usleep>
				sendchar((pattern & 0x3f) | 0x40);
   43ee4:	e0bff717 	ldw	r2,-36(fp)
   43ee8:	10800fcc 	andi	r2,r2,63
   43eec:	10801014 	ori	r2,r2,64
   43ef0:	1009883a 	mov	r4,r2
   43ef4:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43ef8:	0100fa04 	movi	r4,1000
   43efc:	00546340 	call	54634 <usleep>
				sendchar((pattern >> 6) | 0x40);
   43f00:	e0bff717 	ldw	r2,-36(fp)
   43f04:	1005d1ba 	srai	r2,r2,6
   43f08:	10801014 	ori	r2,r2,64
   43f0c:	1009883a 	mov	r4,r2
   43f10:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43f14:	0100fa04 	movi	r4,1000
   43f18:	00546340 	call	54634 <usleep>
				deleteCards(number, ccp);
   43f1c:	e0fff617 	ldw	r3,-40(fp)
   43f20:	e0bff904 	addi	r2,fp,-28
   43f24:	1809883a 	mov	r4,r3
   43f28:	100b883a 	mov	r5,r2
   43f2c:	00447140 	call	44714 <deleteCards>
				temp=sramread(CHNP+myNum-1);
   43f30:	008001b4 	movhi	r2,6
   43f34:	10a60a04 	addi	r2,r2,-26584
   43f38:	10800003 	ldbu	r2,0(r2)
   43f3c:	10800d44 	addi	r2,r2,53
   43f40:	10803fcc 	andi	r2,r2,255
   43f44:	1080201c 	xori	r2,r2,128
   43f48:	10bfe004 	addi	r2,r2,-128
   43f4c:	1009883a 	mov	r4,r2
   43f50:	004019c0 	call	4019c <sramread>
   43f54:	e0bff815 	stw	r2,-32(fp)
				sramwrite(CHNP+myNum-1, temp-pattern/10);
   43f58:	008001b4 	movhi	r2,6
   43f5c:	10a60a04 	addi	r2,r2,-26584
   43f60:	10800003 	ldbu	r2,0(r2)
   43f64:	10800d44 	addi	r2,r2,53
   43f68:	14003fcc 	andi	r16,r2,255
   43f6c:	8400201c 	xori	r16,r16,128
   43f70:	843fe004 	addi	r16,r16,-128
   43f74:	e0bff817 	ldw	r2,-32(fp)
   43f78:	1023883a 	mov	r17,r2
   43f7c:	e0bff717 	ldw	r2,-36(fp)
   43f80:	1009883a 	mov	r4,r2
   43f84:	01400284 	movi	r5,10
   43f88:	00457280 	call	45728 <__divsi3>
   43f8c:	8885c83a 	sub	r2,r17,r2
   43f90:	10803fcc 	andi	r2,r2,255
   43f94:	1080201c 	xori	r2,r2,128
   43f98:	10bfe004 	addi	r2,r2,-128
   43f9c:	8009883a 	mov	r4,r16
   43fa0:	100b883a 	mov	r5,r2
   43fa4:	00401fc0 	call	401fc <sramwrite>
				usleep(1000);
   43fa8:	0100fa04 	movi	r4,1000
   43fac:	00546340 	call	54634 <usleep>
				sendchar(sramread(CHNP) | 0x40);
   43fb0:	01000d84 	movi	r4,54
   43fb4:	004019c0 	call	4019c <sramread>
   43fb8:	10801014 	ori	r2,r2,64
   43fbc:	1009883a 	mov	r4,r2
   43fc0:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43fc4:	0100fa04 	movi	r4,1000
   43fc8:	00546340 	call	54634 <usleep>
				sendchar(sramread(CHNP+1) | 0x40);
   43fcc:	01000dc4 	movi	r4,55
   43fd0:	004019c0 	call	4019c <sramread>
   43fd4:	10801014 	ori	r2,r2,64
   43fd8:	1009883a 	mov	r4,r2
   43fdc:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43fe0:	0100fa04 	movi	r4,1000
   43fe4:	00546340 	call	54634 <usleep>
				sendchar(sramread(CHNP+2) | 0x40);
   43fe8:	01000e04 	movi	r4,56
   43fec:	004019c0 	call	4019c <sramread>
   43ff0:	10801014 	ori	r2,r2,64
   43ff4:	1009883a 	mov	r4,r2
   43ff8:	004028c0 	call	4028c <sendchar>
				usleep(1000);
   43ffc:	0100fa04 	movi	r4,1000
   44000:	00546340 	call	54634 <usleep>
   44004:	00004706 	br	44124 <play+0x6f4>
			}
		}
		else{
			recvchar(&temp);
   44008:	e0bff804 	addi	r2,fp,-32
   4400c:	1009883a 	mov	r4,r2
   44010:	00403d80 	call	403d8 <recvchar>
			usleep(80);
   44014:	01001404 	movi	r4,80
   44018:	00546340 	call	54634 <usleep>
			if(temp!=CUTOFF){
   4401c:	e0bff817 	ldw	r2,-32(fp)
   44020:	108003e0 	cmpeqi	r2,r2,15
   44024:	1000361e 	bne	r2,zero,44100 <play+0x6d0>
				key=temp;
   44028:	e0bff817 	ldw	r2,-32(fp)
   4402c:	e0bffe15 	stw	r2,-8(fp)
				recvchar(&pattern); //last 6 bits
   44030:	e0bff704 	addi	r2,fp,-36
   44034:	1009883a 	mov	r4,r2
   44038:	00403d80 	call	403d8 <recvchar>
				usleep(80);
   4403c:	01001404 	movi	r4,80
   44040:	00546340 	call	54634 <usleep>
				recvchar(&temp); //11-6 bits of pattern
   44044:	e0bff804 	addi	r2,fp,-32
   44048:	1009883a 	mov	r4,r2
   4404c:	00403d80 	call	403d8 <recvchar>
				usleep(80);
   44050:	01001404 	movi	r4,80
   44054:	00546340 	call	54634 <usleep>
				pattern+=temp*64;
   44058:	e0bff817 	ldw	r2,-32(fp)
   4405c:	100691ba 	slli	r3,r2,6
   44060:	e0bff717 	ldw	r2,-36(fp)
   44064:	1885883a 	add	r2,r3,r2
   44068:	e0bff715 	stw	r2,-36(fp)
				recvchar(&temp);
   4406c:	e0bff804 	addi	r2,fp,-32
   44070:	1009883a 	mov	r4,r2
   44074:	00403d80 	call	403d8 <recvchar>
				usleep(80);
   44078:	01001404 	movi	r4,80
   4407c:	00546340 	call	54634 <usleep>
				sramwrite(CHNP, temp);
   44080:	e0bff817 	ldw	r2,-32(fp)
   44084:	10803fcc 	andi	r2,r2,255
   44088:	1080201c 	xori	r2,r2,128
   4408c:	10bfe004 	addi	r2,r2,-128
   44090:	01000d84 	movi	r4,54
   44094:	100b883a 	mov	r5,r2
   44098:	00401fc0 	call	401fc <sramwrite>
				recvchar(&temp);
   4409c:	e0bff804 	addi	r2,fp,-32
   440a0:	1009883a 	mov	r4,r2
   440a4:	00403d80 	call	403d8 <recvchar>
				usleep(80);
   440a8:	01001404 	movi	r4,80
   440ac:	00546340 	call	54634 <usleep>
				sramwrite(CHNP+1, temp);
   440b0:	e0bff817 	ldw	r2,-32(fp)
   440b4:	10803fcc 	andi	r2,r2,255
   440b8:	1080201c 	xori	r2,r2,128
   440bc:	10bfe004 	addi	r2,r2,-128
   440c0:	01000dc4 	movi	r4,55
   440c4:	100b883a 	mov	r5,r2
   440c8:	00401fc0 	call	401fc <sramwrite>
				recvchar(&temp);
   440cc:	e0bff804 	addi	r2,fp,-32
   440d0:	1009883a 	mov	r4,r2
   440d4:	00403d80 	call	403d8 <recvchar>
				usleep(80);
   440d8:	01001404 	movi	r4,80
   440dc:	00546340 	call	54634 <usleep>
				sramwrite(CHNP+2, temp);
   440e0:	e0bff817 	ldw	r2,-32(fp)
   440e4:	10803fcc 	andi	r2,r2,255
   440e8:	1080201c 	xori	r2,r2,128
   440ec:	10bfe004 	addi	r2,r2,-128
   440f0:	01000e04 	movi	r4,56
   440f4:	100b883a 	mov	r5,r2
   440f8:	00401fc0 	call	401fc <sramwrite>
   440fc:	00000906 	br	44124 <play+0x6f4>
			}
			else{
				pass++;
   44100:	e0bff217 	ldw	r2,-56(fp)
   44104:	10800044 	addi	r2,r2,1
   44108:	e0bff215 	stw	r2,-56(fp)
				if(pass==2){
   4410c:	e0bff217 	ldw	r2,-56(fp)
   44110:	10800098 	cmpnei	r2,r2,2
   44114:	1000031e 	bne	r2,zero,44124 <play+0x6f4>
					pass=0;
   44118:	e03ff215 	stw	zero,-56(fp)
					pattern=0;
   4411c:	e03ff715 	stw	zero,-36(fp)
					key=0;
   44120:	e03ffe15 	stw	zero,-8(fp)
				}
			}
		}
		if(pattern==42)
   44124:	e0bff717 	ldw	r2,-36(fp)
   44128:	10800a98 	cmpnei	r2,r2,42
   4412c:	1000081e 	bne	r2,zero,44150 <play+0x720>
			multiplier*=2;
   44130:	008001b4 	movhi	r2,6
   44134:	10a60f04 	addi	r2,r2,-26564
   44138:	10800003 	ldbu	r2,0(r2)
   4413c:	1085883a 	add	r2,r2,r2
   44140:	1007883a 	mov	r3,r2
   44144:	008001b4 	movhi	r2,6
   44148:	10a60f04 	addi	r2,r2,-26564
   4414c:	10c00005 	stb	r3,0(r2)
		temp=sramread(CHNP);
   44150:	01000d84 	movi	r4,54
   44154:	004019c0 	call	4019c <sramread>
   44158:	e0bff815 	stw	r2,-32(fp)
		printf("Pattern Is: %d\nKey Is: %d\nPlayer1 Num Remainds: %d\n", pattern, (key+3)%14+(key==11)+(key==12)+12*(key==13)+12*(key==14), temp);
   4415c:	e43ff717 	ldw	r16,-36(fp)
   44160:	e0bffe17 	ldw	r2,-8(fp)
   44164:	108000c4 	addi	r2,r2,3
   44168:	1009883a 	mov	r4,r2
   4416c:	01400384 	movi	r5,14
   44170:	00457780 	call	45778 <__modsi3>
   44174:	1007883a 	mov	r3,r2
   44178:	e0bffe17 	ldw	r2,-8(fp)
   4417c:	108002e0 	cmpeqi	r2,r2,11
   44180:	10803fcc 	andi	r2,r2,255
   44184:	1887883a 	add	r3,r3,r2
   44188:	e0bffe17 	ldw	r2,-8(fp)
   4418c:	10800320 	cmpeqi	r2,r2,12
   44190:	10803fcc 	andi	r2,r2,255
   44194:	1887883a 	add	r3,r3,r2
   44198:	e0bffe17 	ldw	r2,-8(fp)
   4419c:	10800358 	cmpnei	r2,r2,13
   441a0:	1000021e 	bne	r2,zero,441ac <play+0x77c>
   441a4:	00800304 	movi	r2,12
   441a8:	00000106 	br	441b0 <play+0x780>
   441ac:	0005883a 	mov	r2,zero
   441b0:	1887883a 	add	r3,r3,r2
   441b4:	e0bffe17 	ldw	r2,-8(fp)
   441b8:	10800398 	cmpnei	r2,r2,14
   441bc:	1000021e 	bne	r2,zero,441c8 <play+0x798>
   441c0:	00800304 	movi	r2,12
   441c4:	00000106 	br	441cc <play+0x79c>
   441c8:	0005883a 	mov	r2,zero
   441cc:	1887883a 	add	r3,r3,r2
   441d0:	e0bff817 	ldw	r2,-32(fp)
   441d4:	01000174 	movhi	r4,5
   441d8:	2116fa04 	addi	r4,r4,23528
   441dc:	800b883a 	mov	r5,r16
   441e0:	180d883a 	mov	r6,r3
   441e4:	100f883a 	mov	r7,r2
   441e8:	00459080 	call	45908 <printf>
		temp=sramread(CHNP+1);
   441ec:	01000dc4 	movi	r4,55
   441f0:	004019c0 	call	4019c <sramread>
   441f4:	e0bff815 	stw	r2,-32(fp)
		printf("Player2 Num Remainds: %d\n", temp);
   441f8:	e0bff817 	ldw	r2,-32(fp)
   441fc:	01000174 	movhi	r4,5
   44200:	21170704 	addi	r4,r4,23580
   44204:	100b883a 	mov	r5,r2
   44208:	00459080 	call	45908 <printf>
		temp=sramread(CHNP+2);
   4420c:	01000e04 	movi	r4,56
   44210:	004019c0 	call	4019c <sramread>
   44214:	e0bff815 	stw	r2,-32(fp)
		printf("Player3 Num Remainds: %d\n", temp);
   44218:	e0bff817 	ldw	r2,-32(fp)
   4421c:	01000174 	movhi	r4,5
   44220:	21170e04 	addi	r4,r4,23608
   44224:	100b883a 	mov	r5,r2
   44228:	00459080 	call	45908 <printf>
		nextPlayer();
   4422c:	0044fb80 	call	44fb8 <nextPlayer>
	int key=CUTOFF; //sync
	char card[3];
	Boolean check;
	//checkPattern
	printf("Current Player: %d\n", PCS);
	while(!haveWinner()){
   44230:	00442580 	call	44258 <haveWinner>
   44234:	103e2426 	beq	r2,zero,43ac8 <__alt_data_end+0xfffd1ac8>
		printf("Player2 Num Remainds: %d\n", temp);
		temp=sramread(CHNP+2);
		printf("Player3 Num Remainds: %d\n", temp);
		nextPlayer();
	}
	return 0;
   44238:	0005883a 	mov	r2,zero
}
   4423c:	e037883a 	mov	sp,fp
   44240:	dfc00317 	ldw	ra,12(sp)
   44244:	df000217 	ldw	fp,8(sp)
   44248:	dc400117 	ldw	r17,4(sp)
   4424c:	dc000017 	ldw	r16,0(sp)
   44250:	dec00404 	addi	sp,sp,16
   44254:	f800283a 	ret

00044258 <haveWinner>:

Boolean haveWinner(){
   44258:	defffd04 	addi	sp,sp,-12
   4425c:	dfc00215 	stw	ra,8(sp)
   44260:	df000115 	stw	fp,4(sp)
   44264:	df000104 	addi	fp,sp,4
	int winner=0;
   44268:	e03fff15 	stw	zero,-4(fp)
	if(!sramread(CHNP))
   4426c:	01000d84 	movi	r4,54
   44270:	004019c0 	call	4019c <sramread>
   44274:	1000031e 	bne	r2,zero,44284 <haveWinner+0x2c>
		winner=1;
   44278:	00800044 	movi	r2,1
   4427c:	e0bfff15 	stw	r2,-4(fp)
   44280:	00000b06 	br	442b0 <haveWinner+0x58>
	else if(!sramread(CHNP+1))
   44284:	01000dc4 	movi	r4,55
   44288:	004019c0 	call	4019c <sramread>
   4428c:	1000031e 	bne	r2,zero,4429c <haveWinner+0x44>
		winner=2;
   44290:	00800084 	movi	r2,2
   44294:	e0bfff15 	stw	r2,-4(fp)
   44298:	00000506 	br	442b0 <haveWinner+0x58>
	else if(!sramread(CHNP+2))
   4429c:	01000e04 	movi	r4,56
   442a0:	004019c0 	call	4019c <sramread>
   442a4:	1000021e 	bne	r2,zero,442b0 <haveWinner+0x58>
		winner=3;
   442a8:	008000c4 	movi	r2,3
   442ac:	e0bfff15 	stw	r2,-4(fp)
	if(!winner)
   442b0:	e0bfff17 	ldw	r2,-4(fp)
   442b4:	1000021e 	bne	r2,zero,442c0 <haveWinner+0x68>
		return FALSE;
   442b8:	0005883a 	mov	r2,zero
   442bc:	00007706 	br	4449c <haveWinner+0x244>
	else{
		if(winner==ll && winner==myNum)
   442c0:	008001b4 	movhi	r2,6
   442c4:	10a607c4 	addi	r2,r2,-26593
   442c8:	10800003 	ldbu	r2,0(r2)
   442cc:	10c03fcc 	andi	r3,r2,255
   442d0:	18c0201c 	xori	r3,r3,128
   442d4:	18ffe004 	addi	r3,r3,-128
   442d8:	e0bfff17 	ldw	r2,-4(fp)
   442dc:	1880181e 	bne	r3,r2,44340 <haveWinner+0xe8>
   442e0:	008001b4 	movhi	r2,6
   442e4:	10a60a04 	addi	r2,r2,-26584
   442e8:	10800003 	ldbu	r2,0(r2)
   442ec:	10c03fcc 	andi	r3,r2,255
   442f0:	18c0201c 	xori	r3,r3,128
   442f4:	18ffe004 	addi	r3,r3,-128
   442f8:	e0bfff17 	ldw	r2,-4(fp)
   442fc:	1880101e 	bne	r3,r2,44340 <haveWinner+0xe8>
			printf("You Win!\nYour Score Is: %d\n", score+score*multiplier);
   44300:	008001b4 	movhi	r2,6
   44304:	10a60f04 	addi	r2,r2,-26564
   44308:	10800003 	ldbu	r2,0(r2)
   4430c:	10803fcc 	andi	r2,r2,255
   44310:	1080201c 	xori	r2,r2,128
   44314:	10bfe004 	addi	r2,r2,-128
   44318:	10c00044 	addi	r3,r2,1
   4431c:	008001b4 	movhi	r2,6
   44320:	10a60d04 	addi	r2,r2,-26572
   44324:	10800017 	ldw	r2,0(r2)
   44328:	1885383a 	mul	r2,r3,r2
   4432c:	01000174 	movhi	r4,5
   44330:	21171504 	addi	r4,r4,23636
   44334:	100b883a 	mov	r5,r2
   44338:	00459080 	call	45908 <printf>
   4433c:	00005606 	br	44498 <haveWinner+0x240>
		else if(winner==ll && winner!=myNum)
   44340:	008001b4 	movhi	r2,6
   44344:	10a607c4 	addi	r2,r2,-26593
   44348:	10800003 	ldbu	r2,0(r2)
   4434c:	10c03fcc 	andi	r3,r2,255
   44350:	18c0201c 	xori	r3,r3,128
   44354:	18ffe004 	addi	r3,r3,-128
   44358:	e0bfff17 	ldw	r2,-4(fp)
   4435c:	1880191e 	bne	r3,r2,443c4 <haveWinner+0x16c>
   44360:	008001b4 	movhi	r2,6
   44364:	10a60a04 	addi	r2,r2,-26584
   44368:	10800003 	ldbu	r2,0(r2)
   4436c:	10c03fcc 	andi	r3,r2,255
   44370:	18c0201c 	xori	r3,r3,128
   44374:	18ffe004 	addi	r3,r3,-128
   44378:	e0bfff17 	ldw	r2,-4(fp)
   4437c:	18801126 	beq	r3,r2,443c4 <haveWinner+0x16c>
			printf("You Lose...\nYour Score Is: %d\n", score-score*multiplier);
   44380:	008001b4 	movhi	r2,6
   44384:	10a60f04 	addi	r2,r2,-26564
   44388:	10800003 	ldbu	r2,0(r2)
   4438c:	10803fcc 	andi	r2,r2,255
   44390:	1080201c 	xori	r2,r2,128
   44394:	10bfe004 	addi	r2,r2,-128
   44398:	00c00044 	movi	r3,1
   4439c:	1887c83a 	sub	r3,r3,r2
   443a0:	008001b4 	movhi	r2,6
   443a4:	10a60d04 	addi	r2,r2,-26572
   443a8:	10800017 	ldw	r2,0(r2)
   443ac:	1885383a 	mul	r2,r3,r2
   443b0:	01000174 	movhi	r4,5
   443b4:	21171c04 	addi	r4,r4,23664
   443b8:	100b883a 	mov	r5,r2
   443bc:	00459080 	call	45908 <printf>
   443c0:	00003506 	br	44498 <haveWinner+0x240>
		else if(winner!=ll && myNum!=ll)
   443c4:	008001b4 	movhi	r2,6
   443c8:	10a607c4 	addi	r2,r2,-26593
   443cc:	10800003 	ldbu	r2,0(r2)
   443d0:	10c03fcc 	andi	r3,r2,255
   443d4:	18c0201c 	xori	r3,r3,128
   443d8:	18ffe004 	addi	r3,r3,-128
   443dc:	e0bfff17 	ldw	r2,-4(fp)
   443e0:	18801d26 	beq	r3,r2,44458 <haveWinner+0x200>
   443e4:	008001b4 	movhi	r2,6
   443e8:	10a60a04 	addi	r2,r2,-26584
   443ec:	10c00003 	ldbu	r3,0(r2)
   443f0:	008001b4 	movhi	r2,6
   443f4:	10a607c4 	addi	r2,r2,-26593
   443f8:	10800003 	ldbu	r2,0(r2)
   443fc:	18c03fcc 	andi	r3,r3,255
   44400:	18c0201c 	xori	r3,r3,128
   44404:	18ffe004 	addi	r3,r3,-128
   44408:	10803fcc 	andi	r2,r2,255
   4440c:	1080201c 	xori	r2,r2,128
   44410:	10bfe004 	addi	r2,r2,-128
   44414:	18801026 	beq	r3,r2,44458 <haveWinner+0x200>
			printf("You Win!\nYour Score Is: %d\n", score+score*multiplier);
   44418:	008001b4 	movhi	r2,6
   4441c:	10a60f04 	addi	r2,r2,-26564
   44420:	10800003 	ldbu	r2,0(r2)
   44424:	10803fcc 	andi	r2,r2,255
   44428:	1080201c 	xori	r2,r2,128
   4442c:	10bfe004 	addi	r2,r2,-128
   44430:	10c00044 	addi	r3,r2,1
   44434:	008001b4 	movhi	r2,6
   44438:	10a60d04 	addi	r2,r2,-26572
   4443c:	10800017 	ldw	r2,0(r2)
   44440:	1885383a 	mul	r2,r3,r2
   44444:	01000174 	movhi	r4,5
   44448:	21171504 	addi	r4,r4,23636
   4444c:	100b883a 	mov	r5,r2
   44450:	00459080 	call	45908 <printf>
   44454:	00001006 	br	44498 <haveWinner+0x240>
		else
			printf("You Lose...\nYour Score Is: %d\n", score-score*multiplier);
   44458:	008001b4 	movhi	r2,6
   4445c:	10a60f04 	addi	r2,r2,-26564
   44460:	10800003 	ldbu	r2,0(r2)
   44464:	10803fcc 	andi	r2,r2,255
   44468:	1080201c 	xori	r2,r2,128
   4446c:	10bfe004 	addi	r2,r2,-128
   44470:	00c00044 	movi	r3,1
   44474:	1887c83a 	sub	r3,r3,r2
   44478:	008001b4 	movhi	r2,6
   4447c:	10a60d04 	addi	r2,r2,-26572
   44480:	10800017 	ldw	r2,0(r2)
   44484:	1885383a 	mul	r2,r3,r2
   44488:	01000174 	movhi	r4,5
   4448c:	21171c04 	addi	r4,r4,23664
   44490:	100b883a 	mov	r5,r2
   44494:	00459080 	call	45908 <printf>
		return TRUE;
   44498:	00800044 	movi	r2,1
	}
}
   4449c:	e037883a 	mov	sp,fp
   444a0:	dfc00117 	ldw	ra,4(sp)
   444a4:	df000017 	ldw	fp,0(sp)
   444a8:	dec00204 	addi	sp,sp,8
   444ac:	f800283a 	ret

000444b0 <checkCards>:

Boolean checkCards(int num, char* ccp){
   444b0:	deffe604 	addi	sp,sp,-104
   444b4:	dfc01915 	stw	ra,100(sp)
   444b8:	df001815 	stw	fp,96(sp)
   444bc:	df001804 	addi	fp,sp,96
   444c0:	e13ffe15 	stw	r4,-8(fp)
   444c4:	e17fff15 	stw	r5,-4(fp)
	int ccn=sramread(CHNP+myNum-1);
   444c8:	008001b4 	movhi	r2,6
   444cc:	10a60a04 	addi	r2,r2,-26584
   444d0:	10800003 	ldbu	r2,0(r2)
   444d4:	10800d44 	addi	r2,r2,53
   444d8:	10803fcc 	andi	r2,r2,255
   444dc:	1080201c 	xori	r2,r2,128
   444e0:	10bfe004 	addi	r2,r2,-128
   444e4:	1009883a 	mov	r4,r2
   444e8:	004019c0 	call	4019c <sramread>
   444ec:	e0bfe915 	stw	r2,-92(fp)
	int check[20];
	int i;
	if((num==4 && comp(4, ccp, 0)) || (ccp[0]==13 && ccp[1]==14) || (ccp[0]==14 && ccp[1]==13))
   444f0:	e0bffe17 	ldw	r2,-8(fp)
   444f4:	10800118 	cmpnei	r2,r2,4
   444f8:	1000051e 	bne	r2,zero,44510 <checkCards+0x60>
   444fc:	01000104 	movi	r4,4
   44500:	e17fff17 	ldw	r5,-4(fp)
   44504:	000d883a 	mov	r6,zero
   44508:	004366c0 	call	4366c <comp>
   4450c:	10001e1e 	bne	r2,zero,44588 <checkCards+0xd8>
   44510:	e0bfff17 	ldw	r2,-4(fp)
   44514:	10800003 	ldbu	r2,0(r2)
   44518:	10803fcc 	andi	r2,r2,255
   4451c:	1080201c 	xori	r2,r2,128
   44520:	10bfe004 	addi	r2,r2,-128
   44524:	10800358 	cmpnei	r2,r2,13
   44528:	1000081e 	bne	r2,zero,4454c <checkCards+0x9c>
   4452c:	e0bfff17 	ldw	r2,-4(fp)
   44530:	10800044 	addi	r2,r2,1
   44534:	10800003 	ldbu	r2,0(r2)
   44538:	10803fcc 	andi	r2,r2,255
   4453c:	1080201c 	xori	r2,r2,128
   44540:	10bfe004 	addi	r2,r2,-128
   44544:	108003a0 	cmpeqi	r2,r2,14
   44548:	10000f1e 	bne	r2,zero,44588 <checkCards+0xd8>
   4454c:	e0bfff17 	ldw	r2,-4(fp)
   44550:	10800003 	ldbu	r2,0(r2)
   44554:	10803fcc 	andi	r2,r2,255
   44558:	1080201c 	xori	r2,r2,128
   4455c:	10bfe004 	addi	r2,r2,-128
   44560:	10800398 	cmpnei	r2,r2,14
   44564:	10000a1e 	bne	r2,zero,44590 <checkCards+0xe0>
   44568:	e0bfff17 	ldw	r2,-4(fp)
   4456c:	10800044 	addi	r2,r2,1
   44570:	10800003 	ldbu	r2,0(r2)
   44574:	10803fcc 	andi	r2,r2,255
   44578:	1080201c 	xori	r2,r2,128
   4457c:	10bfe004 	addi	r2,r2,-128
   44580:	10800358 	cmpnei	r2,r2,13
   44584:	1000021e 	bne	r2,zero,44590 <checkCards+0xe0>
		return TRUE;
   44588:	00800044 	movi	r2,1
   4458c:	00005c06 	br	44700 <checkCards+0x250>
	for(i=0; i<20; i++)
   44590:	e03fe815 	stw	zero,-96(fp)
   44594:	00000a06 	br	445c0 <checkCards+0x110>
		check[i]=0;
   44598:	e0bfe817 	ldw	r2,-96(fp)
   4459c:	1085883a 	add	r2,r2,r2
   445a0:	1085883a 	add	r2,r2,r2
   445a4:	e0ffe804 	addi	r3,fp,-96
   445a8:	1885883a 	add	r2,r3,r2
   445ac:	10800204 	addi	r2,r2,8
   445b0:	10000015 	stw	zero,0(r2)
	int ccn=sramread(CHNP+myNum-1);
	int check[20];
	int i;
	if((num==4 && comp(4, ccp, 0)) || (ccp[0]==13 && ccp[1]==14) || (ccp[0]==14 && ccp[1]==13))
		return TRUE;
	for(i=0; i<20; i++)
   445b4:	e0bfe817 	ldw	r2,-96(fp)
   445b8:	10800044 	addi	r2,r2,1
   445bc:	e0bfe815 	stw	r2,-96(fp)
   445c0:	e0bfe817 	ldw	r2,-96(fp)
   445c4:	10800510 	cmplti	r2,r2,20
   445c8:	103ff31e 	bne	r2,zero,44598 <__alt_data_end+0xfffd2598>
		check[i]=0;
	for(i=0; i<ccn; i++)
   445cc:	e03fe815 	stw	zero,-96(fp)
   445d0:	00001906 	br	44638 <checkCards+0x188>
		check[(int)cch[i]]++;
   445d4:	008001b4 	movhi	r2,6
   445d8:	10a60c04 	addi	r2,r2,-26576
   445dc:	10c00017 	ldw	r3,0(r2)
   445e0:	e0bfe817 	ldw	r2,-96(fp)
   445e4:	1885883a 	add	r2,r3,r2
   445e8:	10800003 	ldbu	r2,0(r2)
   445ec:	10803fcc 	andi	r2,r2,255
   445f0:	1080201c 	xori	r2,r2,128
   445f4:	10bfe004 	addi	r2,r2,-128
   445f8:	1087883a 	add	r3,r2,r2
   445fc:	18c7883a 	add	r3,r3,r3
   44600:	e13fe804 	addi	r4,fp,-96
   44604:	20c7883a 	add	r3,r4,r3
   44608:	18c00204 	addi	r3,r3,8
   4460c:	18c00017 	ldw	r3,0(r3)
   44610:	18c00044 	addi	r3,r3,1
   44614:	1085883a 	add	r2,r2,r2
   44618:	1085883a 	add	r2,r2,r2
   4461c:	e13fe804 	addi	r4,fp,-96
   44620:	2085883a 	add	r2,r4,r2
   44624:	10800204 	addi	r2,r2,8
   44628:	10c00015 	stw	r3,0(r2)
	int i;
	if((num==4 && comp(4, ccp, 0)) || (ccp[0]==13 && ccp[1]==14) || (ccp[0]==14 && ccp[1]==13))
		return TRUE;
	for(i=0; i<20; i++)
		check[i]=0;
	for(i=0; i<ccn; i++)
   4462c:	e0bfe817 	ldw	r2,-96(fp)
   44630:	10800044 	addi	r2,r2,1
   44634:	e0bfe815 	stw	r2,-96(fp)
   44638:	e0ffe817 	ldw	r3,-96(fp)
   4463c:	e0bfe917 	ldw	r2,-92(fp)
   44640:	18bfe416 	blt	r3,r2,445d4 <__alt_data_end+0xfffd25d4>
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
   44644:	e03fe815 	stw	zero,-96(fp)
   44648:	00001706 	br	446a8 <checkCards+0x1f8>
		check[(int)ccp[i]]--;
   4464c:	e0bfe817 	ldw	r2,-96(fp)
   44650:	e0ffff17 	ldw	r3,-4(fp)
   44654:	1885883a 	add	r2,r3,r2
   44658:	10800003 	ldbu	r2,0(r2)
   4465c:	10803fcc 	andi	r2,r2,255
   44660:	1080201c 	xori	r2,r2,128
   44664:	10bfe004 	addi	r2,r2,-128
   44668:	1087883a 	add	r3,r2,r2
   4466c:	18c7883a 	add	r3,r3,r3
   44670:	e13fe804 	addi	r4,fp,-96
   44674:	20c7883a 	add	r3,r4,r3
   44678:	18c00204 	addi	r3,r3,8
   4467c:	18c00017 	ldw	r3,0(r3)
   44680:	18ffffc4 	addi	r3,r3,-1
   44684:	1085883a 	add	r2,r2,r2
   44688:	1085883a 	add	r2,r2,r2
   4468c:	e13fe804 	addi	r4,fp,-96
   44690:	2085883a 	add	r2,r4,r2
   44694:	10800204 	addi	r2,r2,8
   44698:	10c00015 	stw	r3,0(r2)
		return TRUE;
	for(i=0; i<20; i++)
		check[i]=0;
	for(i=0; i<ccn; i++)
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
   4469c:	e0bfe817 	ldw	r2,-96(fp)
   446a0:	10800044 	addi	r2,r2,1
   446a4:	e0bfe815 	stw	r2,-96(fp)
   446a8:	e0ffe817 	ldw	r3,-96(fp)
   446ac:	e0bffe17 	ldw	r2,-8(fp)
   446b0:	18bfe616 	blt	r3,r2,4464c <__alt_data_end+0xfffd264c>
		check[(int)ccp[i]]--;
	for(i=0; i<20; i++)
   446b4:	e03fe815 	stw	zero,-96(fp)
   446b8:	00000d06 	br	446f0 <checkCards+0x240>
		if(check[i]<0)
   446bc:	e0bfe817 	ldw	r2,-96(fp)
   446c0:	1085883a 	add	r2,r2,r2
   446c4:	1085883a 	add	r2,r2,r2
   446c8:	e0ffe804 	addi	r3,fp,-96
   446cc:	1885883a 	add	r2,r3,r2
   446d0:	10800204 	addi	r2,r2,8
   446d4:	10800017 	ldw	r2,0(r2)
   446d8:	1000020e 	bge	r2,zero,446e4 <checkCards+0x234>
			return FALSE;
   446dc:	0005883a 	mov	r2,zero
   446e0:	00000706 	br	44700 <checkCards+0x250>
		check[i]=0;
	for(i=0; i<ccn; i++)
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
		check[(int)ccp[i]]--;
	for(i=0; i<20; i++)
   446e4:	e0bfe817 	ldw	r2,-96(fp)
   446e8:	10800044 	addi	r2,r2,1
   446ec:	e0bfe815 	stw	r2,-96(fp)
   446f0:	e0bfe817 	ldw	r2,-96(fp)
   446f4:	10800510 	cmplti	r2,r2,20
   446f8:	103ff01e 	bne	r2,zero,446bc <__alt_data_end+0xfffd26bc>
		if(check[i]<0)
			return FALSE;
	return TRUE;
   446fc:	00800044 	movi	r2,1
}
   44700:	e037883a 	mov	sp,fp
   44704:	dfc00117 	ldw	ra,4(sp)
   44708:	df000017 	ldw	fp,0(sp)
   4470c:	dec00204 	addi	sp,sp,8
   44710:	f800283a 	ret

00044714 <deleteCards>:

// Change Card Number After This Function
int deleteCards(int num, char* ccp){
   44714:	deffe404 	addi	sp,sp,-112
   44718:	dfc01b15 	stw	ra,108(sp)
   4471c:	df001a15 	stw	fp,104(sp)
   44720:	df001a04 	addi	fp,sp,104
   44724:	e13ffe15 	stw	r4,-8(fp)
   44728:	e17fff15 	stw	r5,-4(fp)
	int ccn=sramread(CHNP+myNum-1);
   4472c:	008001b4 	movhi	r2,6
   44730:	10a60a04 	addi	r2,r2,-26584
   44734:	10800003 	ldbu	r2,0(r2)
   44738:	10800d44 	addi	r2,r2,53
   4473c:	10803fcc 	andi	r2,r2,255
   44740:	1080201c 	xori	r2,r2,128
   44744:	10bfe004 	addi	r2,r2,-128
   44748:	1009883a 	mov	r4,r2
   4474c:	004019c0 	call	4019c <sramread>
   44750:	e0bfe915 	stw	r2,-92(fp)
	int check[20];
	int i, j, k=0;
   44754:	e03fe815 	stw	zero,-96(fp)
	for(i=0; i<20; i++)
   44758:	e03fe615 	stw	zero,-104(fp)
   4475c:	00000a06 	br	44788 <deleteCards+0x74>
		check[i]=0;
   44760:	e0bfe617 	ldw	r2,-104(fp)
   44764:	1085883a 	add	r2,r2,r2
   44768:	1085883a 	add	r2,r2,r2
   4476c:	e0ffe604 	addi	r3,fp,-104
   44770:	1885883a 	add	r2,r3,r2
   44774:	10800404 	addi	r2,r2,16
   44778:	10000015 	stw	zero,0(r2)
// Change Card Number After This Function
int deleteCards(int num, char* ccp){
	int ccn=sramread(CHNP+myNum-1);
	int check[20];
	int i, j, k=0;
	for(i=0; i<20; i++)
   4477c:	e0bfe617 	ldw	r2,-104(fp)
   44780:	10800044 	addi	r2,r2,1
   44784:	e0bfe615 	stw	r2,-104(fp)
   44788:	e0bfe617 	ldw	r2,-104(fp)
   4478c:	10800510 	cmplti	r2,r2,20
   44790:	103ff31e 	bne	r2,zero,44760 <__alt_data_end+0xfffd2760>
		check[i]=0;
	for(i=0; i<ccn; i++)
   44794:	e03fe615 	stw	zero,-104(fp)
   44798:	00001906 	br	44800 <deleteCards+0xec>
		check[(int)cch[i]]++;
   4479c:	008001b4 	movhi	r2,6
   447a0:	10a60c04 	addi	r2,r2,-26576
   447a4:	10c00017 	ldw	r3,0(r2)
   447a8:	e0bfe617 	ldw	r2,-104(fp)
   447ac:	1885883a 	add	r2,r3,r2
   447b0:	10800003 	ldbu	r2,0(r2)
   447b4:	10803fcc 	andi	r2,r2,255
   447b8:	1080201c 	xori	r2,r2,128
   447bc:	10bfe004 	addi	r2,r2,-128
   447c0:	1087883a 	add	r3,r2,r2
   447c4:	18c7883a 	add	r3,r3,r3
   447c8:	e13fe604 	addi	r4,fp,-104
   447cc:	20c7883a 	add	r3,r4,r3
   447d0:	18c00404 	addi	r3,r3,16
   447d4:	18c00017 	ldw	r3,0(r3)
   447d8:	18c00044 	addi	r3,r3,1
   447dc:	1085883a 	add	r2,r2,r2
   447e0:	1085883a 	add	r2,r2,r2
   447e4:	e13fe604 	addi	r4,fp,-104
   447e8:	2085883a 	add	r2,r4,r2
   447ec:	10800404 	addi	r2,r2,16
   447f0:	10c00015 	stw	r3,0(r2)
	int ccn=sramread(CHNP+myNum-1);
	int check[20];
	int i, j, k=0;
	for(i=0; i<20; i++)
		check[i]=0;
	for(i=0; i<ccn; i++)
   447f4:	e0bfe617 	ldw	r2,-104(fp)
   447f8:	10800044 	addi	r2,r2,1
   447fc:	e0bfe615 	stw	r2,-104(fp)
   44800:	e0ffe617 	ldw	r3,-104(fp)
   44804:	e0bfe917 	ldw	r2,-92(fp)
   44808:	18bfe416 	blt	r3,r2,4479c <__alt_data_end+0xfffd279c>
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
   4480c:	e03fe615 	stw	zero,-104(fp)
   44810:	00001706 	br	44870 <deleteCards+0x15c>
		check[(int)ccp[i]]--;
   44814:	e0bfe617 	ldw	r2,-104(fp)
   44818:	e0ffff17 	ldw	r3,-4(fp)
   4481c:	1885883a 	add	r2,r3,r2
   44820:	10800003 	ldbu	r2,0(r2)
   44824:	10803fcc 	andi	r2,r2,255
   44828:	1080201c 	xori	r2,r2,128
   4482c:	10bfe004 	addi	r2,r2,-128
   44830:	1087883a 	add	r3,r2,r2
   44834:	18c7883a 	add	r3,r3,r3
   44838:	e13fe604 	addi	r4,fp,-104
   4483c:	20c7883a 	add	r3,r4,r3
   44840:	18c00404 	addi	r3,r3,16
   44844:	18c00017 	ldw	r3,0(r3)
   44848:	18ffffc4 	addi	r3,r3,-1
   4484c:	1085883a 	add	r2,r2,r2
   44850:	1085883a 	add	r2,r2,r2
   44854:	e13fe604 	addi	r4,fp,-104
   44858:	2085883a 	add	r2,r4,r2
   4485c:	10800404 	addi	r2,r2,16
   44860:	10c00015 	stw	r3,0(r2)
	int i, j, k=0;
	for(i=0; i<20; i++)
		check[i]=0;
	for(i=0; i<ccn; i++)
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
   44864:	e0bfe617 	ldw	r2,-104(fp)
   44868:	10800044 	addi	r2,r2,1
   4486c:	e0bfe615 	stw	r2,-104(fp)
   44870:	e0ffe617 	ldw	r3,-104(fp)
   44874:	e0bffe17 	ldw	r2,-8(fp)
   44878:	18bfe616 	blt	r3,r2,44814 <__alt_data_end+0xfffd2814>
		check[(int)ccp[i]]--;
	for(i=0; i<15; i++)
   4487c:	e03fe615 	stw	zero,-104(fp)
   44880:	00001b06 	br	448f0 <deleteCards+0x1dc>
		for(j=0; j<check[i]; j++)
   44884:	e03fe715 	stw	zero,-100(fp)
   44888:	00000d06 	br	448c0 <deleteCards+0x1ac>
			cch[k++]=i;
   4488c:	008001b4 	movhi	r2,6
   44890:	10a60c04 	addi	r2,r2,-26576
   44894:	10c00017 	ldw	r3,0(r2)
   44898:	e0bfe817 	ldw	r2,-96(fp)
   4489c:	1885883a 	add	r2,r3,r2
   448a0:	e0ffe617 	ldw	r3,-104(fp)
   448a4:	10c00005 	stb	r3,0(r2)
   448a8:	e0bfe817 	ldw	r2,-96(fp)
   448ac:	10800044 	addi	r2,r2,1
   448b0:	e0bfe815 	stw	r2,-96(fp)
	for(i=0; i<ccn; i++)
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
		check[(int)ccp[i]]--;
	for(i=0; i<15; i++)
		for(j=0; j<check[i]; j++)
   448b4:	e0bfe717 	ldw	r2,-100(fp)
   448b8:	10800044 	addi	r2,r2,1
   448bc:	e0bfe715 	stw	r2,-100(fp)
   448c0:	e0bfe617 	ldw	r2,-104(fp)
   448c4:	1085883a 	add	r2,r2,r2
   448c8:	1085883a 	add	r2,r2,r2
   448cc:	e0ffe604 	addi	r3,fp,-104
   448d0:	1885883a 	add	r2,r3,r2
   448d4:	10800404 	addi	r2,r2,16
   448d8:	10800017 	ldw	r2,0(r2)
   448dc:	e0ffe717 	ldw	r3,-100(fp)
   448e0:	18bfea16 	blt	r3,r2,4488c <__alt_data_end+0xfffd288c>
		check[i]=0;
	for(i=0; i<ccn; i++)
		check[(int)cch[i]]++;
	for(i=0; i<num; i++)
		check[(int)ccp[i]]--;
	for(i=0; i<15; i++)
   448e4:	e0bfe617 	ldw	r2,-104(fp)
   448e8:	10800044 	addi	r2,r2,1
   448ec:	e0bfe615 	stw	r2,-104(fp)
   448f0:	e0bfe617 	ldw	r2,-104(fp)
   448f4:	108003d0 	cmplti	r2,r2,15
   448f8:	103fe21e 	bne	r2,zero,44884 <__alt_data_end+0xfffd2884>
		for(j=0; j<check[i]; j++)
			cch[k++]=i;
	return 0;
   448fc:	0005883a 	mov	r2,zero
}
   44900:	e037883a 	mov	sp,fp
   44904:	dfc00117 	ldw	ra,4(sp)
   44908:	df000017 	ldw	fp,0(sp)
   4490c:	dec00204 	addi	sp,sp,8
   44910:	f800283a 	ret

00044914 <display>:

// hi xinyu don't forget to add this to header file lol
int display() {
   44914:	defffc04 	addi	sp,sp,-16
   44918:	dfc00315 	stw	ra,12(sp)
   4491c:	df000215 	stw	fp,8(sp)
   44920:	df000204 	addi	fp,sp,8
	int j = 0; // use for "for loop"
   44924:	e03ffe15 	stw	zero,-8(fp)
	char num=sramread(CHNP+myNum-1); // How many cards the user currently have in hands
   44928:	008001b4 	movhi	r2,6
   4492c:	10a60a04 	addi	r2,r2,-26584
   44930:	10800003 	ldbu	r2,0(r2)
   44934:	10800d44 	addi	r2,r2,53
   44938:	10803fcc 	andi	r2,r2,255
   4493c:	1080201c 	xori	r2,r2,128
   44940:	10bfe004 	addi	r2,r2,-128
   44944:	1009883a 	mov	r4,r2
   44948:	004019c0 	call	4019c <sramread>
   4494c:	e0bfff05 	stb	r2,-4(fp)
	printf("Your cards are: ");
   44950:	01000174 	movhi	r4,5
   44954:	21172404 	addi	r4,r4,23696
   44958:	00459080 	call	45908 <printf>
	for(j=0;j<num;j++) {
   4495c:	e03ffe15 	stw	zero,-8(fp)
   44960:	00006006 	br	44ae4 <display+0x1d0>
		switch(cch[j]){
   44964:	008001b4 	movhi	r2,6
   44968:	10a60c04 	addi	r2,r2,-26576
   4496c:	10c00017 	ldw	r3,0(r2)
   44970:	e0bffe17 	ldw	r2,-8(fp)
   44974:	1885883a 	add	r2,r3,r2
   44978:	10800003 	ldbu	r2,0(r2)
   4497c:	10803fcc 	andi	r2,r2,255
   44980:	1080201c 	xori	r2,r2,128
   44984:	10bfe004 	addi	r2,r2,-128
   44988:	10c003e8 	cmpgeui	r3,r2,15
   4498c:	1800521e 	bne	r3,zero,44ad8 <display+0x1c4>
   44990:	1085883a 	add	r2,r2,r2
   44994:	1087883a 	add	r3,r2,r2
   44998:	00800134 	movhi	r2,4
   4499c:	10926b04 	addi	r2,r2,18860
   449a0:	1885883a 	add	r2,r3,r2
   449a4:	10800017 	ldw	r2,0(r2)
   449a8:	1000683a 	jmp	r2
   449ac:	000449e8 	cmpgeui	zero,zero,4391
   449b0:	000449f8 	rdprs	zero,zero,4391
   449b4:	00044a08 	cmpgei	zero,zero,4392
   449b8:	00044a18 	cmpnei	zero,zero,4392
   449bc:	00044a28 	cmpgeui	zero,zero,4392
   449c0:	00044a38 	rdprs	zero,zero,4392
   449c4:	00044a48 	cmpgei	zero,zero,4393
   449c8:	00044a58 	cmpnei	zero,zero,4393
   449cc:	00044a68 	cmpgeui	zero,zero,4393
   449d0:	00044a78 	rdprs	zero,zero,4393
   449d4:	00044a88 	cmpgei	zero,zero,4394
   449d8:	00044a98 	cmpnei	zero,zero,4394
   449dc:	00044aa8 	cmpgeui	zero,zero,4394
   449e0:	00044ab8 	rdprs	zero,zero,4394
   449e4:	00044ac8 	cmpgei	zero,zero,4395
			case 0:
				printf("3 ");
   449e8:	01000174 	movhi	r4,5
   449ec:	21172904 	addi	r4,r4,23716
   449f0:	00459080 	call	45908 <printf>
				break;
   449f4:	00003806 	br	44ad8 <display+0x1c4>
			case 1:
				printf("4 ");
   449f8:	01000174 	movhi	r4,5
   449fc:	21172a04 	addi	r4,r4,23720
   44a00:	00459080 	call	45908 <printf>
				break;
   44a04:	00003406 	br	44ad8 <display+0x1c4>
			case 2:
				printf("5 ");
   44a08:	01000174 	movhi	r4,5
   44a0c:	21172b04 	addi	r4,r4,23724
   44a10:	00459080 	call	45908 <printf>
				break;
   44a14:	00003006 	br	44ad8 <display+0x1c4>
			case 3:
				printf("6 ");
   44a18:	01000174 	movhi	r4,5
   44a1c:	21172c04 	addi	r4,r4,23728
   44a20:	00459080 	call	45908 <printf>
				break;
   44a24:	00002c06 	br	44ad8 <display+0x1c4>
			case 4:
				printf("7 ");
   44a28:	01000174 	movhi	r4,5
   44a2c:	21172d04 	addi	r4,r4,23732
   44a30:	00459080 	call	45908 <printf>
				break;
   44a34:	00002806 	br	44ad8 <display+0x1c4>
			case 5:
				printf("8 ");
   44a38:	01000174 	movhi	r4,5
   44a3c:	21172e04 	addi	r4,r4,23736
   44a40:	00459080 	call	45908 <printf>
				break;
   44a44:	00002406 	br	44ad8 <display+0x1c4>
			case 6:
				printf("9 ");
   44a48:	01000174 	movhi	r4,5
   44a4c:	21172f04 	addi	r4,r4,23740
   44a50:	00459080 	call	45908 <printf>
				break;
   44a54:	00002006 	br	44ad8 <display+0x1c4>
			case 7:
				printf("10 ");
   44a58:	01000174 	movhi	r4,5
   44a5c:	21173004 	addi	r4,r4,23744
   44a60:	00459080 	call	45908 <printf>
				break;
   44a64:	00001c06 	br	44ad8 <display+0x1c4>
			case 8:
				printf("J ");
   44a68:	01000174 	movhi	r4,5
   44a6c:	21173104 	addi	r4,r4,23748
   44a70:	00459080 	call	45908 <printf>
				break;
   44a74:	00001806 	br	44ad8 <display+0x1c4>
			case 9:
				printf("Q ");
   44a78:	01000174 	movhi	r4,5
   44a7c:	21173204 	addi	r4,r4,23752
   44a80:	00459080 	call	45908 <printf>
				break;
   44a84:	00001406 	br	44ad8 <display+0x1c4>
			case 10:
				printf("K ");
   44a88:	01000174 	movhi	r4,5
   44a8c:	21173304 	addi	r4,r4,23756
   44a90:	00459080 	call	45908 <printf>
				break;
   44a94:	00001006 	br	44ad8 <display+0x1c4>
			case 11:
				printf("A ");
   44a98:	01000174 	movhi	r4,5
   44a9c:	21173404 	addi	r4,r4,23760
   44aa0:	00459080 	call	45908 <printf>
				break;
   44aa4:	00000c06 	br	44ad8 <display+0x1c4>
			case 12:
				printf("2 ");
   44aa8:	01000174 	movhi	r4,5
   44aac:	21173504 	addi	r4,r4,23764
   44ab0:	00459080 	call	45908 <printf>
				break;
   44ab4:	00000806 	br	44ad8 <display+0x1c4>
			case 13:
				printf("B "); //black joker
   44ab8:	01000174 	movhi	r4,5
   44abc:	21173604 	addi	r4,r4,23768
   44ac0:	00459080 	call	45908 <printf>
				break;
   44ac4:	00000406 	br	44ad8 <display+0x1c4>
			case 14:
				printf("R "); //red joker
   44ac8:	01000174 	movhi	r4,5
   44acc:	21173704 	addi	r4,r4,23772
   44ad0:	00459080 	call	45908 <printf>
				break;
   44ad4:	0001883a 	nop
// hi xinyu don't forget to add this to header file lol
int display() {
	int j = 0; // use for "for loop"
	char num=sramread(CHNP+myNum-1); // How many cards the user currently have in hands
	printf("Your cards are: ");
	for(j=0;j<num;j++) {
   44ad8:	e0bffe17 	ldw	r2,-8(fp)
   44adc:	10800044 	addi	r2,r2,1
   44ae0:	e0bffe15 	stw	r2,-8(fp)
   44ae4:	e0bfff07 	ldb	r2,-4(fp)
   44ae8:	e0fffe17 	ldw	r3,-8(fp)
   44aec:	18bf9d16 	blt	r3,r2,44964 <__alt_data_end+0xfffd2964>
				printf("R "); //red joker
				break;
		}

	}
	printf("\n");
   44af0:	01000284 	movi	r4,10
   44af4:	004594c0 	call	4594c <putchar>
	return 0;
   44af8:	0005883a 	mov	r2,zero
}
   44afc:	e037883a 	mov	sp,fp
   44b00:	dfc00117 	ldw	ra,4(sp)
   44b04:	df000017 	ldw	fp,0(sp)
   44b08:	dec00204 	addi	sp,sp,8
   44b0c:	f800283a 	ret

00044b10 <deleteSRAM>:
 * CHANGE CARD NUMBER BEFORE CALLING
 * Inputs:
 * 		addr: addr in SRAM where value need to be deleted
 * Return: 0 if success
 */
int deleteSRAM(char addr){
   44b10:	defffc04 	addi	sp,sp,-16
   44b14:	dfc00315 	stw	ra,12(sp)
   44b18:	df000215 	stw	fp,8(sp)
   44b1c:	dc000115 	stw	r16,4(sp)
   44b20:	df000104 	addi	fp,sp,4
   44b24:	2005883a 	mov	r2,r4
   44b28:	e0bfff05 	stb	r2,-4(fp)
	if(addr<CHNP && addr>=CFSP)
   44b2c:	e0bfff07 	ldb	r2,-4(fp)
   44b30:	10800d88 	cmpgei	r2,r2,54
   44b34:	1000181e 	bne	r2,zero,44b98 <deleteSRAM+0x88>
   44b38:	e0bfff07 	ldb	r2,-4(fp)
   44b3c:	10001616 	blt	r2,zero,44b98 <deleteSRAM+0x88>
		sramwrite(addr, sramread(deleteCount--));
   44b40:	e43fff07 	ldb	r16,-4(fp)
   44b44:	00800174 	movhi	r2,5
   44b48:	109f5204 	addi	r2,r2,32072
   44b4c:	10800017 	ldw	r2,0(r2)
   44b50:	1007883a 	mov	r3,r2
   44b54:	18c03fcc 	andi	r3,r3,255
   44b58:	18c0201c 	xori	r3,r3,128
   44b5c:	18ffe004 	addi	r3,r3,-128
   44b60:	113fffc4 	addi	r4,r2,-1
   44b64:	00800174 	movhi	r2,5
   44b68:	109f5204 	addi	r2,r2,32072
   44b6c:	11000015 	stw	r4,0(r2)
   44b70:	1809883a 	mov	r4,r3
   44b74:	004019c0 	call	4019c <sramread>
   44b78:	10803fcc 	andi	r2,r2,255
   44b7c:	1080201c 	xori	r2,r2,128
   44b80:	10bfe004 	addi	r2,r2,-128
   44b84:	8009883a 	mov	r4,r16
   44b88:	100b883a 	mov	r5,r2
   44b8c:	00401fc0 	call	401fc <sramwrite>
	else
		return -1;
	return 0;
   44b90:	0005883a 	mov	r2,zero
   44b94:	00000106 	br	44b9c <deleteSRAM+0x8c>
 */
int deleteSRAM(char addr){
	if(addr<CHNP && addr>=CFSP)
		sramwrite(addr, sramread(deleteCount--));
	else
		return -1;
   44b98:	00bfffc4 	movi	r2,-1
	return 0;
}
   44b9c:	e037883a 	mov	sp,fp
   44ba0:	dfc00217 	ldw	ra,8(sp)
   44ba4:	df000117 	ldw	fp,4(sp)
   44ba8:	dc000017 	ldw	r16,0(sp)
   44bac:	dec00304 	addi	sp,sp,12
   44bb0:	f800283a 	ret

00044bb4 <syncDeleteSRAM>:
/**
 * synchronizes deleteSRAM operation
 * Inputs: NONE
 * Return: 0 if success
 */
int syncDeleteSRAM(char addr){
   44bb4:	defffd04 	addi	sp,sp,-12
   44bb8:	dfc00215 	stw	ra,8(sp)
   44bbc:	df000115 	stw	fp,4(sp)
   44bc0:	df000104 	addi	fp,sp,4
   44bc4:	2005883a 	mov	r2,r4
   44bc8:	e0bfff05 	stb	r2,-4(fp)
	sendchar(3|0x40);
   44bcc:	010010c4 	movi	r4,67
   44bd0:	004028c0 	call	4028c <sendchar>
	usleep(250);
   44bd4:	01003e84 	movi	r4,250
   44bd8:	00546340 	call	54634 <usleep>
	sendchar(addr|0x40);
   44bdc:	e0bfff03 	ldbu	r2,-4(fp)
   44be0:	10801014 	ori	r2,r2,64
   44be4:	10803fcc 	andi	r2,r2,255
   44be8:	1080201c 	xori	r2,r2,128
   44bec:	10bfe004 	addi	r2,r2,-128
   44bf0:	1009883a 	mov	r4,r2
   44bf4:	004028c0 	call	4028c <sendchar>
	usleep(250);
   44bf8:	01003e84 	movi	r4,250
   44bfc:	00546340 	call	54634 <usleep>
	return 0;
   44c00:	0005883a 	mov	r2,zero
}
   44c04:	e037883a 	mov	sp,fp
   44c08:	dfc00117 	ldw	ra,4(sp)
   44c0c:	df000017 	ldw	fp,0(sp)
   44c10:	dec00204 	addi	sp,sp,8
   44c14:	f800283a 	ret

00044c18 <deleteRecv>:
/**
 * wait for synchronization of deleteSRAM
 * Inputs: NONE
 * Return: 0 if success
 */
int deleteRecv(){
   44c18:	defffd04 	addi	sp,sp,-12
   44c1c:	dfc00215 	stw	ra,8(sp)
   44c20:	df000115 	stw	fp,4(sp)
   44c24:	df000104 	addi	fp,sp,4
	int addr;
	recvchar(&addr);
   44c28:	e13fff04 	addi	r4,fp,-4
   44c2c:	00403d80 	call	403d8 <recvchar>
	usleep(50);
   44c30:	01000c84 	movi	r4,50
   44c34:	00546340 	call	54634 <usleep>
	deleteSRAM(addr);
   44c38:	e0bfff17 	ldw	r2,-4(fp)
   44c3c:	10803fcc 	andi	r2,r2,255
   44c40:	1080201c 	xori	r2,r2,128
   44c44:	10bfe004 	addi	r2,r2,-128
   44c48:	1009883a 	mov	r4,r2
   44c4c:	0044b100 	call	44b10 <deleteSRAM>
	return 0;
   44c50:	0005883a 	mov	r2,zero
}
   44c54:	e037883a 	mov	sp,fp
   44c58:	dfc00117 	ldw	ra,4(sp)
   44c5c:	df000017 	ldw	fp,0(sp)
   44c60:	dec00204 	addi	sp,sp,8
   44c64:	f800283a 	ret

00044c68 <incCardNum>:
/**
 * increase card number by 1
 * Inputs: NONE
 * Return: current number of cards
 */
int incCardNum(){
   44c68:	defffc04 	addi	sp,sp,-16
   44c6c:	dfc00315 	stw	ra,12(sp)
   44c70:	df000215 	stw	fp,8(sp)
   44c74:	df000204 	addi	fp,sp,8
	char addr=CHNP+myNum-1;
   44c78:	008001b4 	movhi	r2,6
   44c7c:	10a60a04 	addi	r2,r2,-26584
   44c80:	10800003 	ldbu	r2,0(r2)
   44c84:	10800d44 	addi	r2,r2,53
   44c88:	e0bffe05 	stb	r2,-8(fp)
	int cardnum=sramread(addr);
   44c8c:	e0bffe07 	ldb	r2,-8(fp)
   44c90:	1009883a 	mov	r4,r2
   44c94:	004019c0 	call	4019c <sramread>
   44c98:	e0bfff15 	stw	r2,-4(fp)
	sramwrite(addr, cardnum+1);
   44c9c:	e0fffe07 	ldb	r3,-8(fp)
   44ca0:	e0bfff17 	ldw	r2,-4(fp)
   44ca4:	10800044 	addi	r2,r2,1
   44ca8:	10803fcc 	andi	r2,r2,255
   44cac:	1080201c 	xori	r2,r2,128
   44cb0:	10bfe004 	addi	r2,r2,-128
   44cb4:	1809883a 	mov	r4,r3
   44cb8:	100b883a 	mov	r5,r2
   44cbc:	00401fc0 	call	401fc <sramwrite>
	return cardnum;
   44cc0:	e0bfff17 	ldw	r2,-4(fp)
}
   44cc4:	e037883a 	mov	sp,fp
   44cc8:	dfc00117 	ldw	ra,4(sp)
   44ccc:	df000017 	ldw	fp,0(sp)
   44cd0:	dec00204 	addi	sp,sp,8
   44cd4:	f800283a 	ret

00044cd8 <decCardNum>:
/**
 * decrease card number by 1
 * Inputs: NONE
 * Return: current number of cards
 */
int decCardNum(){
   44cd8:	defffc04 	addi	sp,sp,-16
   44cdc:	dfc00315 	stw	ra,12(sp)
   44ce0:	df000215 	stw	fp,8(sp)
   44ce4:	df000204 	addi	fp,sp,8
	char addr=CHNP+myNum-1;
   44ce8:	008001b4 	movhi	r2,6
   44cec:	10a60a04 	addi	r2,r2,-26584
   44cf0:	10800003 	ldbu	r2,0(r2)
   44cf4:	10800d44 	addi	r2,r2,53
   44cf8:	e0bffe05 	stb	r2,-8(fp)
	int cardnum=sramread(addr);
   44cfc:	e0bffe07 	ldb	r2,-8(fp)
   44d00:	1009883a 	mov	r4,r2
   44d04:	004019c0 	call	4019c <sramread>
   44d08:	e0bfff15 	stw	r2,-4(fp)
	sramwrite(addr, cardnum-1);
   44d0c:	e0fffe07 	ldb	r3,-8(fp)
   44d10:	e0bfff17 	ldw	r2,-4(fp)
   44d14:	10bfffc4 	addi	r2,r2,-1
   44d18:	10803fcc 	andi	r2,r2,255
   44d1c:	1080201c 	xori	r2,r2,128
   44d20:	10bfe004 	addi	r2,r2,-128
   44d24:	1809883a 	mov	r4,r3
   44d28:	100b883a 	mov	r5,r2
   44d2c:	00401fc0 	call	401fc <sramwrite>
	return cardnum;
   44d30:	e0bfff17 	ldw	r2,-4(fp)
}
   44d34:	e037883a 	mov	sp,fp
   44d38:	dfc00117 	ldw	ra,4(sp)
   44d3c:	df000017 	ldw	fp,0(sp)
   44d40:	dec00204 	addi	sp,sp,8
   44d44:	f800283a 	ret

00044d48 <syncCardNum>:
/**
 * synchronizes card number
 * Inputs: NONE
 * Return: 0 if success
 */
int syncCardNum(){
   44d48:	defffd04 	addi	sp,sp,-12
   44d4c:	dfc00215 	stw	ra,8(sp)
   44d50:	df000115 	stw	fp,4(sp)
   44d54:	df000104 	addi	fp,sp,4
	char cn[3];
	cn[0]=sramread(CHNP)|0x40;
   44d58:	01000d84 	movi	r4,54
   44d5c:	004019c0 	call	4019c <sramread>
   44d60:	10801014 	ori	r2,r2,64
   44d64:	e0bfff05 	stb	r2,-4(fp)
	cn[1]=sramread(CHNP+1)|0x40;
   44d68:	01000dc4 	movi	r4,55
   44d6c:	004019c0 	call	4019c <sramread>
   44d70:	10801014 	ori	r2,r2,64
   44d74:	e0bfff45 	stb	r2,-3(fp)
	cn[2]=sramread(CHNP+2)|0x40;
   44d78:	01000e04 	movi	r4,56
   44d7c:	004019c0 	call	4019c <sramread>
   44d80:	10801014 	ori	r2,r2,64
   44d84:	e0bfff85 	stb	r2,-2(fp)
	sendchar(4|0x40);
   44d88:	01001104 	movi	r4,68
   44d8c:	004028c0 	call	4028c <sendchar>
	usleep(10000);
   44d90:	0109c404 	movi	r4,10000
   44d94:	00546340 	call	54634 <usleep>
	sendstr(3, cn);
   44d98:	010000c4 	movi	r4,3
   44d9c:	e17fff04 	addi	r5,fp,-4
   44da0:	004035c0 	call	4035c <sendstr>
	return 0;
   44da4:	0005883a 	mov	r2,zero
}
   44da8:	e037883a 	mov	sp,fp
   44dac:	dfc00117 	ldw	ra,4(sp)
   44db0:	df000017 	ldw	fp,0(sp)
   44db4:	dec00204 	addi	sp,sp,8
   44db8:	f800283a 	ret

00044dbc <getCardNum>:
/**
 * wait for synchronization of syncCardNum
 * Inputs: NONE
 * Return: 0 if success
 */
int getCardNum(){
   44dbc:	defffb04 	addi	sp,sp,-20
   44dc0:	dfc00415 	stw	ra,16(sp)
   44dc4:	df000315 	stw	fp,12(sp)
   44dc8:	df000304 	addi	fp,sp,12
	int cn[3];
	recvchar(cn);
   44dcc:	e13ffd04 	addi	r4,fp,-12
   44dd0:	00403d80 	call	403d8 <recvchar>
	usleep(80);
   44dd4:	01001404 	movi	r4,80
   44dd8:	00546340 	call	54634 <usleep>
	recvchar(cn+1);
   44ddc:	e0bffe04 	addi	r2,fp,-8
   44de0:	1009883a 	mov	r4,r2
   44de4:	00403d80 	call	403d8 <recvchar>
	usleep(80);
   44de8:	01001404 	movi	r4,80
   44dec:	00546340 	call	54634 <usleep>
	recvchar(cn+2);
   44df0:	e0bfff04 	addi	r2,fp,-4
   44df4:	1009883a 	mov	r4,r2
   44df8:	00403d80 	call	403d8 <recvchar>
	usleep(80);
   44dfc:	01001404 	movi	r4,80
   44e00:	00546340 	call	54634 <usleep>
	sramwrite(CHNP, cn[0]);
   44e04:	e0bffd17 	ldw	r2,-12(fp)
   44e08:	10803fcc 	andi	r2,r2,255
   44e0c:	1080201c 	xori	r2,r2,128
   44e10:	10bfe004 	addi	r2,r2,-128
   44e14:	01000d84 	movi	r4,54
   44e18:	100b883a 	mov	r5,r2
   44e1c:	00401fc0 	call	401fc <sramwrite>
	sramwrite(CHNP+1, cn[1]);
   44e20:	e0bffe17 	ldw	r2,-8(fp)
   44e24:	10803fcc 	andi	r2,r2,255
   44e28:	1080201c 	xori	r2,r2,128
   44e2c:	10bfe004 	addi	r2,r2,-128
   44e30:	01000dc4 	movi	r4,55
   44e34:	100b883a 	mov	r5,r2
   44e38:	00401fc0 	call	401fc <sramwrite>
	sramwrite(CHNP+2, cn[2]);
   44e3c:	e0bfff17 	ldw	r2,-4(fp)
   44e40:	10803fcc 	andi	r2,r2,255
   44e44:	1080201c 	xori	r2,r2,128
   44e48:	10bfe004 	addi	r2,r2,-128
   44e4c:	01000e04 	movi	r4,56
   44e50:	100b883a 	mov	r5,r2
   44e54:	00401fc0 	call	401fc <sramwrite>
	return 0;
   44e58:	0005883a 	mov	r2,zero
}
   44e5c:	e037883a 	mov	sp,fp
   44e60:	dfc00117 	ldw	ra,4(sp)
   44e64:	df000017 	ldw	fp,0(sp)
   44e68:	dec00204 	addi	sp,sp,8
   44e6c:	f800283a 	ret

00044e70 <sort>:
 * Inputs:
 * 		cn: number of cards
 * 		ap: array pointer
 * Return: 0 if success
 */
int sort(char cn, char* ap){
   44e70:	defffa04 	addi	sp,sp,-24
   44e74:	df000515 	stw	fp,20(sp)
   44e78:	df000504 	addi	fp,sp,20
   44e7c:	2005883a 	mov	r2,r4
   44e80:	e17fff15 	stw	r5,-4(fp)
   44e84:	e0bffe05 	stb	r2,-8(fp)
	int i, j;
	char temp;
	for(i=0; i<cn; i++)
   44e88:	e03ffb15 	stw	zero,-20(fp)
   44e8c:	00002d06 	br	44f44 <sort+0xd4>
		for(j=i; j<cn; j++)
   44e90:	e0bffb17 	ldw	r2,-20(fp)
   44e94:	e0bffc15 	stw	r2,-16(fp)
   44e98:	00002406 	br	44f2c <sort+0xbc>
			if(ap[i]>ap[j]){
   44e9c:	e0bffb17 	ldw	r2,-20(fp)
   44ea0:	e0ffff17 	ldw	r3,-4(fp)
   44ea4:	1885883a 	add	r2,r3,r2
   44ea8:	10800003 	ldbu	r2,0(r2)
   44eac:	e0fffc17 	ldw	r3,-16(fp)
   44eb0:	e13fff17 	ldw	r4,-4(fp)
   44eb4:	20c7883a 	add	r3,r4,r3
   44eb8:	18c00003 	ldbu	r3,0(r3)
   44ebc:	10803fcc 	andi	r2,r2,255
   44ec0:	1080201c 	xori	r2,r2,128
   44ec4:	10bfe004 	addi	r2,r2,-128
   44ec8:	18c03fcc 	andi	r3,r3,255
   44ecc:	18c0201c 	xori	r3,r3,128
   44ed0:	18ffe004 	addi	r3,r3,-128
   44ed4:	1880120e 	bge	r3,r2,44f20 <sort+0xb0>
				temp=ap[i];
   44ed8:	e0bffb17 	ldw	r2,-20(fp)
   44edc:	e0ffff17 	ldw	r3,-4(fp)
   44ee0:	1885883a 	add	r2,r3,r2
   44ee4:	10800003 	ldbu	r2,0(r2)
   44ee8:	e0bffd05 	stb	r2,-12(fp)
				ap[i]=ap[j];
   44eec:	e0bffb17 	ldw	r2,-20(fp)
   44ef0:	e0ffff17 	ldw	r3,-4(fp)
   44ef4:	1885883a 	add	r2,r3,r2
   44ef8:	e0fffc17 	ldw	r3,-16(fp)
   44efc:	e13fff17 	ldw	r4,-4(fp)
   44f00:	20c7883a 	add	r3,r4,r3
   44f04:	18c00003 	ldbu	r3,0(r3)
   44f08:	10c00005 	stb	r3,0(r2)
				ap[j]=temp;
   44f0c:	e0bffc17 	ldw	r2,-16(fp)
   44f10:	e0ffff17 	ldw	r3,-4(fp)
   44f14:	1885883a 	add	r2,r3,r2
   44f18:	e0fffd03 	ldbu	r3,-12(fp)
   44f1c:	10c00005 	stb	r3,0(r2)
 */
int sort(char cn, char* ap){
	int i, j;
	char temp;
	for(i=0; i<cn; i++)
		for(j=i; j<cn; j++)
   44f20:	e0bffc17 	ldw	r2,-16(fp)
   44f24:	10800044 	addi	r2,r2,1
   44f28:	e0bffc15 	stw	r2,-16(fp)
   44f2c:	e0bffe07 	ldb	r2,-8(fp)
   44f30:	e0fffc17 	ldw	r3,-16(fp)
   44f34:	18bfd916 	blt	r3,r2,44e9c <__alt_data_end+0xfffd2e9c>
 * Return: 0 if success
 */
int sort(char cn, char* ap){
	int i, j;
	char temp;
	for(i=0; i<cn; i++)
   44f38:	e0bffb17 	ldw	r2,-20(fp)
   44f3c:	10800044 	addi	r2,r2,1
   44f40:	e0bffb15 	stw	r2,-20(fp)
   44f44:	e0bffe07 	ldb	r2,-8(fp)
   44f48:	e0fffb17 	ldw	r3,-20(fp)
   44f4c:	18bfd016 	blt	r3,r2,44e90 <__alt_data_end+0xfffd2e90>
			if(ap[i]>ap[j]){
				temp=ap[i];
				ap[i]=ap[j];
				ap[j]=temp;
			}
	return 0;
   44f50:	0005883a 	mov	r2,zero
}
   44f54:	e037883a 	mov	sp,fp
   44f58:	df000017 	ldw	fp,0(sp)
   44f5c:	dec00104 	addi	sp,sp,4
   44f60:	f800283a 	ret

00044f64 <isCurrentPlayer>:
/**
 * Decide of I am current player
 * Inputs: NONE
 * Return: Boolean
 */
Boolean isCurrentPlayer(){
   44f64:	deffff04 	addi	sp,sp,-4
   44f68:	df000015 	stw	fp,0(sp)
   44f6c:	d839883a 	mov	fp,sp
	return myNum==PCS&0x3; //mask:0011
   44f70:	008001b4 	movhi	r2,6
   44f74:	10a60a04 	addi	r2,r2,-26584
   44f78:	10c00003 	ldbu	r3,0(r2)
   44f7c:	008001b4 	movhi	r2,6
   44f80:	10a60f44 	addi	r2,r2,-26563
   44f84:	10800003 	ldbu	r2,0(r2)
   44f88:	18c03fcc 	andi	r3,r3,255
   44f8c:	18c0201c 	xori	r3,r3,128
   44f90:	18ffe004 	addi	r3,r3,-128
   44f94:	10803fcc 	andi	r2,r2,255
   44f98:	1080201c 	xori	r2,r2,128
   44f9c:	10bfe004 	addi	r2,r2,-128
   44fa0:	1885003a 	cmpeq	r2,r3,r2
   44fa4:	10803fcc 	andi	r2,r2,255
}
   44fa8:	e037883a 	mov	sp,fp
   44fac:	df000017 	ldw	fp,0(sp)
   44fb0:	dec00104 	addi	sp,sp,4
   44fb4:	f800283a 	ret

00044fb8 <nextPlayer>:
/**
 * Change player 1-2 2-3 3-1
 * Inputs: NONE
 * Return: 0 if success
 */
int nextPlayer(){
   44fb8:	deffff04 	addi	sp,sp,-4
   44fbc:	df000015 	stw	fp,0(sp)
   44fc0:	d839883a 	mov	fp,sp
	PCS=(PCS+1)%4+(PCS==3);
   44fc4:	008001b4 	movhi	r2,6
   44fc8:	10a60f44 	addi	r2,r2,-26563
   44fcc:	10800003 	ldbu	r2,0(r2)
   44fd0:	10803fcc 	andi	r2,r2,255
   44fd4:	1080201c 	xori	r2,r2,128
   44fd8:	10bfe004 	addi	r2,r2,-128
   44fdc:	10c00044 	addi	r3,r2,1
   44fe0:	00a00034 	movhi	r2,32768
   44fe4:	108000c4 	addi	r2,r2,3
   44fe8:	1884703a 	and	r2,r3,r2
   44fec:	1000040e 	bge	r2,zero,45000 <nextPlayer+0x48>
   44ff0:	10bfffc4 	addi	r2,r2,-1
   44ff4:	00ffff04 	movi	r3,-4
   44ff8:	10c4b03a 	or	r2,r2,r3
   44ffc:	10800044 	addi	r2,r2,1
   45000:	1007883a 	mov	r3,r2
   45004:	008001b4 	movhi	r2,6
   45008:	10a60f44 	addi	r2,r2,-26563
   4500c:	10800003 	ldbu	r2,0(r2)
   45010:	10803fcc 	andi	r2,r2,255
   45014:	1080201c 	xori	r2,r2,128
   45018:	10bfe004 	addi	r2,r2,-128
   4501c:	108000e0 	cmpeqi	r2,r2,3
   45020:	1885883a 	add	r2,r3,r2
   45024:	1007883a 	mov	r3,r2
   45028:	008001b4 	movhi	r2,6
   4502c:	10a60f44 	addi	r2,r2,-26563
   45030:	10c00005 	stb	r3,0(r2)
	//PCS=(PCS+1)%3+(PCS==2);
	return 0;
   45034:	0005883a 	mov	r2,zero
}
   45038:	e037883a 	mov	sp,fp
   4503c:	df000017 	ldw	fp,0(sp)
   45040:	dec00104 	addi	sp,sp,4
   45044:	f800283a 	ret

00045048 <incPCS>:
/**
 * Tell other boards to change player
 * Inputs: NONE
 * Return: 0 if success
 */
int incPCS(){
   45048:	defffe04 	addi	sp,sp,-8
   4504c:	dfc00115 	stw	ra,4(sp)
   45050:	df000015 	stw	fp,0(sp)
   45054:	d839883a 	mov	fp,sp
	sendchar(1|0x40);
   45058:	01001044 	movi	r4,65
   4505c:	004028c0 	call	4028c <sendchar>
	usleep(250);
   45060:	01003e84 	movi	r4,250
   45064:	00546340 	call	54634 <usleep>
	return 0;
   45068:	0005883a 	mov	r2,zero
}
   4506c:	e037883a 	mov	sp,fp
   45070:	dfc00117 	ldw	ra,4(sp)
   45074:	df000017 	ldw	fp,0(sp)
   45078:	dec00204 	addi	sp,sp,8
   4507c:	f800283a 	ret

00045080 <resetPCS>:
/**
 * Tell other boards to change player
 * Inputs: NONE
 * Return: 0 if success
 */
int resetPCS(){
   45080:	defffe04 	addi	sp,sp,-8
   45084:	dfc00115 	stw	ra,4(sp)
   45088:	df000015 	stw	fp,0(sp)
   4508c:	d839883a 	mov	fp,sp
	sendchar(2|0x40);
   45090:	01001084 	movi	r4,66
   45094:	004028c0 	call	4028c <sendchar>
	return 0;
   45098:	0005883a 	mov	r2,zero
}
   4509c:	e037883a 	mov	sp,fp
   450a0:	dfc00117 	ldw	ra,4(sp)
   450a4:	df000017 	ldw	fp,0(sp)
   450a8:	dec00204 	addi	sp,sp,8
   450ac:	f800283a 	ret

000450b0 <waitNextPlayer>:
/**
 * Wait for command of changing player
 * Inputs: NONE
 * Return: 0 if success
 */
int waitNextPlayer(){
   450b0:	defffd04 	addi	sp,sp,-12
   450b4:	dfc00215 	stw	ra,8(sp)
   450b8:	df000115 	stw	fp,4(sp)
   450bc:	df000104 	addi	fp,sp,4
	char buf=0;
   450c0:	e03fff05 	stb	zero,-4(fp)
	while(buf != 1)
   450c4:	00000206 	br	450d0 <waitNextPlayer+0x20>
		recvchar(&buf);
   450c8:	e13fff04 	addi	r4,fp,-4
   450cc:	00403d80 	call	403d8 <recvchar>
 * Inputs: NONE
 * Return: 0 if success
 */
int waitNextPlayer(){
	char buf=0;
	while(buf != 1)
   450d0:	e0bfff03 	ldbu	r2,-4(fp)
   450d4:	10803fcc 	andi	r2,r2,255
   450d8:	1080201c 	xori	r2,r2,128
   450dc:	10bfe004 	addi	r2,r2,-128
   450e0:	10800058 	cmpnei	r2,r2,1
   450e4:	103ff81e 	bne	r2,zero,450c8 <__alt_data_end+0xfffd30c8>
		recvchar(&buf);
	return 0;
   450e8:	0005883a 	mov	r2,zero
}
   450ec:	e037883a 	mov	sp,fp
   450f0:	dfc00117 	ldw	ra,4(sp)
   450f4:	df000017 	ldw	fp,0(sp)
   450f8:	dec00204 	addi	sp,sp,8
   450fc:	f800283a 	ret

00045100 <setmul1>:
/**
 * set multiplier to 1
 * Inputs: NONE
 * Return: 0 if success
 */
int setmul1(){
   45100:	defffe04 	addi	sp,sp,-8
   45104:	dfc00115 	stw	ra,4(sp)
   45108:	df000015 	stw	fp,0(sp)
   4510c:	d839883a 	mov	fp,sp
	sendchar(5|0x40);
   45110:	01001144 	movi	r4,69
   45114:	004028c0 	call	4028c <sendchar>
	return 0;
   45118:	0005883a 	mov	r2,zero
}
   4511c:	e037883a 	mov	sp,fp
   45120:	dfc00117 	ldw	ra,4(sp)
   45124:	df000017 	ldw	fp,0(sp)
   45128:	dec00204 	addi	sp,sp,8
   4512c:	f800283a 	ret

00045130 <setmul2>:
/**
 * set multiplier to 2
 * Inputs: NONE
 * Return: 0 if success
 */
int setmul2(){
   45130:	defffe04 	addi	sp,sp,-8
   45134:	dfc00115 	stw	ra,4(sp)
   45138:	df000015 	stw	fp,0(sp)
   4513c:	d839883a 	mov	fp,sp
	sendchar(6|0x40);
   45140:	01001184 	movi	r4,70
   45144:	004028c0 	call	4028c <sendchar>
	return 0;
   45148:	0005883a 	mov	r2,zero
}
   4514c:	e037883a 	mov	sp,fp
   45150:	dfc00117 	ldw	ra,4(sp)
   45154:	df000017 	ldw	fp,0(sp)
   45158:	dec00204 	addi	sp,sp,8
   4515c:	f800283a 	ret

00045160 <setmul3>:
/**
 * set multiplier to 3
 * Inputs: NONE
 * Return: 0 if success
 */
int setmul3(){
   45160:	defffe04 	addi	sp,sp,-8
   45164:	dfc00115 	stw	ra,4(sp)
   45168:	df000015 	stw	fp,0(sp)
   4516c:	d839883a 	mov	fp,sp
	sendchar(7|0x40);
   45170:	010011c4 	movi	r4,71
   45174:	004028c0 	call	4028c <sendchar>
	return 0;
   45178:	0005883a 	mov	r2,zero
}
   4517c:	e037883a 	mov	sp,fp
   45180:	dfc00117 	ldw	ra,4(sp)
   45184:	df000017 	ldw	fp,0(sp)
   45188:	dec00204 	addi	sp,sp,8
   4518c:	f800283a 	ret

00045190 <PCS0101>:
/**
 * tell other boards to change PCS to 0101
 * Inputs: NONE
 * Return: 0 if success
 */
int PCS0101(){
   45190:	defffe04 	addi	sp,sp,-8
   45194:	dfc00115 	stw	ra,4(sp)
   45198:	df000015 	stw	fp,0(sp)
   4519c:	d839883a 	mov	fp,sp
	sendchar(8|0x40);
   451a0:	01001204 	movi	r4,72
   451a4:	004028c0 	call	4028c <sendchar>
	return 0;
   451a8:	0005883a 	mov	r2,zero
}
   451ac:	e037883a 	mov	sp,fp
   451b0:	dfc00117 	ldw	ra,4(sp)
   451b4:	df000017 	ldw	fp,0(sp)
   451b8:	dec00204 	addi	sp,sp,8
   451bc:	f800283a 	ret

000451c0 <PCS1010>:
/**
 * Tell other boards to change PCS to 1010
 * Inputs: NONE
 * Return: 0 if success
 */
int PCS1010(){
   451c0:	defffe04 	addi	sp,sp,-8
   451c4:	dfc00115 	stw	ra,4(sp)
   451c8:	df000015 	stw	fp,0(sp)
   451cc:	d839883a 	mov	fp,sp
	sendchar(9|0x40);
   451d0:	01001244 	movi	r4,73
   451d4:	004028c0 	call	4028c <sendchar>
	return 0;
   451d8:	0005883a 	mov	r2,zero
}
   451dc:	e037883a 	mov	sp,fp
   451e0:	dfc00117 	ldw	ra,4(sp)
   451e4:	df000017 	ldw	fp,0(sp)
   451e8:	dec00204 	addi	sp,sp,8
   451ec:	f800283a 	ret

000451f0 <PCS1111>:
/**
 * Tell other boards to change PCS to 1111
 * Inputs: NONE
 * Return: 0 if success
 */
int PCS1111(){
   451f0:	defffe04 	addi	sp,sp,-8
   451f4:	dfc00115 	stw	ra,4(sp)
   451f8:	df000015 	stw	fp,0(sp)
   451fc:	d839883a 	mov	fp,sp
	sendchar(10|0x40);
   45200:	01001284 	movi	r4,74
   45204:	004028c0 	call	4028c <sendchar>
	return 0;
   45208:	0005883a 	mov	r2,zero
}
   4520c:	e037883a 	mov	sp,fp
   45210:	dfc00117 	ldw	ra,4(sp)
   45214:	df000017 	ldw	fp,0(sp)
   45218:	dec00204 	addi	sp,sp,8
   4521c:	f800283a 	ret

00045220 <rand>:
/**
 * Generates 8-bit random unsigned integer
 * Inputs: NONE
 * Return: unsigned int generated random number
 */
unsigned int rand(){
   45220:	defffe04 	addi	sp,sp,-8
   45224:	df000115 	stw	fp,4(sp)
   45228:	df000104 	addi	fp,sp,4
   static unsigned int z1, z2, z3, z4;
   unsigned int b;
   if (firstrand){
   4522c:	00800174 	movhi	r2,5
   45230:	109f5304 	addi	r2,r2,32076
   45234:	10800017 	ldw	r2,0(r2)
   45238:	10001826 	beq	r2,zero,4529c <rand+0x7c>
	   z1 = rand1;
   4523c:	008001b4 	movhi	r2,6
   45240:	10a60904 	addi	r2,r2,-26588
   45244:	10800017 	ldw	r2,0(r2)
   45248:	d0a6be15 	stw	r2,-25864(gp)
	   z2 = rand2;
   4524c:	008001b4 	movhi	r2,6
   45250:	10a60e04 	addi	r2,r2,-26568
   45254:	10800017 	ldw	r2,0(r2)
   45258:	d0a6bf15 	stw	r2,-25860(gp)
	   z3 = rand3;
   4525c:	008001b4 	movhi	r2,6
   45260:	10a60b04 	addi	r2,r2,-26580
   45264:	10800017 	ldw	r2,0(r2)
   45268:	d0a6c015 	stw	r2,-25856(gp)
	   z4 = rand4;
   4526c:	008001b4 	movhi	r2,6
   45270:	10a60804 	addi	r2,r2,-26592
   45274:	10800017 	ldw	r2,0(r2)
   45278:	d0a6c115 	stw	r2,-25852(gp)
	   firstrand=!firstrand;
   4527c:	00800174 	movhi	r2,5
   45280:	109f5304 	addi	r2,r2,32076
   45284:	10800017 	ldw	r2,0(r2)
   45288:	1005003a 	cmpeq	r2,r2,zero
   4528c:	10c03fcc 	andi	r3,r2,255
   45290:	00800174 	movhi	r2,5
   45294:	109f5304 	addi	r2,r2,32076
   45298:	10c00015 	stw	r3,0(r2)
   }
   b  = ((z1 << 6) ^ z1) >> 13;
   4529c:	d0a6be17 	ldw	r2,-25864(gp)
   452a0:	100691ba 	slli	r3,r2,6
   452a4:	d0a6be17 	ldw	r2,-25864(gp)
   452a8:	1884f03a 	xor	r2,r3,r2
   452ac:	1004d37a 	srli	r2,r2,13
   452b0:	e0bfff15 	stw	r2,-4(fp)
   z1 = ((z1 & 4294967294U) << 18) ^ b;
   452b4:	d0e6be17 	ldw	r3,-25864(gp)
   452b8:	00bfff84 	movi	r2,-2
   452bc:	1884703a 	and	r2,r3,r2
   452c0:	100694ba 	slli	r3,r2,18
   452c4:	e0bfff17 	ldw	r2,-4(fp)
   452c8:	1884f03a 	xor	r2,r3,r2
   452cc:	d0a6be15 	stw	r2,-25864(gp)
   b  = ((z2 << 2) ^ z2) >> 27;
   452d0:	d0a6bf17 	ldw	r2,-25860(gp)
   452d4:	1085883a 	add	r2,r2,r2
   452d8:	1085883a 	add	r2,r2,r2
   452dc:	1007883a 	mov	r3,r2
   452e0:	d0a6bf17 	ldw	r2,-25860(gp)
   452e4:	1884f03a 	xor	r2,r3,r2
   452e8:	1004d6fa 	srli	r2,r2,27
   452ec:	e0bfff15 	stw	r2,-4(fp)
   z2 = ((z2 & 4294967288U) << 2) ^ b;
   452f0:	d0e6bf17 	ldw	r3,-25860(gp)
   452f4:	00bffe04 	movi	r2,-8
   452f8:	1884703a 	and	r2,r3,r2
   452fc:	1085883a 	add	r2,r2,r2
   45300:	1085883a 	add	r2,r2,r2
   45304:	1007883a 	mov	r3,r2
   45308:	e0bfff17 	ldw	r2,-4(fp)
   4530c:	1884f03a 	xor	r2,r3,r2
   45310:	d0a6bf15 	stw	r2,-25860(gp)
   b  = ((z3 << 13) ^ z3) >> 21;
   45314:	d0a6c017 	ldw	r2,-25856(gp)
   45318:	1006937a 	slli	r3,r2,13
   4531c:	d0a6c017 	ldw	r2,-25856(gp)
   45320:	1884f03a 	xor	r2,r3,r2
   45324:	1004d57a 	srli	r2,r2,21
   45328:	e0bfff15 	stw	r2,-4(fp)
   z3 = ((z3 & 4294967280U) << 7) ^ b;
   4532c:	d0e6c017 	ldw	r3,-25856(gp)
   45330:	00bffc04 	movi	r2,-16
   45334:	1884703a 	and	r2,r3,r2
   45338:	100691fa 	slli	r3,r2,7
   4533c:	e0bfff17 	ldw	r2,-4(fp)
   45340:	1884f03a 	xor	r2,r3,r2
   45344:	d0a6c015 	stw	r2,-25856(gp)
   b  = ((z4 << 3) ^ z4) >> 12;
   45348:	d0a6c117 	ldw	r2,-25852(gp)
   4534c:	100690fa 	slli	r3,r2,3
   45350:	d0a6c117 	ldw	r2,-25852(gp)
   45354:	1884f03a 	xor	r2,r3,r2
   45358:	1004d33a 	srli	r2,r2,12
   4535c:	e0bfff15 	stw	r2,-4(fp)
   z4 = ((z4 & 4294967168U) << 13) ^ b;
   45360:	d0e6c117 	ldw	r3,-25852(gp)
   45364:	00bfe004 	movi	r2,-128
   45368:	1884703a 	and	r2,r3,r2
   4536c:	1006937a 	slli	r3,r2,13
   45370:	e0bfff17 	ldw	r2,-4(fp)
   45374:	1884f03a 	xor	r2,r3,r2
   45378:	d0a6c115 	stw	r2,-25852(gp)
   return (z1 ^ z2 ^ z3 ^ z4);
   4537c:	d0e6be17 	ldw	r3,-25864(gp)
   45380:	d0a6bf17 	ldw	r2,-25860(gp)
   45384:	1886f03a 	xor	r3,r3,r2
   45388:	d0a6c017 	ldw	r2,-25856(gp)
   4538c:	1886f03a 	xor	r3,r3,r2
   45390:	d0a6c117 	ldw	r2,-25852(gp)
   45394:	1884f03a 	xor	r2,r3,r2
}
   45398:	e037883a 	mov	sp,fp
   4539c:	df000017 	ldw	fp,0(sp)
   453a0:	dec00104 	addi	sp,sp,4
   453a4:	f800283a 	ret

000453a8 <shuffle>:
/**
 * shuffles the cards
 * Inputs: NONE
 * Return: void
 */
int shuffle(){
   453a8:	defff904 	addi	sp,sp,-28
   453ac:	dfc00615 	stw	ra,24(sp)
   453b0:	df000515 	stw	fp,20(sp)
   453b4:	dc000415 	stw	r16,16(sp)
   453b8:	df000404 	addi	fp,sp,16
	int i;
	int card;
	unsigned int addr;
	int opcode;
	initSRAM();
   453bc:	004561c0 	call	4561c <initSRAM>
	while(!isCurrentPlayer()){
   453c0:	00000f06 	br	45400 <shuffle+0x58>
		recvchar(&opcode);
   453c4:	e0bfff04 	addi	r2,fp,-4
   453c8:	1009883a 	mov	r4,r2
   453cc:	00403d80 	call	403d8 <recvchar>
		usleep(70);
   453d0:	01001184 	movi	r4,70
   453d4:	00546340 	call	54634 <usleep>
		switch(opcode){
   453d8:	e0bfff17 	ldw	r2,-4(fp)
   453dc:	10c00060 	cmpeqi	r3,r2,1
   453e0:	1800031e 	bne	r3,zero,453f0 <shuffle+0x48>
   453e4:	108000e0 	cmpeqi	r2,r2,3
   453e8:	1000031e 	bne	r2,zero,453f8 <shuffle+0x50>
   453ec:	00000406 	br	45400 <shuffle+0x58>
		case 1:
				nextPlayer();
   453f0:	0044fb80 	call	44fb8 <nextPlayer>
				break;
   453f4:	00000206 	br	45400 <shuffle+0x58>
		case 3:
				deleteRecv();
   453f8:	0044c180 	call	44c18 <deleteRecv>
				break;
   453fc:	0001883a 	nop
	int i;
	int card;
	unsigned int addr;
	int opcode;
	initSRAM();
	while(!isCurrentPlayer()){
   45400:	0044f640 	call	44f64 <isCurrentPlayer>
   45404:	103fef26 	beq	r2,zero,453c4 <__alt_data_end+0xfffd33c4>
		case 3:
				deleteRecv();
				break;
		}
	}
	for(i=0; i<17; i++){
   45408:	e03ffc15 	stw	zero,-16(fp)
   4540c:	00003306 	br	454dc <shuffle+0x134>
		addr=getCard(i);
   45410:	e13ffc17 	ldw	r4,-16(fp)
   45414:	00455b80 	call	455b8 <getCard>
   45418:	e0bffd15 	stw	r2,-12(fp)
		// 0-12 normal, 13 if 52, 14 if 53
		card=sramread(addr);
   4541c:	e0bffd17 	ldw	r2,-12(fp)
   45420:	10803fcc 	andi	r2,r2,255
   45424:	1080201c 	xori	r2,r2,128
   45428:	10bfe004 	addi	r2,r2,-128
   4542c:	1009883a 	mov	r4,r2
   45430:	004019c0 	call	4019c <sramread>
   45434:	e0bffe15 	stw	r2,-8(fp)
		cch[i]=card%13+13*(card==52)+13*(card==53);
   45438:	008001b4 	movhi	r2,6
   4543c:	10a60c04 	addi	r2,r2,-26576
   45440:	10c00017 	ldw	r3,0(r2)
   45444:	e0bffc17 	ldw	r2,-16(fp)
   45448:	18a1883a 	add	r16,r3,r2
   4544c:	e0bffe17 	ldw	r2,-8(fp)
   45450:	1009883a 	mov	r4,r2
   45454:	01400344 	movi	r5,13
   45458:	00457780 	call	45778 <__modsi3>
   4545c:	1007883a 	mov	r3,r2
   45460:	e0bffe17 	ldw	r2,-8(fp)
   45464:	10800d18 	cmpnei	r2,r2,52
   45468:	1000021e 	bne	r2,zero,45474 <shuffle+0xcc>
   4546c:	00800344 	movi	r2,13
   45470:	00000106 	br	45478 <shuffle+0xd0>
   45474:	0005883a 	mov	r2,zero
   45478:	1885883a 	add	r2,r3,r2
   4547c:	1007883a 	mov	r3,r2
   45480:	e0bffe17 	ldw	r2,-8(fp)
   45484:	10800d58 	cmpnei	r2,r2,53
   45488:	1000021e 	bne	r2,zero,45494 <shuffle+0xec>
   4548c:	00800344 	movi	r2,13
   45490:	00000106 	br	45498 <shuffle+0xf0>
   45494:	0005883a 	mov	r2,zero
   45498:	1885883a 	add	r2,r3,r2
   4549c:	80800005 	stb	r2,0(r16)
		deleteSRAM(addr);
   454a0:	e0bffd17 	ldw	r2,-12(fp)
   454a4:	10803fcc 	andi	r2,r2,255
   454a8:	1080201c 	xori	r2,r2,128
   454ac:	10bfe004 	addi	r2,r2,-128
   454b0:	1009883a 	mov	r4,r2
   454b4:	0044b100 	call	44b10 <deleteSRAM>
		syncDeleteSRAM(addr);
   454b8:	e0bffd17 	ldw	r2,-12(fp)
   454bc:	10803fcc 	andi	r2,r2,255
   454c0:	1080201c 	xori	r2,r2,128
   454c4:	10bfe004 	addi	r2,r2,-128
   454c8:	1009883a 	mov	r4,r2
   454cc:	0044bb40 	call	44bb4 <syncDeleteSRAM>
		case 3:
				deleteRecv();
				break;
		}
	}
	for(i=0; i<17; i++){
   454d0:	e0bffc17 	ldw	r2,-16(fp)
   454d4:	10800044 	addi	r2,r2,1
   454d8:	e0bffc15 	stw	r2,-16(fp)
   454dc:	e0bffc17 	ldw	r2,-16(fp)
   454e0:	10800450 	cmplti	r2,r2,17
   454e4:	103fca1e 	bne	r2,zero,45410 <__alt_data_end+0xfffd3410>
		card=sramread(addr);
		cch[i]=card%13+13*(card==52)+13*(card==53);
		deleteSRAM(addr);
		syncDeleteSRAM(addr);
	}
	nextPlayer();
   454e8:	0044fb80 	call	44fb8 <nextPlayer>
	usleep(250);
   454ec:	01003e84 	movi	r4,250
   454f0:	00546340 	call	54634 <usleep>
	incPCS();
   454f4:	00450480 	call	45048 <incPCS>
	while(PCS!=1){
   454f8:	00000f06 	br	45538 <shuffle+0x190>
		recvchar(&opcode);
   454fc:	e0bfff04 	addi	r2,fp,-4
   45500:	1009883a 	mov	r4,r2
   45504:	00403d80 	call	403d8 <recvchar>
		usleep(80);
   45508:	01001404 	movi	r4,80
   4550c:	00546340 	call	54634 <usleep>
		switch(opcode){
   45510:	e0bfff17 	ldw	r2,-4(fp)
   45514:	10c00060 	cmpeqi	r3,r2,1
   45518:	1800031e 	bne	r3,zero,45528 <shuffle+0x180>
   4551c:	108000e0 	cmpeqi	r2,r2,3
   45520:	1000031e 	bne	r2,zero,45530 <shuffle+0x188>
   45524:	00000406 	br	45538 <shuffle+0x190>
		case 1:
				nextPlayer();
   45528:	0044fb80 	call	44fb8 <nextPlayer>
				break;
   4552c:	00000206 	br	45538 <shuffle+0x190>
		case 3:
				deleteRecv();
   45530:	0044c180 	call	44c18 <deleteRecv>
				break;
   45534:	0001883a 	nop
		syncDeleteSRAM(addr);
	}
	nextPlayer();
	usleep(250);
	incPCS();
	while(PCS!=1){
   45538:	008001b4 	movhi	r2,6
   4553c:	10a60f44 	addi	r2,r2,-26563
   45540:	10800003 	ldbu	r2,0(r2)
   45544:	10803fcc 	andi	r2,r2,255
   45548:	1080201c 	xori	r2,r2,128
   4554c:	10bfe004 	addi	r2,r2,-128
   45550:	10800058 	cmpnei	r2,r2,1
   45554:	103fe91e 	bne	r2,zero,454fc <__alt_data_end+0xfffd34fc>
		case 3:
				deleteRecv();
				break;
		}
	}
	alt_printf("current player: %x\n", PCS);
   45558:	008001b4 	movhi	r2,6
   4555c:	10a60f44 	addi	r2,r2,-26563
   45560:	10800003 	ldbu	r2,0(r2)
   45564:	10803fcc 	andi	r2,r2,255
   45568:	1080201c 	xori	r2,r2,128
   4556c:	10bfe004 	addi	r2,r2,-128
   45570:	01000174 	movhi	r4,5
   45574:	21173804 	addi	r4,r4,23776
   45578:	100b883a 	mov	r5,r2
   4557c:	00459080 	call	45908 <printf>
	sort(17, cch);
   45580:	008001b4 	movhi	r2,6
   45584:	10a60c04 	addi	r2,r2,-26576
   45588:	10800017 	ldw	r2,0(r2)
   4558c:	01000444 	movi	r4,17
   45590:	100b883a 	mov	r5,r2
   45594:	0044e700 	call	44e70 <sort>
	display();
   45598:	00449140 	call	44914 <display>
	return 0;
   4559c:	0005883a 	mov	r2,zero
}
   455a0:	e037883a 	mov	sp,fp
   455a4:	dfc00217 	ldw	ra,8(sp)
   455a8:	df000117 	ldw	fp,4(sp)
   455ac:	dc000017 	ldw	r16,0(sp)
   455b0:	dec00304 	addi	sp,sp,12
   455b4:	f800283a 	ret

000455b8 <getCard>:
 * gets card value, used for shuffle
 * Inputs:
 * 		index: index of cch
 * Return card value
 */
int getCard(int index){
   455b8:	defffd04 	addi	sp,sp,-12
   455bc:	dfc00215 	stw	ra,8(sp)
   455c0:	df000115 	stw	fp,4(sp)
   455c4:	df000104 	addi	fp,sp,4
   455c8:	e13fff15 	stw	r4,-4(fp)
	return rand()%(54-17*(myNum-1)-index);
   455cc:	00452200 	call	45220 <rand>
   455d0:	1007883a 	mov	r3,r2
   455d4:	008001b4 	movhi	r2,6
   455d8:	10a60a04 	addi	r2,r2,-26584
   455dc:	10800003 	ldbu	r2,0(r2)
   455e0:	10803fcc 	andi	r2,r2,255
   455e4:	1080201c 	xori	r2,r2,128
   455e8:	10bfe004 	addi	r2,r2,-128
   455ec:	10bffbe4 	muli	r2,r2,-17
   455f0:	110011c4 	addi	r4,r2,71
   455f4:	e0bfff17 	ldw	r2,-4(fp)
   455f8:	2085c83a 	sub	r2,r4,r2
   455fc:	1809883a 	mov	r4,r3
   45600:	100b883a 	mov	r5,r2
   45604:	00457dc0 	call	457dc <__umodsi3>
}
   45608:	e037883a 	mov	sp,fp
   4560c:	dfc00117 	ldw	ra,4(sp)
   45610:	df000017 	ldw	fp,0(sp)
   45614:	dec00204 	addi	sp,sp,8
   45618:	f800283a 	ret

0004561c <initSRAM>:
/**
 * initializes SRAM
 * Inputs: NONE
 * Return: 0 if success
 */
int initSRAM(){
   4561c:	defffd04 	addi	sp,sp,-12
   45620:	dfc00215 	stw	ra,8(sp)
   45624:	df000115 	stw	fp,4(sp)
   45628:	df000104 	addi	fp,sp,4
	int i;
	for(i=0; i<54; i++){
   4562c:	e03fff15 	stw	zero,-4(fp)
   45630:	00000e06 	br	4566c <initSRAM+0x50>
		sramwrite(i, i);
   45634:	e0bfff17 	ldw	r2,-4(fp)
   45638:	10c03fcc 	andi	r3,r2,255
   4563c:	18c0201c 	xori	r3,r3,128
   45640:	18ffe004 	addi	r3,r3,-128
   45644:	e0bfff17 	ldw	r2,-4(fp)
   45648:	10803fcc 	andi	r2,r2,255
   4564c:	1080201c 	xori	r2,r2,128
   45650:	10bfe004 	addi	r2,r2,-128
   45654:	1809883a 	mov	r4,r3
   45658:	100b883a 	mov	r5,r2
   4565c:	00401fc0 	call	401fc <sramwrite>
 * Inputs: NONE
 * Return: 0 if success
 */
int initSRAM(){
	int i;
	for(i=0; i<54; i++){
   45660:	e0bfff17 	ldw	r2,-4(fp)
   45664:	10800044 	addi	r2,r2,1
   45668:	e0bfff15 	stw	r2,-4(fp)
   4566c:	e0bfff17 	ldw	r2,-4(fp)
   45670:	10800d90 	cmplti	r2,r2,54
   45674:	103fef1e 	bne	r2,zero,45634 <__alt_data_end+0xfffd3634>
		sramwrite(i, i);
	}
	sramwrite(54, 17);
   45678:	01000d84 	movi	r4,54
   4567c:	01400444 	movi	r5,17
   45680:	00401fc0 	call	401fc <sramwrite>
	sramwrite(55, 17);
   45684:	01000dc4 	movi	r4,55
   45688:	01400444 	movi	r5,17
   4568c:	00401fc0 	call	401fc <sramwrite>
	sramwrite(56, 17);
   45690:	01000e04 	movi	r4,56
   45694:	01400444 	movi	r5,17
   45698:	00401fc0 	call	401fc <sramwrite>
	return 0;
   4569c:	0005883a 	mov	r2,zero
}
   456a0:	e037883a 	mov	sp,fp
   456a4:	dfc00117 	ldw	ra,4(sp)
   456a8:	df000017 	ldw	fp,0(sp)
   456ac:	dec00204 	addi	sp,sp,8
   456b0:	f800283a 	ret

000456b4 <udivmodsi4>:
   456b4:	2005883a 	mov	r2,r4
   456b8:	2900182e 	bgeu	r5,r4,4571c <udivmodsi4+0x68>
   456bc:	28001716 	blt	r5,zero,4571c <udivmodsi4+0x68>
   456c0:	01000804 	movi	r4,32
   456c4:	00c00044 	movi	r3,1
   456c8:	00000206 	br	456d4 <udivmodsi4+0x20>
   456cc:	20001126 	beq	r4,zero,45714 <udivmodsi4+0x60>
   456d0:	28000516 	blt	r5,zero,456e8 <udivmodsi4+0x34>
   456d4:	294b883a 	add	r5,r5,r5
   456d8:	213fffc4 	addi	r4,r4,-1
   456dc:	18c7883a 	add	r3,r3,r3
   456e0:	28bffa36 	bltu	r5,r2,456cc <__alt_data_end+0xfffd36cc>
   456e4:	18000b26 	beq	r3,zero,45714 <udivmodsi4+0x60>
   456e8:	0009883a 	mov	r4,zero
   456ec:	11400236 	bltu	r2,r5,456f8 <udivmodsi4+0x44>
   456f0:	1145c83a 	sub	r2,r2,r5
   456f4:	20c8b03a 	or	r4,r4,r3
   456f8:	1806d07a 	srli	r3,r3,1
   456fc:	280ad07a 	srli	r5,r5,1
   45700:	183ffa1e 	bne	r3,zero,456ec <__alt_data_end+0xfffd36ec>
   45704:	3000021e 	bne	r6,zero,45710 <udivmodsi4+0x5c>
   45708:	2005883a 	mov	r2,r4
   4570c:	f800283a 	ret
   45710:	f800283a 	ret
   45714:	0009883a 	mov	r4,zero
   45718:	003ffa06 	br	45704 <__alt_data_end+0xfffd3704>
   4571c:	00c00044 	movi	r3,1
   45720:	0009883a 	mov	r4,zero
   45724:	003ff106 	br	456ec <__alt_data_end+0xfffd36ec>

00045728 <__divsi3>:
   45728:	defffe04 	addi	sp,sp,-8
   4572c:	dfc00115 	stw	ra,4(sp)
   45730:	dc000015 	stw	r16,0(sp)
   45734:	20000a16 	blt	r4,zero,45760 <__divsi3+0x38>
   45738:	0021883a 	mov	r16,zero
   4573c:	28000b16 	blt	r5,zero,4576c <__divsi3+0x44>
   45740:	000d883a 	mov	r6,zero
   45744:	00456b40 	call	456b4 <udivmodsi4>
   45748:	80000126 	beq	r16,zero,45750 <__divsi3+0x28>
   4574c:	0085c83a 	sub	r2,zero,r2
   45750:	dfc00117 	ldw	ra,4(sp)
   45754:	dc000017 	ldw	r16,0(sp)
   45758:	dec00204 	addi	sp,sp,8
   4575c:	f800283a 	ret
   45760:	0109c83a 	sub	r4,zero,r4
   45764:	04000044 	movi	r16,1
   45768:	283ff50e 	bge	r5,zero,45740 <__alt_data_end+0xfffd3740>
   4576c:	014bc83a 	sub	r5,zero,r5
   45770:	8400005c 	xori	r16,r16,1
   45774:	003ff206 	br	45740 <__alt_data_end+0xfffd3740>

00045778 <__modsi3>:
   45778:	deffff04 	addi	sp,sp,-4
   4577c:	dfc00015 	stw	ra,0(sp)
   45780:	20000516 	blt	r4,zero,45798 <__modsi3+0x20>
   45784:	28000c16 	blt	r5,zero,457b8 <__modsi3+0x40>
   45788:	01800044 	movi	r6,1
   4578c:	dfc00017 	ldw	ra,0(sp)
   45790:	dec00104 	addi	sp,sp,4
   45794:	00456b41 	jmpi	456b4 <udivmodsi4>
   45798:	0109c83a 	sub	r4,zero,r4
   4579c:	28000b16 	blt	r5,zero,457cc <__modsi3+0x54>
   457a0:	01800044 	movi	r6,1
   457a4:	00456b40 	call	456b4 <udivmodsi4>
   457a8:	0085c83a 	sub	r2,zero,r2
   457ac:	dfc00017 	ldw	ra,0(sp)
   457b0:	dec00104 	addi	sp,sp,4
   457b4:	f800283a 	ret
   457b8:	014bc83a 	sub	r5,zero,r5
   457bc:	01800044 	movi	r6,1
   457c0:	dfc00017 	ldw	ra,0(sp)
   457c4:	dec00104 	addi	sp,sp,4
   457c8:	00456b41 	jmpi	456b4 <udivmodsi4>
   457cc:	014bc83a 	sub	r5,zero,r5
   457d0:	003ff306 	br	457a0 <__alt_data_end+0xfffd37a0>

000457d4 <__udivsi3>:
   457d4:	000d883a 	mov	r6,zero
   457d8:	00456b41 	jmpi	456b4 <udivmodsi4>

000457dc <__umodsi3>:
   457dc:	01800044 	movi	r6,1
   457e0:	00456b41 	jmpi	456b4 <udivmodsi4>

000457e4 <_getc_r>:
   457e4:	defffd04 	addi	sp,sp,-12
   457e8:	dc000115 	stw	r16,4(sp)
   457ec:	dfc00215 	stw	ra,8(sp)
   457f0:	2021883a 	mov	r16,r4
   457f4:	20000226 	beq	r4,zero,45800 <_getc_r+0x1c>
   457f8:	20800e17 	ldw	r2,56(r4)
   457fc:	10000c26 	beq	r2,zero,45830 <_getc_r+0x4c>
   45800:	28800117 	ldw	r2,4(r5)
   45804:	10bfffc4 	addi	r2,r2,-1
   45808:	28800115 	stw	r2,4(r5)
   4580c:	10000c16 	blt	r2,zero,45840 <_getc_r+0x5c>
   45810:	28c00017 	ldw	r3,0(r5)
   45814:	18800003 	ldbu	r2,0(r3)
   45818:	18c00044 	addi	r3,r3,1
   4581c:	28c00015 	stw	r3,0(r5)
   45820:	dfc00217 	ldw	ra,8(sp)
   45824:	dc000117 	ldw	r16,4(sp)
   45828:	dec00304 	addi	sp,sp,12
   4582c:	f800283a 	ret
   45830:	d9400015 	stw	r5,0(sp)
   45834:	004ad200 	call	4ad20 <__sinit>
   45838:	d9400017 	ldw	r5,0(sp)
   4583c:	003ff006 	br	45800 <__alt_data_end+0xfffd3800>
   45840:	8009883a 	mov	r4,r16
   45844:	dfc00217 	ldw	ra,8(sp)
   45848:	dc000117 	ldw	r16,4(sp)
   4584c:	dec00304 	addi	sp,sp,12
   45850:	0045a001 	jmpi	45a00 <__srget_r>

00045854 <getc>:
   45854:	defffd04 	addi	sp,sp,-12
   45858:	dc400115 	stw	r17,4(sp)
   4585c:	04400174 	movhi	r17,5
   45860:	8c5f5504 	addi	r17,r17,32084
   45864:	88800017 	ldw	r2,0(r17)
   45868:	dc000015 	stw	r16,0(sp)
   4586c:	dfc00215 	stw	ra,8(sp)
   45870:	2021883a 	mov	r16,r4
   45874:	10000226 	beq	r2,zero,45880 <getc+0x2c>
   45878:	10c00e17 	ldw	r3,56(r2)
   4587c:	18000d26 	beq	r3,zero,458b4 <getc+0x60>
   45880:	80800117 	ldw	r2,4(r16)
   45884:	10bfffc4 	addi	r2,r2,-1
   45888:	80800115 	stw	r2,4(r16)
   4588c:	10000c16 	blt	r2,zero,458c0 <getc+0x6c>
   45890:	80c00017 	ldw	r3,0(r16)
   45894:	18800003 	ldbu	r2,0(r3)
   45898:	18c00044 	addi	r3,r3,1
   4589c:	80c00015 	stw	r3,0(r16)
   458a0:	dfc00217 	ldw	ra,8(sp)
   458a4:	dc400117 	ldw	r17,4(sp)
   458a8:	dc000017 	ldw	r16,0(sp)
   458ac:	dec00304 	addi	sp,sp,12
   458b0:	f800283a 	ret
   458b4:	1009883a 	mov	r4,r2
   458b8:	004ad200 	call	4ad20 <__sinit>
   458bc:	003ff006 	br	45880 <__alt_data_end+0xfffd3880>
   458c0:	89000017 	ldw	r4,0(r17)
   458c4:	800b883a 	mov	r5,r16
   458c8:	dfc00217 	ldw	ra,8(sp)
   458cc:	dc400117 	ldw	r17,4(sp)
   458d0:	dc000017 	ldw	r16,0(sp)
   458d4:	dec00304 	addi	sp,sp,12
   458d8:	0045a001 	jmpi	45a00 <__srget_r>

000458dc <_printf_r>:
   458dc:	defffd04 	addi	sp,sp,-12
   458e0:	dfc00015 	stw	ra,0(sp)
   458e4:	d9800115 	stw	r6,4(sp)
   458e8:	d9c00215 	stw	r7,8(sp)
   458ec:	280d883a 	mov	r6,r5
   458f0:	21400217 	ldw	r5,8(r4)
   458f4:	d9c00104 	addi	r7,sp,4
   458f8:	0045b8c0 	call	45b8c <___vfprintf_internal_r>
   458fc:	dfc00017 	ldw	ra,0(sp)
   45900:	dec00304 	addi	sp,sp,12
   45904:	f800283a 	ret

00045908 <printf>:
   45908:	defffc04 	addi	sp,sp,-16
   4590c:	dfc00015 	stw	ra,0(sp)
   45910:	d9400115 	stw	r5,4(sp)
   45914:	d9800215 	stw	r6,8(sp)
   45918:	d9c00315 	stw	r7,12(sp)
   4591c:	00800174 	movhi	r2,5
   45920:	109f5504 	addi	r2,r2,32084
   45924:	10800017 	ldw	r2,0(r2)
   45928:	200b883a 	mov	r5,r4
   4592c:	d9800104 	addi	r6,sp,4
   45930:	11000217 	ldw	r4,8(r2)
   45934:	00479840 	call	47984 <__vfprintf_internal>
   45938:	dfc00017 	ldw	ra,0(sp)
   4593c:	dec00404 	addi	sp,sp,16
   45940:	f800283a 	ret

00045944 <_putchar_r>:
   45944:	21800217 	ldw	r6,8(r4)
   45948:	004dae81 	jmpi	4dae8 <_putc_r>

0004594c <putchar>:
   4594c:	00800174 	movhi	r2,5
   45950:	109f5504 	addi	r2,r2,32084
   45954:	10800017 	ldw	r2,0(r2)
   45958:	200b883a 	mov	r5,r4
   4595c:	11800217 	ldw	r6,8(r2)
   45960:	1009883a 	mov	r4,r2
   45964:	004dae81 	jmpi	4dae8 <_putc_r>

00045968 <_puts_r>:
   45968:	defff604 	addi	sp,sp,-40
   4596c:	dc400815 	stw	r17,32(sp)
   45970:	2023883a 	mov	r17,r4
   45974:	2809883a 	mov	r4,r5
   45978:	dc000715 	stw	r16,28(sp)
   4597c:	dfc00915 	stw	ra,36(sp)
   45980:	2821883a 	mov	r16,r5
   45984:	0045acc0 	call	45acc <strlen>
   45988:	10c00044 	addi	r3,r2,1
   4598c:	d8800115 	stw	r2,4(sp)
   45990:	89400217 	ldw	r5,8(r17)
   45994:	00800174 	movhi	r2,5
   45998:	10973e04 	addi	r2,r2,23800
   4599c:	d8800215 	stw	r2,8(sp)
   459a0:	00800044 	movi	r2,1
   459a4:	d8800315 	stw	r2,12(sp)
   459a8:	8809883a 	mov	r4,r17
   459ac:	00800084 	movi	r2,2
   459b0:	d9800404 	addi	r6,sp,16
   459b4:	dc000015 	stw	r16,0(sp)
   459b8:	d8c00615 	stw	r3,24(sp)
   459bc:	dec00415 	stw	sp,16(sp)
   459c0:	d8800515 	stw	r2,20(sp)
   459c4:	004b5e00 	call	4b5e0 <__sfvwrite_r>
   459c8:	1000061e 	bne	r2,zero,459e4 <_puts_r+0x7c>
   459cc:	00800284 	movi	r2,10
   459d0:	dfc00917 	ldw	ra,36(sp)
   459d4:	dc400817 	ldw	r17,32(sp)
   459d8:	dc000717 	ldw	r16,28(sp)
   459dc:	dec00a04 	addi	sp,sp,40
   459e0:	f800283a 	ret
   459e4:	00bfffc4 	movi	r2,-1
   459e8:	003ff906 	br	459d0 <__alt_data_end+0xfffd39d0>

000459ec <puts>:
   459ec:	00800174 	movhi	r2,5
   459f0:	109f5504 	addi	r2,r2,32084
   459f4:	200b883a 	mov	r5,r4
   459f8:	11000017 	ldw	r4,0(r2)
   459fc:	00459681 	jmpi	45968 <_puts_r>

00045a00 <__srget_r>:
   45a00:	defffe04 	addi	sp,sp,-8
   45a04:	dc000015 	stw	r16,0(sp)
   45a08:	dfc00115 	stw	ra,4(sp)
   45a0c:	2821883a 	mov	r16,r5
   45a10:	004e2ac0 	call	4e2ac <__srefill_r>
   45a14:	10000b1e 	bne	r2,zero,45a44 <__srget_r+0x44>
   45a18:	80c00117 	ldw	r3,4(r16)
   45a1c:	80800017 	ldw	r2,0(r16)
   45a20:	18ffffc4 	addi	r3,r3,-1
   45a24:	80c00115 	stw	r3,4(r16)
   45a28:	10c00044 	addi	r3,r2,1
   45a2c:	10800003 	ldbu	r2,0(r2)
   45a30:	80c00015 	stw	r3,0(r16)
   45a34:	dfc00117 	ldw	ra,4(sp)
   45a38:	dc000017 	ldw	r16,0(sp)
   45a3c:	dec00204 	addi	sp,sp,8
   45a40:	f800283a 	ret
   45a44:	00bfffc4 	movi	r2,-1
   45a48:	003ffa06 	br	45a34 <__alt_data_end+0xfffd3a34>

00045a4c <__srget>:
   45a4c:	00800174 	movhi	r2,5
   45a50:	109f5504 	addi	r2,r2,32084
   45a54:	200b883a 	mov	r5,r4
   45a58:	11000017 	ldw	r4,0(r2)
   45a5c:	0045a001 	jmpi	45a00 <__srget_r>

00045a60 <scanf>:
   45a60:	defffc04 	addi	sp,sp,-16
   45a64:	dfc00015 	stw	ra,0(sp)
   45a68:	d9400115 	stw	r5,4(sp)
   45a6c:	d9800215 	stw	r6,8(sp)
   45a70:	d9c00315 	stw	r7,12(sp)
   45a74:	00800174 	movhi	r2,5
   45a78:	109f5504 	addi	r2,r2,32084
   45a7c:	10800017 	ldw	r2,0(r2)
   45a80:	200d883a 	mov	r6,r4
   45a84:	d9c00104 	addi	r7,sp,4
   45a88:	11400117 	ldw	r5,4(r2)
   45a8c:	1009883a 	mov	r4,r2
   45a90:	00479a80 	call	479a8 <__svfscanf_r>
   45a94:	dfc00017 	ldw	ra,0(sp)
   45a98:	dec00404 	addi	sp,sp,16
   45a9c:	f800283a 	ret

00045aa0 <_scanf_r>:
   45aa0:	defffd04 	addi	sp,sp,-12
   45aa4:	dfc00015 	stw	ra,0(sp)
   45aa8:	d9800115 	stw	r6,4(sp)
   45aac:	d9c00215 	stw	r7,8(sp)
   45ab0:	280d883a 	mov	r6,r5
   45ab4:	21400117 	ldw	r5,4(r4)
   45ab8:	d9c00104 	addi	r7,sp,4
   45abc:	00479a80 	call	479a8 <__svfscanf_r>
   45ac0:	dfc00017 	ldw	ra,0(sp)
   45ac4:	dec00304 	addi	sp,sp,12
   45ac8:	f800283a 	ret

00045acc <strlen>:
   45acc:	208000cc 	andi	r2,r4,3
   45ad0:	10001f1e 	bne	r2,zero,45b50 <strlen+0x84>
   45ad4:	20800017 	ldw	r2,0(r4)
   45ad8:	01ffbff4 	movhi	r7,65279
   45adc:	39ffbfc4 	addi	r7,r7,-257
   45ae0:	01a02074 	movhi	r6,32897
   45ae4:	31a02004 	addi	r6,r6,-32640
   45ae8:	11c7883a 	add	r3,r2,r7
   45aec:	0084303a 	nor	r2,zero,r2
   45af0:	1886703a 	and	r3,r3,r2
   45af4:	1986703a 	and	r3,r3,r6
   45af8:	2005883a 	mov	r2,r4
   45afc:	1800101e 	bne	r3,zero,45b40 <strlen+0x74>
   45b00:	10800104 	addi	r2,r2,4
   45b04:	10c00017 	ldw	r3,0(r2)
   45b08:	19cb883a 	add	r5,r3,r7
   45b0c:	00c6303a 	nor	r3,zero,r3
   45b10:	28c6703a 	and	r3,r5,r3
   45b14:	1986703a 	and	r3,r3,r6
   45b18:	1800091e 	bne	r3,zero,45b40 <strlen+0x74>
   45b1c:	10800104 	addi	r2,r2,4
   45b20:	10c00017 	ldw	r3,0(r2)
   45b24:	19cb883a 	add	r5,r3,r7
   45b28:	00c6303a 	nor	r3,zero,r3
   45b2c:	28c6703a 	and	r3,r5,r3
   45b30:	1986703a 	and	r3,r3,r6
   45b34:	183ff226 	beq	r3,zero,45b00 <__alt_data_end+0xfffd3b00>
   45b38:	00000106 	br	45b40 <strlen+0x74>
   45b3c:	10800044 	addi	r2,r2,1
   45b40:	10c00007 	ldb	r3,0(r2)
   45b44:	183ffd1e 	bne	r3,zero,45b3c <__alt_data_end+0xfffd3b3c>
   45b48:	1105c83a 	sub	r2,r2,r4
   45b4c:	f800283a 	ret
   45b50:	2005883a 	mov	r2,r4
   45b54:	003ffa06 	br	45b40 <__alt_data_end+0xfffd3b40>

00045b58 <__sprint_r>:
   45b58:	30800217 	ldw	r2,8(r6)
   45b5c:	defffe04 	addi	sp,sp,-8
   45b60:	dc000015 	stw	r16,0(sp)
   45b64:	dfc00115 	stw	ra,4(sp)
   45b68:	3021883a 	mov	r16,r6
   45b6c:	10000226 	beq	r2,zero,45b78 <__sprint_r+0x20>
   45b70:	004b5e00 	call	4b5e0 <__sfvwrite_r>
   45b74:	80000215 	stw	zero,8(r16)
   45b78:	80000115 	stw	zero,4(r16)
   45b7c:	dfc00117 	ldw	ra,4(sp)
   45b80:	dc000017 	ldw	r16,0(sp)
   45b84:	dec00204 	addi	sp,sp,8
   45b88:	f800283a 	ret

00045b8c <___vfprintf_internal_r>:
   45b8c:	defeb904 	addi	sp,sp,-1308
   45b90:	dc013d15 	stw	r16,1268(sp)
   45b94:	d9013015 	stw	r4,1216(sp)
   45b98:	dfc14615 	stw	ra,1304(sp)
   45b9c:	df014515 	stw	fp,1300(sp)
   45ba0:	ddc14415 	stw	r23,1296(sp)
   45ba4:	dd814315 	stw	r22,1292(sp)
   45ba8:	dd414215 	stw	r21,1288(sp)
   45bac:	dd014115 	stw	r20,1284(sp)
   45bb0:	dcc14015 	stw	r19,1280(sp)
   45bb4:	dc813f15 	stw	r18,1276(sp)
   45bb8:	dc413e15 	stw	r17,1272(sp)
   45bbc:	d9412915 	stw	r5,1188(sp)
   45bc0:	3021883a 	mov	r16,r6
   45bc4:	d9c12d15 	stw	r7,1204(sp)
   45bc8:	004bd040 	call	4bd04 <_localeconv_r>
   45bcc:	10800017 	ldw	r2,0(r2)
   45bd0:	d9013017 	ldw	r4,1216(sp)
   45bd4:	d8013315 	stw	zero,1228(sp)
   45bd8:	d8813715 	stw	r2,1244(sp)
   45bdc:	d8013415 	stw	zero,1232(sp)
   45be0:	20000226 	beq	r4,zero,45bec <___vfprintf_internal_r+0x60>
   45be4:	20800e17 	ldw	r2,56(r4)
   45be8:	10019826 	beq	r2,zero,4624c <___vfprintf_internal_r+0x6c0>
   45bec:	da012917 	ldw	r8,1188(sp)
   45bf0:	4080030b 	ldhu	r2,12(r8)
   45bf4:	10c0020c 	andi	r3,r2,8
   45bf8:	18ffffcc 	andi	r3,r3,65535
   45bfc:	18e0001c 	xori	r3,r3,32768
   45c00:	18e00004 	addi	r3,r3,-32768
   45c04:	18013a26 	beq	r3,zero,460f0 <___vfprintf_internal_r+0x564>
   45c08:	40c00417 	ldw	r3,16(r8)
   45c0c:	18013826 	beq	r3,zero,460f0 <___vfprintf_internal_r+0x564>
   45c10:	1100068c 	andi	r4,r2,26
   45c14:	00c00284 	movi	r3,10
   45c18:	20c13e26 	beq	r4,r3,46114 <___vfprintf_internal_r+0x588>
   45c1c:	da010dc4 	addi	r8,sp,1079
   45c20:	d8800404 	addi	r2,sp,16
   45c24:	da012615 	stw	r8,1176(sp)
   45c28:	d8811b15 	stw	r2,1132(sp)
   45c2c:	1013883a 	mov	r9,r2
   45c30:	d8812617 	ldw	r2,1176(sp)
   45c34:	da010e04 	addi	r8,sp,1080
   45c38:	dc413017 	ldw	r17,1216(sp)
   45c3c:	da012715 	stw	r8,1180(sp)
   45c40:	4091c83a 	sub	r8,r8,r2
   45c44:	d8011d15 	stw	zero,1140(sp)
   45c48:	d8011c15 	stw	zero,1136(sp)
   45c4c:	802b883a 	mov	r21,r16
   45c50:	d8013215 	stw	zero,1224(sp)
   45c54:	d8013615 	stw	zero,1240(sp)
   45c58:	d8013515 	stw	zero,1236(sp)
   45c5c:	d8012c15 	stw	zero,1200(sp)
   45c60:	da013915 	stw	r8,1252(sp)
   45c64:	a8800007 	ldb	r2,0(r21)
   45c68:	1002ec26 	beq	r2,zero,4681c <___vfprintf_internal_r+0xc90>
   45c6c:	00c00944 	movi	r3,37
   45c70:	a825883a 	mov	r18,r21
   45c74:	10c0021e 	bne	r2,r3,45c80 <___vfprintf_internal_r+0xf4>
   45c78:	00001406 	br	45ccc <___vfprintf_internal_r+0x140>
   45c7c:	10c00326 	beq	r2,r3,45c8c <___vfprintf_internal_r+0x100>
   45c80:	94800044 	addi	r18,r18,1
   45c84:	90800007 	ldb	r2,0(r18)
   45c88:	103ffc1e 	bne	r2,zero,45c7c <__alt_data_end+0xfffd3c7c>
   45c8c:	9561c83a 	sub	r16,r18,r21
   45c90:	80000e26 	beq	r16,zero,45ccc <___vfprintf_internal_r+0x140>
   45c94:	da011d17 	ldw	r8,1140(sp)
   45c98:	d8c11c17 	ldw	r3,1136(sp)
   45c9c:	4d400015 	stw	r21,0(r9)
   45ca0:	4c000115 	stw	r16,4(r9)
   45ca4:	4411883a 	add	r8,r8,r16
   45ca8:	18c00044 	addi	r3,r3,1
   45cac:	da011d15 	stw	r8,1140(sp)
   45cb0:	d8c11c15 	stw	r3,1136(sp)
   45cb4:	008001c4 	movi	r2,7
   45cb8:	10c15d16 	blt	r2,r3,46230 <___vfprintf_internal_r+0x6a4>
   45cbc:	4a400204 	addi	r9,r9,8
   45cc0:	d8812c17 	ldw	r2,1200(sp)
   45cc4:	1405883a 	add	r2,r2,r16
   45cc8:	d8812c15 	stw	r2,1200(sp)
   45ccc:	90800007 	ldb	r2,0(r18)
   45cd0:	10013b26 	beq	r2,zero,461c0 <___vfprintf_internal_r+0x634>
   45cd4:	95400044 	addi	r21,r18,1
   45cd8:	94800047 	ldb	r18,1(r18)
   45cdc:	d8012585 	stb	zero,1174(sp)
   45ce0:	073fffc4 	movi	fp,-1
   45ce4:	d8012e15 	stw	zero,1208(sp)
   45ce8:	0021883a 	mov	r16,zero
   45cec:	00c01604 	movi	r3,88
   45cf0:	01400244 	movi	r5,9
   45cf4:	02800a84 	movi	r10,42
   45cf8:	01c01b04 	movi	r7,108
   45cfc:	01800ac4 	movi	r6,43
   45d00:	02c00804 	movi	r11,32
   45d04:	ad400044 	addi	r21,r21,1
   45d08:	90bff804 	addi	r2,r18,-32
   45d0c:	1880092e 	bgeu	r3,r2,45d34 <___vfprintf_internal_r+0x1a8>
   45d10:	90012b26 	beq	r18,zero,461c0 <___vfprintf_internal_r+0x634>
   45d14:	00c00044 	movi	r3,1
   45d18:	d8c12815 	stw	r3,1184(sp)
   45d1c:	dc810405 	stb	r18,1040(sp)
   45d20:	d8012585 	stb	zero,1174(sp)
   45d24:	d8c12b15 	stw	r3,1196(sp)
   45d28:	dcc10404 	addi	r19,sp,1040
   45d2c:	d8013115 	stw	zero,1220(sp)
   45d30:	00008806 	br	45f54 <___vfprintf_internal_r+0x3c8>
   45d34:	1085883a 	add	r2,r2,r2
   45d38:	1085883a 	add	r2,r2,r2
   45d3c:	01000134 	movhi	r4,4
   45d40:	21175404 	addi	r4,r4,23888
   45d44:	1105883a 	add	r2,r2,r4
   45d48:	10800017 	ldw	r2,0(r2)
   45d4c:	1000683a 	jmp	r2
   45d50:	00046304 	movi	zero,4492
   45d54:	00045d10 	cmplti	zero,zero,4468
   45d58:	00045d10 	cmplti	zero,zero,4468
   45d5c:	00046318 	cmpnei	zero,zero,4492
   45d60:	00045d10 	cmplti	zero,zero,4468
   45d64:	00045d10 	cmplti	zero,zero,4468
   45d68:	00045d10 	cmplti	zero,zero,4468
   45d6c:	00045d10 	cmplti	zero,zero,4468
   45d70:	00045d10 	cmplti	zero,zero,4468
   45d74:	00045d10 	cmplti	zero,zero,4468
   45d78:	00046400 	call	4640 <__reset-0x3b9c0>
   45d7c:	000462bc 	xorhi	zero,zero,4490
   45d80:	00045d10 	cmplti	zero,zero,4468
   45d84:	000460e4 	muli	zero,zero,4483
   45d88:	000462c8 	cmpgei	zero,zero,4491
   45d8c:	00045d10 	cmplti	zero,zero,4468
   45d90:	00046324 	muli	zero,zero,4492
   45d94:	00046424 	muli	zero,zero,4496
   45d98:	00046424 	muli	zero,zero,4496
   45d9c:	00046424 	muli	zero,zero,4496
   45da0:	00046424 	muli	zero,zero,4496
   45da4:	00046424 	muli	zero,zero,4496
   45da8:	00046424 	muli	zero,zero,4496
   45dac:	00046424 	muli	zero,zero,4496
   45db0:	00046424 	muli	zero,zero,4496
   45db4:	00046424 	muli	zero,zero,4496
   45db8:	00045d10 	cmplti	zero,zero,4468
   45dbc:	00045d10 	cmplti	zero,zero,4468
   45dc0:	00045d10 	cmplti	zero,zero,4468
   45dc4:	00045d10 	cmplti	zero,zero,4468
   45dc8:	00045d10 	cmplti	zero,zero,4468
   45dcc:	00045d10 	cmplti	zero,zero,4468
   45dd0:	00045d10 	cmplti	zero,zero,4468
   45dd4:	00045d10 	cmplti	zero,zero,4468
   45dd8:	00045d10 	cmplti	zero,zero,4468
   45ddc:	00045d10 	cmplti	zero,zero,4468
   45de0:	00046080 	call	4608 <__reset-0x3b9f8>
   45de4:	0004644c 	andi	zero,zero,4497
   45de8:	00045d10 	cmplti	zero,zero,4468
   45dec:	0004644c 	andi	zero,zero,4497
   45df0:	00045d10 	cmplti	zero,zero,4468
   45df4:	00045d10 	cmplti	zero,zero,4468
   45df8:	00045d10 	cmplti	zero,zero,4468
   45dfc:	00045d10 	cmplti	zero,zero,4468
   45e00:	000465bc 	xorhi	zero,zero,4502
   45e04:	00045d10 	cmplti	zero,zero,4468
   45e08:	00045d10 	cmplti	zero,zero,4468
   45e0c:	00046048 	cmpgei	zero,zero,4481
   45e10:	00045d10 	cmplti	zero,zero,4468
   45e14:	00045d10 	cmplti	zero,zero,4468
   45e18:	00045d10 	cmplti	zero,zero,4468
   45e1c:	00045d10 	cmplti	zero,zero,4468
   45e20:	00045d10 	cmplti	zero,zero,4468
   45e24:	00045eb4 	movhi	zero,4474
   45e28:	00045d10 	cmplti	zero,zero,4468
   45e2c:	00045d10 	cmplti	zero,zero,4468
   45e30:	00046330 	cmpltui	zero,zero,4492
   45e34:	00045d10 	cmplti	zero,zero,4468
   45e38:	00045d10 	cmplti	zero,zero,4468
   45e3c:	00045d10 	cmplti	zero,zero,4468
   45e40:	00045d10 	cmplti	zero,zero,4468
   45e44:	00045d10 	cmplti	zero,zero,4468
   45e48:	00045d10 	cmplti	zero,zero,4468
   45e4c:	00045d10 	cmplti	zero,zero,4468
   45e50:	00045d10 	cmplti	zero,zero,4468
   45e54:	00045d10 	cmplti	zero,zero,4468
   45e58:	00045d10 	cmplti	zero,zero,4468
   45e5c:	000463a4 	muli	zero,zero,4494
   45e60:	00046084 	movi	zero,4482
   45e64:	0004644c 	andi	zero,zero,4497
   45e68:	0004644c 	andi	zero,zero,4497
   45e6c:	0004644c 	andi	zero,zero,4497
   45e70:	00046384 	movi	zero,4494
   45e74:	00046084 	movi	zero,4482
   45e78:	00045d10 	cmplti	zero,zero,4468
   45e7c:	00045d10 	cmplti	zero,zero,4468
   45e80:	00046390 	cmplti	zero,zero,4494
   45e84:	00045d10 	cmplti	zero,zero,4468
   45e88:	000463d4 	movui	zero,4495
   45e8c:	0004604c 	andi	zero,zero,4481
   45e90:	000464d4 	movui	zero,4499
   45e94:	00046520 	cmpeqi	zero,zero,4500
   45e98:	00045d10 	cmplti	zero,zero,4468
   45e9c:	0004652c 	andhi	zero,zero,4500
   45ea0:	00045d10 	cmplti	zero,zero,4468
   45ea4:	00045eb8 	rdprs	zero,zero,4474
   45ea8:	00045d10 	cmplti	zero,zero,4468
   45eac:	00045d10 	cmplti	zero,zero,4468
   45eb0:	00046588 	cmpgei	zero,zero,4502
   45eb4:	84000414 	ori	r16,r16,16
   45eb8:	8080080c 	andi	r2,r16,32
   45ebc:	1000f51e 	bne	r2,zero,46294 <___vfprintf_internal_r+0x708>
   45ec0:	8080040c 	andi	r2,r16,16
   45ec4:	10042c26 	beq	r2,zero,46f78 <___vfprintf_internal_r+0x13ec>
   45ec8:	da012d17 	ldw	r8,1204(sp)
   45ecc:	002d883a 	mov	r22,zero
   45ed0:	00c00044 	movi	r3,1
   45ed4:	45c00017 	ldw	r23,0(r8)
   45ed8:	42000104 	addi	r8,r8,4
   45edc:	da012d15 	stw	r8,1204(sp)
   45ee0:	b805883a 	mov	r2,r23
   45ee4:	d8012585 	stb	zero,1174(sp)
   45ee8:	e0000216 	blt	fp,zero,45ef4 <___vfprintf_internal_r+0x368>
   45eec:	013fdfc4 	movi	r4,-129
   45ef0:	8120703a 	and	r16,r16,r4
   45ef4:	1002671e 	bne	r2,zero,46894 <___vfprintf_internal_r+0xd08>
   45ef8:	e002661e 	bne	fp,zero,46894 <___vfprintf_internal_r+0xd08>
   45efc:	18c03fcc 	andi	r3,r3,255
   45f00:	1803561e 	bne	r3,zero,46c5c <___vfprintf_internal_r+0x10d0>
   45f04:	8080004c 	andi	r2,r16,1
   45f08:	10035426 	beq	r2,zero,46c5c <___vfprintf_internal_r+0x10d0>
   45f0c:	da013917 	ldw	r8,1252(sp)
   45f10:	00800c04 	movi	r2,48
   45f14:	d8810dc5 	stb	r2,1079(sp)
   45f18:	da012b15 	stw	r8,1196(sp)
   45f1c:	dcc10dc4 	addi	r19,sp,1079
   45f20:	d8812b17 	ldw	r2,1196(sp)
   45f24:	d8812815 	stw	r2,1184(sp)
   45f28:	1700010e 	bge	r2,fp,45f30 <___vfprintf_internal_r+0x3a4>
   45f2c:	df012815 	stw	fp,1184(sp)
   45f30:	d8812583 	ldbu	r2,1174(sp)
   45f34:	df013115 	stw	fp,1220(sp)
   45f38:	10803fcc 	andi	r2,r2,255
   45f3c:	1080201c 	xori	r2,r2,128
   45f40:	10bfe004 	addi	r2,r2,-128
   45f44:	10000326 	beq	r2,zero,45f54 <___vfprintf_internal_r+0x3c8>
   45f48:	da012817 	ldw	r8,1184(sp)
   45f4c:	42000044 	addi	r8,r8,1
   45f50:	da012815 	stw	r8,1184(sp)
   45f54:	80c0008c 	andi	r3,r16,2
   45f58:	d8c12a15 	stw	r3,1192(sp)
   45f5c:	18000326 	beq	r3,zero,45f6c <___vfprintf_internal_r+0x3e0>
   45f60:	da012817 	ldw	r8,1184(sp)
   45f64:	42000084 	addi	r8,r8,2
   45f68:	da012815 	stw	r8,1184(sp)
   45f6c:	80c0210c 	andi	r3,r16,132
   45f70:	d8c12f15 	stw	r3,1212(sp)
   45f74:	1801941e 	bne	r3,zero,465c8 <___vfprintf_internal_r+0xa3c>
   45f78:	da012e17 	ldw	r8,1208(sp)
   45f7c:	d8c12817 	ldw	r3,1184(sp)
   45f80:	40edc83a 	sub	r22,r8,r3
   45f84:	0581900e 	bge	zero,r22,465c8 <___vfprintf_internal_r+0xa3c>
   45f88:	02800404 	movi	r10,16
   45f8c:	da011d17 	ldw	r8,1140(sp)
   45f90:	d8c11c17 	ldw	r3,1136(sp)
   45f94:	05c00174 	movhi	r23,5
   45f98:	bdd74f84 	addi	r23,r23,23870
   45f9c:	5580200e 	bge	r10,r22,46020 <___vfprintf_internal_r+0x494>
   45fa0:	dc813815 	stw	r18,1248(sp)
   45fa4:	5039883a 	mov	fp,r10
   45fa8:	b825883a 	mov	r18,r23
   45fac:	050001c4 	movi	r20,7
   45fb0:	b02f883a 	mov	r23,r22
   45fb4:	802d883a 	mov	r22,r16
   45fb8:	dc012917 	ldw	r16,1188(sp)
   45fbc:	00000306 	br	45fcc <___vfprintf_internal_r+0x440>
   45fc0:	bdfffc04 	addi	r23,r23,-16
   45fc4:	4a400204 	addi	r9,r9,8
   45fc8:	e5c0110e 	bge	fp,r23,46010 <___vfprintf_internal_r+0x484>
   45fcc:	4c800015 	stw	r18,0(r9)
   45fd0:	4f000115 	stw	fp,4(r9)
   45fd4:	42000404 	addi	r8,r8,16
   45fd8:	18c00044 	addi	r3,r3,1
   45fdc:	da011d15 	stw	r8,1140(sp)
   45fe0:	d8c11c15 	stw	r3,1136(sp)
   45fe4:	a0fff60e 	bge	r20,r3,45fc0 <__alt_data_end+0xfffd3fc0>
   45fe8:	8809883a 	mov	r4,r17
   45fec:	800b883a 	mov	r5,r16
   45ff0:	d9811b04 	addi	r6,sp,1132
   45ff4:	0045b580 	call	45b58 <__sprint_r>
   45ff8:	1000771e 	bne	r2,zero,461d8 <___vfprintf_internal_r+0x64c>
   45ffc:	bdfffc04 	addi	r23,r23,-16
   46000:	da011d17 	ldw	r8,1140(sp)
   46004:	d8c11c17 	ldw	r3,1136(sp)
   46008:	da400404 	addi	r9,sp,16
   4600c:	e5ffef16 	blt	fp,r23,45fcc <__alt_data_end+0xfffd3fcc>
   46010:	b021883a 	mov	r16,r22
   46014:	b82d883a 	mov	r22,r23
   46018:	902f883a 	mov	r23,r18
   4601c:	dc813817 	ldw	r18,1248(sp)
   46020:	4dc00015 	stw	r23,0(r9)
   46024:	4d800115 	stw	r22,4(r9)
   46028:	4591883a 	add	r8,r8,r22
   4602c:	18c00044 	addi	r3,r3,1
   46030:	da011d15 	stw	r8,1140(sp)
   46034:	d8c11c15 	stw	r3,1136(sp)
   46038:	008001c4 	movi	r2,7
   4603c:	10c36d16 	blt	r2,r3,46df4 <___vfprintf_internal_r+0x1268>
   46040:	4a400204 	addi	r9,r9,8
   46044:	00016206 	br	465d0 <___vfprintf_internal_r+0xa44>
   46048:	84000414 	ori	r16,r16,16
   4604c:	8080080c 	andi	r2,r16,32
   46050:	1000801e 	bne	r2,zero,46254 <___vfprintf_internal_r+0x6c8>
   46054:	8080040c 	andi	r2,r16,16
   46058:	1003da26 	beq	r2,zero,46fc4 <___vfprintf_internal_r+0x1438>
   4605c:	d8c12d17 	ldw	r3,1204(sp)
   46060:	002d883a 	mov	r22,zero
   46064:	1dc00017 	ldw	r23,0(r3)
   46068:	18c00104 	addi	r3,r3,4
   4606c:	d8c12d15 	stw	r3,1204(sp)
   46070:	b805883a 	mov	r2,r23
   46074:	0007883a 	mov	r3,zero
   46078:	d8012585 	stb	zero,1174(sp)
   4607c:	003f9a06 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46080:	84000414 	ori	r16,r16,16
   46084:	8080080c 	andi	r2,r16,32
   46088:	10007b1e 	bne	r2,zero,46278 <___vfprintf_internal_r+0x6ec>
   4608c:	8080040c 	andi	r2,r16,16
   46090:	1003ed26 	beq	r2,zero,47048 <___vfprintf_internal_r+0x14bc>
   46094:	d9012d17 	ldw	r4,1204(sp)
   46098:	25c00017 	ldw	r23,0(r4)
   4609c:	21000104 	addi	r4,r4,4
   460a0:	d9012d15 	stw	r4,1204(sp)
   460a4:	b82dd7fa 	srai	r22,r23,31
   460a8:	b005883a 	mov	r2,r22
   460ac:	1003230e 	bge	r2,zero,46d3c <___vfprintf_internal_r+0x11b0>
   460b0:	05efc83a 	sub	r23,zero,r23
   460b4:	b804c03a 	cmpne	r2,r23,zero
   460b8:	05adc83a 	sub	r22,zero,r22
   460bc:	b0adc83a 	sub	r22,r22,r2
   460c0:	00800b44 	movi	r2,45
   460c4:	d8812585 	stb	r2,1174(sp)
   460c8:	00c00044 	movi	r3,1
   460cc:	bd84b03a 	or	r2,r23,r22
   460d0:	003f8506 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   460d4:	da012e17 	ldw	r8,1208(sp)
   460d8:	d8812d15 	stw	r2,1204(sp)
   460dc:	0211c83a 	sub	r8,zero,r8
   460e0:	da012e15 	stw	r8,1208(sp)
   460e4:	84000114 	ori	r16,r16,4
   460e8:	ac800007 	ldb	r18,0(r21)
   460ec:	003f0506 	br	45d04 <__alt_data_end+0xfffd3d04>
   460f0:	d9013017 	ldw	r4,1216(sp)
   460f4:	d9412917 	ldw	r5,1188(sp)
   460f8:	00490e00 	call	490e0 <__swsetup_r>
   460fc:	10003d1e 	bne	r2,zero,461f4 <___vfprintf_internal_r+0x668>
   46100:	d8c12917 	ldw	r3,1188(sp)
   46104:	1880030b 	ldhu	r2,12(r3)
   46108:	00c00284 	movi	r3,10
   4610c:	1100068c 	andi	r4,r2,26
   46110:	20fec21e 	bne	r4,r3,45c1c <__alt_data_end+0xfffd3c1c>
   46114:	d9012917 	ldw	r4,1188(sp)
   46118:	20c0038b 	ldhu	r3,14(r4)
   4611c:	193fffcc 	andi	r4,r3,65535
   46120:	2120001c 	xori	r4,r4,32768
   46124:	21200004 	addi	r4,r4,-32768
   46128:	203ebc16 	blt	r4,zero,45c1c <__alt_data_end+0xfffd3c1c>
   4612c:	da012917 	ldw	r8,1188(sp)
   46130:	d9013017 	ldw	r4,1216(sp)
   46134:	d9c12d17 	ldw	r7,1204(sp)
   46138:	42800717 	ldw	r10,28(r8)
   4613c:	42400917 	ldw	r9,36(r8)
   46140:	10bfff4c 	andi	r2,r2,65533
   46144:	02010004 	movi	r8,1024
   46148:	d881070d 	sth	r2,1052(sp)
   4614c:	d9410404 	addi	r5,sp,1040
   46150:	d8800404 	addi	r2,sp,16
   46154:	800d883a 	mov	r6,r16
   46158:	d8c1078d 	sth	r3,1054(sp)
   4615c:	da810b15 	stw	r10,1068(sp)
   46160:	da410d15 	stw	r9,1076(sp)
   46164:	d8810415 	stw	r2,1040(sp)
   46168:	d8810815 	stw	r2,1056(sp)
   4616c:	da010615 	stw	r8,1048(sp)
   46170:	da010915 	stw	r8,1060(sp)
   46174:	d8010a15 	stw	zero,1064(sp)
   46178:	0045b8c0 	call	45b8c <___vfprintf_internal_r>
   4617c:	d8812c15 	stw	r2,1200(sp)
   46180:	10000416 	blt	r2,zero,46194 <___vfprintf_internal_r+0x608>
   46184:	d9013017 	ldw	r4,1216(sp)
   46188:	d9410404 	addi	r5,sp,1040
   4618c:	004aa780 	call	4aa78 <_fflush_r>
   46190:	1005d81e 	bne	r2,zero,478f4 <___vfprintf_internal_r+0x1d68>
   46194:	d881070b 	ldhu	r2,1052(sp)
   46198:	1080100c 	andi	r2,r2,64
   4619c:	10bfffcc 	andi	r2,r2,65535
   461a0:	10a0001c 	xori	r2,r2,32768
   461a4:	10a00004 	addi	r2,r2,-32768
   461a8:	10001426 	beq	r2,zero,461fc <___vfprintf_internal_r+0x670>
   461ac:	d8c12917 	ldw	r3,1188(sp)
   461b0:	1880030b 	ldhu	r2,12(r3)
   461b4:	10801014 	ori	r2,r2,64
   461b8:	1880030d 	sth	r2,12(r3)
   461bc:	00000f06 	br	461fc <___vfprintf_internal_r+0x670>
   461c0:	d8811d17 	ldw	r2,1140(sp)
   461c4:	10000426 	beq	r2,zero,461d8 <___vfprintf_internal_r+0x64c>
   461c8:	d9013017 	ldw	r4,1216(sp)
   461cc:	d9412917 	ldw	r5,1188(sp)
   461d0:	d9811b04 	addi	r6,sp,1132
   461d4:	0045b580 	call	45b58 <__sprint_r>
   461d8:	d8c12917 	ldw	r3,1188(sp)
   461dc:	1880030b 	ldhu	r2,12(r3)
   461e0:	1080100c 	andi	r2,r2,64
   461e4:	10bfffcc 	andi	r2,r2,65535
   461e8:	10a0001c 	xori	r2,r2,32768
   461ec:	10a00004 	addi	r2,r2,-32768
   461f0:	10000226 	beq	r2,zero,461fc <___vfprintf_internal_r+0x670>
   461f4:	00bfffc4 	movi	r2,-1
   461f8:	d8812c15 	stw	r2,1200(sp)
   461fc:	d8812c17 	ldw	r2,1200(sp)
   46200:	dfc14617 	ldw	ra,1304(sp)
   46204:	df014517 	ldw	fp,1300(sp)
   46208:	ddc14417 	ldw	r23,1296(sp)
   4620c:	dd814317 	ldw	r22,1292(sp)
   46210:	dd414217 	ldw	r21,1288(sp)
   46214:	dd014117 	ldw	r20,1284(sp)
   46218:	dcc14017 	ldw	r19,1280(sp)
   4621c:	dc813f17 	ldw	r18,1276(sp)
   46220:	dc413e17 	ldw	r17,1272(sp)
   46224:	dc013d17 	ldw	r16,1268(sp)
   46228:	dec14704 	addi	sp,sp,1308
   4622c:	f800283a 	ret
   46230:	d9412917 	ldw	r5,1188(sp)
   46234:	8809883a 	mov	r4,r17
   46238:	d9811b04 	addi	r6,sp,1132
   4623c:	0045b580 	call	45b58 <__sprint_r>
   46240:	103fe51e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46244:	da400404 	addi	r9,sp,16
   46248:	003e9d06 	br	45cc0 <__alt_data_end+0xfffd3cc0>
   4624c:	004ad200 	call	4ad20 <__sinit>
   46250:	003e6606 	br	45bec <__alt_data_end+0xfffd3bec>
   46254:	d8812d17 	ldw	r2,1204(sp)
   46258:	0007883a 	mov	r3,zero
   4625c:	15c00017 	ldw	r23,0(r2)
   46260:	15800117 	ldw	r22,4(r2)
   46264:	10800204 	addi	r2,r2,8
   46268:	d8812d15 	stw	r2,1204(sp)
   4626c:	d8012585 	stb	zero,1174(sp)
   46270:	bd84b03a 	or	r2,r23,r22
   46274:	003f1c06 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46278:	d8c12d17 	ldw	r3,1204(sp)
   4627c:	18800117 	ldw	r2,4(r3)
   46280:	1dc00017 	ldw	r23,0(r3)
   46284:	18c00204 	addi	r3,r3,8
   46288:	d8c12d15 	stw	r3,1204(sp)
   4628c:	102d883a 	mov	r22,r2
   46290:	003f8606 	br	460ac <__alt_data_end+0xfffd40ac>
   46294:	d8c12d17 	ldw	r3,1204(sp)
   46298:	d9012d17 	ldw	r4,1204(sp)
   4629c:	1dc00017 	ldw	r23,0(r3)
   462a0:	1d800117 	ldw	r22,4(r3)
   462a4:	21000204 	addi	r4,r4,8
   462a8:	00c00044 	movi	r3,1
   462ac:	d9012d15 	stw	r4,1204(sp)
   462b0:	bd84b03a 	or	r2,r23,r22
   462b4:	d8012585 	stb	zero,1174(sp)
   462b8:	003f0b06 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   462bc:	d9812585 	stb	r6,1174(sp)
   462c0:	ac800007 	ldb	r18,0(r21)
   462c4:	003e8f06 	br	45d04 <__alt_data_end+0xfffd3d04>
   462c8:	ac800007 	ldb	r18,0(r21)
   462cc:	a9000044 	addi	r4,r21,1
   462d0:	92857d26 	beq	r18,r10,478c8 <___vfprintf_internal_r+0x1d3c>
   462d4:	90bff404 	addi	r2,r18,-48
   462d8:	0039883a 	mov	fp,zero
   462dc:	28800736 	bltu	r5,r2,462fc <___vfprintf_internal_r+0x770>
   462e0:	24800007 	ldb	r18,0(r4)
   462e4:	e70002a4 	muli	fp,fp,10
   462e8:	21000044 	addi	r4,r4,1
   462ec:	1739883a 	add	fp,r2,fp
   462f0:	90bff404 	addi	r2,r18,-48
   462f4:	28bffa2e 	bgeu	r5,r2,462e0 <__alt_data_end+0xfffd42e0>
   462f8:	e0044216 	blt	fp,zero,47404 <___vfprintf_internal_r+0x1878>
   462fc:	202b883a 	mov	r21,r4
   46300:	003e8106 	br	45d08 <__alt_data_end+0xfffd3d08>
   46304:	d8812587 	ldb	r2,1174(sp)
   46308:	1003581e 	bne	r2,zero,4706c <___vfprintf_internal_r+0x14e0>
   4630c:	dac12585 	stb	r11,1174(sp)
   46310:	ac800007 	ldb	r18,0(r21)
   46314:	003e7b06 	br	45d04 <__alt_data_end+0xfffd3d04>
   46318:	84000054 	ori	r16,r16,1
   4631c:	ac800007 	ldb	r18,0(r21)
   46320:	003e7806 	br	45d04 <__alt_data_end+0xfffd3d04>
   46324:	84002014 	ori	r16,r16,128
   46328:	ac800007 	ldb	r18,0(r21)
   4632c:	003e7506 	br	45d04 <__alt_data_end+0xfffd3d04>
   46330:	02000174 	movhi	r8,5
   46334:	42174304 	addi	r8,r8,23820
   46338:	da013615 	stw	r8,1240(sp)
   4633c:	8080080c 	andi	r2,r16,32
   46340:	10009626 	beq	r2,zero,4659c <___vfprintf_internal_r+0xa10>
   46344:	d8812d17 	ldw	r2,1204(sp)
   46348:	15c00017 	ldw	r23,0(r2)
   4634c:	15800117 	ldw	r22,4(r2)
   46350:	10800204 	addi	r2,r2,8
   46354:	d8812d15 	stw	r2,1204(sp)
   46358:	8080004c 	andi	r2,r16,1
   4635c:	1002ae26 	beq	r2,zero,46e18 <___vfprintf_internal_r+0x128c>
   46360:	bd84b03a 	or	r2,r23,r22
   46364:	10032a26 	beq	r2,zero,47010 <___vfprintf_internal_r+0x1484>
   46368:	00c00c04 	movi	r3,48
   4636c:	d8c12505 	stb	r3,1172(sp)
   46370:	dc812545 	stb	r18,1173(sp)
   46374:	84000094 	ori	r16,r16,2
   46378:	00c00084 	movi	r3,2
   4637c:	d8012585 	stb	zero,1174(sp)
   46380:	003ed906 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46384:	84001014 	ori	r16,r16,64
   46388:	ac800007 	ldb	r18,0(r21)
   4638c:	003e5d06 	br	45d04 <__alt_data_end+0xfffd3d04>
   46390:	ac800007 	ldb	r18,0(r21)
   46394:	a805883a 	mov	r2,r21
   46398:	91c43226 	beq	r18,r7,47464 <___vfprintf_internal_r+0x18d8>
   4639c:	84000414 	ori	r16,r16,16
   463a0:	003e5806 	br	45d04 <__alt_data_end+0xfffd3d04>
   463a4:	d8c12d17 	ldw	r3,1204(sp)
   463a8:	02000044 	movi	r8,1
   463ac:	da012815 	stw	r8,1184(sp)
   463b0:	18800017 	ldw	r2,0(r3)
   463b4:	18c00104 	addi	r3,r3,4
   463b8:	d8012585 	stb	zero,1174(sp)
   463bc:	d8810405 	stb	r2,1040(sp)
   463c0:	d8c12d15 	stw	r3,1204(sp)
   463c4:	da012b15 	stw	r8,1196(sp)
   463c8:	dcc10404 	addi	r19,sp,1040
   463cc:	d8013115 	stw	zero,1220(sp)
   463d0:	003ee006 	br	45f54 <__alt_data_end+0xfffd3f54>
   463d4:	8080080c 	andi	r2,r16,32
   463d8:	10031026 	beq	r2,zero,4701c <___vfprintf_internal_r+0x1490>
   463dc:	d9012d17 	ldw	r4,1204(sp)
   463e0:	da012c17 	ldw	r8,1200(sp)
   463e4:	20800017 	ldw	r2,0(r4)
   463e8:	4007d7fa 	srai	r3,r8,31
   463ec:	21000104 	addi	r4,r4,4
   463f0:	d9012d15 	stw	r4,1204(sp)
   463f4:	12000015 	stw	r8,0(r2)
   463f8:	10c00115 	stw	r3,4(r2)
   463fc:	003e1906 	br	45c64 <__alt_data_end+0xfffd3c64>
   46400:	da012d17 	ldw	r8,1204(sp)
   46404:	d9012d17 	ldw	r4,1204(sp)
   46408:	42000017 	ldw	r8,0(r8)
   4640c:	20800104 	addi	r2,r4,4
   46410:	da012e15 	stw	r8,1208(sp)
   46414:	403f2f16 	blt	r8,zero,460d4 <__alt_data_end+0xfffd40d4>
   46418:	d8812d15 	stw	r2,1204(sp)
   4641c:	ac800007 	ldb	r18,0(r21)
   46420:	003e3806 	br	45d04 <__alt_data_end+0xfffd3d04>
   46424:	0009883a 	mov	r4,zero
   46428:	90bff404 	addi	r2,r18,-48
   4642c:	ac800007 	ldb	r18,0(r21)
   46430:	210002a4 	muli	r4,r4,10
   46434:	ad400044 	addi	r21,r21,1
   46438:	2089883a 	add	r4,r4,r2
   4643c:	90bff404 	addi	r2,r18,-48
   46440:	28bffa2e 	bgeu	r5,r2,4642c <__alt_data_end+0xfffd442c>
   46444:	d9012e15 	stw	r4,1208(sp)
   46448:	003e2f06 	br	45d08 <__alt_data_end+0xfffd3d08>
   4644c:	8080020c 	andi	r2,r16,8
   46450:	1002d426 	beq	r2,zero,46fa4 <___vfprintf_internal_r+0x1418>
   46454:	d8c12d17 	ldw	r3,1204(sp)
   46458:	1d800017 	ldw	r22,0(r3)
   4645c:	1d000117 	ldw	r20,4(r3)
   46460:	18c00204 	addi	r3,r3,8
   46464:	d8c12d15 	stw	r3,1204(sp)
   46468:	dd813315 	stw	r22,1228(sp)
   4646c:	dd013415 	stw	r20,1232(sp)
   46470:	b009883a 	mov	r4,r22
   46474:	a00b883a 	mov	r5,r20
   46478:	da413c15 	stw	r9,1264(sp)
   4647c:	004e4980 	call	4e498 <__isinfd>
   46480:	da413c17 	ldw	r9,1264(sp)
   46484:	b009883a 	mov	r4,r22
   46488:	a00b883a 	mov	r5,r20
   4648c:	10035726 	beq	r2,zero,471ec <___vfprintf_internal_r+0x1660>
   46490:	000d883a 	mov	r6,zero
   46494:	000f883a 	mov	r7,zero
   46498:	00535940 	call	53594 <__ltdf2>
   4649c:	da413c17 	ldw	r9,1264(sp)
   464a0:	10041b16 	blt	r2,zero,47510 <___vfprintf_internal_r+0x1984>
   464a4:	d8812583 	ldbu	r2,1174(sp)
   464a8:	00c011c4 	movi	r3,71
   464ac:	1c830b16 	blt	r3,r18,470dc <___vfprintf_internal_r+0x1550>
   464b0:	04c00174 	movhi	r19,5
   464b4:	9cd73f04 	addi	r19,r19,23804
   464b8:	020000c4 	movi	r8,3
   464bc:	00ffdfc4 	movi	r3,-129
   464c0:	da012815 	stw	r8,1184(sp)
   464c4:	80e0703a 	and	r16,r16,r3
   464c8:	da012b15 	stw	r8,1196(sp)
   464cc:	d8013115 	stw	zero,1220(sp)
   464d0:	003e9906 	br	45f38 <__alt_data_end+0xfffd3f38>
   464d4:	d8812d17 	ldw	r2,1204(sp)
   464d8:	d8c12d17 	ldw	r3,1204(sp)
   464dc:	02000174 	movhi	r8,5
   464e0:	42174804 	addi	r8,r8,23840
   464e4:	15c00017 	ldw	r23,0(r2)
   464e8:	00800c04 	movi	r2,48
   464ec:	18c00104 	addi	r3,r3,4
   464f0:	d8812505 	stb	r2,1172(sp)
   464f4:	00801e04 	movi	r2,120
   464f8:	d8812545 	stb	r2,1173(sp)
   464fc:	d8c12d15 	stw	r3,1204(sp)
   46500:	002d883a 	mov	r22,zero
   46504:	84000094 	ori	r16,r16,2
   46508:	da013615 	stw	r8,1240(sp)
   4650c:	00c00084 	movi	r3,2
   46510:	04801e04 	movi	r18,120
   46514:	b805883a 	mov	r2,r23
   46518:	d8012585 	stb	zero,1174(sp)
   4651c:	003e7206 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46520:	84000814 	ori	r16,r16,32
   46524:	ac800007 	ldb	r18,0(r21)
   46528:	003df606 	br	45d04 <__alt_data_end+0xfffd3d04>
   4652c:	d8812d17 	ldw	r2,1204(sp)
   46530:	d8012585 	stb	zero,1174(sp)
   46534:	14c00017 	ldw	r19,0(r2)
   46538:	15c00104 	addi	r23,r2,4
   4653c:	98040126 	beq	r19,zero,47544 <___vfprintf_internal_r+0x19b8>
   46540:	9809883a 	mov	r4,r19
   46544:	e003dd16 	blt	fp,zero,474bc <___vfprintf_internal_r+0x1930>
   46548:	000b883a 	mov	r5,zero
   4654c:	e00d883a 	mov	r6,fp
   46550:	da413c15 	stw	r9,1264(sp)
   46554:	004c74c0 	call	4c74c <memchr>
   46558:	da413c17 	ldw	r9,1264(sp)
   4655c:	10042e26 	beq	r2,zero,47618 <___vfprintf_internal_r+0x1a8c>
   46560:	14c5c83a 	sub	r2,r2,r19
   46564:	d8812b15 	stw	r2,1196(sp)
   46568:	e083790e 	bge	fp,r2,47350 <___vfprintf_internal_r+0x17c4>
   4656c:	df012815 	stw	fp,1184(sp)
   46570:	e0049516 	blt	fp,zero,477c8 <___vfprintf_internal_r+0x1c3c>
   46574:	d8812583 	ldbu	r2,1174(sp)
   46578:	df012b15 	stw	fp,1196(sp)
   4657c:	ddc12d15 	stw	r23,1204(sp)
   46580:	d8013115 	stw	zero,1220(sp)
   46584:	003e6c06 	br	45f38 <__alt_data_end+0xfffd3f38>
   46588:	02000174 	movhi	r8,5
   4658c:	42174804 	addi	r8,r8,23840
   46590:	da013615 	stw	r8,1240(sp)
   46594:	8080080c 	andi	r2,r16,32
   46598:	103f6a1e 	bne	r2,zero,46344 <__alt_data_end+0xfffd4344>
   4659c:	8080040c 	andi	r2,r16,16
   465a0:	10029326 	beq	r2,zero,46ff0 <___vfprintf_internal_r+0x1464>
   465a4:	d8c12d17 	ldw	r3,1204(sp)
   465a8:	002d883a 	mov	r22,zero
   465ac:	1dc00017 	ldw	r23,0(r3)
   465b0:	18c00104 	addi	r3,r3,4
   465b4:	d8c12d15 	stw	r3,1204(sp)
   465b8:	003f6706 	br	46358 <__alt_data_end+0xfffd4358>
   465bc:	84000214 	ori	r16,r16,8
   465c0:	ac800007 	ldb	r18,0(r21)
   465c4:	003dcf06 	br	45d04 <__alt_data_end+0xfffd3d04>
   465c8:	da011d17 	ldw	r8,1140(sp)
   465cc:	d8c11c17 	ldw	r3,1136(sp)
   465d0:	d8812587 	ldb	r2,1174(sp)
   465d4:	10000b26 	beq	r2,zero,46604 <___vfprintf_internal_r+0xa78>
   465d8:	d8812584 	addi	r2,sp,1174
   465dc:	48800015 	stw	r2,0(r9)
   465e0:	00800044 	movi	r2,1
   465e4:	48800115 	stw	r2,4(r9)
   465e8:	4091883a 	add	r8,r8,r2
   465ec:	1887883a 	add	r3,r3,r2
   465f0:	da011d15 	stw	r8,1140(sp)
   465f4:	d8c11c15 	stw	r3,1136(sp)
   465f8:	008001c4 	movi	r2,7
   465fc:	10c18516 	blt	r2,r3,46c14 <___vfprintf_internal_r+0x1088>
   46600:	4a400204 	addi	r9,r9,8
   46604:	d9012a17 	ldw	r4,1192(sp)
   46608:	20000b26 	beq	r4,zero,46638 <___vfprintf_internal_r+0xaac>
   4660c:	d8812504 	addi	r2,sp,1172
   46610:	48800015 	stw	r2,0(r9)
   46614:	00800084 	movi	r2,2
   46618:	48800115 	stw	r2,4(r9)
   4661c:	4091883a 	add	r8,r8,r2
   46620:	18c00044 	addi	r3,r3,1
   46624:	da011d15 	stw	r8,1140(sp)
   46628:	d8c11c15 	stw	r3,1136(sp)
   4662c:	008001c4 	movi	r2,7
   46630:	10c18116 	blt	r2,r3,46c38 <___vfprintf_internal_r+0x10ac>
   46634:	4a400204 	addi	r9,r9,8
   46638:	d9012f17 	ldw	r4,1212(sp)
   4663c:	00802004 	movi	r2,128
   46640:	2080fc26 	beq	r4,r2,46a34 <___vfprintf_internal_r+0xea8>
   46644:	d8813117 	ldw	r2,1220(sp)
   46648:	d9012b17 	ldw	r4,1196(sp)
   4664c:	112fc83a 	sub	r23,r2,r4
   46650:	05c02a0e 	bge	zero,r23,466fc <___vfprintf_internal_r+0xb70>
   46654:	07000404 	movi	fp,16
   46658:	05000174 	movhi	r20,5
   4665c:	a5175384 	addi	r20,r20,23886
   46660:	e5c01d0e 	bge	fp,r23,466d8 <___vfprintf_internal_r+0xb4c>
   46664:	dc812a15 	stw	r18,1192(sp)
   46668:	058001c4 	movi	r22,7
   4666c:	a025883a 	mov	r18,r20
   46670:	8029883a 	mov	r20,r16
   46674:	dc012917 	ldw	r16,1188(sp)
   46678:	00000306 	br	46688 <___vfprintf_internal_r+0xafc>
   4667c:	bdfffc04 	addi	r23,r23,-16
   46680:	4a400204 	addi	r9,r9,8
   46684:	e5c0110e 	bge	fp,r23,466cc <___vfprintf_internal_r+0xb40>
   46688:	4c800015 	stw	r18,0(r9)
   4668c:	4f000115 	stw	fp,4(r9)
   46690:	42000404 	addi	r8,r8,16
   46694:	18c00044 	addi	r3,r3,1
   46698:	da011d15 	stw	r8,1140(sp)
   4669c:	d8c11c15 	stw	r3,1136(sp)
   466a0:	b0fff60e 	bge	r22,r3,4667c <__alt_data_end+0xfffd467c>
   466a4:	8809883a 	mov	r4,r17
   466a8:	800b883a 	mov	r5,r16
   466ac:	d9811b04 	addi	r6,sp,1132
   466b0:	0045b580 	call	45b58 <__sprint_r>
   466b4:	103ec81e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   466b8:	bdfffc04 	addi	r23,r23,-16
   466bc:	da011d17 	ldw	r8,1140(sp)
   466c0:	d8c11c17 	ldw	r3,1136(sp)
   466c4:	da400404 	addi	r9,sp,16
   466c8:	e5ffef16 	blt	fp,r23,46688 <__alt_data_end+0xfffd4688>
   466cc:	a021883a 	mov	r16,r20
   466d0:	9029883a 	mov	r20,r18
   466d4:	dc812a17 	ldw	r18,1192(sp)
   466d8:	4d000015 	stw	r20,0(r9)
   466dc:	4dc00115 	stw	r23,4(r9)
   466e0:	45d1883a 	add	r8,r8,r23
   466e4:	18c00044 	addi	r3,r3,1
   466e8:	da011d15 	stw	r8,1140(sp)
   466ec:	d8c11c15 	stw	r3,1136(sp)
   466f0:	008001c4 	movi	r2,7
   466f4:	10c13e16 	blt	r2,r3,46bf0 <___vfprintf_internal_r+0x1064>
   466f8:	4a400204 	addi	r9,r9,8
   466fc:	8080400c 	andi	r2,r16,256
   46700:	1000831e 	bne	r2,zero,46910 <___vfprintf_internal_r+0xd84>
   46704:	d8812b17 	ldw	r2,1196(sp)
   46708:	4cc00015 	stw	r19,0(r9)
   4670c:	48800115 	stw	r2,4(r9)
   46710:	4091883a 	add	r8,r8,r2
   46714:	18c00044 	addi	r3,r3,1
   46718:	da011d15 	stw	r8,1140(sp)
   4671c:	d8c11c15 	stw	r3,1136(sp)
   46720:	008001c4 	movi	r2,7
   46724:	10c05316 	blt	r2,r3,46874 <___vfprintf_internal_r+0xce8>
   46728:	4a400204 	addi	r9,r9,8
   4672c:	8400010c 	andi	r16,r16,4
   46730:	80002e26 	beq	r16,zero,467ec <___vfprintf_internal_r+0xc60>
   46734:	d8812e17 	ldw	r2,1208(sp)
   46738:	d8c12817 	ldw	r3,1184(sp)
   4673c:	10e1c83a 	sub	r16,r2,r3
   46740:	04002a0e 	bge	zero,r16,467ec <___vfprintf_internal_r+0xc60>
   46744:	04800404 	movi	r18,16
   46748:	d8c11c17 	ldw	r3,1136(sp)
   4674c:	05c00174 	movhi	r23,5
   46750:	bdd74f84 	addi	r23,r23,23870
   46754:	9400170e 	bge	r18,r16,467b4 <___vfprintf_internal_r+0xc28>
   46758:	04c001c4 	movi	r19,7
   4675c:	dd012917 	ldw	r20,1188(sp)
   46760:	00000306 	br	46770 <___vfprintf_internal_r+0xbe4>
   46764:	843ffc04 	addi	r16,r16,-16
   46768:	4a400204 	addi	r9,r9,8
   4676c:	9400110e 	bge	r18,r16,467b4 <___vfprintf_internal_r+0xc28>
   46770:	4dc00015 	stw	r23,0(r9)
   46774:	4c800115 	stw	r18,4(r9)
   46778:	42000404 	addi	r8,r8,16
   4677c:	18c00044 	addi	r3,r3,1
   46780:	da011d15 	stw	r8,1140(sp)
   46784:	d8c11c15 	stw	r3,1136(sp)
   46788:	98fff60e 	bge	r19,r3,46764 <__alt_data_end+0xfffd4764>
   4678c:	8809883a 	mov	r4,r17
   46790:	a00b883a 	mov	r5,r20
   46794:	d9811b04 	addi	r6,sp,1132
   46798:	0045b580 	call	45b58 <__sprint_r>
   4679c:	103e8e1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   467a0:	843ffc04 	addi	r16,r16,-16
   467a4:	da011d17 	ldw	r8,1140(sp)
   467a8:	d8c11c17 	ldw	r3,1136(sp)
   467ac:	da400404 	addi	r9,sp,16
   467b0:	943fef16 	blt	r18,r16,46770 <__alt_data_end+0xfffd4770>
   467b4:	4dc00015 	stw	r23,0(r9)
   467b8:	4c000115 	stw	r16,4(r9)
   467bc:	8211883a 	add	r8,r16,r8
   467c0:	18c00044 	addi	r3,r3,1
   467c4:	da011d15 	stw	r8,1140(sp)
   467c8:	d8c11c15 	stw	r3,1136(sp)
   467cc:	008001c4 	movi	r2,7
   467d0:	10c0060e 	bge	r2,r3,467ec <___vfprintf_internal_r+0xc60>
   467d4:	d9412917 	ldw	r5,1188(sp)
   467d8:	8809883a 	mov	r4,r17
   467dc:	d9811b04 	addi	r6,sp,1132
   467e0:	0045b580 	call	45b58 <__sprint_r>
   467e4:	103e7c1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   467e8:	da011d17 	ldw	r8,1140(sp)
   467ec:	dd012817 	ldw	r20,1184(sp)
   467f0:	d9012e17 	ldw	r4,1208(sp)
   467f4:	a100010e 	bge	r20,r4,467fc <___vfprintf_internal_r+0xc70>
   467f8:	2029883a 	mov	r20,r4
   467fc:	d8812c17 	ldw	r2,1200(sp)
   46800:	1505883a 	add	r2,r2,r20
   46804:	d8812c15 	stw	r2,1200(sp)
   46808:	4000b91e 	bne	r8,zero,46af0 <___vfprintf_internal_r+0xf64>
   4680c:	d8011c15 	stw	zero,1136(sp)
   46810:	a8800007 	ldb	r2,0(r21)
   46814:	da400404 	addi	r9,sp,16
   46818:	103d141e 	bne	r2,zero,45c6c <__alt_data_end+0xfffd3c6c>
   4681c:	a825883a 	mov	r18,r21
   46820:	003d2a06 	br	45ccc <__alt_data_end+0xfffd3ccc>
   46824:	d9412917 	ldw	r5,1188(sp)
   46828:	8809883a 	mov	r4,r17
   4682c:	d9811b04 	addi	r6,sp,1132
   46830:	0045b580 	call	45b58 <__sprint_r>
   46834:	103e681e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46838:	da011d17 	ldw	r8,1140(sp)
   4683c:	da400404 	addi	r9,sp,16
   46840:	8080004c 	andi	r2,r16,1
   46844:	103fb926 	beq	r2,zero,4672c <__alt_data_end+0xfffd472c>
   46848:	d8c11c17 	ldw	r3,1136(sp)
   4684c:	d9013717 	ldw	r4,1244(sp)
   46850:	00800044 	movi	r2,1
   46854:	48800115 	stw	r2,4(r9)
   46858:	49000015 	stw	r4,0(r9)
   4685c:	4091883a 	add	r8,r8,r2
   46860:	1887883a 	add	r3,r3,r2
   46864:	da011d15 	stw	r8,1140(sp)
   46868:	d8c11c15 	stw	r3,1136(sp)
   4686c:	008001c4 	movi	r2,7
   46870:	10ffad0e 	bge	r2,r3,46728 <__alt_data_end+0xfffd4728>
   46874:	d9412917 	ldw	r5,1188(sp)
   46878:	8809883a 	mov	r4,r17
   4687c:	d9811b04 	addi	r6,sp,1132
   46880:	0045b580 	call	45b58 <__sprint_r>
   46884:	103e541e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46888:	da400404 	addi	r9,sp,16
   4688c:	da011d17 	ldw	r8,1140(sp)
   46890:	003fa606 	br	4672c <__alt_data_end+0xfffd472c>
   46894:	18803fcc 	andi	r2,r3,255
   46898:	00c00044 	movi	r3,1
   4689c:	10c10126 	beq	r2,r3,46ca4 <___vfprintf_internal_r+0x1118>
   468a0:	00c00084 	movi	r3,2
   468a4:	10c0f026 	beq	r2,r3,46c68 <___vfprintf_internal_r+0x10dc>
   468a8:	d8c10dc4 	addi	r3,sp,1079
   468ac:	b808d0fa 	srli	r4,r23,3
   468b0:	b00a977a 	slli	r5,r22,29
   468b4:	b02cd0fa 	srli	r22,r22,3
   468b8:	bdc001cc 	andi	r23,r23,7
   468bc:	b8800c04 	addi	r2,r23,48
   468c0:	292eb03a 	or	r23,r5,r4
   468c4:	18800005 	stb	r2,0(r3)
   468c8:	bd88b03a 	or	r4,r23,r22
   468cc:	1827883a 	mov	r19,r3
   468d0:	18ffffc4 	addi	r3,r3,-1
   468d4:	203ff51e 	bne	r4,zero,468ac <__alt_data_end+0xfffd48ac>
   468d8:	8100004c 	andi	r4,r16,1
   468dc:	980b883a 	mov	r5,r19
   468e0:	20000726 	beq	r4,zero,46900 <___vfprintf_internal_r+0xd74>
   468e4:	10803fcc 	andi	r2,r2,255
   468e8:	1080201c 	xori	r2,r2,128
   468ec:	10bfe004 	addi	r2,r2,-128
   468f0:	01000c04 	movi	r4,48
   468f4:	11000226 	beq	r2,r4,46900 <___vfprintf_internal_r+0xd74>
   468f8:	1827883a 	mov	r19,r3
   468fc:	293fffc5 	stb	r4,-1(r5)
   46900:	d8812717 	ldw	r2,1180(sp)
   46904:	14c5c83a 	sub	r2,r2,r19
   46908:	d8812b15 	stw	r2,1196(sp)
   4690c:	003d8406 	br	45f20 <__alt_data_end+0xfffd3f20>
   46910:	00801944 	movi	r2,101
   46914:	14807c0e 	bge	r2,r18,46b08 <___vfprintf_internal_r+0xf7c>
   46918:	d9013317 	ldw	r4,1228(sp)
   4691c:	d9413417 	ldw	r5,1232(sp)
   46920:	000d883a 	mov	r6,zero
   46924:	000f883a 	mov	r7,zero
   46928:	d8c13b15 	stw	r3,1260(sp)
   4692c:	da013a15 	stw	r8,1256(sp)
   46930:	da413c15 	stw	r9,1264(sp)
   46934:	00534700 	call	53470 <__nedf2>
   46938:	d8c13b17 	ldw	r3,1260(sp)
   4693c:	da013a17 	ldw	r8,1256(sp)
   46940:	da413c17 	ldw	r9,1264(sp)
   46944:	1001001e 	bne	r2,zero,46d48 <___vfprintf_internal_r+0x11bc>
   46948:	00800174 	movhi	r2,5
   4694c:	10974f04 	addi	r2,r2,23868
   46950:	48800015 	stw	r2,0(r9)
   46954:	00800044 	movi	r2,1
   46958:	48800115 	stw	r2,4(r9)
   4695c:	4091883a 	add	r8,r8,r2
   46960:	1887883a 	add	r3,r3,r2
   46964:	da011d15 	stw	r8,1140(sp)
   46968:	d8c11c15 	stw	r3,1136(sp)
   4696c:	008001c4 	movi	r2,7
   46970:	10c1dd16 	blt	r2,r3,470e8 <___vfprintf_internal_r+0x155c>
   46974:	4a400204 	addi	r9,r9,8
   46978:	d8812417 	ldw	r2,1168(sp)
   4697c:	d8c13217 	ldw	r3,1224(sp)
   46980:	10c00216 	blt	r2,r3,4698c <___vfprintf_internal_r+0xe00>
   46984:	8080004c 	andi	r2,r16,1
   46988:	103f6826 	beq	r2,zero,4672c <__alt_data_end+0xfffd472c>
   4698c:	d8c11c17 	ldw	r3,1136(sp)
   46990:	d9013717 	ldw	r4,1244(sp)
   46994:	00800044 	movi	r2,1
   46998:	48800115 	stw	r2,4(r9)
   4699c:	49000015 	stw	r4,0(r9)
   469a0:	4091883a 	add	r8,r8,r2
   469a4:	1887883a 	add	r3,r3,r2
   469a8:	da011d15 	stw	r8,1140(sp)
   469ac:	d8c11c15 	stw	r3,1136(sp)
   469b0:	008001c4 	movi	r2,7
   469b4:	10c2af16 	blt	r2,r3,47474 <___vfprintf_internal_r+0x18e8>
   469b8:	4a400204 	addi	r9,r9,8
   469bc:	d8813217 	ldw	r2,1224(sp)
   469c0:	14bfffc4 	addi	r18,r2,-1
   469c4:	04bf590e 	bge	zero,r18,4672c <__alt_data_end+0xfffd472c>
   469c8:	04c00404 	movi	r19,16
   469cc:	d8c11c17 	ldw	r3,1136(sp)
   469d0:	05000174 	movhi	r20,5
   469d4:	a5175384 	addi	r20,r20,23886
   469d8:	9c81630e 	bge	r19,r18,46f68 <___vfprintf_internal_r+0x13dc>
   469dc:	058001c4 	movi	r22,7
   469e0:	ddc12917 	ldw	r23,1188(sp)
   469e4:	00000306 	br	469f4 <___vfprintf_internal_r+0xe68>
   469e8:	4a400204 	addi	r9,r9,8
   469ec:	94bffc04 	addi	r18,r18,-16
   469f0:	9c815d0e 	bge	r19,r18,46f68 <___vfprintf_internal_r+0x13dc>
   469f4:	4d000015 	stw	r20,0(r9)
   469f8:	4cc00115 	stw	r19,4(r9)
   469fc:	42000404 	addi	r8,r8,16
   46a00:	18c00044 	addi	r3,r3,1
   46a04:	da011d15 	stw	r8,1140(sp)
   46a08:	d8c11c15 	stw	r3,1136(sp)
   46a0c:	b0fff60e 	bge	r22,r3,469e8 <__alt_data_end+0xfffd49e8>
   46a10:	8809883a 	mov	r4,r17
   46a14:	b80b883a 	mov	r5,r23
   46a18:	d9811b04 	addi	r6,sp,1132
   46a1c:	0045b580 	call	45b58 <__sprint_r>
   46a20:	103ded1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46a24:	da011d17 	ldw	r8,1140(sp)
   46a28:	d8c11c17 	ldw	r3,1136(sp)
   46a2c:	da400404 	addi	r9,sp,16
   46a30:	003fee06 	br	469ec <__alt_data_end+0xfffd49ec>
   46a34:	d8812e17 	ldw	r2,1208(sp)
   46a38:	d9012817 	ldw	r4,1184(sp)
   46a3c:	112fc83a 	sub	r23,r2,r4
   46a40:	05ff000e 	bge	zero,r23,46644 <__alt_data_end+0xfffd4644>
   46a44:	07000404 	movi	fp,16
   46a48:	05000174 	movhi	r20,5
   46a4c:	a5175384 	addi	r20,r20,23886
   46a50:	e5c01d0e 	bge	fp,r23,46ac8 <___vfprintf_internal_r+0xf3c>
   46a54:	dc812a15 	stw	r18,1192(sp)
   46a58:	058001c4 	movi	r22,7
   46a5c:	a025883a 	mov	r18,r20
   46a60:	8029883a 	mov	r20,r16
   46a64:	dc012917 	ldw	r16,1188(sp)
   46a68:	00000306 	br	46a78 <___vfprintf_internal_r+0xeec>
   46a6c:	bdfffc04 	addi	r23,r23,-16
   46a70:	4a400204 	addi	r9,r9,8
   46a74:	e5c0110e 	bge	fp,r23,46abc <___vfprintf_internal_r+0xf30>
   46a78:	4c800015 	stw	r18,0(r9)
   46a7c:	4f000115 	stw	fp,4(r9)
   46a80:	42000404 	addi	r8,r8,16
   46a84:	18c00044 	addi	r3,r3,1
   46a88:	da011d15 	stw	r8,1140(sp)
   46a8c:	d8c11c15 	stw	r3,1136(sp)
   46a90:	b0fff60e 	bge	r22,r3,46a6c <__alt_data_end+0xfffd4a6c>
   46a94:	8809883a 	mov	r4,r17
   46a98:	800b883a 	mov	r5,r16
   46a9c:	d9811b04 	addi	r6,sp,1132
   46aa0:	0045b580 	call	45b58 <__sprint_r>
   46aa4:	103dcc1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46aa8:	bdfffc04 	addi	r23,r23,-16
   46aac:	da011d17 	ldw	r8,1140(sp)
   46ab0:	d8c11c17 	ldw	r3,1136(sp)
   46ab4:	da400404 	addi	r9,sp,16
   46ab8:	e5ffef16 	blt	fp,r23,46a78 <__alt_data_end+0xfffd4a78>
   46abc:	a021883a 	mov	r16,r20
   46ac0:	9029883a 	mov	r20,r18
   46ac4:	dc812a17 	ldw	r18,1192(sp)
   46ac8:	4d000015 	stw	r20,0(r9)
   46acc:	4dc00115 	stw	r23,4(r9)
   46ad0:	45d1883a 	add	r8,r8,r23
   46ad4:	18c00044 	addi	r3,r3,1
   46ad8:	da011d15 	stw	r8,1140(sp)
   46adc:	d8c11c15 	stw	r3,1136(sp)
   46ae0:	008001c4 	movi	r2,7
   46ae4:	10c11716 	blt	r2,r3,46f44 <___vfprintf_internal_r+0x13b8>
   46ae8:	4a400204 	addi	r9,r9,8
   46aec:	003ed506 	br	46644 <__alt_data_end+0xfffd4644>
   46af0:	d9412917 	ldw	r5,1188(sp)
   46af4:	8809883a 	mov	r4,r17
   46af8:	d9811b04 	addi	r6,sp,1132
   46afc:	0045b580 	call	45b58 <__sprint_r>
   46b00:	103f4226 	beq	r2,zero,4680c <__alt_data_end+0xfffd480c>
   46b04:	003db406 	br	461d8 <__alt_data_end+0xfffd41d8>
   46b08:	d9013217 	ldw	r4,1224(sp)
   46b0c:	00800044 	movi	r2,1
   46b10:	4cc00015 	stw	r19,0(r9)
   46b14:	1100e10e 	bge	r2,r4,46e9c <___vfprintf_internal_r+0x1310>
   46b18:	00800044 	movi	r2,1
   46b1c:	48800115 	stw	r2,4(r9)
   46b20:	4091883a 	add	r8,r8,r2
   46b24:	1887883a 	add	r3,r3,r2
   46b28:	da011d15 	stw	r8,1140(sp)
   46b2c:	d8c11c15 	stw	r3,1136(sp)
   46b30:	008001c4 	movi	r2,7
   46b34:	10c0ed16 	blt	r2,r3,46eec <___vfprintf_internal_r+0x1360>
   46b38:	4a400204 	addi	r9,r9,8
   46b3c:	d8813717 	ldw	r2,1244(sp)
   46b40:	48800015 	stw	r2,0(r9)
   46b44:	00800044 	movi	r2,1
   46b48:	48800115 	stw	r2,4(r9)
   46b4c:	4091883a 	add	r8,r8,r2
   46b50:	1887883a 	add	r3,r3,r2
   46b54:	da011d15 	stw	r8,1140(sp)
   46b58:	d8c11c15 	stw	r3,1136(sp)
   46b5c:	008001c4 	movi	r2,7
   46b60:	10c0eb16 	blt	r2,r3,46f10 <___vfprintf_internal_r+0x1384>
   46b64:	4c800204 	addi	r18,r9,8
   46b68:	d9013317 	ldw	r4,1228(sp)
   46b6c:	d9413417 	ldw	r5,1232(sp)
   46b70:	000d883a 	mov	r6,zero
   46b74:	000f883a 	mov	r7,zero
   46b78:	d8c13b15 	stw	r3,1260(sp)
   46b7c:	da013a15 	stw	r8,1256(sp)
   46b80:	00534140 	call	53414 <__eqdf2>
   46b84:	d8c13b17 	ldw	r3,1260(sp)
   46b88:	da013a17 	ldw	r8,1256(sp)
   46b8c:	1000a626 	beq	r2,zero,46e28 <___vfprintf_internal_r+0x129c>
   46b90:	d9013217 	ldw	r4,1224(sp)
   46b94:	9cc00044 	addi	r19,r19,1
   46b98:	94c00015 	stw	r19,0(r18)
   46b9c:	20bfffc4 	addi	r2,r4,-1
   46ba0:	90800115 	stw	r2,4(r18)
   46ba4:	4091883a 	add	r8,r8,r2
   46ba8:	18c00044 	addi	r3,r3,1
   46bac:	da011d15 	stw	r8,1140(sp)
   46bb0:	d8c11c15 	stw	r3,1136(sp)
   46bb4:	008001c4 	movi	r2,7
   46bb8:	10c0c316 	blt	r2,r3,46ec8 <___vfprintf_internal_r+0x133c>
   46bbc:	94800204 	addi	r18,r18,8
   46bc0:	d9013517 	ldw	r4,1236(sp)
   46bc4:	d8811fc4 	addi	r2,sp,1151
   46bc8:	90800015 	stw	r2,0(r18)
   46bcc:	91000115 	stw	r4,4(r18)
   46bd0:	4111883a 	add	r8,r8,r4
   46bd4:	18c00044 	addi	r3,r3,1
   46bd8:	da011d15 	stw	r8,1140(sp)
   46bdc:	d8c11c15 	stw	r3,1136(sp)
   46be0:	008001c4 	movi	r2,7
   46be4:	10ff2316 	blt	r2,r3,46874 <__alt_data_end+0xfffd4874>
   46be8:	92400204 	addi	r9,r18,8
   46bec:	003ecf06 	br	4672c <__alt_data_end+0xfffd472c>
   46bf0:	d9412917 	ldw	r5,1188(sp)
   46bf4:	8809883a 	mov	r4,r17
   46bf8:	d9811b04 	addi	r6,sp,1132
   46bfc:	0045b580 	call	45b58 <__sprint_r>
   46c00:	103d751e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46c04:	da011d17 	ldw	r8,1140(sp)
   46c08:	d8c11c17 	ldw	r3,1136(sp)
   46c0c:	da400404 	addi	r9,sp,16
   46c10:	003eba06 	br	466fc <__alt_data_end+0xfffd46fc>
   46c14:	d9412917 	ldw	r5,1188(sp)
   46c18:	8809883a 	mov	r4,r17
   46c1c:	d9811b04 	addi	r6,sp,1132
   46c20:	0045b580 	call	45b58 <__sprint_r>
   46c24:	103d6c1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46c28:	da011d17 	ldw	r8,1140(sp)
   46c2c:	d8c11c17 	ldw	r3,1136(sp)
   46c30:	da400404 	addi	r9,sp,16
   46c34:	003e7306 	br	46604 <__alt_data_end+0xfffd4604>
   46c38:	d9412917 	ldw	r5,1188(sp)
   46c3c:	8809883a 	mov	r4,r17
   46c40:	d9811b04 	addi	r6,sp,1132
   46c44:	0045b580 	call	45b58 <__sprint_r>
   46c48:	103d631e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46c4c:	da011d17 	ldw	r8,1140(sp)
   46c50:	d8c11c17 	ldw	r3,1136(sp)
   46c54:	da400404 	addi	r9,sp,16
   46c58:	003e7706 	br	46638 <__alt_data_end+0xfffd4638>
   46c5c:	d8012b15 	stw	zero,1196(sp)
   46c60:	dcc10e04 	addi	r19,sp,1080
   46c64:	003cae06 	br	45f20 <__alt_data_end+0xfffd3f20>
   46c68:	d9413617 	ldw	r5,1240(sp)
   46c6c:	d8810dc4 	addi	r2,sp,1079
   46c70:	b8c003cc 	andi	r3,r23,15
   46c74:	b008973a 	slli	r4,r22,28
   46c78:	28c7883a 	add	r3,r5,r3
   46c7c:	b82ed13a 	srli	r23,r23,4
   46c80:	18c00003 	ldbu	r3,0(r3)
   46c84:	b02cd13a 	srli	r22,r22,4
   46c88:	25eeb03a 	or	r23,r4,r23
   46c8c:	10c00005 	stb	r3,0(r2)
   46c90:	bd86b03a 	or	r3,r23,r22
   46c94:	1027883a 	mov	r19,r2
   46c98:	10bfffc4 	addi	r2,r2,-1
   46c9c:	183ff41e 	bne	r3,zero,46c70 <__alt_data_end+0xfffd4c70>
   46ca0:	003f1706 	br	46900 <__alt_data_end+0xfffd4900>
   46ca4:	b0025826 	beq	r22,zero,47608 <___vfprintf_internal_r+0x1a7c>
   46ca8:	b807883a 	mov	r3,r23
   46cac:	d8810dc4 	addi	r2,sp,1079
   46cb0:	882f883a 	mov	r23,r17
   46cb4:	04c00244 	movi	r19,9
   46cb8:	8023883a 	mov	r17,r16
   46cbc:	da412815 	stw	r9,1184(sp)
   46cc0:	1821883a 	mov	r16,r3
   46cc4:	8009883a 	mov	r4,r16
   46cc8:	b00b883a 	mov	r5,r22
   46ccc:	01800284 	movi	r6,10
   46cd0:	000f883a 	mov	r7,zero
   46cd4:	1029883a 	mov	r20,r2
   46cd8:	00524e40 	call	524e4 <__umoddi3>
   46cdc:	10800c04 	addi	r2,r2,48
   46ce0:	8009883a 	mov	r4,r16
   46ce4:	b00b883a 	mov	r5,r22
   46ce8:	a0800005 	stb	r2,0(r20)
   46cec:	01800284 	movi	r6,10
   46cf0:	000f883a 	mov	r7,zero
   46cf4:	0051f1c0 	call	51f1c <__udivdi3>
   46cf8:	1021883a 	mov	r16,r2
   46cfc:	182d883a 	mov	r22,r3
   46d00:	a0bfffc4 	addi	r2,r20,-1
   46d04:	183fef1e 	bne	r3,zero,46cc4 <__alt_data_end+0xfffd4cc4>
   46d08:	9c3fee36 	bltu	r19,r16,46cc4 <__alt_data_end+0xfffd4cc4>
   46d0c:	da412817 	ldw	r9,1184(sp)
   46d10:	8005883a 	mov	r2,r16
   46d14:	8821883a 	mov	r16,r17
   46d18:	b823883a 	mov	r17,r23
   46d1c:	102f883a 	mov	r23,r2
   46d20:	d8812717 	ldw	r2,1180(sp)
   46d24:	a4ffffc4 	addi	r19,r20,-1
   46d28:	bdc00c04 	addi	r23,r23,48
   46d2c:	14c5c83a 	sub	r2,r2,r19
   46d30:	a5ffffc5 	stb	r23,-1(r20)
   46d34:	d8812b15 	stw	r2,1196(sp)
   46d38:	003c7906 	br	45f20 <__alt_data_end+0xfffd3f20>
   46d3c:	00c00044 	movi	r3,1
   46d40:	bd84b03a 	or	r2,r23,r22
   46d44:	003c6806 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46d48:	dc812417 	ldw	r18,1168(sp)
   46d4c:	0480ee0e 	bge	zero,r18,47108 <___vfprintf_internal_r+0x157c>
   46d50:	d9013217 	ldw	r4,1224(sp)
   46d54:	4cc00015 	stw	r19,0(r9)
   46d58:	9100c616 	blt	r18,r4,47074 <___vfprintf_internal_r+0x14e8>
   46d5c:	49000115 	stw	r4,4(r9)
   46d60:	4111883a 	add	r8,r8,r4
   46d64:	18c00044 	addi	r3,r3,1
   46d68:	da011d15 	stw	r8,1140(sp)
   46d6c:	d8c11c15 	stw	r3,1136(sp)
   46d70:	008001c4 	movi	r2,7
   46d74:	10c20916 	blt	r2,r3,4759c <___vfprintf_internal_r+0x1a10>
   46d78:	4a400204 	addi	r9,r9,8
   46d7c:	d8813217 	ldw	r2,1224(sp)
   46d80:	90a5c83a 	sub	r18,r18,r2
   46d84:	04beae0e 	bge	zero,r18,46840 <__alt_data_end+0xfffd4840>
   46d88:	04c00404 	movi	r19,16
   46d8c:	d8c11c17 	ldw	r3,1136(sp)
   46d90:	05000174 	movhi	r20,5
   46d94:	a5175384 	addi	r20,r20,23886
   46d98:	9c81be0e 	bge	r19,r18,47494 <___vfprintf_internal_r+0x1908>
   46d9c:	058001c4 	movi	r22,7
   46da0:	ddc12917 	ldw	r23,1188(sp)
   46da4:	00000306 	br	46db4 <___vfprintf_internal_r+0x1228>
   46da8:	4a400204 	addi	r9,r9,8
   46dac:	94bffc04 	addi	r18,r18,-16
   46db0:	9c81b80e 	bge	r19,r18,47494 <___vfprintf_internal_r+0x1908>
   46db4:	4d000015 	stw	r20,0(r9)
   46db8:	4cc00115 	stw	r19,4(r9)
   46dbc:	42000404 	addi	r8,r8,16
   46dc0:	18c00044 	addi	r3,r3,1
   46dc4:	da011d15 	stw	r8,1140(sp)
   46dc8:	d8c11c15 	stw	r3,1136(sp)
   46dcc:	b0fff60e 	bge	r22,r3,46da8 <__alt_data_end+0xfffd4da8>
   46dd0:	8809883a 	mov	r4,r17
   46dd4:	b80b883a 	mov	r5,r23
   46dd8:	d9811b04 	addi	r6,sp,1132
   46ddc:	0045b580 	call	45b58 <__sprint_r>
   46de0:	103cfd1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46de4:	da011d17 	ldw	r8,1140(sp)
   46de8:	d8c11c17 	ldw	r3,1136(sp)
   46dec:	da400404 	addi	r9,sp,16
   46df0:	003fee06 	br	46dac <__alt_data_end+0xfffd4dac>
   46df4:	d9412917 	ldw	r5,1188(sp)
   46df8:	8809883a 	mov	r4,r17
   46dfc:	d9811b04 	addi	r6,sp,1132
   46e00:	0045b580 	call	45b58 <__sprint_r>
   46e04:	103cf41e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46e08:	da011d17 	ldw	r8,1140(sp)
   46e0c:	d8c11c17 	ldw	r3,1136(sp)
   46e10:	da400404 	addi	r9,sp,16
   46e14:	003dee06 	br	465d0 <__alt_data_end+0xfffd45d0>
   46e18:	00c00084 	movi	r3,2
   46e1c:	bd84b03a 	or	r2,r23,r22
   46e20:	d8012585 	stb	zero,1174(sp)
   46e24:	003c3006 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46e28:	d8813217 	ldw	r2,1224(sp)
   46e2c:	14ffffc4 	addi	r19,r2,-1
   46e30:	04ff630e 	bge	zero,r19,46bc0 <__alt_data_end+0xfffd4bc0>
   46e34:	05800404 	movi	r22,16
   46e38:	05000174 	movhi	r20,5
   46e3c:	a5175384 	addi	r20,r20,23886
   46e40:	b4c03c0e 	bge	r22,r19,46f34 <___vfprintf_internal_r+0x13a8>
   46e44:	05c001c4 	movi	r23,7
   46e48:	df012917 	ldw	fp,1188(sp)
   46e4c:	00000306 	br	46e5c <___vfprintf_internal_r+0x12d0>
   46e50:	94800204 	addi	r18,r18,8
   46e54:	9cfffc04 	addi	r19,r19,-16
   46e58:	b4c0360e 	bge	r22,r19,46f34 <___vfprintf_internal_r+0x13a8>
   46e5c:	95000015 	stw	r20,0(r18)
   46e60:	95800115 	stw	r22,4(r18)
   46e64:	42000404 	addi	r8,r8,16
   46e68:	18c00044 	addi	r3,r3,1
   46e6c:	da011d15 	stw	r8,1140(sp)
   46e70:	d8c11c15 	stw	r3,1136(sp)
   46e74:	b8fff60e 	bge	r23,r3,46e50 <__alt_data_end+0xfffd4e50>
   46e78:	8809883a 	mov	r4,r17
   46e7c:	e00b883a 	mov	r5,fp
   46e80:	d9811b04 	addi	r6,sp,1132
   46e84:	0045b580 	call	45b58 <__sprint_r>
   46e88:	103cd31e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46e8c:	da011d17 	ldw	r8,1140(sp)
   46e90:	d8c11c17 	ldw	r3,1136(sp)
   46e94:	dc800404 	addi	r18,sp,16
   46e98:	003fee06 	br	46e54 <__alt_data_end+0xfffd4e54>
   46e9c:	8088703a 	and	r4,r16,r2
   46ea0:	203f1d1e 	bne	r4,zero,46b18 <__alt_data_end+0xfffd4b18>
   46ea4:	48800115 	stw	r2,4(r9)
   46ea8:	42000044 	addi	r8,r8,1
   46eac:	18c00044 	addi	r3,r3,1
   46eb0:	da011d15 	stw	r8,1140(sp)
   46eb4:	d8c11c15 	stw	r3,1136(sp)
   46eb8:	008001c4 	movi	r2,7
   46ebc:	10c00216 	blt	r2,r3,46ec8 <___vfprintf_internal_r+0x133c>
   46ec0:	4c800204 	addi	r18,r9,8
   46ec4:	003f3e06 	br	46bc0 <__alt_data_end+0xfffd4bc0>
   46ec8:	d9412917 	ldw	r5,1188(sp)
   46ecc:	8809883a 	mov	r4,r17
   46ed0:	d9811b04 	addi	r6,sp,1132
   46ed4:	0045b580 	call	45b58 <__sprint_r>
   46ed8:	103cbf1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46edc:	dc800404 	addi	r18,sp,16
   46ee0:	da011d17 	ldw	r8,1140(sp)
   46ee4:	d8c11c17 	ldw	r3,1136(sp)
   46ee8:	003f3506 	br	46bc0 <__alt_data_end+0xfffd4bc0>
   46eec:	d9412917 	ldw	r5,1188(sp)
   46ef0:	8809883a 	mov	r4,r17
   46ef4:	d9811b04 	addi	r6,sp,1132
   46ef8:	0045b580 	call	45b58 <__sprint_r>
   46efc:	103cb61e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46f00:	da011d17 	ldw	r8,1140(sp)
   46f04:	d8c11c17 	ldw	r3,1136(sp)
   46f08:	da400404 	addi	r9,sp,16
   46f0c:	003f0b06 	br	46b3c <__alt_data_end+0xfffd4b3c>
   46f10:	d9412917 	ldw	r5,1188(sp)
   46f14:	8809883a 	mov	r4,r17
   46f18:	d9811b04 	addi	r6,sp,1132
   46f1c:	0045b580 	call	45b58 <__sprint_r>
   46f20:	103cad1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46f24:	da011d17 	ldw	r8,1140(sp)
   46f28:	d8c11c17 	ldw	r3,1136(sp)
   46f2c:	dc800404 	addi	r18,sp,16
   46f30:	003f0d06 	br	46b68 <__alt_data_end+0xfffd4b68>
   46f34:	95000015 	stw	r20,0(r18)
   46f38:	94c00115 	stw	r19,4(r18)
   46f3c:	44d1883a 	add	r8,r8,r19
   46f40:	003f1906 	br	46ba8 <__alt_data_end+0xfffd4ba8>
   46f44:	d9412917 	ldw	r5,1188(sp)
   46f48:	8809883a 	mov	r4,r17
   46f4c:	d9811b04 	addi	r6,sp,1132
   46f50:	0045b580 	call	45b58 <__sprint_r>
   46f54:	103ca01e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   46f58:	da011d17 	ldw	r8,1140(sp)
   46f5c:	d8c11c17 	ldw	r3,1136(sp)
   46f60:	da400404 	addi	r9,sp,16
   46f64:	003db706 	br	46644 <__alt_data_end+0xfffd4644>
   46f68:	4d000015 	stw	r20,0(r9)
   46f6c:	4c800115 	stw	r18,4(r9)
   46f70:	4491883a 	add	r8,r8,r18
   46f74:	003de706 	br	46714 <__alt_data_end+0xfffd4714>
   46f78:	8080100c 	andi	r2,r16,64
   46f7c:	10010226 	beq	r2,zero,47388 <___vfprintf_internal_r+0x17fc>
   46f80:	d8812d17 	ldw	r2,1204(sp)
   46f84:	002d883a 	mov	r22,zero
   46f88:	00c00044 	movi	r3,1
   46f8c:	15c0000b 	ldhu	r23,0(r2)
   46f90:	10800104 	addi	r2,r2,4
   46f94:	d8812d15 	stw	r2,1204(sp)
   46f98:	d8012585 	stb	zero,1174(sp)
   46f9c:	b805883a 	mov	r2,r23
   46fa0:	003bd106 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46fa4:	d9012d17 	ldw	r4,1204(sp)
   46fa8:	25800017 	ldw	r22,0(r4)
   46fac:	25000117 	ldw	r20,4(r4)
   46fb0:	21000204 	addi	r4,r4,8
   46fb4:	d9012d15 	stw	r4,1204(sp)
   46fb8:	dd813315 	stw	r22,1228(sp)
   46fbc:	dd013415 	stw	r20,1232(sp)
   46fc0:	003d2b06 	br	46470 <__alt_data_end+0xfffd4470>
   46fc4:	8080100c 	andi	r2,r16,64
   46fc8:	1000fe26 	beq	r2,zero,473c4 <___vfprintf_internal_r+0x1838>
   46fcc:	d9012d17 	ldw	r4,1204(sp)
   46fd0:	002d883a 	mov	r22,zero
   46fd4:	0007883a 	mov	r3,zero
   46fd8:	25c0000b 	ldhu	r23,0(r4)
   46fdc:	21000104 	addi	r4,r4,4
   46fe0:	d9012d15 	stw	r4,1204(sp)
   46fe4:	b805883a 	mov	r2,r23
   46fe8:	d8012585 	stb	zero,1174(sp)
   46fec:	003bbe06 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   46ff0:	8080100c 	andi	r2,r16,64
   46ff4:	1000ed26 	beq	r2,zero,473ac <___vfprintf_internal_r+0x1820>
   46ff8:	d9012d17 	ldw	r4,1204(sp)
   46ffc:	002d883a 	mov	r22,zero
   47000:	25c0000b 	ldhu	r23,0(r4)
   47004:	21000104 	addi	r4,r4,4
   47008:	d9012d15 	stw	r4,1204(sp)
   4700c:	003cd206 	br	46358 <__alt_data_end+0xfffd4358>
   47010:	00c00084 	movi	r3,2
   47014:	d8012585 	stb	zero,1174(sp)
   47018:	003bb306 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   4701c:	8080040c 	andi	r2,r16,16
   47020:	1000f11e 	bne	r2,zero,473e8 <___vfprintf_internal_r+0x185c>
   47024:	8400100c 	andi	r16,r16,64
   47028:	80015526 	beq	r16,zero,47580 <___vfprintf_internal_r+0x19f4>
   4702c:	da012d17 	ldw	r8,1204(sp)
   47030:	d8c12c17 	ldw	r3,1200(sp)
   47034:	40800017 	ldw	r2,0(r8)
   47038:	42000104 	addi	r8,r8,4
   4703c:	da012d15 	stw	r8,1204(sp)
   47040:	10c0000d 	sth	r3,0(r2)
   47044:	003b0706 	br	45c64 <__alt_data_end+0xfffd3c64>
   47048:	8080100c 	andi	r2,r16,64
   4704c:	1000c726 	beq	r2,zero,4736c <___vfprintf_internal_r+0x17e0>
   47050:	da012d17 	ldw	r8,1204(sp)
   47054:	45c0000f 	ldh	r23,0(r8)
   47058:	42000104 	addi	r8,r8,4
   4705c:	da012d15 	stw	r8,1204(sp)
   47060:	b82dd7fa 	srai	r22,r23,31
   47064:	b005883a 	mov	r2,r22
   47068:	003c1006 	br	460ac <__alt_data_end+0xfffd40ac>
   4706c:	ac800007 	ldb	r18,0(r21)
   47070:	003b2406 	br	45d04 <__alt_data_end+0xfffd3d04>
   47074:	4c800115 	stw	r18,4(r9)
   47078:	9211883a 	add	r8,r18,r8
   4707c:	18c00044 	addi	r3,r3,1
   47080:	da011d15 	stw	r8,1140(sp)
   47084:	d8c11c15 	stw	r3,1136(sp)
   47088:	008001c4 	movi	r2,7
   4708c:	10c15416 	blt	r2,r3,475e0 <___vfprintf_internal_r+0x1a54>
   47090:	4a400204 	addi	r9,r9,8
   47094:	d8813717 	ldw	r2,1244(sp)
   47098:	9ca7883a 	add	r19,r19,r18
   4709c:	48800015 	stw	r2,0(r9)
   470a0:	00800044 	movi	r2,1
   470a4:	48800115 	stw	r2,4(r9)
   470a8:	4091883a 	add	r8,r8,r2
   470ac:	1887883a 	add	r3,r3,r2
   470b0:	da011d15 	stw	r8,1140(sp)
   470b4:	d8c11c15 	stw	r3,1136(sp)
   470b8:	008001c4 	movi	r2,7
   470bc:	10c14016 	blt	r2,r3,475c0 <___vfprintf_internal_r+0x1a34>
   470c0:	4a400204 	addi	r9,r9,8
   470c4:	d9013217 	ldw	r4,1224(sp)
   470c8:	da011d17 	ldw	r8,1140(sp)
   470cc:	d8c11c17 	ldw	r3,1136(sp)
   470d0:	24a5c83a 	sub	r18,r4,r18
   470d4:	4cc00015 	stw	r19,0(r9)
   470d8:	003fa406 	br	46f6c <__alt_data_end+0xfffd4f6c>
   470dc:	04c00174 	movhi	r19,5
   470e0:	9cd74004 	addi	r19,r19,23808
   470e4:	003cf406 	br	464b8 <__alt_data_end+0xfffd44b8>
   470e8:	d9412917 	ldw	r5,1188(sp)
   470ec:	8809883a 	mov	r4,r17
   470f0:	d9811b04 	addi	r6,sp,1132
   470f4:	0045b580 	call	45b58 <__sprint_r>
   470f8:	103c371e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   470fc:	da011d17 	ldw	r8,1140(sp)
   47100:	da400404 	addi	r9,sp,16
   47104:	003e1c06 	br	46978 <__alt_data_end+0xfffd4978>
   47108:	00800174 	movhi	r2,5
   4710c:	10974f04 	addi	r2,r2,23868
   47110:	48800015 	stw	r2,0(r9)
   47114:	00800044 	movi	r2,1
   47118:	48800115 	stw	r2,4(r9)
   4711c:	4091883a 	add	r8,r8,r2
   47120:	1887883a 	add	r3,r3,r2
   47124:	da011d15 	stw	r8,1140(sp)
   47128:	d8c11c15 	stw	r3,1136(sp)
   4712c:	008001c4 	movi	r2,7
   47130:	10c0c316 	blt	r2,r3,47440 <___vfprintf_internal_r+0x18b4>
   47134:	4a400204 	addi	r9,r9,8
   47138:	9000041e 	bne	r18,zero,4714c <___vfprintf_internal_r+0x15c0>
   4713c:	d8c13217 	ldw	r3,1224(sp)
   47140:	1800021e 	bne	r3,zero,4714c <___vfprintf_internal_r+0x15c0>
   47144:	8080004c 	andi	r2,r16,1
   47148:	103d7826 	beq	r2,zero,4672c <__alt_data_end+0xfffd472c>
   4714c:	d8c11c17 	ldw	r3,1136(sp)
   47150:	d9013717 	ldw	r4,1244(sp)
   47154:	00800044 	movi	r2,1
   47158:	48800115 	stw	r2,4(r9)
   4715c:	49000015 	stw	r4,0(r9)
   47160:	4091883a 	add	r8,r8,r2
   47164:	1887883a 	add	r3,r3,r2
   47168:	da011d15 	stw	r8,1140(sp)
   4716c:	d8c11c15 	stw	r3,1136(sp)
   47170:	008001c4 	movi	r2,7
   47174:	10c12e16 	blt	r2,r3,47630 <___vfprintf_internal_r+0x1aa4>
   47178:	4a400204 	addi	r9,r9,8
   4717c:	04a5c83a 	sub	r18,zero,r18
   47180:	0480de0e 	bge	zero,r18,474fc <___vfprintf_internal_r+0x1970>
   47184:	05800404 	movi	r22,16
   47188:	05000174 	movhi	r20,5
   4718c:	a5175384 	addi	r20,r20,23886
   47190:	b480e20e 	bge	r22,r18,4751c <___vfprintf_internal_r+0x1990>
   47194:	05c001c4 	movi	r23,7
   47198:	df012917 	ldw	fp,1188(sp)
   4719c:	00000306 	br	471ac <___vfprintf_internal_r+0x1620>
   471a0:	4a400204 	addi	r9,r9,8
   471a4:	94bffc04 	addi	r18,r18,-16
   471a8:	b480dc0e 	bge	r22,r18,4751c <___vfprintf_internal_r+0x1990>
   471ac:	4d000015 	stw	r20,0(r9)
   471b0:	4d800115 	stw	r22,4(r9)
   471b4:	42000404 	addi	r8,r8,16
   471b8:	18c00044 	addi	r3,r3,1
   471bc:	da011d15 	stw	r8,1140(sp)
   471c0:	d8c11c15 	stw	r3,1136(sp)
   471c4:	b8fff60e 	bge	r23,r3,471a0 <__alt_data_end+0xfffd51a0>
   471c8:	8809883a 	mov	r4,r17
   471cc:	e00b883a 	mov	r5,fp
   471d0:	d9811b04 	addi	r6,sp,1132
   471d4:	0045b580 	call	45b58 <__sprint_r>
   471d8:	103bff1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   471dc:	da011d17 	ldw	r8,1140(sp)
   471e0:	d8c11c17 	ldw	r3,1136(sp)
   471e4:	da400404 	addi	r9,sp,16
   471e8:	003fee06 	br	471a4 <__alt_data_end+0xfffd51a4>
   471ec:	da413c15 	stw	r9,1264(sp)
   471f0:	004e4d00 	call	4e4d0 <__isnand>
   471f4:	da413c17 	ldw	r9,1264(sp)
   471f8:	1000851e 	bne	r2,zero,47410 <___vfprintf_internal_r+0x1884>
   471fc:	00bfffc4 	movi	r2,-1
   47200:	e0817626 	beq	fp,r2,477dc <___vfprintf_internal_r+0x1c50>
   47204:	008019c4 	movi	r2,103
   47208:	90817126 	beq	r18,r2,477d0 <___vfprintf_internal_r+0x1c44>
   4720c:	008011c4 	movi	r2,71
   47210:	90816f26 	beq	r18,r2,477d0 <___vfprintf_internal_r+0x1c44>
   47214:	82004014 	ori	r8,r16,256
   47218:	da012a15 	stw	r8,1192(sp)
   4721c:	a0017116 	blt	r20,zero,477e4 <___vfprintf_internal_r+0x1c58>
   47220:	d8012f05 	stb	zero,1212(sp)
   47224:	00801984 	movi	r2,102
   47228:	90811226 	beq	r18,r2,47674 <___vfprintf_internal_r+0x1ae8>
   4722c:	00801184 	movi	r2,70
   47230:	90811026 	beq	r18,r2,47674 <___vfprintf_internal_r+0x1ae8>
   47234:	00801944 	movi	r2,101
   47238:	90819b26 	beq	r18,r2,478a8 <___vfprintf_internal_r+0x1d1c>
   4723c:	00801144 	movi	r2,69
   47240:	90819926 	beq	r18,r2,478a8 <___vfprintf_internal_r+0x1d1c>
   47244:	e02f883a 	mov	r23,fp
   47248:	d8812404 	addi	r2,sp,1168
   4724c:	d8800115 	stw	r2,4(sp)
   47250:	d8812304 	addi	r2,sp,1164
   47254:	d8800215 	stw	r2,8(sp)
   47258:	d8812204 	addi	r2,sp,1160
   4725c:	ddc00015 	stw	r23,0(sp)
   47260:	d8800315 	stw	r2,12(sp)
   47264:	8809883a 	mov	r4,r17
   47268:	b00b883a 	mov	r5,r22
   4726c:	a00d883a 	mov	r6,r20
   47270:	01c00084 	movi	r7,2
   47274:	da413c15 	stw	r9,1264(sp)
   47278:	004945c0 	call	4945c <_dtoa_r>
   4727c:	1027883a 	mov	r19,r2
   47280:	008019c4 	movi	r2,103
   47284:	da413c17 	ldw	r9,1264(sp)
   47288:	90818c1e 	bne	r18,r2,478bc <___vfprintf_internal_r+0x1d30>
   4728c:	8080004c 	andi	r2,r16,1
   47290:	10017926 	beq	r2,zero,47878 <___vfprintf_internal_r+0x1cec>
   47294:	00801184 	movi	r2,70
   47298:	9dc7883a 	add	r3,r19,r23
   4729c:	90810626 	beq	r18,r2,476b8 <___vfprintf_internal_r+0x1b2c>
   472a0:	b009883a 	mov	r4,r22
   472a4:	a00b883a 	mov	r5,r20
   472a8:	000d883a 	mov	r6,zero
   472ac:	000f883a 	mov	r7,zero
   472b0:	d8c13b15 	stw	r3,1260(sp)
   472b4:	da413c15 	stw	r9,1264(sp)
   472b8:	00534140 	call	53414 <__eqdf2>
   472bc:	d8c13b17 	ldw	r3,1260(sp)
   472c0:	da413c17 	ldw	r9,1264(sp)
   472c4:	10000726 	beq	r2,zero,472e4 <___vfprintf_internal_r+0x1758>
   472c8:	d8812217 	ldw	r2,1160(sp)
   472cc:	10c1962e 	bgeu	r2,r3,47928 <___vfprintf_internal_r+0x1d9c>
   472d0:	01000c04 	movi	r4,48
   472d4:	11000005 	stb	r4,0(r2)
   472d8:	10800044 	addi	r2,r2,1
   472dc:	d8812215 	stw	r2,1160(sp)
   472e0:	10fffc1e 	bne	r2,r3,472d4 <__alt_data_end+0xfffd52d4>
   472e4:	1cc7c83a 	sub	r3,r3,r19
   472e8:	d8c13215 	stw	r3,1224(sp)
   472ec:	008019c4 	movi	r2,103
   472f0:	90810626 	beq	r18,r2,4770c <___vfprintf_internal_r+0x1b80>
   472f4:	008011c4 	movi	r2,71
   472f8:	90810426 	beq	r18,r2,4770c <___vfprintf_internal_r+0x1b80>
   472fc:	00801984 	movi	r2,102
   47300:	90819a1e 	bne	r18,r2,4796c <___vfprintf_internal_r+0x1de0>
   47304:	d8812417 	ldw	r2,1168(sp)
   47308:	d8812b15 	stw	r2,1196(sp)
   4730c:	0081880e 	bge	zero,r2,47930 <___vfprintf_internal_r+0x1da4>
   47310:	e000021e 	bne	fp,zero,4731c <___vfprintf_internal_r+0x1790>
   47314:	8400004c 	andi	r16,r16,1
   47318:	80000426 	beq	r16,zero,4732c <___vfprintf_internal_r+0x17a0>
   4731c:	d8812b17 	ldw	r2,1196(sp)
   47320:	e2000044 	addi	r8,fp,1
   47324:	1205883a 	add	r2,r2,r8
   47328:	d8812b15 	stw	r2,1196(sp)
   4732c:	d8812815 	stw	r2,1184(sp)
   47330:	10011716 	blt	r2,zero,47790 <___vfprintf_internal_r+0x1c04>
   47334:	ddc12f07 	ldb	r23,1212(sp)
   47338:	b800ca26 	beq	r23,zero,47664 <___vfprintf_internal_r+0x1ad8>
   4733c:	00800b44 	movi	r2,45
   47340:	d8812585 	stb	r2,1174(sp)
   47344:	dc012a17 	ldw	r16,1192(sp)
   47348:	d8013115 	stw	zero,1220(sp)
   4734c:	003afe06 	br	45f48 <__alt_data_end+0xfffd3f48>
   47350:	d8812b17 	ldw	r2,1196(sp)
   47354:	d8812815 	stw	r2,1184(sp)
   47358:	10005e16 	blt	r2,zero,474d4 <___vfprintf_internal_r+0x1948>
   4735c:	d8812583 	ldbu	r2,1174(sp)
   47360:	ddc12d15 	stw	r23,1204(sp)
   47364:	d8013115 	stw	zero,1220(sp)
   47368:	003af306 	br	45f38 <__alt_data_end+0xfffd3f38>
   4736c:	d8812d17 	ldw	r2,1204(sp)
   47370:	15c00017 	ldw	r23,0(r2)
   47374:	10800104 	addi	r2,r2,4
   47378:	d8812d15 	stw	r2,1204(sp)
   4737c:	b82dd7fa 	srai	r22,r23,31
   47380:	b005883a 	mov	r2,r22
   47384:	003b4906 	br	460ac <__alt_data_end+0xfffd40ac>
   47388:	d8c12d17 	ldw	r3,1204(sp)
   4738c:	002d883a 	mov	r22,zero
   47390:	1dc00017 	ldw	r23,0(r3)
   47394:	18c00104 	addi	r3,r3,4
   47398:	d8c12d15 	stw	r3,1204(sp)
   4739c:	b805883a 	mov	r2,r23
   473a0:	00c00044 	movi	r3,1
   473a4:	d8012585 	stb	zero,1174(sp)
   473a8:	003acf06 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   473ac:	da012d17 	ldw	r8,1204(sp)
   473b0:	002d883a 	mov	r22,zero
   473b4:	45c00017 	ldw	r23,0(r8)
   473b8:	42000104 	addi	r8,r8,4
   473bc:	da012d15 	stw	r8,1204(sp)
   473c0:	003be506 	br	46358 <__alt_data_end+0xfffd4358>
   473c4:	da012d17 	ldw	r8,1204(sp)
   473c8:	002d883a 	mov	r22,zero
   473cc:	0007883a 	mov	r3,zero
   473d0:	45c00017 	ldw	r23,0(r8)
   473d4:	42000104 	addi	r8,r8,4
   473d8:	da012d15 	stw	r8,1204(sp)
   473dc:	b805883a 	mov	r2,r23
   473e0:	d8012585 	stb	zero,1174(sp)
   473e4:	003ac006 	br	45ee8 <__alt_data_end+0xfffd3ee8>
   473e8:	d8c12d17 	ldw	r3,1204(sp)
   473ec:	d9012c17 	ldw	r4,1200(sp)
   473f0:	18800017 	ldw	r2,0(r3)
   473f4:	18c00104 	addi	r3,r3,4
   473f8:	d8c12d15 	stw	r3,1204(sp)
   473fc:	11000015 	stw	r4,0(r2)
   47400:	003a1806 	br	45c64 <__alt_data_end+0xfffd3c64>
   47404:	073fffc4 	movi	fp,-1
   47408:	202b883a 	mov	r21,r4
   4740c:	003a3e06 	br	45d08 <__alt_data_end+0xfffd3d08>
   47410:	008011c4 	movi	r2,71
   47414:	14809016 	blt	r2,r18,47658 <___vfprintf_internal_r+0x1acc>
   47418:	04c00174 	movhi	r19,5
   4741c:	9cd74104 	addi	r19,r19,23812
   47420:	00c000c4 	movi	r3,3
   47424:	00bfdfc4 	movi	r2,-129
   47428:	80a0703a 	and	r16,r16,r2
   4742c:	d8c12815 	stw	r3,1184(sp)
   47430:	d8812583 	ldbu	r2,1174(sp)
   47434:	d8c12b15 	stw	r3,1196(sp)
   47438:	d8013115 	stw	zero,1220(sp)
   4743c:	003abe06 	br	45f38 <__alt_data_end+0xfffd3f38>
   47440:	d9412917 	ldw	r5,1188(sp)
   47444:	8809883a 	mov	r4,r17
   47448:	d9811b04 	addi	r6,sp,1132
   4744c:	0045b580 	call	45b58 <__sprint_r>
   47450:	103b611e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   47454:	dc812417 	ldw	r18,1168(sp)
   47458:	da011d17 	ldw	r8,1140(sp)
   4745c:	da400404 	addi	r9,sp,16
   47460:	003f3506 	br	47138 <__alt_data_end+0xfffd5138>
   47464:	ad400044 	addi	r21,r21,1
   47468:	84000814 	ori	r16,r16,32
   4746c:	14800047 	ldb	r18,1(r2)
   47470:	003a2406 	br	45d04 <__alt_data_end+0xfffd3d04>
   47474:	d9412917 	ldw	r5,1188(sp)
   47478:	8809883a 	mov	r4,r17
   4747c:	d9811b04 	addi	r6,sp,1132
   47480:	0045b580 	call	45b58 <__sprint_r>
   47484:	103b541e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   47488:	da011d17 	ldw	r8,1140(sp)
   4748c:	da400404 	addi	r9,sp,16
   47490:	003d4a06 	br	469bc <__alt_data_end+0xfffd49bc>
   47494:	4d000015 	stw	r20,0(r9)
   47498:	4c800115 	stw	r18,4(r9)
   4749c:	4491883a 	add	r8,r8,r18
   474a0:	18c00044 	addi	r3,r3,1
   474a4:	da011d15 	stw	r8,1140(sp)
   474a8:	d8c11c15 	stw	r3,1136(sp)
   474ac:	008001c4 	movi	r2,7
   474b0:	10fcdc16 	blt	r2,r3,46824 <__alt_data_end+0xfffd4824>
   474b4:	4a400204 	addi	r9,r9,8
   474b8:	003ce106 	br	46840 <__alt_data_end+0xfffd4840>
   474bc:	da413c15 	stw	r9,1264(sp)
   474c0:	0045acc0 	call	45acc <strlen>
   474c4:	d8812b15 	stw	r2,1196(sp)
   474c8:	d8812815 	stw	r2,1184(sp)
   474cc:	da413c17 	ldw	r9,1264(sp)
   474d0:	103fa20e 	bge	r2,zero,4735c <__alt_data_end+0xfffd535c>
   474d4:	d8012815 	stw	zero,1184(sp)
   474d8:	003fa006 	br	4735c <__alt_data_end+0xfffd535c>
   474dc:	d9412917 	ldw	r5,1188(sp)
   474e0:	8809883a 	mov	r4,r17
   474e4:	d9811b04 	addi	r6,sp,1132
   474e8:	0045b580 	call	45b58 <__sprint_r>
   474ec:	103b3a1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   474f0:	da011d17 	ldw	r8,1140(sp)
   474f4:	d8c11c17 	ldw	r3,1136(sp)
   474f8:	da400404 	addi	r9,sp,16
   474fc:	d8813217 	ldw	r2,1224(sp)
   47500:	4cc00015 	stw	r19,0(r9)
   47504:	48800115 	stw	r2,4(r9)
   47508:	4091883a 	add	r8,r8,r2
   4750c:	003c8106 	br	46714 <__alt_data_end+0xfffd4714>
   47510:	00800b44 	movi	r2,45
   47514:	d8812585 	stb	r2,1174(sp)
   47518:	003be306 	br	464a8 <__alt_data_end+0xfffd44a8>
   4751c:	4d000015 	stw	r20,0(r9)
   47520:	4c800115 	stw	r18,4(r9)
   47524:	4491883a 	add	r8,r8,r18
   47528:	18c00044 	addi	r3,r3,1
   4752c:	da011d15 	stw	r8,1140(sp)
   47530:	d8c11c15 	stw	r3,1136(sp)
   47534:	008001c4 	movi	r2,7
   47538:	10ffe816 	blt	r2,r3,474dc <__alt_data_end+0xfffd54dc>
   4753c:	4a400204 	addi	r9,r9,8
   47540:	003fee06 	br	474fc <__alt_data_end+0xfffd54fc>
   47544:	df012b15 	stw	fp,1196(sp)
   47548:	00800184 	movi	r2,6
   4754c:	1700072e 	bgeu	r2,fp,4756c <___vfprintf_internal_r+0x19e0>
   47550:	d8812b15 	stw	r2,1196(sp)
   47554:	d8812815 	stw	r2,1184(sp)
   47558:	ddc12d15 	stw	r23,1204(sp)
   4755c:	04c00174 	movhi	r19,5
   47560:	9cd74d04 	addi	r19,r19,23860
   47564:	d8013115 	stw	zero,1220(sp)
   47568:	003a7a06 	br	45f54 <__alt_data_end+0xfffd3f54>
   4756c:	d8812b17 	ldw	r2,1196(sp)
   47570:	d8812815 	stw	r2,1184(sp)
   47574:	103ff80e 	bge	r2,zero,47558 <__alt_data_end+0xfffd5558>
   47578:	d8012815 	stw	zero,1184(sp)
   4757c:	003ff606 	br	47558 <__alt_data_end+0xfffd5558>
   47580:	d9012d17 	ldw	r4,1204(sp)
   47584:	da012c17 	ldw	r8,1200(sp)
   47588:	20800017 	ldw	r2,0(r4)
   4758c:	21000104 	addi	r4,r4,4
   47590:	d9012d15 	stw	r4,1204(sp)
   47594:	12000015 	stw	r8,0(r2)
   47598:	0039b206 	br	45c64 <__alt_data_end+0xfffd3c64>
   4759c:	d9412917 	ldw	r5,1188(sp)
   475a0:	8809883a 	mov	r4,r17
   475a4:	d9811b04 	addi	r6,sp,1132
   475a8:	0045b580 	call	45b58 <__sprint_r>
   475ac:	103b0a1e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   475b0:	dc812417 	ldw	r18,1168(sp)
   475b4:	da011d17 	ldw	r8,1140(sp)
   475b8:	da400404 	addi	r9,sp,16
   475bc:	003def06 	br	46d7c <__alt_data_end+0xfffd4d7c>
   475c0:	d9412917 	ldw	r5,1188(sp)
   475c4:	8809883a 	mov	r4,r17
   475c8:	d9811b04 	addi	r6,sp,1132
   475cc:	0045b580 	call	45b58 <__sprint_r>
   475d0:	103b011e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   475d4:	dc812417 	ldw	r18,1168(sp)
   475d8:	da400404 	addi	r9,sp,16
   475dc:	003eb906 	br	470c4 <__alt_data_end+0xfffd50c4>
   475e0:	d9412917 	ldw	r5,1188(sp)
   475e4:	8809883a 	mov	r4,r17
   475e8:	d9811b04 	addi	r6,sp,1132
   475ec:	0045b580 	call	45b58 <__sprint_r>
   475f0:	103af91e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   475f4:	dc812417 	ldw	r18,1168(sp)
   475f8:	da011d17 	ldw	r8,1140(sp)
   475fc:	d8c11c17 	ldw	r3,1136(sp)
   47600:	da400404 	addi	r9,sp,16
   47604:	003ea306 	br	47094 <__alt_data_end+0xfffd5094>
   47608:	00800244 	movi	r2,9
   4760c:	15fda636 	bltu	r2,r23,46ca8 <__alt_data_end+0xfffd4ca8>
   47610:	dd010e04 	addi	r20,sp,1080
   47614:	003dc206 	br	46d20 <__alt_data_end+0xfffd4d20>
   47618:	df012815 	stw	fp,1184(sp)
   4761c:	d8812583 	ldbu	r2,1174(sp)
   47620:	df012b15 	stw	fp,1196(sp)
   47624:	ddc12d15 	stw	r23,1204(sp)
   47628:	d8013115 	stw	zero,1220(sp)
   4762c:	003a4206 	br	45f38 <__alt_data_end+0xfffd3f38>
   47630:	d9412917 	ldw	r5,1188(sp)
   47634:	8809883a 	mov	r4,r17
   47638:	d9811b04 	addi	r6,sp,1132
   4763c:	0045b580 	call	45b58 <__sprint_r>
   47640:	103ae51e 	bne	r2,zero,461d8 <__alt_data_end+0xfffd41d8>
   47644:	dc812417 	ldw	r18,1168(sp)
   47648:	da011d17 	ldw	r8,1140(sp)
   4764c:	d8c11c17 	ldw	r3,1136(sp)
   47650:	da400404 	addi	r9,sp,16
   47654:	003ec906 	br	4717c <__alt_data_end+0xfffd517c>
   47658:	04c00174 	movhi	r19,5
   4765c:	9cd74204 	addi	r19,r19,23816
   47660:	003f6f06 	br	47420 <__alt_data_end+0xfffd5420>
   47664:	d8812583 	ldbu	r2,1174(sp)
   47668:	dc012a17 	ldw	r16,1192(sp)
   4766c:	d8013115 	stw	zero,1220(sp)
   47670:	003a3106 	br	45f38 <__alt_data_end+0xfffd3f38>
   47674:	d8812404 	addi	r2,sp,1168
   47678:	d8800115 	stw	r2,4(sp)
   4767c:	d8812304 	addi	r2,sp,1164
   47680:	d8800215 	stw	r2,8(sp)
   47684:	d8812204 	addi	r2,sp,1160
   47688:	df000015 	stw	fp,0(sp)
   4768c:	d8800315 	stw	r2,12(sp)
   47690:	8809883a 	mov	r4,r17
   47694:	b00b883a 	mov	r5,r22
   47698:	a00d883a 	mov	r6,r20
   4769c:	01c000c4 	movi	r7,3
   476a0:	da413c15 	stw	r9,1264(sp)
   476a4:	004945c0 	call	4945c <_dtoa_r>
   476a8:	da413c17 	ldw	r9,1264(sp)
   476ac:	1027883a 	mov	r19,r2
   476b0:	1707883a 	add	r3,r2,fp
   476b4:	e02f883a 	mov	r23,fp
   476b8:	99000007 	ldb	r4,0(r19)
   476bc:	00800c04 	movi	r2,48
   476c0:	20800326 	beq	r4,r2,476d0 <___vfprintf_internal_r+0x1b44>
   476c4:	da812417 	ldw	r10,1168(sp)
   476c8:	1a87883a 	add	r3,r3,r10
   476cc:	003ef406 	br	472a0 <__alt_data_end+0xfffd52a0>
   476d0:	b009883a 	mov	r4,r22
   476d4:	a00b883a 	mov	r5,r20
   476d8:	000d883a 	mov	r6,zero
   476dc:	000f883a 	mov	r7,zero
   476e0:	d8c13b15 	stw	r3,1260(sp)
   476e4:	da413c15 	stw	r9,1264(sp)
   476e8:	00534700 	call	53470 <__nedf2>
   476ec:	d8c13b17 	ldw	r3,1260(sp)
   476f0:	da413c17 	ldw	r9,1264(sp)
   476f4:	103ff326 	beq	r2,zero,476c4 <__alt_data_end+0xfffd56c4>
   476f8:	00800044 	movi	r2,1
   476fc:	15d5c83a 	sub	r10,r2,r23
   47700:	da812415 	stw	r10,1168(sp)
   47704:	1a87883a 	add	r3,r3,r10
   47708:	003ee506 	br	472a0 <__alt_data_end+0xfffd52a0>
   4770c:	d8812417 	ldw	r2,1168(sp)
   47710:	d8812b15 	stw	r2,1196(sp)
   47714:	1029883a 	mov	r20,r2
   47718:	00bfff44 	movi	r2,-3
   4771c:	a0800116 	blt	r20,r2,47724 <___vfprintf_internal_r+0x1b98>
   47720:	e5001d0e 	bge	fp,r20,47798 <___vfprintf_internal_r+0x1c0c>
   47724:	94bfff84 	addi	r18,r18,-2
   47728:	a53fffc4 	addi	r20,r20,-1
   4772c:	dd012415 	stw	r20,1168(sp)
   47730:	dc811fc5 	stb	r18,1151(sp)
   47734:	a0007816 	blt	r20,zero,47918 <___vfprintf_internal_r+0x1d8c>
   47738:	00800ac4 	movi	r2,43
   4773c:	d8812005 	stb	r2,1152(sp)
   47740:	00800244 	movi	r2,9
   47744:	15002b16 	blt	r2,r20,477f4 <___vfprintf_internal_r+0x1c68>
   47748:	00800c04 	movi	r2,48
   4774c:	a5000c04 	addi	r20,r20,48
   47750:	d8812045 	stb	r2,1153(sp)
   47754:	dd012085 	stb	r20,1154(sp)
   47758:	d8c120c4 	addi	r3,sp,1155
   4775c:	d8811fc4 	addi	r2,sp,1151
   47760:	da013217 	ldw	r8,1224(sp)
   47764:	1885c83a 	sub	r2,r3,r2
   47768:	d8813515 	stw	r2,1236(sp)
   4776c:	4085883a 	add	r2,r8,r2
   47770:	d8812b15 	stw	r2,1196(sp)
   47774:	00800044 	movi	r2,1
   47778:	1200610e 	bge	r2,r8,47900 <___vfprintf_internal_r+0x1d74>
   4777c:	d8812b17 	ldw	r2,1196(sp)
   47780:	10800044 	addi	r2,r2,1
   47784:	d8812b15 	stw	r2,1196(sp)
   47788:	d8812815 	stw	r2,1184(sp)
   4778c:	103ee90e 	bge	r2,zero,47334 <__alt_data_end+0xfffd5334>
   47790:	d8012815 	stw	zero,1184(sp)
   47794:	003ee706 	br	47334 <__alt_data_end+0xfffd5334>
   47798:	d8812b17 	ldw	r2,1196(sp)
   4779c:	da013217 	ldw	r8,1224(sp)
   477a0:	12003716 	blt	r2,r8,47880 <___vfprintf_internal_r+0x1cf4>
   477a4:	8400004c 	andi	r16,r16,1
   477a8:	80000326 	beq	r16,zero,477b8 <___vfprintf_internal_r+0x1c2c>
   477ac:	d8812b17 	ldw	r2,1196(sp)
   477b0:	10800044 	addi	r2,r2,1
   477b4:	d8812b15 	stw	r2,1196(sp)
   477b8:	d8812815 	stw	r2,1184(sp)
   477bc:	10003716 	blt	r2,zero,4789c <___vfprintf_internal_r+0x1d10>
   477c0:	048019c4 	movi	r18,103
   477c4:	003edb06 	br	47334 <__alt_data_end+0xfffd5334>
   477c8:	d8012815 	stw	zero,1184(sp)
   477cc:	003b6906 	br	46574 <__alt_data_end+0xfffd4574>
   477d0:	e03e901e 	bne	fp,zero,47214 <__alt_data_end+0xfffd5214>
   477d4:	07000044 	movi	fp,1
   477d8:	003e8e06 	br	47214 <__alt_data_end+0xfffd5214>
   477dc:	07000184 	movi	fp,6
   477e0:	003e8c06 	br	47214 <__alt_data_end+0xfffd5214>
   477e4:	00c00b44 	movi	r3,45
   477e8:	a520003c 	xorhi	r20,r20,32768
   477ec:	d8c12f05 	stb	r3,1212(sp)
   477f0:	003e8c06 	br	47224 <__alt_data_end+0xfffd5224>
   477f4:	d8c11f84 	addi	r3,sp,1150
   477f8:	102f883a 	mov	r23,r2
   477fc:	4839883a 	mov	fp,r9
   47800:	a009883a 	mov	r4,r20
   47804:	01400284 	movi	r5,10
   47808:	182d883a 	mov	r22,r3
   4780c:	00457780 	call	45778 <__modsi3>
   47810:	10800c04 	addi	r2,r2,48
   47814:	a009883a 	mov	r4,r20
   47818:	b0800005 	stb	r2,0(r22)
   4781c:	01400284 	movi	r5,10
   47820:	00457280 	call	45728 <__divsi3>
   47824:	1029883a 	mov	r20,r2
   47828:	b0ffffc4 	addi	r3,r22,-1
   4782c:	b8bff416 	blt	r23,r2,47800 <__alt_data_end+0xfffd5800>
   47830:	11400c04 	addi	r5,r2,48
   47834:	b17fffc5 	stb	r5,-1(r22)
   47838:	d8811fc4 	addi	r2,sp,1151
   4783c:	e013883a 	mov	r9,fp
   47840:	1880482e 	bgeu	r3,r2,47964 <___vfprintf_internal_r+0x1dd8>
   47844:	b007883a 	mov	r3,r22
   47848:	d9012044 	addi	r4,sp,1153
   4784c:	00000206 	br	47858 <___vfprintf_internal_r+0x1ccc>
   47850:	19400003 	ldbu	r5,0(r3)
   47854:	18c00044 	addi	r3,r3,1
   47858:	21400005 	stb	r5,0(r4)
   4785c:	21000044 	addi	r4,r4,1
   47860:	10fffb1e 	bne	r2,r3,47850 <__alt_data_end+0xfffd5850>
   47864:	d8c12004 	addi	r3,sp,1152
   47868:	1d87c83a 	sub	r3,r3,r22
   4786c:	d9012044 	addi	r4,sp,1153
   47870:	20c7883a 	add	r3,r4,r3
   47874:	003fba06 	br	47760 <__alt_data_end+0xfffd5760>
   47878:	d8c12217 	ldw	r3,1160(sp)
   4787c:	003e9906 	br	472e4 <__alt_data_end+0xfffd52e4>
   47880:	05000b0e 	bge	zero,r20,478b0 <___vfprintf_internal_r+0x1d24>
   47884:	05000044 	movi	r20,1
   47888:	da013217 	ldw	r8,1224(sp)
   4788c:	a229883a 	add	r20,r20,r8
   47890:	dd012b15 	stw	r20,1196(sp)
   47894:	dd012815 	stw	r20,1184(sp)
   47898:	a03fc90e 	bge	r20,zero,477c0 <__alt_data_end+0xfffd57c0>
   4789c:	d8012815 	stw	zero,1184(sp)
   478a0:	048019c4 	movi	r18,103
   478a4:	003ea306 	br	47334 <__alt_data_end+0xfffd5334>
   478a8:	e5c00044 	addi	r23,fp,1
   478ac:	003e6606 	br	47248 <__alt_data_end+0xfffd5248>
   478b0:	00800084 	movi	r2,2
   478b4:	1529c83a 	sub	r20,r2,r20
   478b8:	003ff306 	br	47888 <__alt_data_end+0xfffd5888>
   478bc:	008011c4 	movi	r2,71
   478c0:	90be7226 	beq	r18,r2,4728c <__alt_data_end+0xfffd528c>
   478c4:	003e7306 	br	47294 <__alt_data_end+0xfffd5294>
   478c8:	d8812d17 	ldw	r2,1204(sp)
   478cc:	ac800043 	ldbu	r18,1(r21)
   478d0:	202b883a 	mov	r21,r4
   478d4:	17000017 	ldw	fp,0(r2)
   478d8:	10800104 	addi	r2,r2,4
   478dc:	d8812d15 	stw	r2,1204(sp)
   478e0:	e0001b16 	blt	fp,zero,47950 <___vfprintf_internal_r+0x1dc4>
   478e4:	94803fcc 	andi	r18,r18,255
   478e8:	9480201c 	xori	r18,r18,128
   478ec:	94bfe004 	addi	r18,r18,-128
   478f0:	00390406 	br	45d04 <__alt_data_end+0xfffd3d04>
   478f4:	00bfffc4 	movi	r2,-1
   478f8:	d8812c15 	stw	r2,1200(sp)
   478fc:	003a2506 	br	46194 <__alt_data_end+0xfffd4194>
   47900:	80a0703a 	and	r16,r16,r2
   47904:	803f9d1e 	bne	r16,zero,4777c <__alt_data_end+0xfffd577c>
   47908:	d8812b17 	ldw	r2,1196(sp)
   4790c:	d8812815 	stw	r2,1184(sp)
   47910:	103e880e 	bge	r2,zero,47334 <__alt_data_end+0xfffd5334>
   47914:	003f9e06 	br	47790 <__alt_data_end+0xfffd5790>
   47918:	00800b44 	movi	r2,45
   4791c:	0529c83a 	sub	r20,zero,r20
   47920:	d8812005 	stb	r2,1152(sp)
   47924:	003f8606 	br	47740 <__alt_data_end+0xfffd5740>
   47928:	1007883a 	mov	r3,r2
   4792c:	003e6d06 	br	472e4 <__alt_data_end+0xfffd52e4>
   47930:	e000021e 	bne	fp,zero,4793c <___vfprintf_internal_r+0x1db0>
   47934:	8400004c 	andi	r16,r16,1
   47938:	80000e26 	beq	r16,zero,47974 <___vfprintf_internal_r+0x1de8>
   4793c:	e7000084 	addi	fp,fp,2
   47940:	df012b15 	stw	fp,1196(sp)
   47944:	df012815 	stw	fp,1184(sp)
   47948:	e03e7a0e 	bge	fp,zero,47334 <__alt_data_end+0xfffd5334>
   4794c:	003f9006 	br	47790 <__alt_data_end+0xfffd5790>
   47950:	94803fcc 	andi	r18,r18,255
   47954:	9480201c 	xori	r18,r18,128
   47958:	073fffc4 	movi	fp,-1
   4795c:	94bfe004 	addi	r18,r18,-128
   47960:	0038e806 	br	45d04 <__alt_data_end+0xfffd3d04>
   47964:	d8c12044 	addi	r3,sp,1153
   47968:	003f7d06 	br	47760 <__alt_data_end+0xfffd5760>
   4796c:	dd012417 	ldw	r20,1168(sp)
   47970:	003f6d06 	br	47728 <__alt_data_end+0xfffd5728>
   47974:	00c00044 	movi	r3,1
   47978:	d8c12815 	stw	r3,1184(sp)
   4797c:	d8c12b15 	stw	r3,1196(sp)
   47980:	003e6c06 	br	47334 <__alt_data_end+0xfffd5334>

00047984 <__vfprintf_internal>:
   47984:	00800174 	movhi	r2,5
   47988:	109f5504 	addi	r2,r2,32084
   4798c:	2007883a 	mov	r3,r4
   47990:	11000017 	ldw	r4,0(r2)
   47994:	2805883a 	mov	r2,r5
   47998:	300f883a 	mov	r7,r6
   4799c:	180b883a 	mov	r5,r3
   479a0:	100d883a 	mov	r6,r2
   479a4:	0045b8c1 	jmpi	45b8c <___vfprintf_internal_r>

000479a8 <__svfscanf_r>:
   479a8:	deff4c04 	addi	sp,sp,-720
   479ac:	df00b215 	stw	fp,712(sp)
   479b0:	ddc0b115 	stw	r23,708(sp)
   479b4:	dd00ae15 	stw	r20,696(sp)
   479b8:	dc80ac15 	stw	r18,688(sp)
   479bc:	dc40ab15 	stw	r17,684(sp)
   479c0:	dc00aa15 	stw	r16,680(sp)
   479c4:	dfc0b315 	stw	ra,716(sp)
   479c8:	dd80b015 	stw	r22,704(sp)
   479cc:	dd40af15 	stw	r21,700(sp)
   479d0:	dcc0ad15 	stw	r19,692(sp)
   479d4:	30800007 	ldb	r2,0(r6)
   479d8:	0025883a 	mov	r18,zero
   479dc:	d9c09c15 	stw	r7,624(sp)
   479e0:	d800a015 	stw	zero,640(sp)
   479e4:	d8009f15 	stw	zero,636(sp)
   479e8:	d8009e15 	stw	zero,632(sp)
   479ec:	d8809b15 	stw	r2,620(sp)
   479f0:	2023883a 	mov	r17,r4
   479f4:	05c00174 	movhi	r23,5
   479f8:	bddf5604 	addi	r23,r23,32088
   479fc:	9029883a 	mov	r20,r18
   47a00:	2839883a 	mov	fp,r5
   47a04:	34000044 	addi	r16,r6,1
   47a08:	10002426 	beq	r2,zero,47a9c <__svfscanf_r+0xf4>
   47a0c:	b9000017 	ldw	r4,0(r23)
   47a10:	2087883a 	add	r3,r4,r2
   47a14:	18c00003 	ldbu	r3,0(r3)
   47a18:	18c0020c 	andi	r3,r3,8
   47a1c:	18c03fcc 	andi	r3,r3,255
   47a20:	18c0201c 	xori	r3,r3,128
   47a24:	18ffe004 	addi	r3,r3,-128
   47a28:	18002926 	beq	r3,zero,47ad0 <__svfscanf_r+0x128>
   47a2c:	e0800117 	ldw	r2,4(fp)
   47a30:	0080110e 	bge	zero,r2,47a78 <__svfscanf_r+0xd0>
   47a34:	e0c00017 	ldw	r3,0(fp)
   47a38:	b9000017 	ldw	r4,0(r23)
   47a3c:	18800003 	ldbu	r2,0(r3)
   47a40:	2085883a 	add	r2,r4,r2
   47a44:	10800003 	ldbu	r2,0(r2)
   47a48:	1080020c 	andi	r2,r2,8
   47a4c:	10803fcc 	andi	r2,r2,255
   47a50:	1080201c 	xori	r2,r2,128
   47a54:	10bfe004 	addi	r2,r2,-128
   47a58:	10000b26 	beq	r2,zero,47a88 <__svfscanf_r+0xe0>
   47a5c:	e0800117 	ldw	r2,4(fp)
   47a60:	18c00044 	addi	r3,r3,1
   47a64:	e0c00015 	stw	r3,0(fp)
   47a68:	10bfffc4 	addi	r2,r2,-1
   47a6c:	e0800115 	stw	r2,4(fp)
   47a70:	a5000044 	addi	r20,r20,1
   47a74:	00bfef16 	blt	zero,r2,47a34 <__alt_data_end+0xfffd5a34>
   47a78:	8809883a 	mov	r4,r17
   47a7c:	e00b883a 	mov	r5,fp
   47a80:	004e2ac0 	call	4e2ac <__srefill_r>
   47a84:	103feb26 	beq	r2,zero,47a34 <__alt_data_end+0xfffd5a34>
   47a88:	800d883a 	mov	r6,r16
   47a8c:	30800007 	ldb	r2,0(r6)
   47a90:	34000044 	addi	r16,r6,1
   47a94:	d8809b15 	stw	r2,620(sp)
   47a98:	103fdc1e 	bne	r2,zero,47a0c <__alt_data_end+0xfffd5a0c>
   47a9c:	d8809e17 	ldw	r2,632(sp)
   47aa0:	dfc0b317 	ldw	ra,716(sp)
   47aa4:	df00b217 	ldw	fp,712(sp)
   47aa8:	ddc0b117 	ldw	r23,708(sp)
   47aac:	dd80b017 	ldw	r22,704(sp)
   47ab0:	dd40af17 	ldw	r21,700(sp)
   47ab4:	dd00ae17 	ldw	r20,696(sp)
   47ab8:	dcc0ad17 	ldw	r19,692(sp)
   47abc:	dc80ac17 	ldw	r18,688(sp)
   47ac0:	dc40ab17 	ldw	r17,684(sp)
   47ac4:	dc00aa17 	ldw	r16,680(sp)
   47ac8:	dec0b404 	addi	sp,sp,720
   47acc:	f800283a 	ret
   47ad0:	00c00944 	movi	r3,37
   47ad4:	10c00e26 	beq	r2,r3,47b10 <__svfscanf_r+0x168>
   47ad8:	e0800117 	ldw	r2,4(fp)
   47adc:	0080e10e 	bge	zero,r2,47e64 <__svfscanf_r+0x4bc>
   47ae0:	e0800017 	ldw	r2,0(fp)
   47ae4:	80ffffc7 	ldb	r3,-1(r16)
   47ae8:	11000003 	ldbu	r4,0(r2)
   47aec:	20ffeb1e 	bne	r4,r3,47a9c <__alt_data_end+0xfffd5a9c>
   47af0:	e0c00117 	ldw	r3,4(fp)
   47af4:	10800044 	addi	r2,r2,1
   47af8:	e0800015 	stw	r2,0(fp)
   47afc:	18bfffc4 	addi	r2,r3,-1
   47b00:	e0800115 	stw	r2,4(fp)
   47b04:	a5000044 	addi	r20,r20,1
   47b08:	800d883a 	mov	r6,r16
   47b0c:	003fdf06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   47b10:	31400043 	ldbu	r5,1(r6)
   47b14:	002d883a 	mov	r22,zero
   47b18:	0027883a 	mov	r19,zero
   47b1c:	01801e04 	movi	r6,120
   47b20:	01c01b04 	movi	r7,108
   47b24:	28803fcc 	andi	r2,r5,255
   47b28:	80c00044 	addi	r3,r16,1
   47b2c:	30804d2e 	bgeu	r6,r2,47c64 <__svfscanf_r+0x2bc>
   47b30:	29403fcc 	andi	r5,r5,255
   47b34:	2940201c 	xori	r5,r5,128
   47b38:	297fe004 	addi	r5,r5,-128
   47b3c:	2149883a 	add	r4,r4,r5
   47b40:	20800003 	ldbu	r2,0(r4)
   47b44:	d8c09d15 	stw	r3,628(sp)
   47b48:	1080004c 	andi	r2,r2,1
   47b4c:	1002d81e 	bne	r2,zero,486b0 <__svfscanf_r+0xd08>
   47b50:	02000174 	movhi	r8,5
   47b54:	423f9a04 	addi	r8,r8,-408
   47b58:	da00a015 	stw	r8,640(sp)
   47b5c:	02000284 	movi	r8,10
   47b60:	da009f15 	stw	r8,636(sp)
   47b64:	040000c4 	movi	r16,3
   47b68:	e0800117 	ldw	r2,4(fp)
   47b6c:	0081bd0e 	bge	zero,r2,48264 <__svfscanf_r+0x8bc>
   47b70:	b080100c 	andi	r2,r22,64
   47b74:	1000ce26 	beq	r2,zero,47eb0 <__svfscanf_r+0x508>
   47b78:	00800084 	movi	r2,2
   47b7c:	80818426 	beq	r16,r2,48190 <__svfscanf_r+0x7e8>
   47b80:	1400f716 	blt	r2,r16,47f60 <__svfscanf_r+0x5b8>
   47b84:	00800044 	movi	r2,1
   47b88:	8080dc26 	beq	r16,r2,47efc <__svfscanf_r+0x554>
   47b8c:	9800011e 	bne	r19,zero,47b94 <__svfscanf_r+0x1ec>
   47b90:	04c00044 	movi	r19,1
   47b94:	b080004c 	andi	r2,r22,1
   47b98:	10022826 	beq	r2,zero,4843c <__svfscanf_r+0xa94>
   47b9c:	b480040c 	andi	r18,r22,16
   47ba0:	9004051e 	bne	r18,zero,48bb8 <__svfscanf_r+0x1210>
   47ba4:	d8809c17 	ldw	r2,624(sp)
   47ba8:	15800017 	ldw	r22,0(r2)
   47bac:	10800104 	addi	r2,r2,4
   47bb0:	d8809c15 	stw	r2,624(sp)
   47bb4:	0021883a 	mov	r16,zero
   47bb8:	dd409904 	addi	r21,sp,612
   47bbc:	00c00174 	movhi	r3,5
   47bc0:	18df5704 	addi	r3,r3,32092
   47bc4:	18800017 	ldw	r2,0(r3)
   47bc8:	8080aa26 	beq	r16,r2,47e74 <__svfscanf_r+0x4cc>
   47bcc:	e0800017 	ldw	r2,0(fp)
   47bd0:	e2000117 	ldw	r8,4(fp)
   47bd4:	d9000104 	addi	r4,sp,4
   47bd8:	11c00003 	ldbu	r7,0(r2)
   47bdc:	423fffc4 	addi	r8,r8,-1
   47be0:	10800044 	addi	r2,r2,1
   47be4:	2407883a 	add	r3,r4,r16
   47be8:	000b883a 	mov	r5,zero
   47bec:	a809883a 	mov	r4,r21
   47bf0:	01800204 	movi	r6,8
   47bf4:	e2000115 	stw	r8,4(fp)
   47bf8:	e0800015 	stw	r2,0(fp)
   47bfc:	19c00005 	stb	r7,0(r3)
   47c00:	84000044 	addi	r16,r16,1
   47c04:	004ca640 	call	4ca64 <memset>
   47c08:	b00b883a 	mov	r5,r22
   47c0c:	8809883a 	mov	r4,r17
   47c10:	dd400015 	stw	r21,0(sp)
   47c14:	d9800104 	addi	r6,sp,4
   47c18:	800f883a 	mov	r7,r16
   47c1c:	004c6640 	call	4c664 <_mbrtowc_r>
   47c20:	017fffc4 	movi	r5,-1
   47c24:	11409326 	beq	r2,r5,47e74 <__svfscanf_r+0x4cc>
   47c28:	10030d1e 	bne	r2,zero,48860 <__svfscanf_r+0xeb8>
   47c2c:	9000011e 	bne	r18,zero,47c34 <__svfscanf_r+0x28c>
   47c30:	b0000015 	stw	zero,0(r22)
   47c34:	a429883a 	add	r20,r20,r16
   47c38:	9cffffc4 	addi	r19,r19,-1
   47c3c:	90030d1e 	bne	r18,zero,48874 <__svfscanf_r+0xecc>
   47c40:	b5800104 	addi	r22,r22,4
   47c44:	0021883a 	mov	r16,zero
   47c48:	e0800117 	ldw	r2,4(fp)
   47c4c:	00820b0e 	bge	zero,r2,4847c <__svfscanf_r+0xad4>
   47c50:	983fda1e 	bne	r19,zero,47bbc <__alt_data_end+0xfffd5bbc>
   47c54:	90012226 	beq	r18,zero,480e0 <__svfscanf_r+0x738>
   47c58:	dc009d17 	ldw	r16,628(sp)
   47c5c:	800d883a 	mov	r6,r16
   47c60:	003f8a06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   47c64:	1085883a 	add	r2,r2,r2
   47c68:	1085883a 	add	r2,r2,r2
   47c6c:	02000134 	movhi	r8,4
   47c70:	421f2004 	addi	r8,r8,31872
   47c74:	1205883a 	add	r2,r2,r8
   47c78:	10800017 	ldw	r2,0(r2)
   47c7c:	1000683a 	jmp	r2
   47c80:	00047e94 	movui	zero,4602
   47c84:	00047b30 	cmpltui	zero,zero,4588
   47c88:	00047b30 	cmpltui	zero,zero,4588
   47c8c:	00047b30 	cmpltui	zero,zero,4588
   47c90:	00047b30 	cmpltui	zero,zero,4588
   47c94:	00047b30 	cmpltui	zero,zero,4588
   47c98:	00047b30 	cmpltui	zero,zero,4588
   47c9c:	00047b30 	cmpltui	zero,zero,4588
   47ca0:	00047b30 	cmpltui	zero,zero,4588
   47ca4:	00047b30 	cmpltui	zero,zero,4588
   47ca8:	00047b30 	cmpltui	zero,zero,4588
   47cac:	00047b30 	cmpltui	zero,zero,4588
   47cb0:	00047b30 	cmpltui	zero,zero,4588
   47cb4:	00047b30 	cmpltui	zero,zero,4588
   47cb8:	00047b30 	cmpltui	zero,zero,4588
   47cbc:	00047b30 	cmpltui	zero,zero,4588
   47cc0:	00047b30 	cmpltui	zero,zero,4588
   47cc4:	00047b30 	cmpltui	zero,zero,4588
   47cc8:	00047b30 	cmpltui	zero,zero,4588
   47ccc:	00047b30 	cmpltui	zero,zero,4588
   47cd0:	00047b30 	cmpltui	zero,zero,4588
   47cd4:	00047b30 	cmpltui	zero,zero,4588
   47cd8:	00047b30 	cmpltui	zero,zero,4588
   47cdc:	00047b30 	cmpltui	zero,zero,4588
   47ce0:	00047b30 	cmpltui	zero,zero,4588
   47ce4:	00047b30 	cmpltui	zero,zero,4588
   47ce8:	00047b30 	cmpltui	zero,zero,4588
   47cec:	00047b30 	cmpltui	zero,zero,4588
   47cf0:	00047b30 	cmpltui	zero,zero,4588
   47cf4:	00047b30 	cmpltui	zero,zero,4588
   47cf8:	00047b30 	cmpltui	zero,zero,4588
   47cfc:	00047b30 	cmpltui	zero,zero,4588
   47d00:	00047b30 	cmpltui	zero,zero,4588
   47d04:	00047b30 	cmpltui	zero,zero,4588
   47d08:	00047b30 	cmpltui	zero,zero,4588
   47d0c:	00047b30 	cmpltui	zero,zero,4588
   47d10:	00047b30 	cmpltui	zero,zero,4588
   47d14:	000486d8 	cmpnei	zero,zero,4635
   47d18:	00047b30 	cmpltui	zero,zero,4588
   47d1c:	00047b30 	cmpltui	zero,zero,4588
   47d20:	00047b30 	cmpltui	zero,zero,4588
   47d24:	00047b30 	cmpltui	zero,zero,4588
   47d28:	00048730 	cmpltui	zero,zero,4636
   47d2c:	00047b30 	cmpltui	zero,zero,4588
   47d30:	00047b30 	cmpltui	zero,zero,4588
   47d34:	00047b30 	cmpltui	zero,zero,4588
   47d38:	00047b30 	cmpltui	zero,zero,4588
   47d3c:	00047b30 	cmpltui	zero,zero,4588
   47d40:	00048740 	call	4874 <__reset-0x3b78c>
   47d44:	00048740 	call	4874 <__reset-0x3b78c>
   47d48:	00048740 	call	4874 <__reset-0x3b78c>
   47d4c:	00048740 	call	4874 <__reset-0x3b78c>
   47d50:	00048740 	call	4874 <__reset-0x3b78c>
   47d54:	00048740 	call	4874 <__reset-0x3b78c>
   47d58:	00048740 	call	4874 <__reset-0x3b78c>
   47d5c:	00048740 	call	4874 <__reset-0x3b78c>
   47d60:	00048740 	call	4874 <__reset-0x3b78c>
   47d64:	00048740 	call	4874 <__reset-0x3b78c>
   47d68:	00047b30 	cmpltui	zero,zero,4588
   47d6c:	00047b30 	cmpltui	zero,zero,4588
   47d70:	00047b30 	cmpltui	zero,zero,4588
   47d74:	00047b30 	cmpltui	zero,zero,4588
   47d78:	00047b30 	cmpltui	zero,zero,4588
   47d7c:	00047b30 	cmpltui	zero,zero,4588
   47d80:	00047b30 	cmpltui	zero,zero,4588
   47d84:	00047b30 	cmpltui	zero,zero,4588
   47d88:	00047b30 	cmpltui	zero,zero,4588
   47d8c:	00047b30 	cmpltui	zero,zero,4588
   47d90:	000486e4 	muli	zero,zero,4635
   47d94:	000486f0 	cmpltui	zero,zero,4635
   47d98:	00047b30 	cmpltui	zero,zero,4588
   47d9c:	000486f0 	cmpltui	zero,zero,4635
   47da0:	00047b30 	cmpltui	zero,zero,4588
   47da4:	00047b30 	cmpltui	zero,zero,4588
   47da8:	00047b30 	cmpltui	zero,zero,4588
   47dac:	00047b30 	cmpltui	zero,zero,4588
   47db0:	000486fc 	xorhi	zero,zero,4635
   47db4:	00047b30 	cmpltui	zero,zero,4588
   47db8:	00047b30 	cmpltui	zero,zero,4588
   47dbc:	0004870c 	andi	zero,zero,4636
   47dc0:	00047b30 	cmpltui	zero,zero,4588
   47dc4:	00047b30 	cmpltui	zero,zero,4588
   47dc8:	00047b30 	cmpltui	zero,zero,4588
   47dcc:	00047b30 	cmpltui	zero,zero,4588
   47dd0:	00047b30 	cmpltui	zero,zero,4588
   47dd4:	00047b30 	cmpltui	zero,zero,4588
   47dd8:	00047b30 	cmpltui	zero,zero,4588
   47ddc:	00047b30 	cmpltui	zero,zero,4588
   47de0:	00048764 	muli	zero,zero,4637
   47de4:	00047b30 	cmpltui	zero,zero,4588
   47de8:	00047b30 	cmpltui	zero,zero,4588
   47dec:	00048788 	cmpgei	zero,zero,4638
   47df0:	00047b30 	cmpltui	zero,zero,4588
   47df4:	00047b30 	cmpltui	zero,zero,4588
   47df8:	00047b30 	cmpltui	zero,zero,4588
   47dfc:	00047b30 	cmpltui	zero,zero,4588
   47e00:	00047b30 	cmpltui	zero,zero,4588
   47e04:	00047b30 	cmpltui	zero,zero,4588
   47e08:	00047b30 	cmpltui	zero,zero,4588
   47e0c:	000487a8 	cmpgeui	zero,zero,4638
   47e10:	000487b8 	rdprs	zero,zero,4638
   47e14:	000486f0 	cmpltui	zero,zero,4635
   47e18:	000486f0 	cmpltui	zero,zero,4635
   47e1c:	000486f0 	cmpltui	zero,zero,4635
   47e20:	000487c0 	call	487c <__reset-0x3b784>
   47e24:	000487d0 	cmplti	zero,zero,4639
   47e28:	00047b30 	cmpltui	zero,zero,4588
   47e2c:	00047b30 	cmpltui	zero,zero,4588
   47e30:	000487ec 	andhi	zero,zero,4639
   47e34:	00047b30 	cmpltui	zero,zero,4588
   47e38:	0004880c 	andi	zero,zero,4640
   47e3c:	0004884c 	andi	zero,zero,4641
   47e40:	00048840 	call	4884 <__reset-0x3b77c>
   47e44:	00047b30 	cmpltui	zero,zero,4588
   47e48:	00047b30 	cmpltui	zero,zero,4588
   47e4c:	00048854 	movui	zero,4641
   47e50:	00047b30 	cmpltui	zero,zero,4588
   47e54:	000486b8 	rdprs	zero,zero,4634
   47e58:	00047b30 	cmpltui	zero,zero,4588
   47e5c:	00047b30 	cmpltui	zero,zero,4588
   47e60:	00048764 	muli	zero,zero,4637
   47e64:	8809883a 	mov	r4,r17
   47e68:	e00b883a 	mov	r5,fp
   47e6c:	004e2ac0 	call	4e2ac <__srefill_r>
   47e70:	103f1b26 	beq	r2,zero,47ae0 <__alt_data_end+0xfffd5ae0>
   47e74:	d8809e17 	ldw	r2,632(sp)
   47e78:	10000626 	beq	r2,zero,47e94 <__svfscanf_r+0x4ec>
   47e7c:	e080030b 	ldhu	r2,12(fp)
   47e80:	1080100c 	andi	r2,r2,64
   47e84:	10bfffcc 	andi	r2,r2,65535
   47e88:	10a0001c 	xori	r2,r2,32768
   47e8c:	10a00004 	addi	r2,r2,-32768
   47e90:	103f0226 	beq	r2,zero,47a9c <__alt_data_end+0xfffd5a9c>
   47e94:	00bfffc4 	movi	r2,-1
   47e98:	d8809e15 	stw	r2,632(sp)
   47e9c:	003eff06 	br	47a9c <__alt_data_end+0xfffd5a9c>
   47ea0:	8809883a 	mov	r4,r17
   47ea4:	e00b883a 	mov	r5,fp
   47ea8:	004e2ac0 	call	4e2ac <__srefill_r>
   47eac:	103ff11e 	bne	r2,zero,47e74 <__alt_data_end+0xfffd5e74>
   47eb0:	b9400017 	ldw	r5,0(r23)
   47eb4:	e0800017 	ldw	r2,0(fp)
   47eb8:	00000206 	br	47ec4 <__svfscanf_r+0x51c>
   47ebc:	10800044 	addi	r2,r2,1
   47ec0:	e0800015 	stw	r2,0(fp)
   47ec4:	10c00003 	ldbu	r3,0(r2)
   47ec8:	28c7883a 	add	r3,r5,r3
   47ecc:	18c00003 	ldbu	r3,0(r3)
   47ed0:	18c0020c 	andi	r3,r3,8
   47ed4:	18c03fcc 	andi	r3,r3,255
   47ed8:	18c0201c 	xori	r3,r3,128
   47edc:	18ffe004 	addi	r3,r3,-128
   47ee0:	183f2526 	beq	r3,zero,47b78 <__alt_data_end+0xfffd5b78>
   47ee4:	e0c00117 	ldw	r3,4(fp)
   47ee8:	a5000044 	addi	r20,r20,1
   47eec:	18ffffc4 	addi	r3,r3,-1
   47ef0:	e0c00115 	stw	r3,4(fp)
   47ef4:	00fff116 	blt	zero,r3,47ebc <__alt_data_end+0xfffd5ebc>
   47ef8:	003fe906 	br	47ea0 <__alt_data_end+0xfffd5ea0>
   47efc:	9800011e 	bne	r19,zero,47f04 <__svfscanf_r+0x55c>
   47f00:	04ffffc4 	movi	r19,-1
   47f04:	b580040c 	andi	r22,r22,16
   47f08:	b0016826 	beq	r22,zero,484ac <__svfscanf_r+0xb04>
   47f0c:	e0800017 	ldw	r2,0(fp)
   47f10:	0021883a 	mov	r16,zero
   47f14:	dd405884 	addi	r21,sp,354
   47f18:	10c00003 	ldbu	r3,0(r2)
   47f1c:	a8c7883a 	add	r3,r21,r3
   47f20:	18c00007 	ldb	r3,0(r3)
   47f24:	18036b26 	beq	r3,zero,48cd4 <__svfscanf_r+0x132c>
   47f28:	e0c00117 	ldw	r3,4(fp)
   47f2c:	10800044 	addi	r2,r2,1
   47f30:	84000044 	addi	r16,r16,1
   47f34:	18ffffc4 	addi	r3,r3,-1
   47f38:	e0c00115 	stw	r3,4(fp)
   47f3c:	e0800015 	stw	r2,0(fp)
   47f40:	9c008f26 	beq	r19,r16,48180 <__svfscanf_r+0x7d8>
   47f44:	00fff416 	blt	zero,r3,47f18 <__alt_data_end+0xfffd5f18>
   47f48:	8809883a 	mov	r4,r17
   47f4c:	e00b883a 	mov	r5,fp
   47f50:	004e2ac0 	call	4e2ac <__srefill_r>
   47f54:	10008a1e 	bne	r2,zero,48180 <__svfscanf_r+0x7d8>
   47f58:	e0800017 	ldw	r2,0(fp)
   47f5c:	003fee06 	br	47f18 <__alt_data_end+0xfffd5f18>
   47f60:	008000c4 	movi	r2,3
   47f64:	80806426 	beq	r16,r2,480f8 <__svfscanf_r+0x750>
   47f68:	00800104 	movi	r2,4
   47f6c:	80bf071e 	bne	r16,r2,47b8c <__alt_data_end+0xfffd5b8c>
   47f70:	98bfffc4 	addi	r2,r19,-1
   47f74:	01005704 	movi	r4,348
   47f78:	20814736 	bltu	r4,r2,48498 <__svfscanf_r+0xaf0>
   47f7c:	0017883a 	mov	r11,zero
   47f80:	b581e014 	ori	r22,r22,1920
   47f84:	0021883a 	mov	r16,zero
   47f88:	d800a115 	stw	zero,644(sp)
   47f8c:	d800a315 	stw	zero,652(sp)
   47f90:	002b883a 	mov	r21,zero
   47f94:	d800a215 	stw	zero,648(sp)
   47f98:	dc800104 	addi	r18,sp,4
   47f9c:	000d883a 	mov	r6,zero
   47fa0:	00c01384 	movi	r3,78
   47fa4:	03810004 	movi	r14,1024
   47fa8:	033e1fc4 	movi	r12,-1921
   47fac:	03ff5fc4 	movi	r15,-641
   47fb0:	e1c00017 	ldw	r7,0(fp)
   47fb4:	39400003 	ldbu	r5,0(r7)
   47fb8:	28bff544 	addi	r2,r5,-43
   47fbc:	10803fcc 	andi	r2,r2,255
   47fc0:	1880c82e 	bgeu	r3,r2,482e4 <__svfscanf_r+0x93c>
   47fc4:	a8000226 	beq	r21,zero,47fd0 <__svfscanf_r+0x628>
   47fc8:	00bfbfc4 	movi	r2,-257
   47fcc:	b0ac703a 	and	r22,r22,r2
   47fd0:	31bfffc4 	addi	r6,r6,-1
   47fd4:	00800044 	movi	r2,1
   47fd8:	1183fd2e 	bgeu	r2,r6,48fd0 <__svfscanf_r+0x1628>
   47fdc:	80803fcc 	andi	r2,r16,255
   47fe0:	1080201c 	xori	r2,r2,128
   47fe4:	10bfe004 	addi	r2,r2,-128
   47fe8:	10ffffc4 	addi	r3,r2,-1
   47fec:	01000184 	movi	r4,6
   47ff0:	20c01036 	bltu	r4,r3,48034 <__svfscanf_r+0x68c>
   47ff4:	00c00084 	movi	r3,2
   47ff8:	1883e90e 	bge	r3,r2,48fa0 <__svfscanf_r+0x15f8>
   47ffc:	00c000c4 	movi	r3,3
   48000:	10c00c26 	beq	r2,r3,48034 <__svfscanf_r+0x68c>
   48004:	843fff04 	addi	r16,r16,-4
   48008:	84c03fcc 	andi	r19,r16,255
   4800c:	04c4303a 	nor	r2,zero,r19
   48010:	90a1883a 	add	r16,r18,r2
   48014:	94bfffc4 	addi	r18,r18,-1
   48018:	91400007 	ldb	r5,0(r18)
   4801c:	8809883a 	mov	r4,r17
   48020:	e00d883a 	mov	r6,fp
   48024:	0050b3c0 	call	50b3c <_ungetc_r>
   48028:	943ffa1e 	bne	r18,r16,48014 <__alt_data_end+0xfffd6014>
   4802c:	a27fffc4 	addi	r9,r20,-1
   48030:	4ce9c83a 	sub	r20,r9,r19
   48034:	b080400c 	andi	r2,r22,256
   48038:	10001326 	beq	r2,zero,48088 <__svfscanf_r+0x6e0>
   4803c:	b081000c 	andi	r2,r22,1024
   48040:	1003c41e 	bne	r2,zero,48f54 <__svfscanf_r+0x15ac>
   48044:	917fffc7 	ldb	r5,-1(r18)
   48048:	00801944 	movi	r2,101
   4804c:	943fffc4 	addi	r16,r18,-1
   48050:	a53fffc4 	addi	r20,r20,-1
   48054:	28800826 	beq	r5,r2,48078 <__svfscanf_r+0x6d0>
   48058:	00801144 	movi	r2,69
   4805c:	28800626 	beq	r5,r2,48078 <__svfscanf_r+0x6d0>
   48060:	8809883a 	mov	r4,r17
   48064:	e00d883a 	mov	r6,fp
   48068:	0050b3c0 	call	50b3c <_ungetc_r>
   4806c:	917fff87 	ldb	r5,-2(r18)
   48070:	943fff84 	addi	r16,r18,-2
   48074:	a53fffc4 	addi	r20,r20,-1
   48078:	8809883a 	mov	r4,r17
   4807c:	e00d883a 	mov	r6,fp
   48080:	0050b3c0 	call	50b3c <_ungetc_r>
   48084:	8025883a 	mov	r18,r16
   48088:	b080040c 	andi	r2,r22,16
   4808c:	103ef21e 	bne	r2,zero,47c58 <__alt_data_end+0xfffd5c58>
   48090:	90000005 	stb	zero,0(r18)
   48094:	b0c1800c 	andi	r3,r22,1536
   48098:	00810004 	movi	r2,1024
   4809c:	18834326 	beq	r3,r2,48dac <__svfscanf_r+0x1404>
   480a0:	d8c0a317 	ldw	r3,652(sp)
   480a4:	18032f1e 	bne	r3,zero,48d64 <__svfscanf_r+0x13bc>
   480a8:	8809883a 	mov	r4,r17
   480ac:	d9400104 	addi	r5,sp,4
   480b0:	000d883a 	mov	r6,zero
   480b4:	004e8d40 	call	4e8d4 <_strtod_r>
   480b8:	102b883a 	mov	r21,r2
   480bc:	b080004c 	andi	r2,r22,1
   480c0:	1827883a 	mov	r19,r3
   480c4:	10030526 	beq	r2,zero,48cdc <__svfscanf_r+0x1334>
   480c8:	d9409c17 	ldw	r5,624(sp)
   480cc:	28800017 	ldw	r2,0(r5)
   480d0:	29400104 	addi	r5,r5,4
   480d4:	d9409c15 	stw	r5,624(sp)
   480d8:	15400015 	stw	r21,0(r2)
   480dc:	10c00115 	stw	r3,4(r2)
   480e0:	d8809e17 	ldw	r2,632(sp)
   480e4:	dc009d17 	ldw	r16,628(sp)
   480e8:	10800044 	addi	r2,r2,1
   480ec:	d8809e15 	stw	r2,632(sp)
   480f0:	800d883a 	mov	r6,r16
   480f4:	003e6506 	br	47a8c <__alt_data_end+0xfffd5a8c>
   480f8:	98bfffc4 	addi	r2,r19,-1
   480fc:	01005704 	movi	r4,348
   48100:	2080e82e 	bgeu	r4,r2,484a4 <__svfscanf_r+0xafc>
   48104:	98ffa8c4 	addi	r3,r19,-349
   48108:	04c05744 	movi	r19,349
   4810c:	da409f17 	ldw	r9,636(sp)
   48110:	b5836014 	ori	r22,r22,3456
   48114:	0021883a 	mov	r16,zero
   48118:	dc800104 	addi	r18,sp,4
   4811c:	05401344 	movi	r21,77
   48120:	01c08004 	movi	r7,512
   48124:	01bf7fc4 	movi	r6,-513
   48128:	e2000017 	ldw	r8,0(fp)
   4812c:	41400003 	ldbu	r5,0(r8)
   48130:	28bff544 	addi	r2,r5,-43
   48134:	10803fcc 	andi	r2,r2,255
   48138:	a881d02e 	bgeu	r21,r2,4887c <__svfscanf_r+0xed4>
   4813c:	da409f15 	stw	r9,636(sp)
   48140:	b080400c 	andi	r2,r22,256
   48144:	10000926 	beq	r2,zero,4816c <__svfscanf_r+0x7c4>
   48148:	d9400104 	addi	r5,sp,4
   4814c:	2c80052e 	bgeu	r5,r18,48164 <__svfscanf_r+0x7bc>
   48150:	917fffc7 	ldb	r5,-1(r18)
   48154:	8809883a 	mov	r4,r17
   48158:	e00d883a 	mov	r6,fp
   4815c:	94bfffc4 	addi	r18,r18,-1
   48160:	0050b3c0 	call	50b3c <_ungetc_r>
   48164:	da000104 	addi	r8,sp,4
   48168:	44be4c26 	beq	r8,r18,47a9c <__alt_data_end+0xfffd5a9c>
   4816c:	b080040c 	andi	r2,r22,16
   48170:	10029326 	beq	r2,zero,48bc0 <__svfscanf_r+0x1218>
   48174:	d8c00104 	addi	r3,sp,4
   48178:	90e5c83a 	sub	r18,r18,r3
   4817c:	9421883a 	add	r16,r18,r16
   48180:	a429883a 	add	r20,r20,r16
   48184:	dc009d17 	ldw	r16,628(sp)
   48188:	800d883a 	mov	r6,r16
   4818c:	003e3f06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48190:	9800011e 	bne	r19,zero,48198 <__svfscanf_r+0x7f0>
   48194:	04ffffc4 	movi	r19,-1
   48198:	b080004c 	andi	r2,r22,1
   4819c:	b580040c 	andi	r22,r22,16
   481a0:	10003526 	beq	r2,zero,48278 <__svfscanf_r+0x8d0>
   481a4:	b002c21e 	bne	r22,zero,48cb0 <__svfscanf_r+0x1308>
   481a8:	d8c09c17 	ldw	r3,624(sp)
   481ac:	1d400017 	ldw	r21,0(r3)
   481b0:	18c00104 	addi	r3,r3,4
   481b4:	d8c09c15 	stw	r3,624(sp)
   481b8:	0021883a 	mov	r16,zero
   481bc:	dc809904 	addi	r18,sp,612
   481c0:	e0c00017 	ldw	r3,0(fp)
   481c4:	b9400017 	ldw	r5,0(r23)
   481c8:	18800003 	ldbu	r2,0(r3)
   481cc:	11003fcc 	andi	r4,r2,255
   481d0:	2909883a 	add	r4,r5,r4
   481d4:	21000003 	ldbu	r4,0(r4)
   481d8:	2100020c 	andi	r4,r4,8
   481dc:	21003fcc 	andi	r4,r4,255
   481e0:	2100201c 	xori	r4,r4,128
   481e4:	213fe004 	addi	r4,r4,-128
   481e8:	2002581e 	bne	r4,zero,48b4c <__svfscanf_r+0x11a4>
   481ec:	98025726 	beq	r19,zero,48b4c <__svfscanf_r+0x11a4>
   481f0:	01400174 	movhi	r5,5
   481f4:	295f5704 	addi	r5,r5,32092
   481f8:	29000017 	ldw	r4,0(r5)
   481fc:	813f1d26 	beq	r16,r4,47e74 <__alt_data_end+0xfffd5e74>
   48200:	e2000117 	ldw	r8,4(fp)
   48204:	18c00044 	addi	r3,r3,1
   48208:	d9000104 	addi	r4,sp,4
   4820c:	423fffc4 	addi	r8,r8,-1
   48210:	240f883a 	add	r7,r4,r16
   48214:	000b883a 	mov	r5,zero
   48218:	9009883a 	mov	r4,r18
   4821c:	01800204 	movi	r6,8
   48220:	e2000115 	stw	r8,4(fp)
   48224:	e0c00015 	stw	r3,0(fp)
   48228:	38800005 	stb	r2,0(r7)
   4822c:	84000044 	addi	r16,r16,1
   48230:	004ca640 	call	4ca64 <memset>
   48234:	a80b883a 	mov	r5,r21
   48238:	8809883a 	mov	r4,r17
   4823c:	dc800015 	stw	r18,0(sp)
   48240:	d9800104 	addi	r6,sp,4
   48244:	800f883a 	mov	r7,r16
   48248:	004c6640 	call	4c664 <_mbrtowc_r>
   4824c:	017fffc4 	movi	r5,-1
   48250:	117f0826 	beq	r2,r5,47e74 <__alt_data_end+0xfffd5e74>
   48254:	1002db1e 	bne	r2,zero,48dc4 <__svfscanf_r+0x141c>
   48258:	a8000015 	stw	zero,0(r21)
   4825c:	0009883a 	mov	r4,zero
   48260:	0002db06 	br	48dd0 <__svfscanf_r+0x1428>
   48264:	8809883a 	mov	r4,r17
   48268:	e00b883a 	mov	r5,fp
   4826c:	004e2ac0 	call	4e2ac <__srefill_r>
   48270:	103e3f26 	beq	r2,zero,47b70 <__alt_data_end+0xfffd5b70>
   48274:	003eff06 	br	47e74 <__alt_data_end+0xfffd5e74>
   48278:	b0026326 	beq	r22,zero,48c08 <__svfscanf_r+0x1260>
   4827c:	b9400017 	ldw	r5,0(r23)
   48280:	e0800017 	ldw	r2,0(fp)
   48284:	0021883a 	mov	r16,zero
   48288:	10c00003 	ldbu	r3,0(r2)
   4828c:	28c7883a 	add	r3,r5,r3
   48290:	18c00003 	ldbu	r3,0(r3)
   48294:	18c0020c 	andi	r3,r3,8
   48298:	18c03fcc 	andi	r3,r3,255
   4829c:	18c0201c 	xori	r3,r3,128
   482a0:	18ffe004 	addi	r3,r3,-128
   482a4:	183fb61e 	bne	r3,zero,48180 <__alt_data_end+0xfffd6180>
   482a8:	e0c00117 	ldw	r3,4(fp)
   482ac:	10800044 	addi	r2,r2,1
   482b0:	84000044 	addi	r16,r16,1
   482b4:	18ffffc4 	addi	r3,r3,-1
   482b8:	e0c00115 	stw	r3,4(fp)
   482bc:	e0800015 	stw	r2,0(fp)
   482c0:	9c3faf26 	beq	r19,r16,48180 <__alt_data_end+0xfffd6180>
   482c4:	00fff016 	blt	zero,r3,48288 <__alt_data_end+0xfffd6288>
   482c8:	8809883a 	mov	r4,r17
   482cc:	e00b883a 	mov	r5,fp
   482d0:	004e2ac0 	call	4e2ac <__srefill_r>
   482d4:	103faa1e 	bne	r2,zero,48180 <__alt_data_end+0xfffd6180>
   482d8:	b9400017 	ldw	r5,0(r23)
   482dc:	e0800017 	ldw	r2,0(fp)
   482e0:	003fe906 	br	48288 <__alt_data_end+0xfffd6288>
   482e4:	1085883a 	add	r2,r2,r2
   482e8:	1085883a 	add	r2,r2,r2
   482ec:	01000174 	movhi	r4,5
   482f0:	2120c004 	addi	r4,r4,-32000
   482f4:	1105883a 	add	r2,r2,r4
   482f8:	10800017 	ldw	r2,0(r2)
   482fc:	1000683a 	jmp	r2
   48300:	000485a0 	cmpeqi	zero,zero,4630
   48304:	00047fc4 	movi	zero,4607
   48308:	000485a0 	cmpeqi	zero,zero,4630
   4830c:	0004858c 	andi	zero,zero,4630
   48310:	00047fc4 	movi	zero,4607
   48314:	00048568 	cmpgeui	zero,zero,4629
   48318:	0004851c 	xori	zero,zero,4628
   4831c:	0004851c 	xori	zero,zero,4628
   48320:	0004851c 	xori	zero,zero,4628
   48324:	0004851c 	xori	zero,zero,4628
   48328:	0004851c 	xori	zero,zero,4628
   4832c:	0004851c 	xori	zero,zero,4628
   48330:	0004851c 	xori	zero,zero,4628
   48334:	0004851c 	xori	zero,zero,4628
   48338:	0004851c 	xori	zero,zero,4628
   4833c:	00047fc4 	movi	zero,4607
   48340:	00047fc4 	movi	zero,4607
   48344:	00047fc4 	movi	zero,4607
   48348:	00047fc4 	movi	zero,4607
   4834c:	00047fc4 	movi	zero,4607
   48350:	00047fc4 	movi	zero,4607
   48354:	00047fc4 	movi	zero,4607
   48358:	00048684 	movi	zero,4634
   4835c:	00047fc4 	movi	zero,4607
   48360:	00047fc4 	movi	zero,4607
   48364:	00047fc4 	movi	zero,4607
   48368:	00048648 	cmpgei	zero,zero,4633
   4836c:	00048694 	movui	zero,4634
   48370:	00047fc4 	movi	zero,4607
   48374:	00047fc4 	movi	zero,4607
   48378:	00048620 	cmpeqi	zero,zero,4632
   4837c:	00047fc4 	movi	zero,4607
   48380:	00047fc4 	movi	zero,4607
   48384:	00047fc4 	movi	zero,4607
   48388:	00047fc4 	movi	zero,4607
   4838c:	000485ec 	andhi	zero,zero,4631
   48390:	00047fc4 	movi	zero,4607
   48394:	00047fc4 	movi	zero,4607
   48398:	00047fc4 	movi	zero,4607
   4839c:	00047fc4 	movi	zero,4607
   483a0:	00047fc4 	movi	zero,4607
   483a4:	000485d0 	cmplti	zero,zero,4631
   483a8:	00047fc4 	movi	zero,4607
   483ac:	00047fc4 	movi	zero,4607
   483b0:	00047fc4 	movi	zero,4607
   483b4:	00047fc4 	movi	zero,4607
   483b8:	000485b4 	movhi	zero,4630
   483bc:	00047fc4 	movi	zero,4607
   483c0:	00047fc4 	movi	zero,4607
   483c4:	00047fc4 	movi	zero,4607
   483c8:	00047fc4 	movi	zero,4607
   483cc:	00047fc4 	movi	zero,4607
   483d0:	00047fc4 	movi	zero,4607
   483d4:	00047fc4 	movi	zero,4607
   483d8:	00048684 	movi	zero,4634
   483dc:	00047fc4 	movi	zero,4607
   483e0:	00047fc4 	movi	zero,4607
   483e4:	00047fc4 	movi	zero,4607
   483e8:	00048648 	cmpgei	zero,zero,4633
   483ec:	00048694 	movui	zero,4634
   483f0:	00047fc4 	movi	zero,4607
   483f4:	00047fc4 	movi	zero,4607
   483f8:	00048620 	cmpeqi	zero,zero,4632
   483fc:	00047fc4 	movi	zero,4607
   48400:	00047fc4 	movi	zero,4607
   48404:	00047fc4 	movi	zero,4607
   48408:	00047fc4 	movi	zero,4607
   4840c:	000485ec 	andhi	zero,zero,4631
   48410:	00047fc4 	movi	zero,4607
   48414:	00047fc4 	movi	zero,4607
   48418:	00047fc4 	movi	zero,4607
   4841c:	00047fc4 	movi	zero,4607
   48420:	00047fc4 	movi	zero,4607
   48424:	000485d0 	cmplti	zero,zero,4631
   48428:	00047fc4 	movi	zero,4607
   4842c:	00047fc4 	movi	zero,4607
   48430:	00047fc4 	movi	zero,4607
   48434:	00047fc4 	movi	zero,4607
   48438:	000485b4 	movhi	zero,4630
   4843c:	b580040c 	andi	r22,r22,16
   48440:	b0023726 	beq	r22,zero,48d20 <__svfscanf_r+0x1378>
   48444:	0021883a 	mov	r16,zero
   48448:	e0800117 	ldw	r2,4(fp)
   4844c:	14c2810e 	bge	r2,r19,48e54 <__svfscanf_r+0x14ac>
   48450:	e0c00017 	ldw	r3,0(fp)
   48454:	8809883a 	mov	r4,r17
   48458:	e00b883a 	mov	r5,fp
   4845c:	1887883a 	add	r3,r3,r2
   48460:	e0c00015 	stw	r3,0(fp)
   48464:	80a1883a 	add	r16,r16,r2
   48468:	98a7c83a 	sub	r19,r19,r2
   4846c:	004e2ac0 	call	4e2ac <__srefill_r>
   48470:	103ff526 	beq	r2,zero,48448 <__alt_data_end+0xfffd6448>
   48474:	803f421e 	bne	r16,zero,48180 <__alt_data_end+0xfffd6180>
   48478:	003e7e06 	br	47e74 <__alt_data_end+0xfffd5e74>
   4847c:	8809883a 	mov	r4,r17
   48480:	e00b883a 	mov	r5,fp
   48484:	004e2ac0 	call	4e2ac <__srefill_r>
   48488:	103df126 	beq	r2,zero,47c50 <__alt_data_end+0xfffd5c50>
   4848c:	803e791e 	bne	r16,zero,47e74 <__alt_data_end+0xfffd5e74>
   48490:	903f1326 	beq	r18,zero,480e0 <__alt_data_end+0xfffd60e0>
   48494:	003df006 	br	47c58 <__alt_data_end+0xfffd5c58>
   48498:	9affa8c4 	addi	r11,r19,-349
   4849c:	04c05744 	movi	r19,349
   484a0:	003eb706 	br	47f80 <__alt_data_end+0xfffd5f80>
   484a4:	0007883a 	mov	r3,zero
   484a8:	003f1806 	br	4810c <__alt_data_end+0xfffd610c>
   484ac:	d8c09c17 	ldw	r3,624(sp)
   484b0:	e0800017 	ldw	r2,0(fp)
   484b4:	dd405884 	addi	r21,sp,354
   484b8:	1c000017 	ldw	r16,0(r3)
   484bc:	1d800104 	addi	r22,r3,4
   484c0:	8025883a 	mov	r18,r16
   484c4:	10c00003 	ldbu	r3,0(r2)
   484c8:	a8c7883a 	add	r3,r21,r3
   484cc:	18c00007 	ldb	r3,0(r3)
   484d0:	1801a726 	beq	r3,zero,48b70 <__svfscanf_r+0x11c8>
   484d4:	e0c00117 	ldw	r3,4(fp)
   484d8:	10800044 	addi	r2,r2,1
   484dc:	94800044 	addi	r18,r18,1
   484e0:	18ffffc4 	addi	r3,r3,-1
   484e4:	e0c00115 	stw	r3,4(fp)
   484e8:	10ffffc3 	ldbu	r3,-1(r2)
   484ec:	9cffffc4 	addi	r19,r19,-1
   484f0:	90ffffc5 	stb	r3,-1(r18)
   484f4:	e0800015 	stw	r2,0(fp)
   484f8:	98019d26 	beq	r19,zero,48b70 <__svfscanf_r+0x11c8>
   484fc:	e0c00117 	ldw	r3,4(fp)
   48500:	00fff016 	blt	zero,r3,484c4 <__alt_data_end+0xfffd64c4>
   48504:	8809883a 	mov	r4,r17
   48508:	e00b883a 	mov	r5,fp
   4850c:	004e2ac0 	call	4e2ac <__srefill_r>
   48510:	1001961e 	bne	r2,zero,48b6c <__svfscanf_r+0x11c4>
   48514:	e0800017 	ldw	r2,0(fp)
   48518:	003fea06 	br	484c4 <__alt_data_end+0xfffd64c4>
   4851c:	80803fcc 	andi	r2,r16,255
   48520:	1080201c 	xori	r2,r2,128
   48524:	10bfe004 	addi	r2,r2,-128
   48528:	3085883a 	add	r2,r6,r2
   4852c:	103ea51e 	bne	r2,zero,47fc4 <__alt_data_end+0xfffd5fc4>
   48530:	00bf9fc4 	movi	r2,-385
   48534:	b0ac703a 	and	r22,r22,r2
   48538:	91400005 	stb	r5,0(r18)
   4853c:	94800044 	addi	r18,r18,1
   48540:	e0800117 	ldw	r2,4(fp)
   48544:	9cffffc4 	addi	r19,r19,-1
   48548:	a5000044 	addi	r20,r20,1
   4854c:	10bfffc4 	addi	r2,r2,-1
   48550:	e0800115 	stw	r2,4(fp)
   48554:	0081520e 	bge	zero,r2,48aa0 <__svfscanf_r+0x10f8>
   48558:	39c00044 	addi	r7,r7,1
   4855c:	e1c00015 	stw	r7,0(fp)
   48560:	983e931e 	bne	r19,zero,47fb0 <__alt_data_end+0xfffd5fb0>
   48564:	003e9706 	br	47fc4 <__alt_data_end+0xfffd5fc4>
   48568:	b080400c 	andi	r2,r22,256
   4856c:	103feb26 	beq	r2,zero,4851c <__alt_data_end+0xfffd651c>
   48570:	00bfdfc4 	movi	r2,-129
   48574:	b0ac703a 	and	r22,r22,r2
   48578:	ad400044 	addi	r21,r21,1
   4857c:	583ff026 	beq	r11,zero,48540 <__alt_data_end+0xfffd6540>
   48580:	5affffc4 	addi	r11,r11,-1
   48584:	9cc00044 	addi	r19,r19,1
   48588:	003fed06 	br	48540 <__alt_data_end+0xfffd6540>
   4858c:	b080800c 	andi	r2,r22,512
   48590:	103e8c26 	beq	r2,zero,47fc4 <__alt_data_end+0xfffd5fc4>
   48594:	b3ec703a 	and	r22,r22,r15
   48598:	dd40a215 	stw	r21,648(sp)
   4859c:	003fe606 	br	48538 <__alt_data_end+0xfffd6538>
   485a0:	b080200c 	andi	r2,r22,128
   485a4:	103e8726 	beq	r2,zero,47fc4 <__alt_data_end+0xfffd5fc4>
   485a8:	00bfdfc4 	movi	r2,-129
   485ac:	b0ac703a 	and	r22,r22,r2
   485b0:	003fe106 	br	48538 <__alt_data_end+0xfffd6538>
   485b4:	81003fcc 	andi	r4,r16,255
   485b8:	2100201c 	xori	r4,r4,128
   485bc:	213fe004 	addi	r4,r4,-128
   485c0:	008001c4 	movi	r2,7
   485c4:	20be7f1e 	bne	r4,r2,47fc4 <__alt_data_end+0xfffd5fc4>
   485c8:	04000204 	movi	r16,8
   485cc:	003fda06 	br	48538 <__alt_data_end+0xfffd6538>
   485d0:	81003fcc 	andi	r4,r16,255
   485d4:	2100201c 	xori	r4,r4,128
   485d8:	213fe004 	addi	r4,r4,-128
   485dc:	00800184 	movi	r2,6
   485e0:	20be781e 	bne	r4,r2,47fc4 <__alt_data_end+0xfffd5fc4>
   485e4:	040001c4 	movi	r16,7
   485e8:	003fd306 	br	48538 <__alt_data_end+0xfffd6538>
   485ec:	3001681e 	bne	r6,zero,48b90 <__svfscanf_r+0x11e8>
   485f0:	b101c00c 	andi	r4,r22,1792
   485f4:	0081c004 	movi	r2,1792
   485f8:	20820126 	beq	r4,r2,48e00 <__svfscanf_r+0x1458>
   485fc:	80803fcc 	andi	r2,r16,255
   48600:	1080201c 	xori	r2,r2,128
   48604:	10bfe004 	addi	r2,r2,-128
   48608:	01000044 	movi	r4,1
   4860c:	11000226 	beq	r2,r4,48618 <__svfscanf_r+0xc70>
   48610:	01000104 	movi	r4,4
   48614:	113e6b1e 	bne	r2,r4,47fc4 <__alt_data_end+0xfffd5fc4>
   48618:	84000044 	addi	r16,r16,1
   4861c:	003fc606 	br	48538 <__alt_data_end+0xfffd6538>
   48620:	80803fcc 	andi	r2,r16,255
   48624:	1080201c 	xori	r2,r2,128
   48628:	10bfe004 	addi	r2,r2,-128
   4862c:	10015c1e 	bne	r2,zero,48ba0 <__svfscanf_r+0x11f8>
   48630:	b101c00c 	andi	r4,r22,1792
   48634:	0081c004 	movi	r2,1792
   48638:	20be621e 	bne	r4,r2,47fc4 <__alt_data_end+0xfffd5fc4>
   4863c:	b32c703a 	and	r22,r22,r12
   48640:	04000044 	movi	r16,1
   48644:	003fbc06 	br	48538 <__alt_data_end+0xfffd6538>
   48648:	b081400c 	andi	r2,r22,1280
   4864c:	13800326 	beq	r2,r14,4865c <__svfscanf_r+0xcb4>
   48650:	b081000c 	andi	r2,r22,1024
   48654:	103e5b26 	beq	r2,zero,47fc4 <__alt_data_end+0xfffd5fc4>
   48658:	a83e5d26 	beq	r21,zero,47fd0 <__alt_data_end+0xfffd5fd0>
   4865c:	b080800c 	andi	r2,r22,512
   48660:	1000041e 	bne	r2,zero,48674 <__svfscanf_r+0xccc>
   48664:	da00a217 	ldw	r8,648(sp)
   48668:	dc80a115 	stw	r18,644(sp)
   4866c:	aa2bc83a 	sub	r21,r21,r8
   48670:	dd40a315 	stw	r21,652(sp)
   48674:	b32c703a 	and	r22,r22,r12
   48678:	b5806014 	ori	r22,r22,384
   4867c:	002b883a 	mov	r21,zero
   48680:	003fad06 	br	48538 <__alt_data_end+0xfffd6538>
   48684:	00800044 	movi	r2,1
   48688:	30be4e1e 	bne	r6,r2,47fc4 <__alt_data_end+0xfffd5fc4>
   4868c:	01800084 	movi	r6,2
   48690:	003fa906 	br	48538 <__alt_data_end+0xfffd6538>
   48694:	81003fcc 	andi	r4,r16,255
   48698:	2100201c 	xori	r4,r4,128
   4869c:	213fe004 	addi	r4,r4,-128
   486a0:	00800084 	movi	r2,2
   486a4:	20be471e 	bne	r4,r2,47fc4 <__alt_data_end+0xfffd5fc4>
   486a8:	040000c4 	movi	r16,3
   486ac:	003fa206 	br	48538 <__alt_data_end+0xfffd6538>
   486b0:	b5800054 	ori	r22,r22,1
   486b4:	003d2606 	br	47b50 <__alt_data_end+0xfffd5b50>
   486b8:	02000174 	movhi	r8,5
   486bc:	42010404 	addi	r8,r8,1040
   486c0:	da00a015 	stw	r8,640(sp)
   486c4:	02000284 	movi	r8,10
   486c8:	d8c09d15 	stw	r3,628(sp)
   486cc:	da009f15 	stw	r8,636(sp)
   486d0:	040000c4 	movi	r16,3
   486d4:	003d2406 	br	47b68 <__alt_data_end+0xfffd5b68>
   486d8:	d8c09d15 	stw	r3,628(sp)
   486dc:	1821883a 	mov	r16,r3
   486e0:	003cfd06 	br	47ad8 <__alt_data_end+0xfffd5ad8>
   486e4:	d8c09d15 	stw	r3,628(sp)
   486e8:	b5800054 	ori	r22,r22,1
   486ec:	003d1806 	br	47b50 <__alt_data_end+0xfffd5b50>
   486f0:	d8c09d15 	stw	r3,628(sp)
   486f4:	04000104 	movi	r16,4
   486f8:	003d1b06 	br	47b68 <__alt_data_end+0xfffd5b68>
   486fc:	81400043 	ldbu	r5,1(r16)
   48700:	b5800094 	ori	r22,r22,2
   48704:	1821883a 	mov	r16,r3
   48708:	003d0606 	br	47b24 <__alt_data_end+0xfffd5b24>
   4870c:	d8c09d15 	stw	r3,628(sp)
   48710:	b5800054 	ori	r22,r22,1
   48714:	02000174 	movhi	r8,5
   48718:	42010404 	addi	r8,r8,1040
   4871c:	da00a015 	stw	r8,640(sp)
   48720:	02000204 	movi	r8,8
   48724:	da009f15 	stw	r8,636(sp)
   48728:	040000c4 	movi	r16,3
   4872c:	003d0e06 	br	47b68 <__alt_data_end+0xfffd5b68>
   48730:	81400043 	ldbu	r5,1(r16)
   48734:	b5800414 	ori	r22,r22,16
   48738:	1821883a 	mov	r16,r3
   4873c:	003cf906 	br	47b24 <__alt_data_end+0xfffd5b24>
   48740:	28803fcc 	andi	r2,r5,255
   48744:	9cc002a4 	muli	r19,r19,10
   48748:	1080201c 	xori	r2,r2,128
   4874c:	10bfe004 	addi	r2,r2,-128
   48750:	98a7883a 	add	r19,r19,r2
   48754:	81400043 	ldbu	r5,1(r16)
   48758:	9cfff404 	addi	r19,r19,-48
   4875c:	1821883a 	mov	r16,r3
   48760:	003cf006 	br	47b24 <__alt_data_end+0xfffd5b24>
   48764:	d8c09d15 	stw	r3,628(sp)
   48768:	b5808014 	ori	r22,r22,512
   4876c:	02000174 	movhi	r8,5
   48770:	42010404 	addi	r8,r8,1040
   48774:	da00a015 	stw	r8,640(sp)
   48778:	02000404 	movi	r8,16
   4877c:	da009f15 	stw	r8,636(sp)
   48780:	040000c4 	movi	r16,3
   48784:	003cf806 	br	47b68 <__alt_data_end+0xfffd5b68>
   48788:	d9005884 	addi	r4,sp,354
   4878c:	180b883a 	mov	r5,r3
   48790:	d8c09d15 	stw	r3,628(sp)
   48794:	004e5600 	call	4e560 <__sccl>
   48798:	d8809d15 	stw	r2,628(sp)
   4879c:	b5801014 	ori	r22,r22,64
   487a0:	04000044 	movi	r16,1
   487a4:	003cf006 	br	47b68 <__alt_data_end+0xfffd5b68>
   487a8:	d8c09d15 	stw	r3,628(sp)
   487ac:	b5801014 	ori	r22,r22,64
   487b0:	0021883a 	mov	r16,zero
   487b4:	003cec06 	br	47b68 <__alt_data_end+0xfffd5b68>
   487b8:	d8c09d15 	stw	r3,628(sp)
   487bc:	003ce406 	br	47b50 <__alt_data_end+0xfffd5b50>
   487c0:	81400043 	ldbu	r5,1(r16)
   487c4:	b5800114 	ori	r22,r22,4
   487c8:	1821883a 	mov	r16,r3
   487cc:	003cd506 	br	47b24 <__alt_data_end+0xfffd5b24>
   487d0:	02000174 	movhi	r8,5
   487d4:	423f9a04 	addi	r8,r8,-408
   487d8:	d8c09d15 	stw	r3,628(sp)
   487dc:	da00a015 	stw	r8,640(sp)
   487e0:	d8009f15 	stw	zero,636(sp)
   487e4:	040000c4 	movi	r16,3
   487e8:	003cdf06 	br	47b68 <__alt_data_end+0xfffd5b68>
   487ec:	81400043 	ldbu	r5,1(r16)
   487f0:	28803fcc 	andi	r2,r5,255
   487f4:	1080201c 	xori	r2,r2,128
   487f8:	10bfe004 	addi	r2,r2,-128
   487fc:	11c18326 	beq	r2,r7,48e0c <__svfscanf_r+0x1464>
   48800:	b5800054 	ori	r22,r22,1
   48804:	1821883a 	mov	r16,r3
   48808:	003cc606 	br	47b24 <__alt_data_end+0xfffd5b24>
   4880c:	d8c09d15 	stw	r3,628(sp)
   48810:	b080040c 	andi	r2,r22,16
   48814:	103d101e 	bne	r2,zero,47c58 <__alt_data_end+0xfffd5c58>
   48818:	b080010c 	andi	r2,r22,4
   4881c:	10017f26 	beq	r2,zero,48e1c <__svfscanf_r+0x1474>
   48820:	d8c09c17 	ldw	r3,624(sp)
   48824:	dc009d17 	ldw	r16,628(sp)
   48828:	18800017 	ldw	r2,0(r3)
   4882c:	18c00104 	addi	r3,r3,4
   48830:	d8c09c15 	stw	r3,624(sp)
   48834:	1500000d 	sth	r20,0(r2)
   48838:	800d883a 	mov	r6,r16
   4883c:	003c9306 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48840:	d8c09d15 	stw	r3,628(sp)
   48844:	b5808814 	ori	r22,r22,544
   48848:	003fc806 	br	4876c <__alt_data_end+0xfffd676c>
   4884c:	d8c09d15 	stw	r3,628(sp)
   48850:	003fb006 	br	48714 <__alt_data_end+0xfffd6714>
   48854:	d8c09d15 	stw	r3,628(sp)
   48858:	04000084 	movi	r16,2
   4885c:	003cc206 	br	47b68 <__alt_data_end+0xfffd5b68>
   48860:	023fff84 	movi	r8,-2
   48864:	123cf826 	beq	r2,r8,47c48 <__alt_data_end+0xfffd5c48>
   48868:	a429883a 	add	r20,r20,r16
   4886c:	9cffffc4 	addi	r19,r19,-1
   48870:	903cf326 	beq	r18,zero,47c40 <__alt_data_end+0xfffd5c40>
   48874:	0021883a 	mov	r16,zero
   48878:	003cf306 	br	47c48 <__alt_data_end+0xfffd5c48>
   4887c:	1085883a 	add	r2,r2,r2
   48880:	1085883a 	add	r2,r2,r2
   48884:	01000174 	movhi	r4,5
   48888:	21222604 	addi	r4,r4,-30568
   4888c:	1105883a 	add	r2,r2,r4
   48890:	10800017 	ldw	r2,0(r2)
   48894:	1000683a 	jmp	r2
   48898:	00048a8c 	andi	zero,zero,4650
   4889c:	0004813c 	xorhi	zero,zero,4612
   488a0:	00048a8c 	andi	zero,zero,4650
   488a4:	0004813c 	xorhi	zero,zero,4612
   488a8:	0004813c 	xorhi	zero,zero,4612
   488ac:	00048a64 	muli	zero,zero,4649
   488b0:	00048a44 	movi	zero,4649
   488b4:	00048a44 	movi	zero,4649
   488b8:	00048a44 	movi	zero,4649
   488bc:	00048a44 	movi	zero,4649
   488c0:	00048a44 	movi	zero,4649
   488c4:	00048a44 	movi	zero,4649
   488c8:	00048a44 	movi	zero,4649
   488cc:	00048a24 	muli	zero,zero,4648
   488d0:	00048a24 	muli	zero,zero,4648
   488d4:	0004813c 	xorhi	zero,zero,4612
   488d8:	0004813c 	xorhi	zero,zero,4612
   488dc:	0004813c 	xorhi	zero,zero,4612
   488e0:	0004813c 	xorhi	zero,zero,4612
   488e4:	0004813c 	xorhi	zero,zero,4612
   488e8:	0004813c 	xorhi	zero,zero,4612
   488ec:	0004813c 	xorhi	zero,zero,4612
   488f0:	00048a10 	cmplti	zero,zero,4648
   488f4:	00048a10 	cmplti	zero,zero,4648
   488f8:	00048a10 	cmplti	zero,zero,4648
   488fc:	00048a10 	cmplti	zero,zero,4648
   48900:	00048a10 	cmplti	zero,zero,4648
   48904:	00048a10 	cmplti	zero,zero,4648
   48908:	0004813c 	xorhi	zero,zero,4612
   4890c:	0004813c 	xorhi	zero,zero,4612
   48910:	0004813c 	xorhi	zero,zero,4612
   48914:	0004813c 	xorhi	zero,zero,4612
   48918:	0004813c 	xorhi	zero,zero,4612
   4891c:	0004813c 	xorhi	zero,zero,4612
   48920:	0004813c 	xorhi	zero,zero,4612
   48924:	0004813c 	xorhi	zero,zero,4612
   48928:	0004813c 	xorhi	zero,zero,4612
   4892c:	0004813c 	xorhi	zero,zero,4612
   48930:	0004813c 	xorhi	zero,zero,4612
   48934:	0004813c 	xorhi	zero,zero,4612
   48938:	0004813c 	xorhi	zero,zero,4612
   4893c:	0004813c 	xorhi	zero,zero,4612
   48940:	0004813c 	xorhi	zero,zero,4612
   48944:	0004813c 	xorhi	zero,zero,4612
   48948:	0004813c 	xorhi	zero,zero,4612
   4894c:	000489d0 	cmplti	zero,zero,4647
   48950:	0004813c 	xorhi	zero,zero,4612
   48954:	0004813c 	xorhi	zero,zero,4612
   48958:	0004813c 	xorhi	zero,zero,4612
   4895c:	0004813c 	xorhi	zero,zero,4612
   48960:	0004813c 	xorhi	zero,zero,4612
   48964:	0004813c 	xorhi	zero,zero,4612
   48968:	0004813c 	xorhi	zero,zero,4612
   4896c:	0004813c 	xorhi	zero,zero,4612
   48970:	00048a10 	cmplti	zero,zero,4648
   48974:	00048a10 	cmplti	zero,zero,4648
   48978:	00048a10 	cmplti	zero,zero,4648
   4897c:	00048a10 	cmplti	zero,zero,4648
   48980:	00048a10 	cmplti	zero,zero,4648
   48984:	00048a10 	cmplti	zero,zero,4648
   48988:	0004813c 	xorhi	zero,zero,4612
   4898c:	0004813c 	xorhi	zero,zero,4612
   48990:	0004813c 	xorhi	zero,zero,4612
   48994:	0004813c 	xorhi	zero,zero,4612
   48998:	0004813c 	xorhi	zero,zero,4612
   4899c:	0004813c 	xorhi	zero,zero,4612
   489a0:	0004813c 	xorhi	zero,zero,4612
   489a4:	0004813c 	xorhi	zero,zero,4612
   489a8:	0004813c 	xorhi	zero,zero,4612
   489ac:	0004813c 	xorhi	zero,zero,4612
   489b0:	0004813c 	xorhi	zero,zero,4612
   489b4:	0004813c 	xorhi	zero,zero,4612
   489b8:	0004813c 	xorhi	zero,zero,4612
   489bc:	0004813c 	xorhi	zero,zero,4612
   489c0:	0004813c 	xorhi	zero,zero,4612
   489c4:	0004813c 	xorhi	zero,zero,4612
   489c8:	0004813c 	xorhi	zero,zero,4612
   489cc:	000489d0 	cmplti	zero,zero,4647
   489d0:	b081800c 	andi	r2,r22,1536
   489d4:	11fdd91e 	bne	r2,r7,4813c <__alt_data_end+0xfffd613c>
   489d8:	b1ac703a 	and	r22,r22,r6
   489dc:	b5814014 	ori	r22,r22,1280
   489e0:	02400404 	movi	r9,16
   489e4:	91400005 	stb	r5,0(r18)
   489e8:	94800044 	addi	r18,r18,1
   489ec:	e0800117 	ldw	r2,4(fp)
   489f0:	10bfffc4 	addi	r2,r2,-1
   489f4:	e0800115 	stw	r2,4(fp)
   489f8:	00803b0e 	bge	zero,r2,48ae8 <__svfscanf_r+0x1140>
   489fc:	42000044 	addi	r8,r8,1
   48a00:	e2000015 	stw	r8,0(fp)
   48a04:	9cffffc4 	addi	r19,r19,-1
   48a08:	983dc71e 	bne	r19,zero,48128 <__alt_data_end+0xfffd6128>
   48a0c:	003dcb06 	br	4813c <__alt_data_end+0xfffd613c>
   48a10:	00800284 	movi	r2,10
   48a14:	127dc90e 	bge	r2,r9,4813c <__alt_data_end+0xfffd613c>
   48a18:	00bd1fc4 	movi	r2,-2945
   48a1c:	b0ac703a 	and	r22,r22,r2
   48a20:	003ff006 	br	489e4 <__alt_data_end+0xfffd69e4>
   48a24:	4a53883a 	add	r9,r9,r9
   48a28:	01000174 	movhi	r4,5
   48a2c:	21175984 	addi	r4,r4,23910
   48a30:	2245883a 	add	r2,r4,r9
   48a34:	1240000f 	ldh	r9,0(r2)
   48a38:	00800204 	movi	r2,8
   48a3c:	127ff616 	blt	r2,r9,48a18 <__alt_data_end+0xfffd6a18>
   48a40:	003dbe06 	br	4813c <__alt_data_end+0xfffd613c>
   48a44:	4a53883a 	add	r9,r9,r9
   48a48:	01000174 	movhi	r4,5
   48a4c:	21175984 	addi	r4,r4,23910
   48a50:	2245883a 	add	r2,r4,r9
   48a54:	1240000f 	ldh	r9,0(r2)
   48a58:	00bd1fc4 	movi	r2,-2945
   48a5c:	b0ac703a 	and	r22,r22,r2
   48a60:	003fe006 	br	489e4 <__alt_data_end+0xfffd69e4>
   48a64:	b082000c 	andi	r2,r22,2048
   48a68:	103fde26 	beq	r2,zero,489e4 <__alt_data_end+0xfffd69e4>
   48a6c:	4800021e 	bne	r9,zero,48a78 <__svfscanf_r+0x10d0>
   48a70:	b5808014 	ori	r22,r22,512
   48a74:	02400204 	movi	r9,8
   48a78:	b081000c 	andi	r2,r22,1024
   48a7c:	10008e26 	beq	r2,zero,48cb8 <__svfscanf_r+0x1310>
   48a80:	00be9fc4 	movi	r2,-1409
   48a84:	b0ac703a 	and	r22,r22,r2
   48a88:	003fd606 	br	489e4 <__alt_data_end+0xfffd69e4>
   48a8c:	b080200c 	andi	r2,r22,128
   48a90:	103daa26 	beq	r2,zero,4813c <__alt_data_end+0xfffd613c>
   48a94:	00bfdfc4 	movi	r2,-129
   48a98:	b0ac703a 	and	r22,r22,r2
   48a9c:	003fd106 	br	489e4 <__alt_data_end+0xfffd69e4>
   48aa0:	8809883a 	mov	r4,r17
   48aa4:	e00b883a 	mov	r5,fp
   48aa8:	d8c0a915 	stw	r3,676(sp)
   48aac:	d980a815 	stw	r6,672(sp)
   48ab0:	dac0a715 	stw	r11,668(sp)
   48ab4:	db00a515 	stw	r12,660(sp)
   48ab8:	db80a415 	stw	r14,656(sp)
   48abc:	dbc0a615 	stw	r15,664(sp)
   48ac0:	004e2ac0 	call	4e2ac <__srefill_r>
   48ac4:	d8c0a917 	ldw	r3,676(sp)
   48ac8:	d980a817 	ldw	r6,672(sp)
   48acc:	dac0a717 	ldw	r11,668(sp)
   48ad0:	db00a517 	ldw	r12,660(sp)
   48ad4:	db80a417 	ldw	r14,656(sp)
   48ad8:	dbc0a617 	ldw	r15,664(sp)
   48adc:	103d391e 	bne	r2,zero,47fc4 <__alt_data_end+0xfffd5fc4>
   48ae0:	983d331e 	bne	r19,zero,47fb0 <__alt_data_end+0xfffd5fb0>
   48ae4:	003d3706 	br	47fc4 <__alt_data_end+0xfffd5fc4>
   48ae8:	8809883a 	mov	r4,r17
   48aec:	e00b883a 	mov	r5,fp
   48af0:	d8c0a915 	stw	r3,676(sp)
   48af4:	d980a815 	stw	r6,672(sp)
   48af8:	d9c0a415 	stw	r7,656(sp)
   48afc:	da40a515 	stw	r9,660(sp)
   48b00:	004e2ac0 	call	4e2ac <__srefill_r>
   48b04:	d8c0a917 	ldw	r3,676(sp)
   48b08:	d980a817 	ldw	r6,672(sp)
   48b0c:	d9c0a417 	ldw	r7,656(sp)
   48b10:	da40a517 	ldw	r9,660(sp)
   48b14:	103fbb26 	beq	r2,zero,48a04 <__alt_data_end+0xfffd6a04>
   48b18:	003d8806 	br	4813c <__alt_data_end+0xfffd613c>
   48b1c:	a429883a 	add	r20,r20,r16
   48b20:	9cffffc4 	addi	r19,r19,-1
   48b24:	b000f41e 	bne	r22,zero,48ef8 <__svfscanf_r+0x1550>
   48b28:	ad400104 	addi	r21,r21,4
   48b2c:	0021883a 	mov	r16,zero
   48b30:	e0800117 	ldw	r2,4(fp)
   48b34:	00bda216 	blt	zero,r2,481c0 <__alt_data_end+0xfffd61c0>
   48b38:	8809883a 	mov	r4,r17
   48b3c:	e00b883a 	mov	r5,fp
   48b40:	004e2ac0 	call	4e2ac <__srefill_r>
   48b44:	103d9e26 	beq	r2,zero,481c0 <__alt_data_end+0xfffd61c0>
   48b48:	803cca1e 	bne	r16,zero,47e74 <__alt_data_end+0xfffd5e74>
   48b4c:	b03c421e 	bne	r22,zero,47c58 <__alt_data_end+0xfffd5c58>
   48b50:	d8809e17 	ldw	r2,632(sp)
   48b54:	dc009d17 	ldw	r16,628(sp)
   48b58:	a8000015 	stw	zero,0(r21)
   48b5c:	10800044 	addi	r2,r2,1
   48b60:	d8809e15 	stw	r2,632(sp)
   48b64:	800d883a 	mov	r6,r16
   48b68:	003bc806 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48b6c:	84bcc126 	beq	r16,r18,47e74 <__alt_data_end+0xfffd5e74>
   48b70:	9421c83a 	sub	r16,r18,r16
   48b74:	803bc926 	beq	r16,zero,47a9c <__alt_data_end+0xfffd5a9c>
   48b78:	d8809e17 	ldw	r2,632(sp)
   48b7c:	90000005 	stb	zero,0(r18)
   48b80:	dd809c15 	stw	r22,624(sp)
   48b84:	10800044 	addi	r2,r2,1
   48b88:	d8809e15 	stw	r2,632(sp)
   48b8c:	003d7c06 	br	48180 <__alt_data_end+0xfffd6180>
   48b90:	00800084 	movi	r2,2
   48b94:	30be991e 	bne	r6,r2,485fc <__alt_data_end+0xfffd65fc>
   48b98:	018000c4 	movi	r6,3
   48b9c:	003e6606 	br	48538 <__alt_data_end+0xfffd6538>
   48ba0:	010000c4 	movi	r4,3
   48ba4:	113e9c26 	beq	r2,r4,48618 <__alt_data_end+0xfffd6618>
   48ba8:	01000144 	movi	r4,5
   48bac:	113d051e 	bne	r2,r4,47fc4 <__alt_data_end+0xfffd5fc4>
   48bb0:	84000044 	addi	r16,r16,1
   48bb4:	003e6006 	br	48538 <__alt_data_end+0xfffd6538>
   48bb8:	002d883a 	mov	r22,zero
   48bbc:	003bfd06 	br	47bb4 <__alt_data_end+0xfffd5bb4>
   48bc0:	d9c09f17 	ldw	r7,636(sp)
   48bc4:	da00a017 	ldw	r8,640(sp)
   48bc8:	8809883a 	mov	r4,r17
   48bcc:	d9400104 	addi	r5,sp,4
   48bd0:	000d883a 	mov	r6,zero
   48bd4:	90000005 	stb	zero,0(r18)
   48bd8:	403ee83a 	callr	r8
   48bdc:	b0c0080c 	andi	r3,r22,32
   48be0:	18004726 	beq	r3,zero,48d00 <__svfscanf_r+0x1358>
   48be4:	d9009c17 	ldw	r4,624(sp)
   48be8:	20c00017 	ldw	r3,0(r4)
   48bec:	21000104 	addi	r4,r4,4
   48bf0:	d9009c15 	stw	r4,624(sp)
   48bf4:	18800015 	stw	r2,0(r3)
   48bf8:	d8809e17 	ldw	r2,632(sp)
   48bfc:	10800044 	addi	r2,r2,1
   48c00:	d8809e15 	stw	r2,632(sp)
   48c04:	003d5b06 	br	48174 <__alt_data_end+0xfffd6174>
   48c08:	d8c09c17 	ldw	r3,624(sp)
   48c0c:	e0800017 	ldw	r2,0(fp)
   48c10:	1c800017 	ldw	r18,0(r3)
   48c14:	1d400104 	addi	r21,r3,4
   48c18:	9021883a 	mov	r16,r18
   48c1c:	10c00003 	ldbu	r3,0(r2)
   48c20:	b9400017 	ldw	r5,0(r23)
   48c24:	28c7883a 	add	r3,r5,r3
   48c28:	18c00003 	ldbu	r3,0(r3)
   48c2c:	18c0020c 	andi	r3,r3,8
   48c30:	18c03fcc 	andi	r3,r3,255
   48c34:	18c0201c 	xori	r3,r3,128
   48c38:	18ffe004 	addi	r3,r3,-128
   48c3c:	1800121e 	bne	r3,zero,48c88 <__svfscanf_r+0x12e0>
   48c40:	e0c00117 	ldw	r3,4(fp)
   48c44:	10800044 	addi	r2,r2,1
   48c48:	84000044 	addi	r16,r16,1
   48c4c:	18ffffc4 	addi	r3,r3,-1
   48c50:	e0c00115 	stw	r3,4(fp)
   48c54:	10ffffc3 	ldbu	r3,-1(r2)
   48c58:	9cffffc4 	addi	r19,r19,-1
   48c5c:	80ffffc5 	stb	r3,-1(r16)
   48c60:	e0800015 	stw	r2,0(fp)
   48c64:	98000826 	beq	r19,zero,48c88 <__svfscanf_r+0x12e0>
   48c68:	e0c00117 	ldw	r3,4(fp)
   48c6c:	00ffeb16 	blt	zero,r3,48c1c <__alt_data_end+0xfffd6c1c>
   48c70:	8809883a 	mov	r4,r17
   48c74:	e00b883a 	mov	r5,fp
   48c78:	004e2ac0 	call	4e2ac <__srefill_r>
   48c7c:	1000021e 	bne	r2,zero,48c88 <__svfscanf_r+0x12e0>
   48c80:	e0800017 	ldw	r2,0(fp)
   48c84:	003fe506 	br	48c1c <__alt_data_end+0xfffd6c1c>
   48c88:	d8809e17 	ldw	r2,632(sp)
   48c8c:	84a5c83a 	sub	r18,r16,r18
   48c90:	80000005 	stb	zero,0(r16)
   48c94:	dc009d17 	ldw	r16,628(sp)
   48c98:	10800044 	addi	r2,r2,1
   48c9c:	a4a9883a 	add	r20,r20,r18
   48ca0:	d8809e15 	stw	r2,632(sp)
   48ca4:	dd409c15 	stw	r21,624(sp)
   48ca8:	800d883a 	mov	r6,r16
   48cac:	003b7706 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48cb0:	dd409b04 	addi	r21,sp,620
   48cb4:	003d4006 	br	481b8 <__alt_data_end+0xfffd61b8>
   48cb8:	00bf1fc4 	movi	r2,-897
   48cbc:	b0ac703a 	and	r22,r22,r2
   48cc0:	18000226 	beq	r3,zero,48ccc <__svfscanf_r+0x1324>
   48cc4:	18ffffc4 	addi	r3,r3,-1
   48cc8:	9cc00044 	addi	r19,r19,1
   48ccc:	84000044 	addi	r16,r16,1
   48cd0:	003f4606 	br	489ec <__alt_data_end+0xfffd69ec>
   48cd4:	803d2a1e 	bne	r16,zero,48180 <__alt_data_end+0xfffd6180>
   48cd8:	003b7006 	br	47a9c <__alt_data_end+0xfffd5a9c>
   48cdc:	b280008c 	andi	r10,r22,2
   48ce0:	50008f26 	beq	r10,zero,48f20 <__svfscanf_r+0x1578>
   48ce4:	da009c17 	ldw	r8,624(sp)
   48ce8:	40800017 	ldw	r2,0(r8)
   48cec:	42000104 	addi	r8,r8,4
   48cf0:	da009c15 	stw	r8,624(sp)
   48cf4:	15400015 	stw	r21,0(r2)
   48cf8:	10c00115 	stw	r3,4(r2)
   48cfc:	003cf806 	br	480e0 <__alt_data_end+0xfffd60e0>
   48d00:	b0c0010c 	andi	r3,r22,4
   48d04:	18006226 	beq	r3,zero,48e90 <__svfscanf_r+0x14e8>
   48d08:	d9409c17 	ldw	r5,624(sp)
   48d0c:	28c00017 	ldw	r3,0(r5)
   48d10:	29400104 	addi	r5,r5,4
   48d14:	d9409c15 	stw	r5,624(sp)
   48d18:	1880000d 	sth	r2,0(r3)
   48d1c:	003fb606 	br	48bf8 <__alt_data_end+0xfffd6bf8>
   48d20:	d8c09c17 	ldw	r3,624(sp)
   48d24:	980d883a 	mov	r6,r19
   48d28:	01400044 	movi	r5,1
   48d2c:	19000017 	ldw	r4,0(r3)
   48d30:	e00f883a 	mov	r7,fp
   48d34:	004b1940 	call	4b194 <fread>
   48d38:	d9009c17 	ldw	r4,624(sp)
   48d3c:	24c00104 	addi	r19,r4,4
   48d40:	103c4c26 	beq	r2,zero,47e74 <__alt_data_end+0xfffd5e74>
   48d44:	1529883a 	add	r20,r2,r20
   48d48:	d8809e17 	ldw	r2,632(sp)
   48d4c:	dc009d17 	ldw	r16,628(sp)
   48d50:	dcc09c15 	stw	r19,624(sp)
   48d54:	10800044 	addi	r2,r2,1
   48d58:	d8809e15 	stw	r2,632(sp)
   48d5c:	800d883a 	mov	r6,r16
   48d60:	003b4a06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48d64:	da00a117 	ldw	r8,644(sp)
   48d68:	000d883a 	mov	r6,zero
   48d6c:	8809883a 	mov	r4,r17
   48d70:	41400044 	addi	r5,r8,1
   48d74:	01c00284 	movi	r7,10
   48d78:	004fe680 	call	4fe68 <_strtol_r>
   48d7c:	d8c0a317 	ldw	r3,652(sp)
   48d80:	10cdc83a 	sub	r6,r2,r3
   48d84:	d900a117 	ldw	r4,644(sp)
   48d88:	d88055c4 	addi	r2,sp,343
   48d8c:	20800236 	bltu	r4,r2,48d98 <__svfscanf_r+0x13f0>
   48d90:	d9005584 	addi	r4,sp,342
   48d94:	d900a115 	stw	r4,644(sp)
   48d98:	d900a117 	ldw	r4,644(sp)
   48d9c:	01400174 	movhi	r5,5
   48da0:	29575804 	addi	r5,r5,23904
   48da4:	004e6840 	call	4e684 <sprintf>
   48da8:	003cbf06 	br	480a8 <__alt_data_end+0xfffd60a8>
   48dac:	da00a217 	ldw	r8,648(sp)
   48db0:	aa05c83a 	sub	r2,r21,r8
   48db4:	008dc83a 	sub	r6,zero,r2
   48db8:	103cbb26 	beq	r2,zero,480a8 <__alt_data_end+0xfffd60a8>
   48dbc:	dc80a115 	stw	r18,644(sp)
   48dc0:	003ff006 	br	48d84 <__alt_data_end+0xfffd6d84>
   48dc4:	023fff84 	movi	r8,-2
   48dc8:	123f5926 	beq	r2,r8,48b30 <__alt_data_end+0xfffd6b30>
   48dcc:	a9000017 	ldw	r4,0(r21)
   48dd0:	004bc240 	call	4bc24 <iswspace>
   48dd4:	103f5126 	beq	r2,zero,48b1c <__alt_data_end+0xfffd6b1c>
   48dd8:	803f5c26 	beq	r16,zero,48b4c <__alt_data_end+0xfffd6b4c>
   48ddc:	843fffc4 	addi	r16,r16,-1
   48de0:	d8c00104 	addi	r3,sp,4
   48de4:	1c05883a 	add	r2,r3,r16
   48de8:	11400003 	ldbu	r5,0(r2)
   48dec:	8809883a 	mov	r4,r17
   48df0:	e00d883a 	mov	r6,fp
   48df4:	0050b3c0 	call	50b3c <_ungetc_r>
   48df8:	803ff81e 	bne	r16,zero,48ddc <__alt_data_end+0xfffd6ddc>
   48dfc:	003f5306 	br	48b4c <__alt_data_end+0xfffd6b4c>
   48e00:	b32c703a 	and	r22,r22,r12
   48e04:	01800044 	movi	r6,1
   48e08:	003dcb06 	br	48538 <__alt_data_end+0xfffd6538>
   48e0c:	81400083 	ldbu	r5,2(r16)
   48e10:	b5800094 	ori	r22,r22,2
   48e14:	84000084 	addi	r16,r16,2
   48e18:	003b4206 	br	47b24 <__alt_data_end+0xfffd5b24>
   48e1c:	b080004c 	andi	r2,r22,1
   48e20:	1000131e 	bne	r2,zero,48e70 <__svfscanf_r+0x14c8>
   48e24:	b580008c 	andi	r22,r22,2
   48e28:	b0003526 	beq	r22,zero,48f00 <__svfscanf_r+0x1558>
   48e2c:	d9409c17 	ldw	r5,624(sp)
   48e30:	a007d7fa 	srai	r3,r20,31
   48e34:	dc009d17 	ldw	r16,628(sp)
   48e38:	28800017 	ldw	r2,0(r5)
   48e3c:	29400104 	addi	r5,r5,4
   48e40:	d9409c15 	stw	r5,624(sp)
   48e44:	15000015 	stw	r20,0(r2)
   48e48:	10c00115 	stw	r3,4(r2)
   48e4c:	800d883a 	mov	r6,r16
   48e50:	003b0e06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48e54:	e1000017 	ldw	r4,0(fp)
   48e58:	14c5c83a 	sub	r2,r2,r19
   48e5c:	84e1883a 	add	r16,r16,r19
   48e60:	24c7883a 	add	r3,r4,r19
   48e64:	e0800115 	stw	r2,4(fp)
   48e68:	e0c00015 	stw	r3,0(fp)
   48e6c:	003cc406 	br	48180 <__alt_data_end+0xfffd6180>
   48e70:	d9009c17 	ldw	r4,624(sp)
   48e74:	dc009d17 	ldw	r16,628(sp)
   48e78:	20800017 	ldw	r2,0(r4)
   48e7c:	21000104 	addi	r4,r4,4
   48e80:	d9009c15 	stw	r4,624(sp)
   48e84:	15000015 	stw	r20,0(r2)
   48e88:	800d883a 	mov	r6,r16
   48e8c:	003aff06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48e90:	b0c0004c 	andi	r3,r22,1
   48e94:	1800121e 	bne	r3,zero,48ee0 <__svfscanf_r+0x1538>
   48e98:	b580008c 	andi	r22,r22,2
   48e9c:	b0001026 	beq	r22,zero,48ee0 <__svfscanf_r+0x1538>
   48ea0:	da00a017 	ldw	r8,640(sp)
   48ea4:	00800174 	movhi	r2,5
   48ea8:	10810404 	addi	r2,r2,1040
   48eac:	8809883a 	mov	r4,r17
   48eb0:	d9400104 	addi	r5,sp,4
   48eb4:	000d883a 	mov	r6,zero
   48eb8:	d9c09f17 	ldw	r7,636(sp)
   48ebc:	40803626 	beq	r8,r2,48f98 <__svfscanf_r+0x15f0>
   48ec0:	00500e00 	call	500e0 <_strtoll_r>
   48ec4:	d9409c17 	ldw	r5,624(sp)
   48ec8:	29000017 	ldw	r4,0(r5)
   48ecc:	29400104 	addi	r5,r5,4
   48ed0:	d9409c15 	stw	r5,624(sp)
   48ed4:	20800015 	stw	r2,0(r4)
   48ed8:	20c00115 	stw	r3,4(r4)
   48edc:	003f4606 	br	48bf8 <__alt_data_end+0xfffd6bf8>
   48ee0:	da009c17 	ldw	r8,624(sp)
   48ee4:	40c00017 	ldw	r3,0(r8)
   48ee8:	42000104 	addi	r8,r8,4
   48eec:	da009c15 	stw	r8,624(sp)
   48ef0:	18800015 	stw	r2,0(r3)
   48ef4:	003f4006 	br	48bf8 <__alt_data_end+0xfffd6bf8>
   48ef8:	0021883a 	mov	r16,zero
   48efc:	003f0c06 	br	48b30 <__alt_data_end+0xfffd6b30>
   48f00:	da009c17 	ldw	r8,624(sp)
   48f04:	dc009d17 	ldw	r16,628(sp)
   48f08:	40800017 	ldw	r2,0(r8)
   48f0c:	42000104 	addi	r8,r8,4
   48f10:	da009c15 	stw	r8,624(sp)
   48f14:	15000015 	stw	r20,0(r2)
   48f18:	800d883a 	mov	r6,r16
   48f1c:	003adb06 	br	47a8c <__alt_data_end+0xfffd5a8c>
   48f20:	d8809c17 	ldw	r2,624(sp)
   48f24:	a809883a 	mov	r4,r21
   48f28:	180b883a 	mov	r5,r3
   48f2c:	14000104 	addi	r16,r2,4
   48f30:	14800017 	ldw	r18,0(r2)
   48f34:	004e4d00 	call	4e4d0 <__isnand>
   48f38:	1000121e 	bne	r2,zero,48f84 <__svfscanf_r+0x15dc>
   48f3c:	a809883a 	mov	r4,r21
   48f40:	980b883a 	mov	r5,r19
   48f44:	00537e40 	call	537e4 <__truncdfsf2>
   48f48:	90800015 	stw	r2,0(r18)
   48f4c:	dc009c15 	stw	r16,624(sp)
   48f50:	003c6306 	br	480e0 <__alt_data_end+0xfffd60e0>
   48f54:	d9000104 	addi	r4,sp,4
   48f58:	e021883a 	mov	r16,fp
   48f5c:	24bacf2e 	bgeu	r4,r18,47a9c <__alt_data_end+0xfffd5a9c>
   48f60:	94bfffc4 	addi	r18,r18,-1
   48f64:	dcc000c4 	addi	r19,sp,3
   48f68:	91400007 	ldb	r5,0(r18)
   48f6c:	8809883a 	mov	r4,r17
   48f70:	94bfffc4 	addi	r18,r18,-1
   48f74:	800d883a 	mov	r6,r16
   48f78:	0050b3c0 	call	50b3c <_ungetc_r>
   48f7c:	94fffa1e 	bne	r18,r19,48f68 <__alt_data_end+0xfffd6f68>
   48f80:	003ac606 	br	47a9c <__alt_data_end+0xfffd5a9c>
   48f84:	0009883a 	mov	r4,zero
   48f88:	004e6240 	call	4e624 <nanf>
   48f8c:	90800015 	stw	r2,0(r18)
   48f90:	dc009c15 	stw	r16,624(sp)
   48f94:	003c5206 	br	480e0 <__alt_data_end+0xfffd60e0>
   48f98:	00506b80 	call	506b8 <_strtoull_r>
   48f9c:	003fc906 	br	48ec4 <__alt_data_end+0xfffd6ec4>
   48fa0:	d8c00104 	addi	r3,sp,4
   48fa4:	e021883a 	mov	r16,fp
   48fa8:	1cbabc2e 	bgeu	r3,r18,47a9c <__alt_data_end+0xfffd5a9c>
   48fac:	94bfffc4 	addi	r18,r18,-1
   48fb0:	dcc000c4 	addi	r19,sp,3
   48fb4:	91400007 	ldb	r5,0(r18)
   48fb8:	8809883a 	mov	r4,r17
   48fbc:	94bfffc4 	addi	r18,r18,-1
   48fc0:	800d883a 	mov	r6,r16
   48fc4:	0050b3c0 	call	50b3c <_ungetc_r>
   48fc8:	94fffa1e 	bne	r18,r19,48fb4 <__alt_data_end+0xfffd6fb4>
   48fcc:	003ab306 	br	47a9c <__alt_data_end+0xfffd5a9c>
   48fd0:	d8800104 	addi	r2,sp,4
   48fd4:	e021883a 	mov	r16,fp
   48fd8:	14bab02e 	bgeu	r2,r18,47a9c <__alt_data_end+0xfffd5a9c>
   48fdc:	94bfffc4 	addi	r18,r18,-1
   48fe0:	dcc000c4 	addi	r19,sp,3
   48fe4:	91400007 	ldb	r5,0(r18)
   48fe8:	8809883a 	mov	r4,r17
   48fec:	94bfffc4 	addi	r18,r18,-1
   48ff0:	800d883a 	mov	r6,r16
   48ff4:	0050b3c0 	call	50b3c <_ungetc_r>
   48ff8:	94fffa1e 	bne	r18,r19,48fe4 <__alt_data_end+0xfffd6fe4>
   48ffc:	003aa706 	br	47a9c <__alt_data_end+0xfffd5a9c>

00049000 <_vfscanf_r>:
   49000:	defffb04 	addi	sp,sp,-20
   49004:	dc000315 	stw	r16,12(sp)
   49008:	dfc00415 	stw	ra,16(sp)
   4900c:	2021883a 	mov	r16,r4
   49010:	20000926 	beq	r4,zero,49038 <_vfscanf_r+0x38>
   49014:	20800e17 	ldw	r2,56(r4)
   49018:	1000071e 	bne	r2,zero,49038 <_vfscanf_r+0x38>
   4901c:	d9400015 	stw	r5,0(sp)
   49020:	d9800115 	stw	r6,4(sp)
   49024:	d9c00215 	stw	r7,8(sp)
   49028:	004ad200 	call	4ad20 <__sinit>
   4902c:	d9c00217 	ldw	r7,8(sp)
   49030:	d9800117 	ldw	r6,4(sp)
   49034:	d9400017 	ldw	r5,0(sp)
   49038:	8009883a 	mov	r4,r16
   4903c:	dfc00417 	ldw	ra,16(sp)
   49040:	dc000317 	ldw	r16,12(sp)
   49044:	dec00504 	addi	sp,sp,20
   49048:	00479a81 	jmpi	479a8 <__svfscanf_r>

0004904c <__svfscanf>:
   4904c:	00800174 	movhi	r2,5
   49050:	109f5504 	addi	r2,r2,32084
   49054:	2007883a 	mov	r3,r4
   49058:	11000017 	ldw	r4,0(r2)
   4905c:	2805883a 	mov	r2,r5
   49060:	300f883a 	mov	r7,r6
   49064:	180b883a 	mov	r5,r3
   49068:	100d883a 	mov	r6,r2
   4906c:	00479a81 	jmpi	479a8 <__svfscanf_r>

00049070 <vfscanf>:
   49070:	defffb04 	addi	sp,sp,-20
   49074:	dc000115 	stw	r16,4(sp)
   49078:	04000174 	movhi	r16,5
   4907c:	841f5504 	addi	r16,r16,32084
   49080:	80800017 	ldw	r2,0(r16)
   49084:	dc800315 	stw	r18,12(sp)
   49088:	dc400215 	stw	r17,8(sp)
   4908c:	dfc00415 	stw	ra,16(sp)
   49090:	2025883a 	mov	r18,r4
   49094:	2823883a 	mov	r17,r5
   49098:	300f883a 	mov	r7,r6
   4909c:	10000726 	beq	r2,zero,490bc <vfscanf+0x4c>
   490a0:	10c00e17 	ldw	r3,56(r2)
   490a4:	1800051e 	bne	r3,zero,490bc <vfscanf+0x4c>
   490a8:	1009883a 	mov	r4,r2
   490ac:	d9800015 	stw	r6,0(sp)
   490b0:	004ad200 	call	4ad20 <__sinit>
   490b4:	80800017 	ldw	r2,0(r16)
   490b8:	d9c00017 	ldw	r7,0(sp)
   490bc:	1009883a 	mov	r4,r2
   490c0:	900b883a 	mov	r5,r18
   490c4:	880d883a 	mov	r6,r17
   490c8:	dfc00417 	ldw	ra,16(sp)
   490cc:	dc800317 	ldw	r18,12(sp)
   490d0:	dc400217 	ldw	r17,8(sp)
   490d4:	dc000117 	ldw	r16,4(sp)
   490d8:	dec00504 	addi	sp,sp,20
   490dc:	00479a81 	jmpi	479a8 <__svfscanf_r>

000490e0 <__swsetup_r>:
   490e0:	00800174 	movhi	r2,5
   490e4:	109f5504 	addi	r2,r2,32084
   490e8:	10800017 	ldw	r2,0(r2)
   490ec:	defffd04 	addi	sp,sp,-12
   490f0:	dc400115 	stw	r17,4(sp)
   490f4:	dc000015 	stw	r16,0(sp)
   490f8:	dfc00215 	stw	ra,8(sp)
   490fc:	2023883a 	mov	r17,r4
   49100:	2821883a 	mov	r16,r5
   49104:	10000226 	beq	r2,zero,49110 <__swsetup_r+0x30>
   49108:	10c00e17 	ldw	r3,56(r2)
   4910c:	18003d26 	beq	r3,zero,49204 <__swsetup_r+0x124>
   49110:	8080030b 	ldhu	r2,12(r16)
   49114:	10c0020c 	andi	r3,r2,8
   49118:	18ffffcc 	andi	r3,r3,65535
   4911c:	18e0001c 	xori	r3,r3,32768
   49120:	18e00004 	addi	r3,r3,-32768
   49124:	18001226 	beq	r3,zero,49170 <__swsetup_r+0x90>
   49128:	80c00417 	ldw	r3,16(r16)
   4912c:	18001f26 	beq	r3,zero,491ac <__swsetup_r+0xcc>
   49130:	1100004c 	andi	r4,r2,1
   49134:	2000261e 	bne	r4,zero,491d0 <__swsetup_r+0xf0>
   49138:	1080008c 	andi	r2,r2,2
   4913c:	10bfffcc 	andi	r2,r2,65535
   49140:	10a0001c 	xori	r2,r2,32768
   49144:	10a00004 	addi	r2,r2,-32768
   49148:	1000311e 	bne	r2,zero,49210 <__swsetup_r+0x130>
   4914c:	80800517 	ldw	r2,20(r16)
   49150:	80800215 	stw	r2,8(r16)
   49154:	18002326 	beq	r3,zero,491e4 <__swsetup_r+0x104>
   49158:	0005883a 	mov	r2,zero
   4915c:	dfc00217 	ldw	ra,8(sp)
   49160:	dc400117 	ldw	r17,4(sp)
   49164:	dc000017 	ldw	r16,0(sp)
   49168:	dec00304 	addi	sp,sp,12
   4916c:	f800283a 	ret
   49170:	10c0040c 	andi	r3,r2,16
   49174:	18ffffcc 	andi	r3,r3,65535
   49178:	18e0001c 	xori	r3,r3,32768
   4917c:	18e00004 	addi	r3,r3,-32768
   49180:	18001e26 	beq	r3,zero,491fc <__swsetup_r+0x11c>
   49184:	10c0010c 	andi	r3,r2,4
   49188:	18ffffcc 	andi	r3,r3,65535
   4918c:	18e0001c 	xori	r3,r3,32768
   49190:	18e00004 	addi	r3,r3,-32768
   49194:	1800211e 	bne	r3,zero,4921c <__swsetup_r+0x13c>
   49198:	80c00417 	ldw	r3,16(r16)
   4919c:	11400214 	ori	r5,r2,8
   491a0:	8140030d 	sth	r5,12(r16)
   491a4:	2805883a 	mov	r2,r5
   491a8:	183fe11e 	bne	r3,zero,49130 <__alt_data_end+0xfffd7130>
   491ac:	1140a00c 	andi	r5,r2,640
   491b0:	01008004 	movi	r4,512
   491b4:	293fde26 	beq	r5,r4,49130 <__alt_data_end+0xfffd7130>
   491b8:	8809883a 	mov	r4,r17
   491bc:	800b883a 	mov	r5,r16
   491c0:	004bd380 	call	4bd38 <__smakebuf_r>
   491c4:	8080030b 	ldhu	r2,12(r16)
   491c8:	80c00417 	ldw	r3,16(r16)
   491cc:	003fd806 	br	49130 <__alt_data_end+0xfffd7130>
   491d0:	80800517 	ldw	r2,20(r16)
   491d4:	80000215 	stw	zero,8(r16)
   491d8:	0085c83a 	sub	r2,zero,r2
   491dc:	80800615 	stw	r2,24(r16)
   491e0:	183fdd1e 	bne	r3,zero,49158 <__alt_data_end+0xfffd7158>
   491e4:	8080030b 	ldhu	r2,12(r16)
   491e8:	1080200c 	andi	r2,r2,128
   491ec:	10bfffcc 	andi	r2,r2,65535
   491f0:	10a0001c 	xori	r2,r2,32768
   491f4:	10a00004 	addi	r2,r2,-32768
   491f8:	103fd826 	beq	r2,zero,4915c <__alt_data_end+0xfffd715c>
   491fc:	00bfffc4 	movi	r2,-1
   49200:	003fd606 	br	4915c <__alt_data_end+0xfffd715c>
   49204:	1009883a 	mov	r4,r2
   49208:	004ad200 	call	4ad20 <__sinit>
   4920c:	003fc006 	br	49110 <__alt_data_end+0xfffd7110>
   49210:	0005883a 	mov	r2,zero
   49214:	80800215 	stw	r2,8(r16)
   49218:	003fce06 	br	49154 <__alt_data_end+0xfffd7154>
   4921c:	81400c17 	ldw	r5,48(r16)
   49220:	28000626 	beq	r5,zero,4923c <__swsetup_r+0x15c>
   49224:	80c01004 	addi	r3,r16,64
   49228:	28c00326 	beq	r5,r3,49238 <__swsetup_r+0x158>
   4922c:	8809883a 	mov	r4,r17
   49230:	004b3100 	call	4b310 <_free_r>
   49234:	8080030b 	ldhu	r2,12(r16)
   49238:	80000c15 	stw	zero,48(r16)
   4923c:	80c00417 	ldw	r3,16(r16)
   49240:	013ff6c4 	movi	r4,-37
   49244:	2084703a 	and	r2,r4,r2
   49248:	80000115 	stw	zero,4(r16)
   4924c:	80c00015 	stw	r3,0(r16)
   49250:	003fd206 	br	4919c <__alt_data_end+0xfffd719c>

00049254 <quorem>:
   49254:	defff704 	addi	sp,sp,-36
   49258:	dc400115 	stw	r17,4(sp)
   4925c:	20800417 	ldw	r2,16(r4)
   49260:	2c400417 	ldw	r17,16(r5)
   49264:	dd800615 	stw	r22,24(sp)
   49268:	dd400515 	stw	r21,20(sp)
   4926c:	dfc00815 	stw	ra,32(sp)
   49270:	ddc00715 	stw	r23,28(sp)
   49274:	dd000415 	stw	r20,16(sp)
   49278:	dcc00315 	stw	r19,12(sp)
   4927c:	dc800215 	stw	r18,8(sp)
   49280:	dc000015 	stw	r16,0(sp)
   49284:	202b883a 	mov	r21,r4
   49288:	282d883a 	mov	r22,r5
   4928c:	14407116 	blt	r2,r17,49454 <quorem+0x200>
   49290:	88800104 	addi	r2,r17,4
   49294:	1085883a 	add	r2,r2,r2
   49298:	1085883a 	add	r2,r2,r2
   4929c:	28a7883a 	add	r19,r5,r2
   492a0:	2085883a 	add	r2,r4,r2
   492a4:	15c00017 	ldw	r23,0(r2)
   492a8:	99400017 	ldw	r5,0(r19)
   492ac:	8c7fffc4 	addi	r17,r17,-1
   492b0:	b809883a 	mov	r4,r23
   492b4:	29400044 	addi	r5,r5,1
   492b8:	00457d40 	call	457d4 <__udivsi3>
   492bc:	1025883a 	mov	r18,r2
   492c0:	b4000504 	addi	r16,r22,20
   492c4:	ad000504 	addi	r20,r21,20
   492c8:	10002d26 	beq	r2,zero,49380 <quorem+0x12c>
   492cc:	800d883a 	mov	r6,r16
   492d0:	a007883a 	mov	r3,r20
   492d4:	000f883a 	mov	r7,zero
   492d8:	0005883a 	mov	r2,zero
   492dc:	32c00017 	ldw	r11,0(r6)
   492e0:	1a400017 	ldw	r9,0(r3)
   492e4:	31800104 	addi	r6,r6,4
   492e8:	5abfffcc 	andi	r10,r11,65535
   492ec:	5495383a 	mul	r10,r10,r18
   492f0:	5816d43a 	srli	r11,r11,16
   492f4:	4a3fffcc 	andi	r8,r9,65535
   492f8:	3a95883a 	add	r10,r7,r10
   492fc:	500ed43a 	srli	r7,r10,16
   49300:	5c97383a 	mul	r11,r11,r18
   49304:	4085883a 	add	r2,r8,r2
   49308:	52bfffcc 	andi	r10,r10,65535
   4930c:	1291c83a 	sub	r8,r2,r10
   49310:	4804d43a 	srli	r2,r9,16
   49314:	3acf883a 	add	r7,r7,r11
   49318:	4015d43a 	srai	r10,r8,16
   4931c:	393fffcc 	andi	r4,r7,65535
   49320:	1105c83a 	sub	r2,r2,r4
   49324:	1285883a 	add	r2,r2,r10
   49328:	1880008d 	sth	r2,2(r3)
   4932c:	1a00000d 	sth	r8,0(r3)
   49330:	380ed43a 	srli	r7,r7,16
   49334:	1005d43a 	srai	r2,r2,16
   49338:	18c00104 	addi	r3,r3,4
   4933c:	99bfe72e 	bgeu	r19,r6,492dc <__alt_data_end+0xfffd72dc>
   49340:	b8000f1e 	bne	r23,zero,49380 <quorem+0x12c>
   49344:	88800144 	addi	r2,r17,5
   49348:	1085883a 	add	r2,r2,r2
   4934c:	1085883a 	add	r2,r2,r2
   49350:	a887883a 	add	r3,r21,r2
   49354:	18bfff04 	addi	r2,r3,-4
   49358:	a080082e 	bgeu	r20,r2,4937c <quorem+0x128>
   4935c:	18ffff17 	ldw	r3,-4(r3)
   49360:	18000326 	beq	r3,zero,49370 <quorem+0x11c>
   49364:	00000506 	br	4937c <quorem+0x128>
   49368:	10c00017 	ldw	r3,0(r2)
   4936c:	1800031e 	bne	r3,zero,4937c <quorem+0x128>
   49370:	10bfff04 	addi	r2,r2,-4
   49374:	8c7fffc4 	addi	r17,r17,-1
   49378:	a0bffb36 	bltu	r20,r2,49368 <__alt_data_end+0xfffd7368>
   4937c:	ac400415 	stw	r17,16(r21)
   49380:	a809883a 	mov	r4,r21
   49384:	b00b883a 	mov	r5,r22
   49388:	004d3e40 	call	4d3e4 <__mcmp>
   4938c:	10002516 	blt	r2,zero,49424 <quorem+0x1d0>
   49390:	94800044 	addi	r18,r18,1
   49394:	a007883a 	mov	r3,r20
   49398:	000b883a 	mov	r5,zero
   4939c:	1a000017 	ldw	r8,0(r3)
   493a0:	81c00017 	ldw	r7,0(r16)
   493a4:	84000104 	addi	r16,r16,4
   493a8:	41bfffcc 	andi	r6,r8,65535
   493ac:	38bfffcc 	andi	r2,r7,65535
   493b0:	314b883a 	add	r5,r6,r5
   493b4:	288dc83a 	sub	r6,r5,r2
   493b8:	380ed43a 	srli	r7,r7,16
   493bc:	400ad43a 	srli	r5,r8,16
   493c0:	3005d43a 	srai	r2,r6,16
   493c4:	1980000d 	sth	r6,0(r3)
   493c8:	29cbc83a 	sub	r5,r5,r7
   493cc:	288b883a 	add	r5,r5,r2
   493d0:	1940008d 	sth	r5,2(r3)
   493d4:	280bd43a 	srai	r5,r5,16
   493d8:	18c00104 	addi	r3,r3,4
   493dc:	9c3fef2e 	bgeu	r19,r16,4939c <__alt_data_end+0xfffd739c>
   493e0:	88800144 	addi	r2,r17,5
   493e4:	1085883a 	add	r2,r2,r2
   493e8:	1085883a 	add	r2,r2,r2
   493ec:	a885883a 	add	r2,r21,r2
   493f0:	10c00017 	ldw	r3,0(r2)
   493f4:	18000b1e 	bne	r3,zero,49424 <quorem+0x1d0>
   493f8:	10ffff04 	addi	r3,r2,-4
   493fc:	a0c0082e 	bgeu	r20,r3,49420 <quorem+0x1cc>
   49400:	10bfff17 	ldw	r2,-4(r2)
   49404:	10000326 	beq	r2,zero,49414 <quorem+0x1c0>
   49408:	00000506 	br	49420 <quorem+0x1cc>
   4940c:	18800017 	ldw	r2,0(r3)
   49410:	1000031e 	bne	r2,zero,49420 <quorem+0x1cc>
   49414:	18ffff04 	addi	r3,r3,-4
   49418:	8c7fffc4 	addi	r17,r17,-1
   4941c:	a0fffb36 	bltu	r20,r3,4940c <__alt_data_end+0xfffd740c>
   49420:	ac400415 	stw	r17,16(r21)
   49424:	9005883a 	mov	r2,r18
   49428:	dfc00817 	ldw	ra,32(sp)
   4942c:	ddc00717 	ldw	r23,28(sp)
   49430:	dd800617 	ldw	r22,24(sp)
   49434:	dd400517 	ldw	r21,20(sp)
   49438:	dd000417 	ldw	r20,16(sp)
   4943c:	dcc00317 	ldw	r19,12(sp)
   49440:	dc800217 	ldw	r18,8(sp)
   49444:	dc400117 	ldw	r17,4(sp)
   49448:	dc000017 	ldw	r16,0(sp)
   4944c:	dec00904 	addi	sp,sp,36
   49450:	f800283a 	ret
   49454:	0005883a 	mov	r2,zero
   49458:	003ff306 	br	49428 <__alt_data_end+0xfffd7428>

0004945c <_dtoa_r>:
   4945c:	20801017 	ldw	r2,64(r4)
   49460:	deffdf04 	addi	sp,sp,-132
   49464:	dcc01a15 	stw	r19,104(sp)
   49468:	dc801915 	stw	r18,100(sp)
   4946c:	dc401815 	stw	r17,96(sp)
   49470:	dc001715 	stw	r16,92(sp)
   49474:	dfc02015 	stw	ra,128(sp)
   49478:	df001f15 	stw	fp,124(sp)
   4947c:	ddc01e15 	stw	r23,120(sp)
   49480:	dd801d15 	stw	r22,116(sp)
   49484:	dd401c15 	stw	r21,112(sp)
   49488:	dd001b15 	stw	r20,108(sp)
   4948c:	d9400315 	stw	r5,12(sp)
   49490:	d9c00415 	stw	r7,16(sp)
   49494:	2021883a 	mov	r16,r4
   49498:	3025883a 	mov	r18,r6
   4949c:	dcc02317 	ldw	r19,140(sp)
   494a0:	3023883a 	mov	r17,r6
   494a4:	10000826 	beq	r2,zero,494c8 <_dtoa_r+0x6c>
   494a8:	20c01117 	ldw	r3,68(r4)
   494ac:	01800044 	movi	r6,1
   494b0:	100b883a 	mov	r5,r2
   494b4:	30cc983a 	sll	r6,r6,r3
   494b8:	10c00115 	stw	r3,4(r2)
   494bc:	11800215 	stw	r6,8(r2)
   494c0:	004cbe80 	call	4cbe8 <_Bfree>
   494c4:	80001015 	stw	zero,64(r16)
   494c8:	90002f16 	blt	r18,zero,49588 <_dtoa_r+0x12c>
   494cc:	98000015 	stw	zero,0(r19)
   494d0:	90dffc2c 	andhi	r3,r18,32752
   494d4:	009ffc34 	movhi	r2,32752
   494d8:	18801c26 	beq	r3,r2,4954c <_dtoa_r+0xf0>
   494dc:	d9000317 	ldw	r4,12(sp)
   494e0:	880b883a 	mov	r5,r17
   494e4:	000d883a 	mov	r6,zero
   494e8:	000f883a 	mov	r7,zero
   494ec:	00534700 	call	53470 <__nedf2>
   494f0:	10002c1e 	bne	r2,zero,495a4 <_dtoa_r+0x148>
   494f4:	d9002217 	ldw	r4,136(sp)
   494f8:	d9c02417 	ldw	r7,144(sp)
   494fc:	00800044 	movi	r2,1
   49500:	20800015 	stw	r2,0(r4)
   49504:	38019426 	beq	r7,zero,49b58 <_dtoa_r+0x6fc>
   49508:	00800174 	movhi	r2,5
   4950c:	10974f44 	addi	r2,r2,23869
   49510:	38800015 	stw	r2,0(r7)
   49514:	15ffffc4 	addi	r23,r2,-1
   49518:	b805883a 	mov	r2,r23
   4951c:	dfc02017 	ldw	ra,128(sp)
   49520:	df001f17 	ldw	fp,124(sp)
   49524:	ddc01e17 	ldw	r23,120(sp)
   49528:	dd801d17 	ldw	r22,116(sp)
   4952c:	dd401c17 	ldw	r21,112(sp)
   49530:	dd001b17 	ldw	r20,108(sp)
   49534:	dcc01a17 	ldw	r19,104(sp)
   49538:	dc801917 	ldw	r18,100(sp)
   4953c:	dc401817 	ldw	r17,96(sp)
   49540:	dc001717 	ldw	r16,92(sp)
   49544:	dec02104 	addi	sp,sp,132
   49548:	f800283a 	ret
   4954c:	d8c02217 	ldw	r3,136(sp)
   49550:	d9000317 	ldw	r4,12(sp)
   49554:	0089c3c4 	movi	r2,9999
   49558:	18800015 	stw	r2,0(r3)
   4955c:	20016c26 	beq	r4,zero,49b10 <_dtoa_r+0x6b4>
   49560:	05c00174 	movhi	r23,5
   49564:	bdd80604 	addi	r23,r23,24600
   49568:	d9c02417 	ldw	r7,144(sp)
   4956c:	383fea26 	beq	r7,zero,49518 <__alt_data_end+0xfffd7518>
   49570:	b88000c7 	ldb	r2,3(r23)
   49574:	10016d1e 	bne	r2,zero,49b2c <_dtoa_r+0x6d0>
   49578:	b88000c4 	addi	r2,r23,3
   4957c:	d8c02417 	ldw	r3,144(sp)
   49580:	18800015 	stw	r2,0(r3)
   49584:	003fe406 	br	49518 <__alt_data_end+0xfffd7518>
   49588:	04600034 	movhi	r17,32768
   4958c:	8c7fffc4 	addi	r17,r17,-1
   49590:	9462703a 	and	r17,r18,r17
   49594:	00800044 	movi	r2,1
   49598:	98800015 	stw	r2,0(r19)
   4959c:	8825883a 	mov	r18,r17
   495a0:	003fcb06 	br	494d0 <__alt_data_end+0xfffd74d0>
   495a4:	d9400317 	ldw	r5,12(sp)
   495a8:	9028d53a 	srli	r20,r18,20
   495ac:	d8800204 	addi	r2,sp,8
   495b0:	d8800015 	stw	r2,0(sp)
   495b4:	8009883a 	mov	r4,r16
   495b8:	880d883a 	mov	r6,r17
   495bc:	d9c00104 	addi	r7,sp,4
   495c0:	004d78c0 	call	4d78c <__d2b>
   495c4:	a501ffcc 	andi	r20,r20,2047
   495c8:	1039883a 	mov	fp,r2
   495cc:	a001591e 	bne	r20,zero,49b34 <_dtoa_r+0x6d8>
   495d0:	dd400217 	ldw	r21,8(sp)
   495d4:	dd000117 	ldw	r20,4(sp)
   495d8:	00befbc4 	movi	r2,-1041
   495dc:	ad29883a 	add	r20,r21,r20
   495e0:	a082d216 	blt	r20,r2,4a12c <_dtoa_r+0xcd0>
   495e4:	d8c00317 	ldw	r3,12(sp)
   495e8:	013f0384 	movi	r4,-1010
   495ec:	2509c83a 	sub	r4,r4,r20
   495f0:	a0810484 	addi	r2,r20,1042
   495f4:	9124983a 	sll	r18,r18,r4
   495f8:	1884d83a 	srl	r2,r3,r2
   495fc:	9088b03a 	or	r4,r18,r2
   49600:	00538440 	call	53844 <__floatunsidf>
   49604:	1009883a 	mov	r4,r2
   49608:	017f8434 	movhi	r5,65040
   4960c:	00800044 	movi	r2,1
   49610:	194b883a 	add	r5,r3,r5
   49614:	a53fffc4 	addi	r20,r20,-1
   49618:	d8800f15 	stw	r2,60(sp)
   4961c:	000d883a 	mov	r6,zero
   49620:	01cffe34 	movhi	r7,16376
   49624:	0052f1c0 	call	52f1c <__subdf3>
   49628:	1009883a 	mov	r4,r2
   4962c:	180b883a 	mov	r5,r3
   49630:	0198dbf4 	movhi	r6,25455
   49634:	3190d844 	addi	r6,r6,17249
   49638:	01cff4f4 	movhi	r7,16339
   4963c:	39e1e9c4 	addi	r7,r7,-30809
   49640:	0052f7c0 	call	52f7c <__muldf3>
   49644:	180b883a 	mov	r5,r3
   49648:	01a2d874 	movhi	r6,35681
   4964c:	31b22cc4 	addi	r6,r6,-14157
   49650:	01cff1f4 	movhi	r7,16327
   49654:	39e28a04 	addi	r7,r7,-30168
   49658:	1009883a 	mov	r4,r2
   4965c:	0052ec80 	call	52ec8 <__adddf3>
   49660:	a009883a 	mov	r4,r20
   49664:	1027883a 	mov	r19,r2
   49668:	1825883a 	mov	r18,r3
   4966c:	005364c0 	call	5364c <__floatsidf>
   49670:	1009883a 	mov	r4,r2
   49674:	180b883a 	mov	r5,r3
   49678:	019427f4 	movhi	r6,20639
   4967c:	319e7ec4 	addi	r6,r6,31227
   49680:	01cff4f4 	movhi	r7,16339
   49684:	39d104c4 	addi	r7,r7,17427
   49688:	0052f7c0 	call	52f7c <__muldf3>
   4968c:	9809883a 	mov	r4,r19
   49690:	900b883a 	mov	r5,r18
   49694:	100d883a 	mov	r6,r2
   49698:	180f883a 	mov	r7,r3
   4969c:	0052ec80 	call	52ec8 <__adddf3>
   496a0:	1009883a 	mov	r4,r2
   496a4:	180b883a 	mov	r5,r3
   496a8:	1027883a 	mov	r19,r2
   496ac:	1825883a 	mov	r18,r3
   496b0:	00537200 	call	53720 <__fixdfsi>
   496b4:	9809883a 	mov	r4,r19
   496b8:	900b883a 	mov	r5,r18
   496bc:	000d883a 	mov	r6,zero
   496c0:	000f883a 	mov	r7,zero
   496c4:	d8800615 	stw	r2,24(sp)
   496c8:	00535940 	call	53594 <__ltdf2>
   496cc:	10027e16 	blt	r2,zero,4a0c8 <_dtoa_r+0xc6c>
   496d0:	d8c00617 	ldw	r3,24(sp)
   496d4:	00800584 	movi	r2,22
   496d8:	10c26c36 	bltu	r2,r3,4a08c <_dtoa_r+0xc30>
   496dc:	180490fa 	slli	r2,r3,3
   496e0:	00c00174 	movhi	r3,5
   496e4:	18d82b04 	addi	r3,r3,24748
   496e8:	d9800317 	ldw	r6,12(sp)
   496ec:	1885883a 	add	r2,r3,r2
   496f0:	11000017 	ldw	r4,0(r2)
   496f4:	11400117 	ldw	r5,4(r2)
   496f8:	880f883a 	mov	r7,r17
   496fc:	00534cc0 	call	534cc <__gtdf2>
   49700:	00828f0e 	bge	zero,r2,4a140 <_dtoa_r+0xce4>
   49704:	d8800617 	ldw	r2,24(sp)
   49708:	d8000d15 	stw	zero,52(sp)
   4970c:	10bfffc4 	addi	r2,r2,-1
   49710:	d8800615 	stw	r2,24(sp)
   49714:	ad29c83a 	sub	r20,r21,r20
   49718:	a53fffc4 	addi	r20,r20,-1
   4971c:	a0026616 	blt	r20,zero,4a0b8 <_dtoa_r+0xc5c>
   49720:	dd000715 	stw	r20,28(sp)
   49724:	d8000815 	stw	zero,32(sp)
   49728:	d8800617 	ldw	r2,24(sp)
   4972c:	10025a16 	blt	r2,zero,4a098 <_dtoa_r+0xc3c>
   49730:	d8c00717 	ldw	r3,28(sp)
   49734:	d8800b15 	stw	r2,44(sp)
   49738:	d8000a15 	stw	zero,40(sp)
   4973c:	1887883a 	add	r3,r3,r2
   49740:	d8c00715 	stw	r3,28(sp)
   49744:	d9c00417 	ldw	r7,16(sp)
   49748:	00800244 	movi	r2,9
   4974c:	11c10536 	bltu	r2,r7,49b64 <_dtoa_r+0x708>
   49750:	00800144 	movi	r2,5
   49754:	11c4c60e 	bge	r2,r7,4aa70 <_dtoa_r+0x1614>
   49758:	39ffff04 	addi	r7,r7,-4
   4975c:	d9c00415 	stw	r7,16(sp)
   49760:	0027883a 	mov	r19,zero
   49764:	d9c00417 	ldw	r7,16(sp)
   49768:	008000c4 	movi	r2,3
   4976c:	3883a226 	beq	r7,r2,4a5f8 <_dtoa_r+0x119c>
   49770:	11c2bc16 	blt	r2,r7,4a264 <_dtoa_r+0xe08>
   49774:	00800084 	movi	r2,2
   49778:	3880fb1e 	bne	r7,r2,49b68 <_dtoa_r+0x70c>
   4977c:	d8000c15 	stw	zero,48(sp)
   49780:	d9002117 	ldw	r4,132(sp)
   49784:	0103ae0e 	bge	zero,r4,4a640 <_dtoa_r+0x11e4>
   49788:	2025883a 	mov	r18,r4
   4978c:	d9000e15 	stw	r4,56(sp)
   49790:	d9000915 	stw	r4,36(sp)
   49794:	80001115 	stw	zero,68(r16)
   49798:	008005c4 	movi	r2,23
   4979c:	1484b22e 	bgeu	r2,r18,4aa68 <_dtoa_r+0x160c>
   497a0:	00c00044 	movi	r3,1
   497a4:	00800104 	movi	r2,4
   497a8:	1085883a 	add	r2,r2,r2
   497ac:	11000504 	addi	r4,r2,20
   497b0:	180b883a 	mov	r5,r3
   497b4:	18c00044 	addi	r3,r3,1
   497b8:	913ffb2e 	bgeu	r18,r4,497a8 <__alt_data_end+0xfffd77a8>
   497bc:	81401115 	stw	r5,68(r16)
   497c0:	8009883a 	mov	r4,r16
   497c4:	004cb400 	call	4cb40 <_Balloc>
   497c8:	102f883a 	mov	r23,r2
   497cc:	80801015 	stw	r2,64(r16)
   497d0:	00800384 	movi	r2,14
   497d4:	1480f036 	bltu	r2,r18,49b98 <_dtoa_r+0x73c>
   497d8:	9800ef26 	beq	r19,zero,49b98 <_dtoa_r+0x73c>
   497dc:	d8800617 	ldw	r2,24(sp)
   497e0:	00839c0e 	bge	zero,r2,4a654 <_dtoa_r+0x11f8>
   497e4:	d8c00617 	ldw	r3,24(sp)
   497e8:	108003cc 	andi	r2,r2,15
   497ec:	100490fa 	slli	r2,r2,3
   497f0:	182bd13a 	srai	r21,r3,4
   497f4:	00c00174 	movhi	r3,5
   497f8:	18d82b04 	addi	r3,r3,24748
   497fc:	1885883a 	add	r2,r3,r2
   49800:	a8c0040c 	andi	r3,r21,16
   49804:	12800017 	ldw	r10,0(r2)
   49808:	15800117 	ldw	r22,4(r2)
   4980c:	18038726 	beq	r3,zero,4a62c <_dtoa_r+0x11d0>
   49810:	00800174 	movhi	r2,5
   49814:	10982104 	addi	r2,r2,24708
   49818:	11800817 	ldw	r6,32(r2)
   4981c:	11c00917 	ldw	r7,36(r2)
   49820:	d9000317 	ldw	r4,12(sp)
   49824:	880b883a 	mov	r5,r17
   49828:	da801515 	stw	r10,84(sp)
   4982c:	00532600 	call	53260 <__divdf3>
   49830:	da801517 	ldw	r10,84(sp)
   49834:	d8801015 	stw	r2,64(sp)
   49838:	1829883a 	mov	r20,r3
   4983c:	ad4003cc 	andi	r21,r21,15
   49840:	048000c4 	movi	r18,3
   49844:	a8001126 	beq	r21,zero,4988c <_dtoa_r+0x430>
   49848:	04c00174 	movhi	r19,5
   4984c:	9cd82104 	addi	r19,r19,24708
   49850:	5005883a 	mov	r2,r10
   49854:	b007883a 	mov	r3,r22
   49858:	a980004c 	andi	r6,r21,1
   4985c:	1009883a 	mov	r4,r2
   49860:	a82bd07a 	srai	r21,r21,1
   49864:	180b883a 	mov	r5,r3
   49868:	30000426 	beq	r6,zero,4987c <_dtoa_r+0x420>
   4986c:	99800017 	ldw	r6,0(r19)
   49870:	99c00117 	ldw	r7,4(r19)
   49874:	94800044 	addi	r18,r18,1
   49878:	0052f7c0 	call	52f7c <__muldf3>
   4987c:	9cc00204 	addi	r19,r19,8
   49880:	a83ff51e 	bne	r21,zero,49858 <__alt_data_end+0xfffd7858>
   49884:	1015883a 	mov	r10,r2
   49888:	182d883a 	mov	r22,r3
   4988c:	d9001017 	ldw	r4,64(sp)
   49890:	a00b883a 	mov	r5,r20
   49894:	500d883a 	mov	r6,r10
   49898:	b00f883a 	mov	r7,r22
   4989c:	00532600 	call	53260 <__divdf3>
   498a0:	1027883a 	mov	r19,r2
   498a4:	1829883a 	mov	r20,r3
   498a8:	d8c00d17 	ldw	r3,52(sp)
   498ac:	18000626 	beq	r3,zero,498c8 <_dtoa_r+0x46c>
   498b0:	9809883a 	mov	r4,r19
   498b4:	a00b883a 	mov	r5,r20
   498b8:	000d883a 	mov	r6,zero
   498bc:	01cffc34 	movhi	r7,16368
   498c0:	00535940 	call	53594 <__ltdf2>
   498c4:	10040e16 	blt	r2,zero,4a900 <_dtoa_r+0x14a4>
   498c8:	9009883a 	mov	r4,r18
   498cc:	005364c0 	call	5364c <__floatsidf>
   498d0:	1009883a 	mov	r4,r2
   498d4:	180b883a 	mov	r5,r3
   498d8:	980d883a 	mov	r6,r19
   498dc:	a00f883a 	mov	r7,r20
   498e0:	0052f7c0 	call	52f7c <__muldf3>
   498e4:	1009883a 	mov	r4,r2
   498e8:	180b883a 	mov	r5,r3
   498ec:	000d883a 	mov	r6,zero
   498f0:	01d00734 	movhi	r7,16412
   498f4:	0052ec80 	call	52ec8 <__adddf3>
   498f8:	057f3034 	movhi	r21,64704
   498fc:	1d6b883a 	add	r21,r3,r21
   49900:	d8c00917 	ldw	r3,36(sp)
   49904:	1025883a 	mov	r18,r2
   49908:	18031f26 	beq	r3,zero,4a588 <_dtoa_r+0x112c>
   4990c:	d8800617 	ldw	r2,24(sp)
   49910:	dac00917 	ldw	r11,36(sp)
   49914:	d8801315 	stw	r2,76(sp)
   49918:	d8c00c17 	ldw	r3,48(sp)
   4991c:	18039026 	beq	r3,zero,4a760 <_dtoa_r+0x1304>
   49920:	58bfffc4 	addi	r2,r11,-1
   49924:	100490fa 	slli	r2,r2,3
   49928:	00c00174 	movhi	r3,5
   4992c:	18d82b04 	addi	r3,r3,24748
   49930:	0009883a 	mov	r4,zero
   49934:	1885883a 	add	r2,r3,r2
   49938:	11800017 	ldw	r6,0(r2)
   4993c:	11c00117 	ldw	r7,4(r2)
   49940:	014ff834 	movhi	r5,16352
   49944:	dac01615 	stw	r11,88(sp)
   49948:	00532600 	call	53260 <__divdf3>
   4994c:	900d883a 	mov	r6,r18
   49950:	a80f883a 	mov	r7,r21
   49954:	1009883a 	mov	r4,r2
   49958:	180b883a 	mov	r5,r3
   4995c:	0052f1c0 	call	52f1c <__subdf3>
   49960:	a00b883a 	mov	r5,r20
   49964:	9809883a 	mov	r4,r19
   49968:	182b883a 	mov	r21,r3
   4996c:	d8801015 	stw	r2,64(sp)
   49970:	00537200 	call	53720 <__fixdfsi>
   49974:	1009883a 	mov	r4,r2
   49978:	d8801515 	stw	r2,84(sp)
   4997c:	005364c0 	call	5364c <__floatsidf>
   49980:	9809883a 	mov	r4,r19
   49984:	a00b883a 	mov	r5,r20
   49988:	100d883a 	mov	r6,r2
   4998c:	180f883a 	mov	r7,r3
   49990:	0052f1c0 	call	52f1c <__subdf3>
   49994:	da401517 	ldw	r9,84(sp)
   49998:	d9001017 	ldw	r4,64(sp)
   4999c:	a80b883a 	mov	r5,r21
   499a0:	4d000c04 	addi	r20,r9,48
   499a4:	bd000005 	stb	r20,0(r23)
   499a8:	100d883a 	mov	r6,r2
   499ac:	180f883a 	mov	r7,r3
   499b0:	bd800044 	addi	r22,r23,1
   499b4:	1025883a 	mov	r18,r2
   499b8:	1827883a 	mov	r19,r3
   499bc:	00534cc0 	call	534cc <__gtdf2>
   499c0:	00842216 	blt	zero,r2,4aa4c <_dtoa_r+0x15f0>
   499c4:	0009883a 	mov	r4,zero
   499c8:	014ffc34 	movhi	r5,16368
   499cc:	900d883a 	mov	r6,r18
   499d0:	980f883a 	mov	r7,r19
   499d4:	0052f1c0 	call	52f1c <__subdf3>
   499d8:	d9001017 	ldw	r4,64(sp)
   499dc:	a80b883a 	mov	r5,r21
   499e0:	100d883a 	mov	r6,r2
   499e4:	180f883a 	mov	r7,r3
   499e8:	00534cc0 	call	534cc <__gtdf2>
   499ec:	dac01617 	ldw	r11,88(sp)
   499f0:	00841316 	blt	zero,r2,4aa40 <_dtoa_r+0x15e4>
   499f4:	00800044 	movi	r2,1
   499f8:	12c0670e 	bge	r2,r11,49b98 <_dtoa_r+0x73c>
   499fc:	bad7883a 	add	r11,r23,r11
   49a00:	df001115 	stw	fp,68(sp)
   49a04:	dc401215 	stw	r17,72(sp)
   49a08:	5839883a 	mov	fp,r11
   49a0c:	dc401017 	ldw	r17,64(sp)
   49a10:	00000806 	br	49a34 <_dtoa_r+0x5d8>
   49a14:	0052f1c0 	call	52f1c <__subdf3>
   49a18:	1009883a 	mov	r4,r2
   49a1c:	180b883a 	mov	r5,r3
   49a20:	880d883a 	mov	r6,r17
   49a24:	a80f883a 	mov	r7,r21
   49a28:	00535940 	call	53594 <__ltdf2>
   49a2c:	1003ee16 	blt	r2,zero,4a9e8 <_dtoa_r+0x158c>
   49a30:	b703f126 	beq	r22,fp,4a9f8 <_dtoa_r+0x159c>
   49a34:	8809883a 	mov	r4,r17
   49a38:	a80b883a 	mov	r5,r21
   49a3c:	000d883a 	mov	r6,zero
   49a40:	01d00934 	movhi	r7,16420
   49a44:	0052f7c0 	call	52f7c <__muldf3>
   49a48:	000d883a 	mov	r6,zero
   49a4c:	01d00934 	movhi	r7,16420
   49a50:	9009883a 	mov	r4,r18
   49a54:	980b883a 	mov	r5,r19
   49a58:	1023883a 	mov	r17,r2
   49a5c:	182b883a 	mov	r21,r3
   49a60:	0052f7c0 	call	52f7c <__muldf3>
   49a64:	180b883a 	mov	r5,r3
   49a68:	1009883a 	mov	r4,r2
   49a6c:	1825883a 	mov	r18,r3
   49a70:	1027883a 	mov	r19,r2
   49a74:	00537200 	call	53720 <__fixdfsi>
   49a78:	1009883a 	mov	r4,r2
   49a7c:	1029883a 	mov	r20,r2
   49a80:	005364c0 	call	5364c <__floatsidf>
   49a84:	9809883a 	mov	r4,r19
   49a88:	900b883a 	mov	r5,r18
   49a8c:	100d883a 	mov	r6,r2
   49a90:	180f883a 	mov	r7,r3
   49a94:	0052f1c0 	call	52f1c <__subdf3>
   49a98:	a5000c04 	addi	r20,r20,48
   49a9c:	b5000005 	stb	r20,0(r22)
   49aa0:	1009883a 	mov	r4,r2
   49aa4:	180b883a 	mov	r5,r3
   49aa8:	880d883a 	mov	r6,r17
   49aac:	a80f883a 	mov	r7,r21
   49ab0:	1025883a 	mov	r18,r2
   49ab4:	1827883a 	mov	r19,r3
   49ab8:	00535940 	call	53594 <__ltdf2>
   49abc:	b5800044 	addi	r22,r22,1
   49ac0:	0009883a 	mov	r4,zero
   49ac4:	014ffc34 	movhi	r5,16368
   49ac8:	900d883a 	mov	r6,r18
   49acc:	980f883a 	mov	r7,r19
   49ad0:	103fd00e 	bge	r2,zero,49a14 <__alt_data_end+0xfffd7a14>
   49ad4:	d9001317 	ldw	r4,76(sp)
   49ad8:	df001117 	ldw	fp,68(sp)
   49adc:	d9000615 	stw	r4,24(sp)
   49ae0:	8009883a 	mov	r4,r16
   49ae4:	e00b883a 	mov	r5,fp
   49ae8:	004cbe80 	call	4cbe8 <_Bfree>
   49aec:	d9c00617 	ldw	r7,24(sp)
   49af0:	d8c02217 	ldw	r3,136(sp)
   49af4:	d9002417 	ldw	r4,144(sp)
   49af8:	b0000005 	stb	zero,0(r22)
   49afc:	38800044 	addi	r2,r7,1
   49b00:	18800015 	stw	r2,0(r3)
   49b04:	203e8426 	beq	r4,zero,49518 <__alt_data_end+0xfffd7518>
   49b08:	25800015 	stw	r22,0(r4)
   49b0c:	003e8206 	br	49518 <__alt_data_end+0xfffd7518>
   49b10:	00800434 	movhi	r2,16
   49b14:	10bfffc4 	addi	r2,r2,-1
   49b18:	90a4703a 	and	r18,r18,r2
   49b1c:	903e901e 	bne	r18,zero,49560 <__alt_data_end+0xfffd7560>
   49b20:	05c00174 	movhi	r23,5
   49b24:	bdd80304 	addi	r23,r23,24588
   49b28:	003e8f06 	br	49568 <__alt_data_end+0xfffd7568>
   49b2c:	b8800204 	addi	r2,r23,8
   49b30:	003e9206 	br	4957c <__alt_data_end+0xfffd757c>
   49b34:	01400434 	movhi	r5,16
   49b38:	297fffc4 	addi	r5,r5,-1
   49b3c:	894a703a 	and	r5,r17,r5
   49b40:	d9000317 	ldw	r4,12(sp)
   49b44:	294ffc34 	orhi	r5,r5,16368
   49b48:	a53f0044 	addi	r20,r20,-1023
   49b4c:	dd400217 	ldw	r21,8(sp)
   49b50:	d8000f15 	stw	zero,60(sp)
   49b54:	003eb106 	br	4961c <__alt_data_end+0xfffd761c>
   49b58:	05c00174 	movhi	r23,5
   49b5c:	bdd74f04 	addi	r23,r23,23868
   49b60:	003e6d06 	br	49518 <__alt_data_end+0xfffd7518>
   49b64:	d8000415 	stw	zero,16(sp)
   49b68:	80001115 	stw	zero,68(r16)
   49b6c:	8009883a 	mov	r4,r16
   49b70:	000b883a 	mov	r5,zero
   49b74:	004cb400 	call	4cb40 <_Balloc>
   49b78:	01ffffc4 	movi	r7,-1
   49b7c:	102f883a 	mov	r23,r2
   49b80:	80801015 	stw	r2,64(r16)
   49b84:	00800044 	movi	r2,1
   49b88:	d9c00915 	stw	r7,36(sp)
   49b8c:	d8002115 	stw	zero,132(sp)
   49b90:	d9c00e15 	stw	r7,56(sp)
   49b94:	d8800c15 	stw	r2,48(sp)
   49b98:	d8800117 	ldw	r2,4(sp)
   49b9c:	10008b16 	blt	r2,zero,49dcc <_dtoa_r+0x970>
   49ba0:	d9000617 	ldw	r4,24(sp)
   49ba4:	00c00384 	movi	r3,14
   49ba8:	19008816 	blt	r3,r4,49dcc <_dtoa_r+0x970>
   49bac:	200490fa 	slli	r2,r4,3
   49bb0:	d9c02117 	ldw	r7,132(sp)
   49bb4:	00c00174 	movhi	r3,5
   49bb8:	18d82b04 	addi	r3,r3,24748
   49bbc:	1885883a 	add	r2,r3,r2
   49bc0:	14800017 	ldw	r18,0(r2)
   49bc4:	14c00117 	ldw	r19,4(r2)
   49bc8:	3801c916 	blt	r7,zero,4a2f0 <_dtoa_r+0xe94>
   49bcc:	d9000317 	ldw	r4,12(sp)
   49bd0:	900d883a 	mov	r6,r18
   49bd4:	980f883a 	mov	r7,r19
   49bd8:	880b883a 	mov	r5,r17
   49bdc:	00532600 	call	53260 <__divdf3>
   49be0:	180b883a 	mov	r5,r3
   49be4:	1009883a 	mov	r4,r2
   49be8:	00537200 	call	53720 <__fixdfsi>
   49bec:	1009883a 	mov	r4,r2
   49bf0:	102b883a 	mov	r21,r2
   49bf4:	005364c0 	call	5364c <__floatsidf>
   49bf8:	1009883a 	mov	r4,r2
   49bfc:	180b883a 	mov	r5,r3
   49c00:	900d883a 	mov	r6,r18
   49c04:	980f883a 	mov	r7,r19
   49c08:	0052f7c0 	call	52f7c <__muldf3>
   49c0c:	d9000317 	ldw	r4,12(sp)
   49c10:	880b883a 	mov	r5,r17
   49c14:	100d883a 	mov	r6,r2
   49c18:	180f883a 	mov	r7,r3
   49c1c:	0052f1c0 	call	52f1c <__subdf3>
   49c20:	d9c00917 	ldw	r7,36(sp)
   49c24:	1009883a 	mov	r4,r2
   49c28:	a8800c04 	addi	r2,r21,48
   49c2c:	b8800005 	stb	r2,0(r23)
   49c30:	01800044 	movi	r6,1
   49c34:	180b883a 	mov	r5,r3
   49c38:	2005883a 	mov	r2,r4
   49c3c:	bd800044 	addi	r22,r23,1
   49c40:	39803726 	beq	r7,r6,49d20 <_dtoa_r+0x8c4>
   49c44:	000d883a 	mov	r6,zero
   49c48:	01d00934 	movhi	r7,16420
   49c4c:	0052f7c0 	call	52f7c <__muldf3>
   49c50:	1009883a 	mov	r4,r2
   49c54:	180b883a 	mov	r5,r3
   49c58:	000d883a 	mov	r6,zero
   49c5c:	000f883a 	mov	r7,zero
   49c60:	1029883a 	mov	r20,r2
   49c64:	1823883a 	mov	r17,r3
   49c68:	00534140 	call	53414 <__eqdf2>
   49c6c:	103f9c26 	beq	r2,zero,49ae0 <__alt_data_end+0xfffd7ae0>
   49c70:	dd400917 	ldw	r21,36(sp)
   49c74:	dc000415 	stw	r16,16(sp)
   49c78:	00000906 	br	49ca0 <_dtoa_r+0x844>
   49c7c:	0052f7c0 	call	52f7c <__muldf3>
   49c80:	1009883a 	mov	r4,r2
   49c84:	180b883a 	mov	r5,r3
   49c88:	000d883a 	mov	r6,zero
   49c8c:	000f883a 	mov	r7,zero
   49c90:	1029883a 	mov	r20,r2
   49c94:	1823883a 	mov	r17,r3
   49c98:	00534140 	call	53414 <__eqdf2>
   49c9c:	10022926 	beq	r2,zero,4a544 <_dtoa_r+0x10e8>
   49ca0:	900d883a 	mov	r6,r18
   49ca4:	980f883a 	mov	r7,r19
   49ca8:	a009883a 	mov	r4,r20
   49cac:	880b883a 	mov	r5,r17
   49cb0:	00532600 	call	53260 <__divdf3>
   49cb4:	180b883a 	mov	r5,r3
   49cb8:	1009883a 	mov	r4,r2
   49cbc:	00537200 	call	53720 <__fixdfsi>
   49cc0:	1009883a 	mov	r4,r2
   49cc4:	1021883a 	mov	r16,r2
   49cc8:	005364c0 	call	5364c <__floatsidf>
   49ccc:	1009883a 	mov	r4,r2
   49cd0:	180b883a 	mov	r5,r3
   49cd4:	900d883a 	mov	r6,r18
   49cd8:	980f883a 	mov	r7,r19
   49cdc:	0052f7c0 	call	52f7c <__muldf3>
   49ce0:	a009883a 	mov	r4,r20
   49ce4:	880b883a 	mov	r5,r17
   49ce8:	100d883a 	mov	r6,r2
   49cec:	180f883a 	mov	r7,r3
   49cf0:	0052f1c0 	call	52f1c <__subdf3>
   49cf4:	82400c04 	addi	r9,r16,48
   49cf8:	b2400005 	stb	r9,0(r22)
   49cfc:	b5800044 	addi	r22,r22,1
   49d00:	b5d3c83a 	sub	r9,r22,r23
   49d04:	000d883a 	mov	r6,zero
   49d08:	01d00934 	movhi	r7,16420
   49d0c:	1009883a 	mov	r4,r2
   49d10:	180b883a 	mov	r5,r3
   49d14:	aa7fd91e 	bne	r21,r9,49c7c <__alt_data_end+0xfffd7c7c>
   49d18:	802b883a 	mov	r21,r16
   49d1c:	dc000417 	ldw	r16,16(sp)
   49d20:	1009883a 	mov	r4,r2
   49d24:	180b883a 	mov	r5,r3
   49d28:	100d883a 	mov	r6,r2
   49d2c:	180f883a 	mov	r7,r3
   49d30:	0052ec80 	call	52ec8 <__adddf3>
   49d34:	9009883a 	mov	r4,r18
   49d38:	980b883a 	mov	r5,r19
   49d3c:	100d883a 	mov	r6,r2
   49d40:	180f883a 	mov	r7,r3
   49d44:	1023883a 	mov	r17,r2
   49d48:	1829883a 	mov	r20,r3
   49d4c:	00535940 	call	53594 <__ltdf2>
   49d50:	10000816 	blt	r2,zero,49d74 <_dtoa_r+0x918>
   49d54:	9009883a 	mov	r4,r18
   49d58:	980b883a 	mov	r5,r19
   49d5c:	880d883a 	mov	r6,r17
   49d60:	a00f883a 	mov	r7,r20
   49d64:	00534700 	call	53470 <__nedf2>
   49d68:	103f5d1e 	bne	r2,zero,49ae0 <__alt_data_end+0xfffd7ae0>
   49d6c:	ad40004c 	andi	r21,r21,1
   49d70:	a83f5b26 	beq	r21,zero,49ae0 <__alt_data_end+0xfffd7ae0>
   49d74:	b53fffc3 	ldbu	r20,-1(r22)
   49d78:	b0ffff84 	addi	r3,r22,-2
   49d7c:	01400e44 	movi	r5,57
   49d80:	00000306 	br	49d90 <_dtoa_r+0x934>
   49d84:	1d000003 	ldbu	r20,0(r3)
   49d88:	102d883a 	mov	r22,r2
   49d8c:	18ffffc4 	addi	r3,r3,-1
   49d90:	a1003fcc 	andi	r4,r20,255
   49d94:	2100201c 	xori	r4,r4,128
   49d98:	213fe004 	addi	r4,r4,-128
   49d9c:	b0bfffc4 	addi	r2,r22,-1
   49da0:	2142ca1e 	bne	r4,r5,4a8cc <_dtoa_r+0x1470>
   49da4:	b8bff71e 	bne	r23,r2,49d84 <__alt_data_end+0xfffd7d84>
   49da8:	d8800617 	ldw	r2,24(sp)
   49dac:	05000c44 	movi	r20,49
   49db0:	10800044 	addi	r2,r2,1
   49db4:	d8800615 	stw	r2,24(sp)
   49db8:	00800c04 	movi	r2,48
   49dbc:	b8800005 	stb	r2,0(r23)
   49dc0:	b805883a 	mov	r2,r23
   49dc4:	15000005 	stb	r20,0(r2)
   49dc8:	003f4506 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   49dcc:	d9c00c17 	ldw	r7,48(sp)
   49dd0:	3800c926 	beq	r7,zero,4a0f8 <_dtoa_r+0xc9c>
   49dd4:	d9c00417 	ldw	r7,16(sp)
   49dd8:	00c00044 	movi	r3,1
   49ddc:	19c16c0e 	bge	r3,r7,4a390 <_dtoa_r+0xf34>
   49de0:	d9000917 	ldw	r4,36(sp)
   49de4:	d9c00a17 	ldw	r7,40(sp)
   49de8:	24ffffc4 	addi	r19,r4,-1
   49dec:	3cc20716 	blt	r7,r19,4a60c <_dtoa_r+0x11b0>
   49df0:	3ce7c83a 	sub	r19,r7,r19
   49df4:	d9c00917 	ldw	r7,36(sp)
   49df8:	3802ae16 	blt	r7,zero,4a8b4 <_dtoa_r+0x1458>
   49dfc:	dc800817 	ldw	r18,32(sp)
   49e00:	d8800917 	ldw	r2,36(sp)
   49e04:	d8c00817 	ldw	r3,32(sp)
   49e08:	d9c00717 	ldw	r7,28(sp)
   49e0c:	8009883a 	mov	r4,r16
   49e10:	1887883a 	add	r3,r3,r2
   49e14:	388f883a 	add	r7,r7,r2
   49e18:	01400044 	movi	r5,1
   49e1c:	d8c00815 	stw	r3,32(sp)
   49e20:	d9c00715 	stw	r7,28(sp)
   49e24:	004cf400 	call	4cf40 <__i2b>
   49e28:	102b883a 	mov	r21,r2
   49e2c:	90000a26 	beq	r18,zero,49e58 <_dtoa_r+0x9fc>
   49e30:	d8800717 	ldw	r2,28(sp)
   49e34:	0080080e 	bge	zero,r2,49e58 <_dtoa_r+0x9fc>
   49e38:	90812b16 	blt	r18,r2,4a2e8 <_dtoa_r+0xe8c>
   49e3c:	d8c00817 	ldw	r3,32(sp)
   49e40:	d9000717 	ldw	r4,28(sp)
   49e44:	90a5c83a 	sub	r18,r18,r2
   49e48:	1887c83a 	sub	r3,r3,r2
   49e4c:	2089c83a 	sub	r4,r4,r2
   49e50:	d8c00815 	stw	r3,32(sp)
   49e54:	d9000715 	stw	r4,28(sp)
   49e58:	d9c00a17 	ldw	r7,40(sp)
   49e5c:	01c0140e 	bge	zero,r7,49eb0 <_dtoa_r+0xa54>
   49e60:	d8800c17 	ldw	r2,48(sp)
   49e64:	1001de26 	beq	r2,zero,4a5e0 <_dtoa_r+0x1184>
   49e68:	04c00e0e 	bge	zero,r19,49ea4 <_dtoa_r+0xa48>
   49e6c:	a80b883a 	mov	r5,r21
   49e70:	8009883a 	mov	r4,r16
   49e74:	980d883a 	mov	r6,r19
   49e78:	004d15c0 	call	4d15c <__pow5mult>
   49e7c:	e00d883a 	mov	r6,fp
   49e80:	8009883a 	mov	r4,r16
   49e84:	100b883a 	mov	r5,r2
   49e88:	102b883a 	mov	r21,r2
   49e8c:	004cf7c0 	call	4cf7c <__multiply>
   49e90:	1029883a 	mov	r20,r2
   49e94:	e00b883a 	mov	r5,fp
   49e98:	8009883a 	mov	r4,r16
   49e9c:	004cbe80 	call	4cbe8 <_Bfree>
   49ea0:	a039883a 	mov	fp,r20
   49ea4:	d8c00a17 	ldw	r3,40(sp)
   49ea8:	1ccdc83a 	sub	r6,r3,r19
   49eac:	3001291e 	bne	r6,zero,4a354 <_dtoa_r+0xef8>
   49eb0:	8009883a 	mov	r4,r16
   49eb4:	01400044 	movi	r5,1
   49eb8:	004cf400 	call	4cf40 <__i2b>
   49ebc:	d9000b17 	ldw	r4,44(sp)
   49ec0:	1029883a 	mov	r20,r2
   49ec4:	0100050e 	bge	zero,r4,49edc <_dtoa_r+0xa80>
   49ec8:	d9800b17 	ldw	r6,44(sp)
   49ecc:	8009883a 	mov	r4,r16
   49ed0:	100b883a 	mov	r5,r2
   49ed4:	004d15c0 	call	4d15c <__pow5mult>
   49ed8:	1029883a 	mov	r20,r2
   49edc:	d9c00417 	ldw	r7,16(sp)
   49ee0:	00800044 	movi	r2,1
   49ee4:	11c0f00e 	bge	r2,r7,4a2a8 <_dtoa_r+0xe4c>
   49ee8:	0023883a 	mov	r17,zero
   49eec:	d8800b17 	ldw	r2,44(sp)
   49ef0:	1001741e 	bne	r2,zero,4a4c4 <_dtoa_r+0x1068>
   49ef4:	00800044 	movi	r2,1
   49ef8:	d8c00717 	ldw	r3,28(sp)
   49efc:	10c5883a 	add	r2,r2,r3
   49f00:	108007cc 	andi	r2,r2,31
   49f04:	10008026 	beq	r2,zero,4a108 <_dtoa_r+0xcac>
   49f08:	01000804 	movi	r4,32
   49f0c:	2089c83a 	sub	r4,r4,r2
   49f10:	00c00104 	movi	r3,4
   49f14:	1902d00e 	bge	r3,r4,4aa58 <_dtoa_r+0x15fc>
   49f18:	d9000817 	ldw	r4,32(sp)
   49f1c:	d9c00717 	ldw	r7,28(sp)
   49f20:	00c00704 	movi	r3,28
   49f24:	1885c83a 	sub	r2,r3,r2
   49f28:	2089883a 	add	r4,r4,r2
   49f2c:	388f883a 	add	r7,r7,r2
   49f30:	d9000815 	stw	r4,32(sp)
   49f34:	90a5883a 	add	r18,r18,r2
   49f38:	d9c00715 	stw	r7,28(sp)
   49f3c:	d9c00817 	ldw	r7,32(sp)
   49f40:	01c0050e 	bge	zero,r7,49f58 <_dtoa_r+0xafc>
   49f44:	e00b883a 	mov	r5,fp
   49f48:	8009883a 	mov	r4,r16
   49f4c:	380d883a 	mov	r6,r7
   49f50:	004d2880 	call	4d288 <__lshift>
   49f54:	1039883a 	mov	fp,r2
   49f58:	d8800717 	ldw	r2,28(sp)
   49f5c:	0080050e 	bge	zero,r2,49f74 <_dtoa_r+0xb18>
   49f60:	a00b883a 	mov	r5,r20
   49f64:	8009883a 	mov	r4,r16
   49f68:	100d883a 	mov	r6,r2
   49f6c:	004d2880 	call	4d288 <__lshift>
   49f70:	1029883a 	mov	r20,r2
   49f74:	d8c00d17 	ldw	r3,52(sp)
   49f78:	1801401e 	bne	r3,zero,4a47c <_dtoa_r+0x1020>
   49f7c:	d8800917 	ldw	r2,36(sp)
   49f80:	00815a0e 	bge	zero,r2,4a4ec <_dtoa_r+0x1090>
   49f84:	d8c00c17 	ldw	r3,48(sp)
   49f88:	18006f1e 	bne	r3,zero,4a148 <_dtoa_r+0xcec>
   49f8c:	b823883a 	mov	r17,r23
   49f90:	dc800917 	ldw	r18,36(sp)
   49f94:	00000206 	br	49fa0 <_dtoa_r+0xb44>
   49f98:	004cc100 	call	4cc10 <__multadd>
   49f9c:	1039883a 	mov	fp,r2
   49fa0:	e009883a 	mov	r4,fp
   49fa4:	a00b883a 	mov	r5,r20
   49fa8:	00492540 	call	49254 <quorem>
   49fac:	10800c04 	addi	r2,r2,48
   49fb0:	88800005 	stb	r2,0(r17)
   49fb4:	8c400044 	addi	r17,r17,1
   49fb8:	8dc7c83a 	sub	r3,r17,r23
   49fbc:	8009883a 	mov	r4,r16
   49fc0:	e00b883a 	mov	r5,fp
   49fc4:	01800284 	movi	r6,10
   49fc8:	000f883a 	mov	r7,zero
   49fcc:	1cbff216 	blt	r3,r18,49f98 <__alt_data_end+0xfffd7f98>
   49fd0:	dd800917 	ldw	r22,36(sp)
   49fd4:	1007883a 	mov	r3,r2
   49fd8:	05823a0e 	bge	zero,r22,4a8c4 <_dtoa_r+0x1468>
   49fdc:	bdad883a 	add	r22,r23,r22
   49fe0:	0023883a 	mov	r17,zero
   49fe4:	e00b883a 	mov	r5,fp
   49fe8:	01800044 	movi	r6,1
   49fec:	8009883a 	mov	r4,r16
   49ff0:	d8c01515 	stw	r3,84(sp)
   49ff4:	004d2880 	call	4d288 <__lshift>
   49ff8:	1009883a 	mov	r4,r2
   49ffc:	a00b883a 	mov	r5,r20
   4a000:	1039883a 	mov	fp,r2
   4a004:	004d3e40 	call	4d3e4 <__mcmp>
   4a008:	d8c01517 	ldw	r3,84(sp)
   4a00c:	0080d60e 	bge	zero,r2,4a368 <_dtoa_r+0xf0c>
   4a010:	b13fffc3 	ldbu	r4,-1(r22)
   4a014:	b0ffff84 	addi	r3,r22,-2
   4a018:	01800e44 	movi	r6,57
   4a01c:	00000306 	br	4a02c <_dtoa_r+0xbd0>
   4a020:	19000003 	ldbu	r4,0(r3)
   4a024:	102d883a 	mov	r22,r2
   4a028:	18ffffc4 	addi	r3,r3,-1
   4a02c:	21403fcc 	andi	r5,r4,255
   4a030:	2940201c 	xori	r5,r5,128
   4a034:	297fe004 	addi	r5,r5,-128
   4a038:	b0bfffc4 	addi	r2,r22,-1
   4a03c:	2981a71e 	bne	r5,r6,4a6dc <_dtoa_r+0x1280>
   4a040:	b8bff71e 	bne	r23,r2,4a020 <__alt_data_end+0xfffd8020>
   4a044:	d8800617 	ldw	r2,24(sp)
   4a048:	10800044 	addi	r2,r2,1
   4a04c:	d8800615 	stw	r2,24(sp)
   4a050:	00800c44 	movi	r2,49
   4a054:	b8800005 	stb	r2,0(r23)
   4a058:	8009883a 	mov	r4,r16
   4a05c:	a00b883a 	mov	r5,r20
   4a060:	004cbe80 	call	4cbe8 <_Bfree>
   4a064:	a83e9e26 	beq	r21,zero,49ae0 <__alt_data_end+0xfffd7ae0>
   4a068:	88000426 	beq	r17,zero,4a07c <_dtoa_r+0xc20>
   4a06c:	8d400326 	beq	r17,r21,4a07c <_dtoa_r+0xc20>
   4a070:	8009883a 	mov	r4,r16
   4a074:	880b883a 	mov	r5,r17
   4a078:	004cbe80 	call	4cbe8 <_Bfree>
   4a07c:	8009883a 	mov	r4,r16
   4a080:	a80b883a 	mov	r5,r21
   4a084:	004cbe80 	call	4cbe8 <_Bfree>
   4a088:	003e9506 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4a08c:	00c00044 	movi	r3,1
   4a090:	d8c00d15 	stw	r3,52(sp)
   4a094:	003d9f06 	br	49714 <__alt_data_end+0xfffd7714>
   4a098:	d9000817 	ldw	r4,32(sp)
   4a09c:	d8800617 	ldw	r2,24(sp)
   4a0a0:	d8000b15 	stw	zero,44(sp)
   4a0a4:	2089c83a 	sub	r4,r4,r2
   4a0a8:	0087c83a 	sub	r3,zero,r2
   4a0ac:	d9000815 	stw	r4,32(sp)
   4a0b0:	d8c00a15 	stw	r3,40(sp)
   4a0b4:	003da306 	br	49744 <__alt_data_end+0xfffd7744>
   4a0b8:	0529c83a 	sub	r20,zero,r20
   4a0bc:	dd000815 	stw	r20,32(sp)
   4a0c0:	d8000715 	stw	zero,28(sp)
   4a0c4:	003d9806 	br	49728 <__alt_data_end+0xfffd7728>
   4a0c8:	d9000617 	ldw	r4,24(sp)
   4a0cc:	005364c0 	call	5364c <__floatsidf>
   4a0d0:	1009883a 	mov	r4,r2
   4a0d4:	180b883a 	mov	r5,r3
   4a0d8:	980d883a 	mov	r6,r19
   4a0dc:	900f883a 	mov	r7,r18
   4a0e0:	00534140 	call	53414 <__eqdf2>
   4a0e4:	103d7a26 	beq	r2,zero,496d0 <__alt_data_end+0xfffd76d0>
   4a0e8:	d8800617 	ldw	r2,24(sp)
   4a0ec:	10bfffc4 	addi	r2,r2,-1
   4a0f0:	d8800615 	stw	r2,24(sp)
   4a0f4:	003d7606 	br	496d0 <__alt_data_end+0xfffd76d0>
   4a0f8:	dcc00a17 	ldw	r19,40(sp)
   4a0fc:	dc800817 	ldw	r18,32(sp)
   4a100:	002b883a 	mov	r21,zero
   4a104:	003f4906 	br	49e2c <__alt_data_end+0xfffd7e2c>
   4a108:	00800704 	movi	r2,28
   4a10c:	d8c00817 	ldw	r3,32(sp)
   4a110:	d9000717 	ldw	r4,28(sp)
   4a114:	90a5883a 	add	r18,r18,r2
   4a118:	1887883a 	add	r3,r3,r2
   4a11c:	2089883a 	add	r4,r4,r2
   4a120:	d8c00815 	stw	r3,32(sp)
   4a124:	d9000715 	stw	r4,28(sp)
   4a128:	003f8406 	br	49f3c <__alt_data_end+0xfffd7f3c>
   4a12c:	d9c00317 	ldw	r7,12(sp)
   4a130:	013efb84 	movi	r4,-1042
   4a134:	2509c83a 	sub	r4,r4,r20
   4a138:	3908983a 	sll	r4,r7,r4
   4a13c:	003d3006 	br	49600 <__alt_data_end+0xfffd7600>
   4a140:	d8000d15 	stw	zero,52(sp)
   4a144:	003d7306 	br	49714 <__alt_data_end+0xfffd7714>
   4a148:	0480050e 	bge	zero,r18,4a160 <_dtoa_r+0xd04>
   4a14c:	a80b883a 	mov	r5,r21
   4a150:	8009883a 	mov	r4,r16
   4a154:	900d883a 	mov	r6,r18
   4a158:	004d2880 	call	4d288 <__lshift>
   4a15c:	102b883a 	mov	r21,r2
   4a160:	8801611e 	bne	r17,zero,4a6e8 <_dtoa_r+0x128c>
   4a164:	a827883a 	mov	r19,r21
   4a168:	d8c00317 	ldw	r3,12(sp)
   4a16c:	d9000917 	ldw	r4,36(sp)
   4a170:	b8bfffc4 	addi	r2,r23,-1
   4a174:	18c0004c 	andi	r3,r3,1
   4a178:	1105883a 	add	r2,r2,r4
   4a17c:	b825883a 	mov	r18,r23
   4a180:	d8800515 	stw	r2,20(sp)
   4a184:	a823883a 	mov	r17,r21
   4a188:	d8c00315 	stw	r3,12(sp)
   4a18c:	ddc00715 	stw	r23,28(sp)
   4a190:	e009883a 	mov	r4,fp
   4a194:	a00b883a 	mov	r5,r20
   4a198:	00492540 	call	49254 <quorem>
   4a19c:	e009883a 	mov	r4,fp
   4a1a0:	880b883a 	mov	r5,r17
   4a1a4:	102d883a 	mov	r22,r2
   4a1a8:	004d3e40 	call	4d3e4 <__mcmp>
   4a1ac:	980d883a 	mov	r6,r19
   4a1b0:	8009883a 	mov	r4,r16
   4a1b4:	a00b883a 	mov	r5,r20
   4a1b8:	102b883a 	mov	r21,r2
   4a1bc:	004d43c0 	call	4d43c <__mdiff>
   4a1c0:	100d883a 	mov	r6,r2
   4a1c4:	10800317 	ldw	r2,12(r2)
   4a1c8:	b5c00c04 	addi	r23,r22,48
   4a1cc:	10008c26 	beq	r2,zero,4a400 <_dtoa_r+0xfa4>
   4a1d0:	8009883a 	mov	r4,r16
   4a1d4:	300b883a 	mov	r5,r6
   4a1d8:	004cbe80 	call	4cbe8 <_Bfree>
   4a1dc:	00800044 	movi	r2,1
   4a1e0:	a8007116 	blt	r21,zero,4a3a8 <_dtoa_r+0xf4c>
   4a1e4:	a800041e 	bne	r21,zero,4a1f8 <_dtoa_r+0xd9c>
   4a1e8:	d9c00417 	ldw	r7,16(sp)
   4a1ec:	3800021e 	bne	r7,zero,4a1f8 <_dtoa_r+0xd9c>
   4a1f0:	d8c00317 	ldw	r3,12(sp)
   4a1f4:	18006c26 	beq	r3,zero,4a3a8 <_dtoa_r+0xf4c>
   4a1f8:	00814c16 	blt	zero,r2,4a72c <_dtoa_r+0x12d0>
   4a1fc:	d8c00517 	ldw	r3,20(sp)
   4a200:	95400044 	addi	r21,r18,1
   4a204:	95c00005 	stb	r23,0(r18)
   4a208:	a82d883a 	mov	r22,r21
   4a20c:	90c14d26 	beq	r18,r3,4a744 <_dtoa_r+0x12e8>
   4a210:	e00b883a 	mov	r5,fp
   4a214:	8009883a 	mov	r4,r16
   4a218:	01800284 	movi	r6,10
   4a21c:	000f883a 	mov	r7,zero
   4a220:	004cc100 	call	4cc10 <__multadd>
   4a224:	1039883a 	mov	fp,r2
   4a228:	8cc08b26 	beq	r17,r19,4a458 <_dtoa_r+0xffc>
   4a22c:	880b883a 	mov	r5,r17
   4a230:	01800284 	movi	r6,10
   4a234:	000f883a 	mov	r7,zero
   4a238:	8009883a 	mov	r4,r16
   4a23c:	004cc100 	call	4cc10 <__multadd>
   4a240:	980b883a 	mov	r5,r19
   4a244:	8009883a 	mov	r4,r16
   4a248:	01800284 	movi	r6,10
   4a24c:	000f883a 	mov	r7,zero
   4a250:	1023883a 	mov	r17,r2
   4a254:	004cc100 	call	4cc10 <__multadd>
   4a258:	1027883a 	mov	r19,r2
   4a25c:	a825883a 	mov	r18,r21
   4a260:	003fcb06 	br	4a190 <__alt_data_end+0xfffd8190>
   4a264:	d9c00417 	ldw	r7,16(sp)
   4a268:	00800104 	movi	r2,4
   4a26c:	3880e426 	beq	r7,r2,4a600 <_dtoa_r+0x11a4>
   4a270:	00800144 	movi	r2,5
   4a274:	38be3c1e 	bne	r7,r2,49b68 <__alt_data_end+0xfffd7b68>
   4a278:	00c00044 	movi	r3,1
   4a27c:	d8c00c15 	stw	r3,48(sp)
   4a280:	d9c02117 	ldw	r7,132(sp)
   4a284:	d8800617 	ldw	r2,24(sp)
   4a288:	388f883a 	add	r7,r7,r2
   4a28c:	3c800044 	addi	r18,r7,1
   4a290:	d9c00e15 	stw	r7,56(sp)
   4a294:	dc800915 	stw	r18,36(sp)
   4a298:	04bd3e16 	blt	zero,r18,49794 <__alt_data_end+0xfffd7794>
   4a29c:	80001115 	stw	zero,68(r16)
   4a2a0:	000b883a 	mov	r5,zero
   4a2a4:	003d4606 	br	497c0 <__alt_data_end+0xfffd77c0>
   4a2a8:	d8c00317 	ldw	r3,12(sp)
   4a2ac:	183f0e1e 	bne	r3,zero,49ee8 <__alt_data_end+0xfffd7ee8>
   4a2b0:	00c00434 	movhi	r3,16
   4a2b4:	18ffffc4 	addi	r3,r3,-1
   4a2b8:	88c6703a 	and	r3,r17,r3
   4a2bc:	183f0a1e 	bne	r3,zero,49ee8 <__alt_data_end+0xfffd7ee8>
   4a2c0:	8c5ffc2c 	andhi	r17,r17,32752
   4a2c4:	883f0826 	beq	r17,zero,49ee8 <__alt_data_end+0xfffd7ee8>
   4a2c8:	d9000817 	ldw	r4,32(sp)
   4a2cc:	d9c00717 	ldw	r7,28(sp)
   4a2d0:	1023883a 	mov	r17,r2
   4a2d4:	2089883a 	add	r4,r4,r2
   4a2d8:	388f883a 	add	r7,r7,r2
   4a2dc:	d9000815 	stw	r4,32(sp)
   4a2e0:	d9c00715 	stw	r7,28(sp)
   4a2e4:	003f0106 	br	49eec <__alt_data_end+0xfffd7eec>
   4a2e8:	9005883a 	mov	r2,r18
   4a2ec:	003ed306 	br	49e3c <__alt_data_end+0xfffd7e3c>
   4a2f0:	d8800917 	ldw	r2,36(sp)
   4a2f4:	00be3516 	blt	zero,r2,49bcc <__alt_data_end+0xfffd7bcc>
   4a2f8:	1000b61e 	bne	r2,zero,4a5d4 <_dtoa_r+0x1178>
   4a2fc:	9009883a 	mov	r4,r18
   4a300:	980b883a 	mov	r5,r19
   4a304:	000d883a 	mov	r6,zero
   4a308:	01d00534 	movhi	r7,16404
   4a30c:	0052f7c0 	call	52f7c <__muldf3>
   4a310:	d9800317 	ldw	r6,12(sp)
   4a314:	1009883a 	mov	r4,r2
   4a318:	180b883a 	mov	r5,r3
   4a31c:	880f883a 	mov	r7,r17
   4a320:	00535300 	call	53530 <__gedf2>
   4a324:	0029883a 	mov	r20,zero
   4a328:	002b883a 	mov	r21,zero
   4a32c:	10007e16 	blt	r2,zero,4a528 <_dtoa_r+0x10cc>
   4a330:	d8802117 	ldw	r2,132(sp)
   4a334:	b82d883a 	mov	r22,r23
   4a338:	0084303a 	nor	r2,zero,r2
   4a33c:	d8800615 	stw	r2,24(sp)
   4a340:	8009883a 	mov	r4,r16
   4a344:	a00b883a 	mov	r5,r20
   4a348:	004cbe80 	call	4cbe8 <_Bfree>
   4a34c:	a83f4b1e 	bne	r21,zero,4a07c <__alt_data_end+0xfffd807c>
   4a350:	003de306 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4a354:	e00b883a 	mov	r5,fp
   4a358:	8009883a 	mov	r4,r16
   4a35c:	004d15c0 	call	4d15c <__pow5mult>
   4a360:	1039883a 	mov	fp,r2
   4a364:	003ed206 	br	49eb0 <__alt_data_end+0xfffd7eb0>
   4a368:	1000021e 	bne	r2,zero,4a374 <_dtoa_r+0xf18>
   4a36c:	18c0004c 	andi	r3,r3,1
   4a370:	183f271e 	bne	r3,zero,4a010 <__alt_data_end+0xfffd8010>
   4a374:	01000c04 	movi	r4,48
   4a378:	00000106 	br	4a380 <_dtoa_r+0xf24>
   4a37c:	102d883a 	mov	r22,r2
   4a380:	b0bfffc4 	addi	r2,r22,-1
   4a384:	10c00007 	ldb	r3,0(r2)
   4a388:	193ffc26 	beq	r3,r4,4a37c <__alt_data_end+0xfffd837c>
   4a38c:	003f3206 	br	4a058 <__alt_data_end+0xfffd8058>
   4a390:	d8c00f17 	ldw	r3,60(sp)
   4a394:	18015026 	beq	r3,zero,4a8d8 <_dtoa_r+0x147c>
   4a398:	10810cc4 	addi	r2,r2,1075
   4a39c:	dcc00a17 	ldw	r19,40(sp)
   4a3a0:	dc800817 	ldw	r18,32(sp)
   4a3a4:	003e9706 	br	49e04 <__alt_data_end+0xfffd7e04>
   4a3a8:	b807883a 	mov	r3,r23
   4a3ac:	182b883a 	mov	r21,r3
   4a3b0:	ddc00717 	ldw	r23,28(sp)
   4a3b4:	00800e0e 	bge	zero,r2,4a3f0 <_dtoa_r+0xf94>
   4a3b8:	e00b883a 	mov	r5,fp
   4a3bc:	01800044 	movi	r6,1
   4a3c0:	8009883a 	mov	r4,r16
   4a3c4:	d8c01515 	stw	r3,84(sp)
   4a3c8:	004d2880 	call	4d288 <__lshift>
   4a3cc:	1009883a 	mov	r4,r2
   4a3d0:	a00b883a 	mov	r5,r20
   4a3d4:	1039883a 	mov	fp,r2
   4a3d8:	004d3e40 	call	4d3e4 <__mcmp>
   4a3dc:	d8c01517 	ldw	r3,84(sp)
   4a3e0:	0081880e 	bge	zero,r2,4aa04 <_dtoa_r+0x15a8>
   4a3e4:	00800e44 	movi	r2,57
   4a3e8:	b0c00c44 	addi	r3,r22,49
   4a3ec:	a8816326 	beq	r21,r2,4a97c <_dtoa_r+0x1520>
   4a3f0:	90c00005 	stb	r3,0(r18)
   4a3f4:	95800044 	addi	r22,r18,1
   4a3f8:	982b883a 	mov	r21,r19
   4a3fc:	003f1606 	br	4a058 <__alt_data_end+0xfffd8058>
   4a400:	300b883a 	mov	r5,r6
   4a404:	e009883a 	mov	r4,fp
   4a408:	d9801515 	stw	r6,84(sp)
   4a40c:	004d3e40 	call	4d3e4 <__mcmp>
   4a410:	d9801517 	ldw	r6,84(sp)
   4a414:	8009883a 	mov	r4,r16
   4a418:	d8801515 	stw	r2,84(sp)
   4a41c:	300b883a 	mov	r5,r6
   4a420:	004cbe80 	call	4cbe8 <_Bfree>
   4a424:	d8801517 	ldw	r2,84(sp)
   4a428:	103f6d1e 	bne	r2,zero,4a1e0 <__alt_data_end+0xfffd81e0>
   4a42c:	d9c00417 	ldw	r7,16(sp)
   4a430:	383f6b1e 	bne	r7,zero,4a1e0 <__alt_data_end+0xfffd81e0>
   4a434:	d8c00317 	ldw	r3,12(sp)
   4a438:	183f691e 	bne	r3,zero,4a1e0 <__alt_data_end+0xfffd81e0>
   4a43c:	b807883a 	mov	r3,r23
   4a440:	00800e44 	movi	r2,57
   4a444:	ddc00717 	ldw	r23,28(sp)
   4a448:	18814c26 	beq	r3,r2,4a97c <_dtoa_r+0x1520>
   4a44c:	057fe80e 	bge	zero,r21,4a3f0 <__alt_data_end+0xfffd83f0>
   4a450:	b0c00c44 	addi	r3,r22,49
   4a454:	003fe606 	br	4a3f0 <__alt_data_end+0xfffd83f0>
   4a458:	880b883a 	mov	r5,r17
   4a45c:	8009883a 	mov	r4,r16
   4a460:	01800284 	movi	r6,10
   4a464:	000f883a 	mov	r7,zero
   4a468:	004cc100 	call	4cc10 <__multadd>
   4a46c:	1023883a 	mov	r17,r2
   4a470:	1027883a 	mov	r19,r2
   4a474:	a825883a 	mov	r18,r21
   4a478:	003f4506 	br	4a190 <__alt_data_end+0xfffd8190>
   4a47c:	e009883a 	mov	r4,fp
   4a480:	a00b883a 	mov	r5,r20
   4a484:	004d3e40 	call	4d3e4 <__mcmp>
   4a488:	103ebc0e 	bge	r2,zero,49f7c <__alt_data_end+0xfffd7f7c>
   4a48c:	e00b883a 	mov	r5,fp
   4a490:	8009883a 	mov	r4,r16
   4a494:	01800284 	movi	r6,10
   4a498:	000f883a 	mov	r7,zero
   4a49c:	004cc100 	call	4cc10 <__multadd>
   4a4a0:	1039883a 	mov	fp,r2
   4a4a4:	d8800617 	ldw	r2,24(sp)
   4a4a8:	d8c00c17 	ldw	r3,48(sp)
   4a4ac:	10bfffc4 	addi	r2,r2,-1
   4a4b0:	d8800615 	stw	r2,24(sp)
   4a4b4:	1801571e 	bne	r3,zero,4aa14 <_dtoa_r+0x15b8>
   4a4b8:	d9c00e17 	ldw	r7,56(sp)
   4a4bc:	d9c00915 	stw	r7,36(sp)
   4a4c0:	003eae06 	br	49f7c <__alt_data_end+0xfffd7f7c>
   4a4c4:	a0800417 	ldw	r2,16(r20)
   4a4c8:	10800104 	addi	r2,r2,4
   4a4cc:	1085883a 	add	r2,r2,r2
   4a4d0:	1085883a 	add	r2,r2,r2
   4a4d4:	a085883a 	add	r2,r20,r2
   4a4d8:	11000017 	ldw	r4,0(r2)
   4a4dc:	004ce280 	call	4ce28 <__hi0bits>
   4a4e0:	00c00804 	movi	r3,32
   4a4e4:	1885c83a 	sub	r2,r3,r2
   4a4e8:	003e8306 	br	49ef8 <__alt_data_end+0xfffd7ef8>
   4a4ec:	d9c00417 	ldw	r7,16(sp)
   4a4f0:	00800084 	movi	r2,2
   4a4f4:	11fea30e 	bge	r2,r7,49f84 <__alt_data_end+0xfffd7f84>
   4a4f8:	d8800917 	ldw	r2,36(sp)
   4a4fc:	103f8c1e 	bne	r2,zero,4a330 <__alt_data_end+0xfffd8330>
   4a500:	a00b883a 	mov	r5,r20
   4a504:	8009883a 	mov	r4,r16
   4a508:	01800144 	movi	r6,5
   4a50c:	000f883a 	mov	r7,zero
   4a510:	004cc100 	call	4cc10 <__multadd>
   4a514:	e009883a 	mov	r4,fp
   4a518:	100b883a 	mov	r5,r2
   4a51c:	1029883a 	mov	r20,r2
   4a520:	004d3e40 	call	4d3e4 <__mcmp>
   4a524:	00bf820e 	bge	zero,r2,4a330 <__alt_data_end+0xfffd8330>
   4a528:	00800c44 	movi	r2,49
   4a52c:	b8800005 	stb	r2,0(r23)
   4a530:	d8800617 	ldw	r2,24(sp)
   4a534:	bd800044 	addi	r22,r23,1
   4a538:	10800044 	addi	r2,r2,1
   4a53c:	d8800615 	stw	r2,24(sp)
   4a540:	003f7f06 	br	4a340 <__alt_data_end+0xfffd8340>
   4a544:	dc000417 	ldw	r16,16(sp)
   4a548:	003d6506 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4a54c:	9009883a 	mov	r4,r18
   4a550:	005364c0 	call	5364c <__floatsidf>
   4a554:	1009883a 	mov	r4,r2
   4a558:	180b883a 	mov	r5,r3
   4a55c:	980d883a 	mov	r6,r19
   4a560:	a00f883a 	mov	r7,r20
   4a564:	0052f7c0 	call	52f7c <__muldf3>
   4a568:	1009883a 	mov	r4,r2
   4a56c:	180b883a 	mov	r5,r3
   4a570:	000d883a 	mov	r6,zero
   4a574:	01d00734 	movhi	r7,16412
   4a578:	0052ec80 	call	52ec8 <__adddf3>
   4a57c:	057f3034 	movhi	r21,64704
   4a580:	1025883a 	mov	r18,r2
   4a584:	1d6b883a 	add	r21,r3,r21
   4a588:	9809883a 	mov	r4,r19
   4a58c:	a00b883a 	mov	r5,r20
   4a590:	000d883a 	mov	r6,zero
   4a594:	01d00534 	movhi	r7,16404
   4a598:	0052f1c0 	call	52f1c <__subdf3>
   4a59c:	1009883a 	mov	r4,r2
   4a5a0:	180b883a 	mov	r5,r3
   4a5a4:	900d883a 	mov	r6,r18
   4a5a8:	a80f883a 	mov	r7,r21
   4a5ac:	1027883a 	mov	r19,r2
   4a5b0:	1829883a 	mov	r20,r3
   4a5b4:	00534cc0 	call	534cc <__gtdf2>
   4a5b8:	00806616 	blt	zero,r2,4a754 <_dtoa_r+0x12f8>
   4a5bc:	a9e0003c 	xorhi	r7,r21,32768
   4a5c0:	9809883a 	mov	r4,r19
   4a5c4:	a00b883a 	mov	r5,r20
   4a5c8:	900d883a 	mov	r6,r18
   4a5cc:	00535940 	call	53594 <__ltdf2>
   4a5d0:	103d710e 	bge	r2,zero,49b98 <__alt_data_end+0xfffd7b98>
   4a5d4:	0029883a 	mov	r20,zero
   4a5d8:	002b883a 	mov	r21,zero
   4a5dc:	003f5406 	br	4a330 <__alt_data_end+0xfffd8330>
   4a5e0:	d9800a17 	ldw	r6,40(sp)
   4a5e4:	e00b883a 	mov	r5,fp
   4a5e8:	8009883a 	mov	r4,r16
   4a5ec:	004d15c0 	call	4d15c <__pow5mult>
   4a5f0:	1039883a 	mov	fp,r2
   4a5f4:	003e2e06 	br	49eb0 <__alt_data_end+0xfffd7eb0>
   4a5f8:	d8000c15 	stw	zero,48(sp)
   4a5fc:	003f2006 	br	4a280 <__alt_data_end+0xfffd8280>
   4a600:	00800044 	movi	r2,1
   4a604:	d8800c15 	stw	r2,48(sp)
   4a608:	003c5d06 	br	49780 <__alt_data_end+0xfffd7780>
   4a60c:	d8c00a17 	ldw	r3,40(sp)
   4a610:	d9000b17 	ldw	r4,44(sp)
   4a614:	dcc00a15 	stw	r19,40(sp)
   4a618:	98c5c83a 	sub	r2,r19,r3
   4a61c:	2089883a 	add	r4,r4,r2
   4a620:	d9000b15 	stw	r4,44(sp)
   4a624:	0027883a 	mov	r19,zero
   4a628:	003df206 	br	49df4 <__alt_data_end+0xfffd7df4>
   4a62c:	d9000317 	ldw	r4,12(sp)
   4a630:	8829883a 	mov	r20,r17
   4a634:	04800084 	movi	r18,2
   4a638:	d9001015 	stw	r4,64(sp)
   4a63c:	003c8106 	br	49844 <__alt_data_end+0xfffd7844>
   4a640:	04800044 	movi	r18,1
   4a644:	dc800e15 	stw	r18,56(sp)
   4a648:	dc800915 	stw	r18,36(sp)
   4a64c:	dc802115 	stw	r18,132(sp)
   4a650:	003f1206 	br	4a29c <__alt_data_end+0xfffd829c>
   4a654:	d8800617 	ldw	r2,24(sp)
   4a658:	00abc83a 	sub	r21,zero,r2
   4a65c:	a800a426 	beq	r21,zero,4a8f0 <_dtoa_r+0x1494>
   4a660:	a88003cc 	andi	r2,r21,15
   4a664:	100490fa 	slli	r2,r2,3
   4a668:	00c00174 	movhi	r3,5
   4a66c:	18d82b04 	addi	r3,r3,24748
   4a670:	d9000317 	ldw	r4,12(sp)
   4a674:	1885883a 	add	r2,r3,r2
   4a678:	11800017 	ldw	r6,0(r2)
   4a67c:	11c00117 	ldw	r7,4(r2)
   4a680:	a82bd13a 	srai	r21,r21,4
   4a684:	880b883a 	mov	r5,r17
   4a688:	0052f7c0 	call	52f7c <__muldf3>
   4a68c:	1027883a 	mov	r19,r2
   4a690:	1829883a 	mov	r20,r3
   4a694:	a800e826 	beq	r21,zero,4aa38 <_dtoa_r+0x15dc>
   4a698:	05800174 	movhi	r22,5
   4a69c:	b5982104 	addi	r22,r22,24708
   4a6a0:	04800084 	movi	r18,2
   4a6a4:	a980004c 	andi	r6,r21,1
   4a6a8:	1009883a 	mov	r4,r2
   4a6ac:	a82bd07a 	srai	r21,r21,1
   4a6b0:	180b883a 	mov	r5,r3
   4a6b4:	30000426 	beq	r6,zero,4a6c8 <_dtoa_r+0x126c>
   4a6b8:	b1800017 	ldw	r6,0(r22)
   4a6bc:	b1c00117 	ldw	r7,4(r22)
   4a6c0:	94800044 	addi	r18,r18,1
   4a6c4:	0052f7c0 	call	52f7c <__muldf3>
   4a6c8:	b5800204 	addi	r22,r22,8
   4a6cc:	a83ff51e 	bne	r21,zero,4a6a4 <__alt_data_end+0xfffd86a4>
   4a6d0:	1027883a 	mov	r19,r2
   4a6d4:	1829883a 	mov	r20,r3
   4a6d8:	003c7306 	br	498a8 <__alt_data_end+0xfffd78a8>
   4a6dc:	21000044 	addi	r4,r4,1
   4a6e0:	11000005 	stb	r4,0(r2)
   4a6e4:	003e5c06 	br	4a058 <__alt_data_end+0xfffd8058>
   4a6e8:	a9400117 	ldw	r5,4(r21)
   4a6ec:	8009883a 	mov	r4,r16
   4a6f0:	004cb400 	call	4cb40 <_Balloc>
   4a6f4:	a9800417 	ldw	r6,16(r21)
   4a6f8:	11000304 	addi	r4,r2,12
   4a6fc:	a9400304 	addi	r5,r21,12
   4a700:	31800084 	addi	r6,r6,2
   4a704:	318d883a 	add	r6,r6,r6
   4a708:	318d883a 	add	r6,r6,r6
   4a70c:	1023883a 	mov	r17,r2
   4a710:	004c8440 	call	4c844 <memcpy>
   4a714:	8009883a 	mov	r4,r16
   4a718:	880b883a 	mov	r5,r17
   4a71c:	01800044 	movi	r6,1
   4a720:	004d2880 	call	4d288 <__lshift>
   4a724:	1027883a 	mov	r19,r2
   4a728:	003e8f06 	br	4a168 <__alt_data_end+0xfffd8168>
   4a72c:	b807883a 	mov	r3,r23
   4a730:	00800e44 	movi	r2,57
   4a734:	ddc00717 	ldw	r23,28(sp)
   4a738:	18809026 	beq	r3,r2,4a97c <_dtoa_r+0x1520>
   4a73c:	18c00044 	addi	r3,r3,1
   4a740:	003f2b06 	br	4a3f0 <__alt_data_end+0xfffd83f0>
   4a744:	b807883a 	mov	r3,r23
   4a748:	982b883a 	mov	r21,r19
   4a74c:	ddc00717 	ldw	r23,28(sp)
   4a750:	003e2406 	br	49fe4 <__alt_data_end+0xfffd7fe4>
   4a754:	0029883a 	mov	r20,zero
   4a758:	002b883a 	mov	r21,zero
   4a75c:	003f7206 	br	4a528 <__alt_data_end+0xfffd8528>
   4a760:	593fffc4 	addi	r4,r11,-1
   4a764:	200490fa 	slli	r2,r4,3
   4a768:	00c00174 	movhi	r3,5
   4a76c:	18d82b04 	addi	r3,r3,24748
   4a770:	d9001015 	stw	r4,64(sp)
   4a774:	1885883a 	add	r2,r3,r2
   4a778:	11000017 	ldw	r4,0(r2)
   4a77c:	11400117 	ldw	r5,4(r2)
   4a780:	900d883a 	mov	r6,r18
   4a784:	a80f883a 	mov	r7,r21
   4a788:	dac01615 	stw	r11,88(sp)
   4a78c:	0052f7c0 	call	52f7c <__muldf3>
   4a790:	a00b883a 	mov	r5,r20
   4a794:	9809883a 	mov	r4,r19
   4a798:	d8c01215 	stw	r3,72(sp)
   4a79c:	d8801115 	stw	r2,68(sp)
   4a7a0:	00537200 	call	53720 <__fixdfsi>
   4a7a4:	1009883a 	mov	r4,r2
   4a7a8:	1025883a 	mov	r18,r2
   4a7ac:	005364c0 	call	5364c <__floatsidf>
   4a7b0:	9809883a 	mov	r4,r19
   4a7b4:	a00b883a 	mov	r5,r20
   4a7b8:	100d883a 	mov	r6,r2
   4a7bc:	180f883a 	mov	r7,r3
   4a7c0:	94800c04 	addi	r18,r18,48
   4a7c4:	0052f1c0 	call	52f1c <__subdf3>
   4a7c8:	bc800005 	stb	r18,0(r23)
   4a7cc:	dac01617 	ldw	r11,88(sp)
   4a7d0:	102b883a 	mov	r21,r2
   4a7d4:	00800044 	movi	r2,1
   4a7d8:	bd800044 	addi	r22,r23,1
   4a7dc:	1815883a 	mov	r10,r3
   4a7e0:	58802226 	beq	r11,r2,4a86c <_dtoa_r+0x1410>
   4a7e4:	bad7883a 	add	r11,r23,r11
   4a7e8:	dc001415 	stw	r16,80(sp)
   4a7ec:	a805883a 	mov	r2,r21
   4a7f0:	b027883a 	mov	r19,r22
   4a7f4:	5821883a 	mov	r16,r11
   4a7f8:	882b883a 	mov	r21,r17
   4a7fc:	000d883a 	mov	r6,zero
   4a800:	01d00934 	movhi	r7,16420
   4a804:	1009883a 	mov	r4,r2
   4a808:	180b883a 	mov	r5,r3
   4a80c:	0052f7c0 	call	52f7c <__muldf3>
   4a810:	180b883a 	mov	r5,r3
   4a814:	1009883a 	mov	r4,r2
   4a818:	1829883a 	mov	r20,r3
   4a81c:	1023883a 	mov	r17,r2
   4a820:	00537200 	call	53720 <__fixdfsi>
   4a824:	1009883a 	mov	r4,r2
   4a828:	1025883a 	mov	r18,r2
   4a82c:	005364c0 	call	5364c <__floatsidf>
   4a830:	8809883a 	mov	r4,r17
   4a834:	a00b883a 	mov	r5,r20
   4a838:	100d883a 	mov	r6,r2
   4a83c:	180f883a 	mov	r7,r3
   4a840:	94800c04 	addi	r18,r18,48
   4a844:	0052f1c0 	call	52f1c <__subdf3>
   4a848:	9cc00044 	addi	r19,r19,1
   4a84c:	9cbfffc5 	stb	r18,-1(r19)
   4a850:	9c3fea1e 	bne	r19,r16,4a7fc <__alt_data_end+0xfffd87fc>
   4a854:	1815883a 	mov	r10,r3
   4a858:	d8c01017 	ldw	r3,64(sp)
   4a85c:	dc001417 	ldw	r16,80(sp)
   4a860:	a823883a 	mov	r17,r21
   4a864:	b0ed883a 	add	r22,r22,r3
   4a868:	102b883a 	mov	r21,r2
   4a86c:	d9001117 	ldw	r4,68(sp)
   4a870:	d9401217 	ldw	r5,72(sp)
   4a874:	000d883a 	mov	r6,zero
   4a878:	01cff834 	movhi	r7,16352
   4a87c:	da801515 	stw	r10,84(sp)
   4a880:	0052ec80 	call	52ec8 <__adddf3>
   4a884:	da801517 	ldw	r10,84(sp)
   4a888:	1009883a 	mov	r4,r2
   4a88c:	180b883a 	mov	r5,r3
   4a890:	500f883a 	mov	r7,r10
   4a894:	a80d883a 	mov	r6,r21
   4a898:	00535940 	call	53594 <__ltdf2>
   4a89c:	da801517 	ldw	r10,84(sp)
   4a8a0:	10003b0e 	bge	r2,zero,4a990 <_dtoa_r+0x1534>
   4a8a4:	d9c01317 	ldw	r7,76(sp)
   4a8a8:	b53fffc3 	ldbu	r20,-1(r22)
   4a8ac:	d9c00615 	stw	r7,24(sp)
   4a8b0:	003d3106 	br	49d78 <__alt_data_end+0xfffd7d78>
   4a8b4:	d8800817 	ldw	r2,32(sp)
   4a8b8:	11e5c83a 	sub	r18,r2,r7
   4a8bc:	0005883a 	mov	r2,zero
   4a8c0:	003d5006 	br	49e04 <__alt_data_end+0xfffd7e04>
   4a8c4:	05800044 	movi	r22,1
   4a8c8:	003dc406 	br	49fdc <__alt_data_end+0xfffd7fdc>
   4a8cc:	a5000044 	addi	r20,r20,1
   4a8d0:	15000005 	stb	r20,0(r2)
   4a8d4:	003c8206 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4a8d8:	d8800217 	ldw	r2,8(sp)
   4a8dc:	00c00d84 	movi	r3,54
   4a8e0:	dcc00a17 	ldw	r19,40(sp)
   4a8e4:	1885c83a 	sub	r2,r3,r2
   4a8e8:	dc800817 	ldw	r18,32(sp)
   4a8ec:	003d4506 	br	49e04 <__alt_data_end+0xfffd7e04>
   4a8f0:	dcc00317 	ldw	r19,12(sp)
   4a8f4:	8829883a 	mov	r20,r17
   4a8f8:	04800084 	movi	r18,2
   4a8fc:	003bea06 	br	498a8 <__alt_data_end+0xfffd78a8>
   4a900:	d9000917 	ldw	r4,36(sp)
   4a904:	203f1126 	beq	r4,zero,4a54c <__alt_data_end+0xfffd854c>
   4a908:	d9c00e17 	ldw	r7,56(sp)
   4a90c:	01fca20e 	bge	zero,r7,49b98 <__alt_data_end+0xfffd7b98>
   4a910:	a00b883a 	mov	r5,r20
   4a914:	9809883a 	mov	r4,r19
   4a918:	000d883a 	mov	r6,zero
   4a91c:	01d00934 	movhi	r7,16420
   4a920:	0052f7c0 	call	52f7c <__muldf3>
   4a924:	91000044 	addi	r4,r18,1
   4a928:	1027883a 	mov	r19,r2
   4a92c:	1829883a 	mov	r20,r3
   4a930:	005364c0 	call	5364c <__floatsidf>
   4a934:	9809883a 	mov	r4,r19
   4a938:	a00b883a 	mov	r5,r20
   4a93c:	100d883a 	mov	r6,r2
   4a940:	180f883a 	mov	r7,r3
   4a944:	0052f7c0 	call	52f7c <__muldf3>
   4a948:	1009883a 	mov	r4,r2
   4a94c:	180b883a 	mov	r5,r3
   4a950:	000d883a 	mov	r6,zero
   4a954:	01d00734 	movhi	r7,16412
   4a958:	0052ec80 	call	52ec8 <__adddf3>
   4a95c:	1025883a 	mov	r18,r2
   4a960:	d8800617 	ldw	r2,24(sp)
   4a964:	057f3034 	movhi	r21,64704
   4a968:	1d6b883a 	add	r21,r3,r21
   4a96c:	10bfffc4 	addi	r2,r2,-1
   4a970:	d8801315 	stw	r2,76(sp)
   4a974:	dac00e17 	ldw	r11,56(sp)
   4a978:	003be706 	br	49918 <__alt_data_end+0xfffd7918>
   4a97c:	01000e44 	movi	r4,57
   4a980:	91000005 	stb	r4,0(r18)
   4a984:	95800044 	addi	r22,r18,1
   4a988:	982b883a 	mov	r21,r19
   4a98c:	003da106 	br	4a014 <__alt_data_end+0xfffd8014>
   4a990:	d9801117 	ldw	r6,68(sp)
   4a994:	d9c01217 	ldw	r7,72(sp)
   4a998:	0009883a 	mov	r4,zero
   4a99c:	014ff834 	movhi	r5,16352
   4a9a0:	da801515 	stw	r10,84(sp)
   4a9a4:	0052f1c0 	call	52f1c <__subdf3>
   4a9a8:	da801517 	ldw	r10,84(sp)
   4a9ac:	1009883a 	mov	r4,r2
   4a9b0:	180b883a 	mov	r5,r3
   4a9b4:	a80d883a 	mov	r6,r21
   4a9b8:	500f883a 	mov	r7,r10
   4a9bc:	00534cc0 	call	534cc <__gtdf2>
   4a9c0:	00bc750e 	bge	zero,r2,49b98 <__alt_data_end+0xfffd7b98>
   4a9c4:	01000c04 	movi	r4,48
   4a9c8:	00000106 	br	4a9d0 <_dtoa_r+0x1574>
   4a9cc:	102d883a 	mov	r22,r2
   4a9d0:	b0bfffc4 	addi	r2,r22,-1
   4a9d4:	10c00007 	ldb	r3,0(r2)
   4a9d8:	193ffc26 	beq	r3,r4,4a9cc <__alt_data_end+0xfffd89cc>
   4a9dc:	d8801317 	ldw	r2,76(sp)
   4a9e0:	d8800615 	stw	r2,24(sp)
   4a9e4:	003c3e06 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4a9e8:	d9001317 	ldw	r4,76(sp)
   4a9ec:	df001117 	ldw	fp,68(sp)
   4a9f0:	d9000615 	stw	r4,24(sp)
   4a9f4:	003ce006 	br	49d78 <__alt_data_end+0xfffd7d78>
   4a9f8:	df001117 	ldw	fp,68(sp)
   4a9fc:	dc401217 	ldw	r17,72(sp)
   4aa00:	003c6506 	br	49b98 <__alt_data_end+0xfffd7b98>
   4aa04:	103e7a1e 	bne	r2,zero,4a3f0 <__alt_data_end+0xfffd83f0>
   4aa08:	1880004c 	andi	r2,r3,1
   4aa0c:	103e7826 	beq	r2,zero,4a3f0 <__alt_data_end+0xfffd83f0>
   4aa10:	003e7406 	br	4a3e4 <__alt_data_end+0xfffd83e4>
   4aa14:	8009883a 	mov	r4,r16
   4aa18:	a80b883a 	mov	r5,r21
   4aa1c:	01800284 	movi	r6,10
   4aa20:	000f883a 	mov	r7,zero
   4aa24:	004cc100 	call	4cc10 <__multadd>
   4aa28:	d9000e17 	ldw	r4,56(sp)
   4aa2c:	102b883a 	mov	r21,r2
   4aa30:	d9000915 	stw	r4,36(sp)
   4aa34:	003d5106 	br	49f7c <__alt_data_end+0xfffd7f7c>
   4aa38:	04800084 	movi	r18,2
   4aa3c:	003b9a06 	br	498a8 <__alt_data_end+0xfffd78a8>
   4aa40:	d8c01317 	ldw	r3,76(sp)
   4aa44:	d8c00615 	stw	r3,24(sp)
   4aa48:	003ccb06 	br	49d78 <__alt_data_end+0xfffd7d78>
   4aa4c:	d8c01317 	ldw	r3,76(sp)
   4aa50:	d8c00615 	stw	r3,24(sp)
   4aa54:	003c2206 	br	49ae0 <__alt_data_end+0xfffd7ae0>
   4aa58:	20fd3826 	beq	r4,r3,49f3c <__alt_data_end+0xfffd7f3c>
   4aa5c:	00c00f04 	movi	r3,60
   4aa60:	1885c83a 	sub	r2,r3,r2
   4aa64:	003da906 	br	4a10c <__alt_data_end+0xfffd810c>
   4aa68:	000b883a 	mov	r5,zero
   4aa6c:	003b5406 	br	497c0 <__alt_data_end+0xfffd77c0>
   4aa70:	04c00044 	movi	r19,1
   4aa74:	003b3b06 	br	49764 <__alt_data_end+0xfffd7764>

0004aa78 <_fflush_r>:
   4aa78:	defffb04 	addi	sp,sp,-20
   4aa7c:	dcc00315 	stw	r19,12(sp)
   4aa80:	dc400115 	stw	r17,4(sp)
   4aa84:	dfc00415 	stw	ra,16(sp)
   4aa88:	dc800215 	stw	r18,8(sp)
   4aa8c:	dc000015 	stw	r16,0(sp)
   4aa90:	2027883a 	mov	r19,r4
   4aa94:	2823883a 	mov	r17,r5
   4aa98:	20000226 	beq	r4,zero,4aaa4 <_fflush_r+0x2c>
   4aa9c:	20800e17 	ldw	r2,56(r4)
   4aaa0:	10005726 	beq	r2,zero,4ac00 <_fflush_r+0x188>
   4aaa4:	8880030b 	ldhu	r2,12(r17)
   4aaa8:	10c0020c 	andi	r3,r2,8
   4aaac:	18ffffcc 	andi	r3,r3,65535
   4aab0:	18e0001c 	xori	r3,r3,32768
   4aab4:	18e00004 	addi	r3,r3,-32768
   4aab8:	1800311e 	bne	r3,zero,4ab80 <_fflush_r+0x108>
   4aabc:	89000117 	ldw	r4,4(r17)
   4aac0:	10c20014 	ori	r3,r2,2048
   4aac4:	88c0030d 	sth	r3,12(r17)
   4aac8:	180b883a 	mov	r5,r3
   4aacc:	0100520e 	bge	zero,r4,4ac18 <_fflush_r+0x1a0>
   4aad0:	88c00a17 	ldw	r3,40(r17)
   4aad4:	18002226 	beq	r3,zero,4ab60 <_fflush_r+0xe8>
   4aad8:	1084000c 	andi	r2,r2,4096
   4aadc:	10bfffcc 	andi	r2,r2,65535
   4aae0:	10a0001c 	xori	r2,r2,32768
   4aae4:	10a00004 	addi	r2,r2,-32768
   4aae8:	10004e26 	beq	r2,zero,4ac24 <_fflush_r+0x1ac>
   4aaec:	8c001417 	ldw	r16,80(r17)
   4aaf0:	2940010c 	andi	r5,r5,4
   4aaf4:	297fffcc 	andi	r5,r5,65535
   4aaf8:	2960001c 	xori	r5,r5,32768
   4aafc:	29600004 	addi	r5,r5,-32768
   4ab00:	28000626 	beq	r5,zero,4ab1c <_fflush_r+0xa4>
   4ab04:	89000117 	ldw	r4,4(r17)
   4ab08:	88800c17 	ldw	r2,48(r17)
   4ab0c:	8121c83a 	sub	r16,r16,r4
   4ab10:	10000226 	beq	r2,zero,4ab1c <_fflush_r+0xa4>
   4ab14:	88800f17 	ldw	r2,60(r17)
   4ab18:	80a1c83a 	sub	r16,r16,r2
   4ab1c:	89400717 	ldw	r5,28(r17)
   4ab20:	9809883a 	mov	r4,r19
   4ab24:	800d883a 	mov	r6,r16
   4ab28:	000f883a 	mov	r7,zero
   4ab2c:	183ee83a 	callr	r3
   4ab30:	8080281e 	bne	r16,r2,4abd4 <_fflush_r+0x15c>
   4ab34:	8880030b 	ldhu	r2,12(r17)
   4ab38:	88c00417 	ldw	r3,16(r17)
   4ab3c:	88000115 	stw	zero,4(r17)
   4ab40:	113dffcc 	andi	r4,r2,63487
   4ab44:	1084000c 	andi	r2,r2,4096
   4ab48:	10bfffcc 	andi	r2,r2,65535
   4ab4c:	10a0001c 	xori	r2,r2,32768
   4ab50:	8900030d 	sth	r4,12(r17)
   4ab54:	88c00015 	stw	r3,0(r17)
   4ab58:	10a00004 	addi	r2,r2,-32768
   4ab5c:	10002c1e 	bne	r2,zero,4ac10 <_fflush_r+0x198>
   4ab60:	0005883a 	mov	r2,zero
   4ab64:	dfc00417 	ldw	ra,16(sp)
   4ab68:	dcc00317 	ldw	r19,12(sp)
   4ab6c:	dc800217 	ldw	r18,8(sp)
   4ab70:	dc400117 	ldw	r17,4(sp)
   4ab74:	dc000017 	ldw	r16,0(sp)
   4ab78:	dec00504 	addi	sp,sp,20
   4ab7c:	f800283a 	ret
   4ab80:	8c800417 	ldw	r18,16(r17)
   4ab84:	903ff626 	beq	r18,zero,4ab60 <__alt_data_end+0xfffd8b60>
   4ab88:	8c000017 	ldw	r16,0(r17)
   4ab8c:	108000cc 	andi	r2,r2,3
   4ab90:	8c800015 	stw	r18,0(r17)
   4ab94:	84a1c83a 	sub	r16,r16,r18
   4ab98:	10001b1e 	bne	r2,zero,4ac08 <_fflush_r+0x190>
   4ab9c:	88800517 	ldw	r2,20(r17)
   4aba0:	88800215 	stw	r2,8(r17)
   4aba4:	04000316 	blt	zero,r16,4abb4 <_fflush_r+0x13c>
   4aba8:	003fed06 	br	4ab60 <__alt_data_end+0xfffd8b60>
   4abac:	90a5883a 	add	r18,r18,r2
   4abb0:	043feb0e 	bge	zero,r16,4ab60 <__alt_data_end+0xfffd8b60>
   4abb4:	88800917 	ldw	r2,36(r17)
   4abb8:	89400717 	ldw	r5,28(r17)
   4abbc:	800f883a 	mov	r7,r16
   4abc0:	900d883a 	mov	r6,r18
   4abc4:	9809883a 	mov	r4,r19
   4abc8:	103ee83a 	callr	r2
   4abcc:	80a1c83a 	sub	r16,r16,r2
   4abd0:	00bff616 	blt	zero,r2,4abac <__alt_data_end+0xfffd8bac>
   4abd4:	88c0030b 	ldhu	r3,12(r17)
   4abd8:	00bfffc4 	movi	r2,-1
   4abdc:	18c01014 	ori	r3,r3,64
   4abe0:	88c0030d 	sth	r3,12(r17)
   4abe4:	dfc00417 	ldw	ra,16(sp)
   4abe8:	dcc00317 	ldw	r19,12(sp)
   4abec:	dc800217 	ldw	r18,8(sp)
   4abf0:	dc400117 	ldw	r17,4(sp)
   4abf4:	dc000017 	ldw	r16,0(sp)
   4abf8:	dec00504 	addi	sp,sp,20
   4abfc:	f800283a 	ret
   4ac00:	004ad200 	call	4ad20 <__sinit>
   4ac04:	003fa706 	br	4aaa4 <__alt_data_end+0xfffd8aa4>
   4ac08:	0005883a 	mov	r2,zero
   4ac0c:	003fe406 	br	4aba0 <__alt_data_end+0xfffd8ba0>
   4ac10:	8c001415 	stw	r16,80(r17)
   4ac14:	003fd206 	br	4ab60 <__alt_data_end+0xfffd8b60>
   4ac18:	88c00f17 	ldw	r3,60(r17)
   4ac1c:	00ffac16 	blt	zero,r3,4aad0 <__alt_data_end+0xfffd8ad0>
   4ac20:	003fcf06 	br	4ab60 <__alt_data_end+0xfffd8b60>
   4ac24:	89400717 	ldw	r5,28(r17)
   4ac28:	9809883a 	mov	r4,r19
   4ac2c:	000d883a 	mov	r6,zero
   4ac30:	01c00044 	movi	r7,1
   4ac34:	183ee83a 	callr	r3
   4ac38:	1021883a 	mov	r16,r2
   4ac3c:	00bfffc4 	movi	r2,-1
   4ac40:	80800326 	beq	r16,r2,4ac50 <_fflush_r+0x1d8>
   4ac44:	8940030b 	ldhu	r5,12(r17)
   4ac48:	88c00a17 	ldw	r3,40(r17)
   4ac4c:	003fa806 	br	4aaf0 <__alt_data_end+0xfffd8af0>
   4ac50:	98c00017 	ldw	r3,0(r19)
   4ac54:	00800744 	movi	r2,29
   4ac58:	18bfde1e 	bne	r3,r2,4abd4 <__alt_data_end+0xfffd8bd4>
   4ac5c:	003fc006 	br	4ab60 <__alt_data_end+0xfffd8b60>

0004ac60 <fflush>:
   4ac60:	200b883a 	mov	r5,r4
   4ac64:	20000426 	beq	r4,zero,4ac78 <fflush+0x18>
   4ac68:	00800174 	movhi	r2,5
   4ac6c:	109f5504 	addi	r2,r2,32084
   4ac70:	11000017 	ldw	r4,0(r2)
   4ac74:	004aa781 	jmpi	4aa78 <_fflush_r>
   4ac78:	00800174 	movhi	r2,5
   4ac7c:	109f5404 	addi	r2,r2,32080
   4ac80:	11000017 	ldw	r4,0(r2)
   4ac84:	01400174 	movhi	r5,5
   4ac88:	296a9e04 	addi	r5,r5,-21896
   4ac8c:	004bb6c1 	jmpi	4bb6c <_fwalk_reent>

0004ac90 <__fp_lock>:
   4ac90:	0005883a 	mov	r2,zero
   4ac94:	f800283a 	ret

0004ac98 <__fp_unlock>:
   4ac98:	0005883a 	mov	r2,zero
   4ac9c:	f800283a 	ret

0004aca0 <_cleanup_r>:
   4aca0:	01400174 	movhi	r5,5
   4aca4:	29444504 	addi	r5,r5,4372
   4aca8:	004bac41 	jmpi	4bac4 <_fwalk>

0004acac <__sfmoreglue>:
   4acac:	defffc04 	addi	sp,sp,-16
   4acb0:	dc400115 	stw	r17,4(sp)
   4acb4:	2c401724 	muli	r17,r5,92
   4acb8:	dc800215 	stw	r18,8(sp)
   4acbc:	2825883a 	mov	r18,r5
   4acc0:	89400304 	addi	r5,r17,12
   4acc4:	dc000015 	stw	r16,0(sp)
   4acc8:	dfc00315 	stw	ra,12(sp)
   4accc:	004bee00 	call	4bee0 <_malloc_r>
   4acd0:	1021883a 	mov	r16,r2
   4acd4:	10000726 	beq	r2,zero,4acf4 <__sfmoreglue+0x48>
   4acd8:	11000304 	addi	r4,r2,12
   4acdc:	10000015 	stw	zero,0(r2)
   4ace0:	14800115 	stw	r18,4(r2)
   4ace4:	11000215 	stw	r4,8(r2)
   4ace8:	000b883a 	mov	r5,zero
   4acec:	880d883a 	mov	r6,r17
   4acf0:	004ca640 	call	4ca64 <memset>
   4acf4:	8005883a 	mov	r2,r16
   4acf8:	dfc00317 	ldw	ra,12(sp)
   4acfc:	dc800217 	ldw	r18,8(sp)
   4ad00:	dc400117 	ldw	r17,4(sp)
   4ad04:	dc000017 	ldw	r16,0(sp)
   4ad08:	dec00404 	addi	sp,sp,16
   4ad0c:	f800283a 	ret

0004ad10 <_cleanup>:
   4ad10:	00800174 	movhi	r2,5
   4ad14:	109f5404 	addi	r2,r2,32080
   4ad18:	11000017 	ldw	r4,0(r2)
   4ad1c:	004aca01 	jmpi	4aca0 <_cleanup_r>

0004ad20 <__sinit>:
   4ad20:	20800e17 	ldw	r2,56(r4)
   4ad24:	1000401e 	bne	r2,zero,4ae28 <__sinit+0x108>
   4ad28:	21400117 	ldw	r5,4(r4)
   4ad2c:	01800174 	movhi	r6,5
   4ad30:	31ab2804 	addi	r6,r6,-21344
   4ad34:	20c00217 	ldw	r3,8(r4)
   4ad38:	21800f15 	stw	r6,60(r4)
   4ad3c:	2080bb04 	addi	r2,r4,748
   4ad40:	02400044 	movi	r9,1
   4ad44:	018000c4 	movi	r6,3
   4ad48:	2180b915 	stw	r6,740(r4)
   4ad4c:	2080ba15 	stw	r2,744(r4)
   4ad50:	22400e15 	stw	r9,56(r4)
   4ad54:	20800317 	ldw	r2,12(r4)
   4ad58:	2000b815 	stw	zero,736(r4)
   4ad5c:	02000174 	movhi	r8,5
   4ad60:	4239bc04 	addi	r8,r8,-6416
   4ad64:	01c00174 	movhi	r7,5
   4ad68:	39f9d104 	addi	r7,r7,-6332
   4ad6c:	01800174 	movhi	r6,5
   4ad70:	31b9f304 	addi	r6,r6,-6196
   4ad74:	01000174 	movhi	r4,5
   4ad78:	213a0a04 	addi	r4,r4,-6104
   4ad7c:	02800104 	movi	r10,4
   4ad80:	28000015 	stw	zero,0(r5)
   4ad84:	28000115 	stw	zero,4(r5)
   4ad88:	28000215 	stw	zero,8(r5)
   4ad8c:	2a80030d 	sth	r10,12(r5)
   4ad90:	2800038d 	sth	zero,14(r5)
   4ad94:	28000415 	stw	zero,16(r5)
   4ad98:	28000515 	stw	zero,20(r5)
   4ad9c:	28000615 	stw	zero,24(r5)
   4ada0:	29400715 	stw	r5,28(r5)
   4ada4:	2a000815 	stw	r8,32(r5)
   4ada8:	29c00915 	stw	r7,36(r5)
   4adac:	29800a15 	stw	r6,40(r5)
   4adb0:	29000b15 	stw	r4,44(r5)
   4adb4:	01400284 	movi	r5,10
   4adb8:	18000015 	stw	zero,0(r3)
   4adbc:	18000115 	stw	zero,4(r3)
   4adc0:	18000215 	stw	zero,8(r3)
   4adc4:	1940030d 	sth	r5,12(r3)
   4adc8:	1a40038d 	sth	r9,14(r3)
   4adcc:	18000415 	stw	zero,16(r3)
   4add0:	18000515 	stw	zero,20(r3)
   4add4:	18000615 	stw	zero,24(r3)
   4add8:	18c00715 	stw	r3,28(r3)
   4addc:	1a000815 	stw	r8,32(r3)
   4ade0:	19c00915 	stw	r7,36(r3)
   4ade4:	19800a15 	stw	r6,40(r3)
   4ade8:	19000b15 	stw	r4,44(r3)
   4adec:	00c00484 	movi	r3,18
   4adf0:	10c0030d 	sth	r3,12(r2)
   4adf4:	00c00084 	movi	r3,2
   4adf8:	10000015 	stw	zero,0(r2)
   4adfc:	10000115 	stw	zero,4(r2)
   4ae00:	10000215 	stw	zero,8(r2)
   4ae04:	10c0038d 	sth	r3,14(r2)
   4ae08:	10000415 	stw	zero,16(r2)
   4ae0c:	10000515 	stw	zero,20(r2)
   4ae10:	10000615 	stw	zero,24(r2)
   4ae14:	10800715 	stw	r2,28(r2)
   4ae18:	12000815 	stw	r8,32(r2)
   4ae1c:	11c00915 	stw	r7,36(r2)
   4ae20:	11800a15 	stw	r6,40(r2)
   4ae24:	11000b15 	stw	r4,44(r2)
   4ae28:	f800283a 	ret

0004ae2c <__sfp>:
   4ae2c:	defffc04 	addi	sp,sp,-16
   4ae30:	00800174 	movhi	r2,5
   4ae34:	109f5404 	addi	r2,r2,32080
   4ae38:	dc400115 	stw	r17,4(sp)
   4ae3c:	14400017 	ldw	r17,0(r2)
   4ae40:	dc800215 	stw	r18,8(sp)
   4ae44:	dfc00315 	stw	ra,12(sp)
   4ae48:	88800e17 	ldw	r2,56(r17)
   4ae4c:	dc000015 	stw	r16,0(sp)
   4ae50:	2025883a 	mov	r18,r4
   4ae54:	10002826 	beq	r2,zero,4aef8 <__sfp+0xcc>
   4ae58:	8c40b804 	addi	r17,r17,736
   4ae5c:	043fffc4 	movi	r16,-1
   4ae60:	89400117 	ldw	r5,4(r17)
   4ae64:	88800217 	ldw	r2,8(r17)
   4ae68:	297fffc4 	addi	r5,r5,-1
   4ae6c:	28000a16 	blt	r5,zero,4ae98 <__sfp+0x6c>
   4ae70:	10c0030f 	ldh	r3,12(r2)
   4ae74:	18000c26 	beq	r3,zero,4aea8 <__sfp+0x7c>
   4ae78:	10c01a04 	addi	r3,r2,104
   4ae7c:	00000206 	br	4ae88 <__sfp+0x5c>
   4ae80:	19bfe90f 	ldh	r6,-92(r3)
   4ae84:	30000826 	beq	r6,zero,4aea8 <__sfp+0x7c>
   4ae88:	297fffc4 	addi	r5,r5,-1
   4ae8c:	18bffd04 	addi	r2,r3,-12
   4ae90:	18c01704 	addi	r3,r3,92
   4ae94:	2c3ffa1e 	bne	r5,r16,4ae80 <__alt_data_end+0xfffd8e80>
   4ae98:	88800017 	ldw	r2,0(r17)
   4ae9c:	10001926 	beq	r2,zero,4af04 <__sfp+0xd8>
   4aea0:	1023883a 	mov	r17,r2
   4aea4:	003fee06 	br	4ae60 <__alt_data_end+0xfffd8e60>
   4aea8:	00ffffc4 	movi	r3,-1
   4aeac:	10c0038d 	sth	r3,14(r2)
   4aeb0:	00c00044 	movi	r3,1
   4aeb4:	10c0030d 	sth	r3,12(r2)
   4aeb8:	10000015 	stw	zero,0(r2)
   4aebc:	10000215 	stw	zero,8(r2)
   4aec0:	10000115 	stw	zero,4(r2)
   4aec4:	10000415 	stw	zero,16(r2)
   4aec8:	10000515 	stw	zero,20(r2)
   4aecc:	10000615 	stw	zero,24(r2)
   4aed0:	10000c15 	stw	zero,48(r2)
   4aed4:	10000d15 	stw	zero,52(r2)
   4aed8:	10001115 	stw	zero,68(r2)
   4aedc:	10001215 	stw	zero,72(r2)
   4aee0:	dfc00317 	ldw	ra,12(sp)
   4aee4:	dc800217 	ldw	r18,8(sp)
   4aee8:	dc400117 	ldw	r17,4(sp)
   4aeec:	dc000017 	ldw	r16,0(sp)
   4aef0:	dec00404 	addi	sp,sp,16
   4aef4:	f800283a 	ret
   4aef8:	8809883a 	mov	r4,r17
   4aefc:	004ad200 	call	4ad20 <__sinit>
   4af00:	003fd506 	br	4ae58 <__alt_data_end+0xfffd8e58>
   4af04:	9009883a 	mov	r4,r18
   4af08:	01400104 	movi	r5,4
   4af0c:	004acac0 	call	4acac <__sfmoreglue>
   4af10:	88800015 	stw	r2,0(r17)
   4af14:	103fe21e 	bne	r2,zero,4aea0 <__alt_data_end+0xfffd8ea0>
   4af18:	00800304 	movi	r2,12
   4af1c:	90800015 	stw	r2,0(r18)
   4af20:	0005883a 	mov	r2,zero
   4af24:	003fee06 	br	4aee0 <__alt_data_end+0xfffd8ee0>

0004af28 <__sfp_lock_acquire>:
   4af28:	f800283a 	ret

0004af2c <__sfp_lock_release>:
   4af2c:	f800283a 	ret

0004af30 <__sinit_lock_acquire>:
   4af30:	f800283a 	ret

0004af34 <__sinit_lock_release>:
   4af34:	f800283a 	ret

0004af38 <__fp_lock_all>:
   4af38:	00800174 	movhi	r2,5
   4af3c:	109f5504 	addi	r2,r2,32084
   4af40:	11000017 	ldw	r4,0(r2)
   4af44:	01400174 	movhi	r5,5
   4af48:	296b2404 	addi	r5,r5,-21360
   4af4c:	004bac41 	jmpi	4bac4 <_fwalk>

0004af50 <__fp_unlock_all>:
   4af50:	00800174 	movhi	r2,5
   4af54:	109f5504 	addi	r2,r2,32084
   4af58:	11000017 	ldw	r4,0(r2)
   4af5c:	01400174 	movhi	r5,5
   4af60:	296b2604 	addi	r5,r5,-21352
   4af64:	004bac41 	jmpi	4bac4 <_fwalk>

0004af68 <_fread_r>:
   4af68:	defff504 	addi	sp,sp,-44
   4af6c:	dd800715 	stw	r22,28(sp)
   4af70:	39ad383a 	mul	r22,r7,r6
   4af74:	ddc00815 	stw	r23,32(sp)
   4af78:	dd400615 	stw	r21,24(sp)
   4af7c:	dd000515 	stw	r20,20(sp)
   4af80:	dcc00415 	stw	r19,16(sp)
   4af84:	dc000115 	stw	r16,4(sp)
   4af88:	dfc00a15 	stw	ra,40(sp)
   4af8c:	df000915 	stw	fp,36(sp)
   4af90:	dc800315 	stw	r18,12(sp)
   4af94:	dc400215 	stw	r17,8(sp)
   4af98:	302f883a 	mov	r23,r6
   4af9c:	382b883a 	mov	r21,r7
   4afa0:	2029883a 	mov	r20,r4
   4afa4:	2827883a 	mov	r19,r5
   4afa8:	dc000b17 	ldw	r16,44(sp)
   4afac:	b0002e26 	beq	r22,zero,4b068 <_fread_r+0x100>
   4afb0:	20000226 	beq	r4,zero,4afbc <_fread_r+0x54>
   4afb4:	20800e17 	ldw	r2,56(r4)
   4afb8:	10006726 	beq	r2,zero,4b158 <_fread_r+0x1f0>
   4afbc:	84400117 	ldw	r17,4(r16)
   4afc0:	88002b16 	blt	r17,zero,4b070 <_fread_r+0x108>
   4afc4:	8080030b 	ldhu	r2,12(r16)
   4afc8:	8807883a 	mov	r3,r17
   4afcc:	1080008c 	andi	r2,r2,2
   4afd0:	10bfffcc 	andi	r2,r2,65535
   4afd4:	10a0001c 	xori	r2,r2,32768
   4afd8:	10a00004 	addi	r2,r2,-32768
   4afdc:	10002d1e 	bne	r2,zero,4b094 <_fread_r+0x12c>
   4afe0:	b025883a 	mov	r18,r22
   4afe4:	00000106 	br	4afec <_fread_r+0x84>
   4afe8:	84400117 	ldw	r17,4(r16)
   4afec:	9809883a 	mov	r4,r19
   4aff0:	880d883a 	mov	r6,r17
   4aff4:	81400017 	ldw	r5,0(r16)
   4aff8:	8c805b2e 	bgeu	r17,r18,4b168 <_fread_r+0x200>
   4affc:	004c8440 	call	4c844 <memcpy>
   4b000:	80800017 	ldw	r2,0(r16)
   4b004:	9c67883a 	add	r19,r19,r17
   4b008:	9465c83a 	sub	r18,r18,r17
   4b00c:	1463883a 	add	r17,r2,r17
   4b010:	a009883a 	mov	r4,r20
   4b014:	800b883a 	mov	r5,r16
   4b018:	84400015 	stw	r17,0(r16)
   4b01c:	004e2ac0 	call	4e2ac <__srefill_r>
   4b020:	103ff126 	beq	r2,zero,4afe8 <__alt_data_end+0xfffd8fe8>
   4b024:	b489c83a 	sub	r4,r22,r18
   4b028:	b80b883a 	mov	r5,r23
   4b02c:	00457d40 	call	457d4 <__udivsi3>
   4b030:	102b883a 	mov	r21,r2
   4b034:	a805883a 	mov	r2,r21
   4b038:	dfc00a17 	ldw	ra,40(sp)
   4b03c:	df000917 	ldw	fp,36(sp)
   4b040:	ddc00817 	ldw	r23,32(sp)
   4b044:	dd800717 	ldw	r22,28(sp)
   4b048:	dd400617 	ldw	r21,24(sp)
   4b04c:	dd000517 	ldw	r20,20(sp)
   4b050:	dcc00417 	ldw	r19,16(sp)
   4b054:	dc800317 	ldw	r18,12(sp)
   4b058:	dc400217 	ldw	r17,8(sp)
   4b05c:	dc000117 	ldw	r16,4(sp)
   4b060:	dec00b04 	addi	sp,sp,44
   4b064:	f800283a 	ret
   4b068:	002b883a 	mov	r21,zero
   4b06c:	003ff106 	br	4b034 <__alt_data_end+0xfffd9034>
   4b070:	8080030b 	ldhu	r2,12(r16)
   4b074:	80000115 	stw	zero,4(r16)
   4b078:	0007883a 	mov	r3,zero
   4b07c:	1080008c 	andi	r2,r2,2
   4b080:	10bfffcc 	andi	r2,r2,65535
   4b084:	10a0001c 	xori	r2,r2,32768
   4b088:	10a00004 	addi	r2,r2,-32768
   4b08c:	0023883a 	mov	r17,zero
   4b090:	103fd326 	beq	r2,zero,4afe0 <__alt_data_end+0xfffd8fe0>
   4b094:	1823883a 	mov	r17,r3
   4b098:	b0c0012e 	bgeu	r22,r3,4b0a0 <_fread_r+0x138>
   4b09c:	b023883a 	mov	r17,r22
   4b0a0:	81400017 	ldw	r5,0(r16)
   4b0a4:	9809883a 	mov	r4,r19
   4b0a8:	880d883a 	mov	r6,r17
   4b0ac:	004c8440 	call	4c844 <memcpy>
   4b0b0:	80800117 	ldw	r2,4(r16)
   4b0b4:	84800017 	ldw	r18,0(r16)
   4b0b8:	81400c17 	ldw	r5,48(r16)
   4b0bc:	1445c83a 	sub	r2,r2,r17
   4b0c0:	9465883a 	add	r18,r18,r17
   4b0c4:	84800015 	stw	r18,0(r16)
   4b0c8:	80800115 	stw	r2,4(r16)
   4b0cc:	9c67883a 	add	r19,r19,r17
   4b0d0:	b463c83a 	sub	r17,r22,r17
   4b0d4:	28002d26 	beq	r5,zero,4b18c <_fread_r+0x224>
   4b0d8:	883fd626 	beq	r17,zero,4b034 <__alt_data_end+0xfffd9034>
   4b0dc:	80801004 	addi	r2,r16,64
   4b0e0:	28800326 	beq	r5,r2,4b0f0 <_fread_r+0x188>
   4b0e4:	a009883a 	mov	r4,r20
   4b0e8:	004b3100 	call	4b310 <_free_r>
   4b0ec:	84800017 	ldw	r18,0(r16)
   4b0f0:	80000c15 	stw	zero,48(r16)
   4b0f4:	80c00517 	ldw	r3,20(r16)
   4b0f8:	87000417 	ldw	fp,16(r16)
   4b0fc:	d8c00015 	stw	r3,0(sp)
   4b100:	00000106 	br	4b108 <_fread_r+0x1a0>
   4b104:	883fcb26 	beq	r17,zero,4b034 <__alt_data_end+0xfffd9034>
   4b108:	84c00415 	stw	r19,16(r16)
   4b10c:	84400515 	stw	r17,20(r16)
   4b110:	84c00015 	stw	r19,0(r16)
   4b114:	a009883a 	mov	r4,r20
   4b118:	800b883a 	mov	r5,r16
   4b11c:	004e2ac0 	call	4e2ac <__srefill_r>
   4b120:	d8c00017 	ldw	r3,0(sp)
   4b124:	81000117 	ldw	r4,4(r16)
   4b128:	87000415 	stw	fp,16(r16)
   4b12c:	80c00515 	stw	r3,20(r16)
   4b130:	84800015 	stw	r18,0(r16)
   4b134:	80000115 	stw	zero,4(r16)
   4b138:	8923c83a 	sub	r17,r17,r4
   4b13c:	9927883a 	add	r19,r19,r4
   4b140:	103ff026 	beq	r2,zero,4b104 <__alt_data_end+0xfffd9104>
   4b144:	b449c83a 	sub	r4,r22,r17
   4b148:	b80b883a 	mov	r5,r23
   4b14c:	00457d40 	call	457d4 <__udivsi3>
   4b150:	102b883a 	mov	r21,r2
   4b154:	003fb706 	br	4b034 <__alt_data_end+0xfffd9034>
   4b158:	004ad200 	call	4ad20 <__sinit>
   4b15c:	84400117 	ldw	r17,4(r16)
   4b160:	883f980e 	bge	r17,zero,4afc4 <__alt_data_end+0xfffd8fc4>
   4b164:	003fc206 	br	4b070 <__alt_data_end+0xfffd9070>
   4b168:	900d883a 	mov	r6,r18
   4b16c:	004c8440 	call	4c844 <memcpy>
   4b170:	80800117 	ldw	r2,4(r16)
   4b174:	80c00017 	ldw	r3,0(r16)
   4b178:	1485c83a 	sub	r2,r2,r18
   4b17c:	1ca5883a 	add	r18,r3,r18
   4b180:	80800115 	stw	r2,4(r16)
   4b184:	84800015 	stw	r18,0(r16)
   4b188:	003faa06 	br	4b034 <__alt_data_end+0xfffd9034>
   4b18c:	883fd91e 	bne	r17,zero,4b0f4 <__alt_data_end+0xfffd90f4>
   4b190:	003fa806 	br	4b034 <__alt_data_end+0xfffd9034>

0004b194 <fread>:
   4b194:	00800174 	movhi	r2,5
   4b198:	109f5504 	addi	r2,r2,32084
   4b19c:	2011883a 	mov	r8,r4
   4b1a0:	11000017 	ldw	r4,0(r2)
   4b1a4:	defffe04 	addi	sp,sp,-8
   4b1a8:	2807883a 	mov	r3,r5
   4b1ac:	3005883a 	mov	r2,r6
   4b1b0:	d9c00015 	stw	r7,0(sp)
   4b1b4:	400b883a 	mov	r5,r8
   4b1b8:	180d883a 	mov	r6,r3
   4b1bc:	100f883a 	mov	r7,r2
   4b1c0:	dfc00115 	stw	ra,4(sp)
   4b1c4:	004af680 	call	4af68 <_fread_r>
   4b1c8:	dfc00117 	ldw	ra,4(sp)
   4b1cc:	dec00204 	addi	sp,sp,8
   4b1d0:	f800283a 	ret

0004b1d4 <_malloc_trim_r>:
   4b1d4:	defffb04 	addi	sp,sp,-20
   4b1d8:	dcc00315 	stw	r19,12(sp)
   4b1dc:	dc800215 	stw	r18,8(sp)
   4b1e0:	dc400115 	stw	r17,4(sp)
   4b1e4:	dc000015 	stw	r16,0(sp)
   4b1e8:	2827883a 	mov	r19,r5
   4b1ec:	dfc00415 	stw	ra,16(sp)
   4b1f0:	04400174 	movhi	r17,5
   4b1f4:	8c59c404 	addi	r17,r17,26384
   4b1f8:	2021883a 	mov	r16,r4
   4b1fc:	00545140 	call	54514 <__malloc_lock>
   4b200:	88800217 	ldw	r2,8(r17)
   4b204:	14800117 	ldw	r18,4(r2)
   4b208:	00bfff04 	movi	r2,-4
   4b20c:	90a4703a 	and	r18,r18,r2
   4b210:	9083fbc4 	addi	r2,r18,4079
   4b214:	14e7c83a 	sub	r19,r2,r19
   4b218:	9826d33a 	srli	r19,r19,12
   4b21c:	0083ffc4 	movi	r2,4095
   4b220:	9cffffc4 	addi	r19,r19,-1
   4b224:	9826933a 	slli	r19,r19,12
   4b228:	14c0060e 	bge	r2,r19,4b244 <_malloc_trim_r+0x70>
   4b22c:	8009883a 	mov	r4,r16
   4b230:	000b883a 	mov	r5,zero
   4b234:	004e4fc0 	call	4e4fc <_sbrk_r>
   4b238:	88c00217 	ldw	r3,8(r17)
   4b23c:	1c87883a 	add	r3,r3,r18
   4b240:	10c00a26 	beq	r2,r3,4b26c <_malloc_trim_r+0x98>
   4b244:	8009883a 	mov	r4,r16
   4b248:	00545180 	call	54518 <__malloc_unlock>
   4b24c:	0005883a 	mov	r2,zero
   4b250:	dfc00417 	ldw	ra,16(sp)
   4b254:	dcc00317 	ldw	r19,12(sp)
   4b258:	dc800217 	ldw	r18,8(sp)
   4b25c:	dc400117 	ldw	r17,4(sp)
   4b260:	dc000017 	ldw	r16,0(sp)
   4b264:	dec00504 	addi	sp,sp,20
   4b268:	f800283a 	ret
   4b26c:	8009883a 	mov	r4,r16
   4b270:	04cbc83a 	sub	r5,zero,r19
   4b274:	004e4fc0 	call	4e4fc <_sbrk_r>
   4b278:	00ffffc4 	movi	r3,-1
   4b27c:	10c01326 	beq	r2,r3,4b2cc <_malloc_trim_r+0xf8>
   4b280:	008001b4 	movhi	r2,6
   4b284:	10a62104 	addi	r2,r2,-26492
   4b288:	11000017 	ldw	r4,0(r2)
   4b28c:	88c00217 	ldw	r3,8(r17)
   4b290:	94e5c83a 	sub	r18,r18,r19
   4b294:	94800054 	ori	r18,r18,1
   4b298:	24e7c83a 	sub	r19,r4,r19
   4b29c:	1c800115 	stw	r18,4(r3)
   4b2a0:	8009883a 	mov	r4,r16
   4b2a4:	14c00015 	stw	r19,0(r2)
   4b2a8:	00545180 	call	54518 <__malloc_unlock>
   4b2ac:	00800044 	movi	r2,1
   4b2b0:	dfc00417 	ldw	ra,16(sp)
   4b2b4:	dcc00317 	ldw	r19,12(sp)
   4b2b8:	dc800217 	ldw	r18,8(sp)
   4b2bc:	dc400117 	ldw	r17,4(sp)
   4b2c0:	dc000017 	ldw	r16,0(sp)
   4b2c4:	dec00504 	addi	sp,sp,20
   4b2c8:	f800283a 	ret
   4b2cc:	8009883a 	mov	r4,r16
   4b2d0:	000b883a 	mov	r5,zero
   4b2d4:	004e4fc0 	call	4e4fc <_sbrk_r>
   4b2d8:	88c00217 	ldw	r3,8(r17)
   4b2dc:	014003c4 	movi	r5,15
   4b2e0:	10c9c83a 	sub	r4,r2,r3
   4b2e4:	293fd70e 	bge	r5,r4,4b244 <__alt_data_end+0xfffd9244>
   4b2e8:	01400174 	movhi	r5,5
   4b2ec:	295f5804 	addi	r5,r5,32096
   4b2f0:	29400017 	ldw	r5,0(r5)
   4b2f4:	21000054 	ori	r4,r4,1
   4b2f8:	19000115 	stw	r4,4(r3)
   4b2fc:	1145c83a 	sub	r2,r2,r5
   4b300:	014001b4 	movhi	r5,6
   4b304:	29662104 	addi	r5,r5,-26492
   4b308:	28800015 	stw	r2,0(r5)
   4b30c:	003fcd06 	br	4b244 <__alt_data_end+0xfffd9244>

0004b310 <_free_r>:
   4b310:	defffd04 	addi	sp,sp,-12
   4b314:	dc400115 	stw	r17,4(sp)
   4b318:	dc000015 	stw	r16,0(sp)
   4b31c:	dfc00215 	stw	ra,8(sp)
   4b320:	2821883a 	mov	r16,r5
   4b324:	2023883a 	mov	r17,r4
   4b328:	28004b26 	beq	r5,zero,4b458 <_free_r+0x148>
   4b32c:	00545140 	call	54514 <__malloc_lock>
   4b330:	823fff17 	ldw	r8,-4(r16)
   4b334:	00bfff84 	movi	r2,-2
   4b338:	81bffe04 	addi	r6,r16,-8
   4b33c:	4084703a 	and	r2,r8,r2
   4b340:	3087883a 	add	r3,r6,r2
   4b344:	01400174 	movhi	r5,5
   4b348:	2959c404 	addi	r5,r5,26384
   4b34c:	1a400117 	ldw	r9,4(r3)
   4b350:	29000217 	ldw	r4,8(r5)
   4b354:	01ffff04 	movi	r7,-4
   4b358:	49ce703a 	and	r7,r9,r7
   4b35c:	20c06526 	beq	r4,r3,4b4f4 <_free_r+0x1e4>
   4b360:	19c00115 	stw	r7,4(r3)
   4b364:	4200004c 	andi	r8,r8,1
   4b368:	40003026 	beq	r8,zero,4b42c <_free_r+0x11c>
   4b36c:	0009883a 	mov	r4,zero
   4b370:	19d1883a 	add	r8,r3,r7
   4b374:	42000117 	ldw	r8,4(r8)
   4b378:	4200004c 	andi	r8,r8,1
   4b37c:	4000061e 	bne	r8,zero,4b398 <_free_r+0x88>
   4b380:	11c5883a 	add	r2,r2,r7
   4b384:	19c00217 	ldw	r7,8(r3)
   4b388:	20004e26 	beq	r4,zero,4b4c4 <_free_r+0x1b4>
   4b38c:	18c00317 	ldw	r3,12(r3)
   4b390:	38c00315 	stw	r3,12(r7)
   4b394:	19c00215 	stw	r7,8(r3)
   4b398:	11c00054 	ori	r7,r2,1
   4b39c:	3087883a 	add	r3,r6,r2
   4b3a0:	31c00115 	stw	r7,4(r6)
   4b3a4:	18800015 	stw	r2,0(r3)
   4b3a8:	20001a1e 	bne	r4,zero,4b414 <_free_r+0x104>
   4b3ac:	00c07fc4 	movi	r3,511
   4b3b0:	18802e2e 	bgeu	r3,r2,4b46c <_free_r+0x15c>
   4b3b4:	1006d27a 	srli	r3,r2,9
   4b3b8:	01000104 	movi	r4,4
   4b3bc:	20c06636 	bltu	r4,r3,4b558 <_free_r+0x248>
   4b3c0:	1008d1ba 	srli	r4,r2,6
   4b3c4:	21000e04 	addi	r4,r4,56
   4b3c8:	210f883a 	add	r7,r4,r4
   4b3cc:	39cf883a 	add	r7,r7,r7
   4b3d0:	39cf883a 	add	r7,r7,r7
   4b3d4:	29cf883a 	add	r7,r5,r7
   4b3d8:	38c00217 	ldw	r3,8(r7)
   4b3dc:	01400174 	movhi	r5,5
   4b3e0:	2959c404 	addi	r5,r5,26384
   4b3e4:	19c06126 	beq	r3,r7,4b56c <_free_r+0x25c>
   4b3e8:	013fff04 	movi	r4,-4
   4b3ec:	19400117 	ldw	r5,4(r3)
   4b3f0:	290a703a 	and	r5,r5,r4
   4b3f4:	1140022e 	bgeu	r2,r5,4b400 <_free_r+0xf0>
   4b3f8:	18c00217 	ldw	r3,8(r3)
   4b3fc:	38fffb1e 	bne	r7,r3,4b3ec <__alt_data_end+0xfffd93ec>
   4b400:	18800317 	ldw	r2,12(r3)
   4b404:	30800315 	stw	r2,12(r6)
   4b408:	30c00215 	stw	r3,8(r6)
   4b40c:	11800215 	stw	r6,8(r2)
   4b410:	19800315 	stw	r6,12(r3)
   4b414:	8809883a 	mov	r4,r17
   4b418:	dfc00217 	ldw	ra,8(sp)
   4b41c:	dc400117 	ldw	r17,4(sp)
   4b420:	dc000017 	ldw	r16,0(sp)
   4b424:	dec00304 	addi	sp,sp,12
   4b428:	00545181 	jmpi	54518 <__malloc_unlock>
   4b42c:	813ffe17 	ldw	r4,-8(r16)
   4b430:	2a400204 	addi	r9,r5,8
   4b434:	310dc83a 	sub	r6,r6,r4
   4b438:	32000217 	ldw	r8,8(r6)
   4b43c:	1105883a 	add	r2,r2,r4
   4b440:	42404326 	beq	r8,r9,4b550 <_free_r+0x240>
   4b444:	32400317 	ldw	r9,12(r6)
   4b448:	0009883a 	mov	r4,zero
   4b44c:	42400315 	stw	r9,12(r8)
   4b450:	4a000215 	stw	r8,8(r9)
   4b454:	003fc606 	br	4b370 <__alt_data_end+0xfffd9370>
   4b458:	dfc00217 	ldw	ra,8(sp)
   4b45c:	dc400117 	ldw	r17,4(sp)
   4b460:	dc000017 	ldw	r16,0(sp)
   4b464:	dec00304 	addi	sp,sp,12
   4b468:	f800283a 	ret
   4b46c:	1004d0fa 	srli	r2,r2,3
   4b470:	02000044 	movi	r8,1
   4b474:	29c00117 	ldw	r7,4(r5)
   4b478:	1087883a 	add	r3,r2,r2
   4b47c:	18c7883a 	add	r3,r3,r3
   4b480:	1005d0ba 	srai	r2,r2,2
   4b484:	18c7883a 	add	r3,r3,r3
   4b488:	28c7883a 	add	r3,r5,r3
   4b48c:	19000217 	ldw	r4,8(r3)
   4b490:	4084983a 	sll	r2,r8,r2
   4b494:	30c00315 	stw	r3,12(r6)
   4b498:	31000215 	stw	r4,8(r6)
   4b49c:	11c4b03a 	or	r2,r2,r7
   4b4a0:	21800315 	stw	r6,12(r4)
   4b4a4:	8809883a 	mov	r4,r17
   4b4a8:	28800115 	stw	r2,4(r5)
   4b4ac:	19800215 	stw	r6,8(r3)
   4b4b0:	dfc00217 	ldw	ra,8(sp)
   4b4b4:	dc400117 	ldw	r17,4(sp)
   4b4b8:	dc000017 	ldw	r16,0(sp)
   4b4bc:	dec00304 	addi	sp,sp,12
   4b4c0:	00545181 	jmpi	54518 <__malloc_unlock>
   4b4c4:	02000174 	movhi	r8,5
   4b4c8:	4219c604 	addi	r8,r8,26392
   4b4cc:	3a3faf1e 	bne	r7,r8,4b38c <__alt_data_end+0xfffd938c>
   4b4d0:	29800515 	stw	r6,20(r5)
   4b4d4:	29800415 	stw	r6,16(r5)
   4b4d8:	11000054 	ori	r4,r2,1
   4b4dc:	3087883a 	add	r3,r6,r2
   4b4e0:	31c00315 	stw	r7,12(r6)
   4b4e4:	31c00215 	stw	r7,8(r6)
   4b4e8:	31000115 	stw	r4,4(r6)
   4b4ec:	18800015 	stw	r2,0(r3)
   4b4f0:	003fc806 	br	4b414 <__alt_data_end+0xfffd9414>
   4b4f4:	4200004c 	andi	r8,r8,1
   4b4f8:	3885883a 	add	r2,r7,r2
   4b4fc:	4000071e 	bne	r8,zero,4b51c <_free_r+0x20c>
   4b500:	81fffe17 	ldw	r7,-8(r16)
   4b504:	31cdc83a 	sub	r6,r6,r7
   4b508:	30c00317 	ldw	r3,12(r6)
   4b50c:	31000217 	ldw	r4,8(r6)
   4b510:	11c5883a 	add	r2,r2,r7
   4b514:	20c00315 	stw	r3,12(r4)
   4b518:	19000215 	stw	r4,8(r3)
   4b51c:	00c00174 	movhi	r3,5
   4b520:	18df5904 	addi	r3,r3,32100
   4b524:	18c00017 	ldw	r3,0(r3)
   4b528:	11000054 	ori	r4,r2,1
   4b52c:	31000115 	stw	r4,4(r6)
   4b530:	29800215 	stw	r6,8(r5)
   4b534:	10ffb736 	bltu	r2,r3,4b414 <__alt_data_end+0xfffd9414>
   4b538:	008001b4 	movhi	r2,6
   4b53c:	10a61904 	addi	r2,r2,-26524
   4b540:	11400017 	ldw	r5,0(r2)
   4b544:	8809883a 	mov	r4,r17
   4b548:	004b1d40 	call	4b1d4 <_malloc_trim_r>
   4b54c:	003fb106 	br	4b414 <__alt_data_end+0xfffd9414>
   4b550:	01000044 	movi	r4,1
   4b554:	003f8606 	br	4b370 <__alt_data_end+0xfffd9370>
   4b558:	01000504 	movi	r4,20
   4b55c:	20c00b36 	bltu	r4,r3,4b58c <_free_r+0x27c>
   4b560:	190016c4 	addi	r4,r3,91
   4b564:	210f883a 	add	r7,r4,r4
   4b568:	003f9806 	br	4b3cc <__alt_data_end+0xfffd93cc>
   4b56c:	2009d0ba 	srai	r4,r4,2
   4b570:	00800044 	movi	r2,1
   4b574:	29c00117 	ldw	r7,4(r5)
   4b578:	1108983a 	sll	r4,r2,r4
   4b57c:	1805883a 	mov	r2,r3
   4b580:	21c8b03a 	or	r4,r4,r7
   4b584:	29000115 	stw	r4,4(r5)
   4b588:	003f9e06 	br	4b404 <__alt_data_end+0xfffd9404>
   4b58c:	01001504 	movi	r4,84
   4b590:	20c00436 	bltu	r4,r3,4b5a4 <_free_r+0x294>
   4b594:	1008d33a 	srli	r4,r2,12
   4b598:	21001b84 	addi	r4,r4,110
   4b59c:	210f883a 	add	r7,r4,r4
   4b5a0:	003f8a06 	br	4b3cc <__alt_data_end+0xfffd93cc>
   4b5a4:	01005504 	movi	r4,340
   4b5a8:	20c00436 	bltu	r4,r3,4b5bc <_free_r+0x2ac>
   4b5ac:	1008d3fa 	srli	r4,r2,15
   4b5b0:	21001dc4 	addi	r4,r4,119
   4b5b4:	210f883a 	add	r7,r4,r4
   4b5b8:	003f8406 	br	4b3cc <__alt_data_end+0xfffd93cc>
   4b5bc:	01015504 	movi	r4,1364
   4b5c0:	20c00436 	bltu	r4,r3,4b5d4 <_free_r+0x2c4>
   4b5c4:	1008d4ba 	srli	r4,r2,18
   4b5c8:	21001f04 	addi	r4,r4,124
   4b5cc:	210f883a 	add	r7,r4,r4
   4b5d0:	003f7e06 	br	4b3cc <__alt_data_end+0xfffd93cc>
   4b5d4:	01c03f04 	movi	r7,252
   4b5d8:	01001f84 	movi	r4,126
   4b5dc:	003f7b06 	br	4b3cc <__alt_data_end+0xfffd93cc>

0004b5e0 <__sfvwrite_r>:
   4b5e0:	30800217 	ldw	r2,8(r6)
   4b5e4:	defff504 	addi	sp,sp,-44
   4b5e8:	dd400615 	stw	r21,24(sp)
   4b5ec:	dd000515 	stw	r20,20(sp)
   4b5f0:	dc000115 	stw	r16,4(sp)
   4b5f4:	dfc00a15 	stw	ra,40(sp)
   4b5f8:	df000915 	stw	fp,36(sp)
   4b5fc:	ddc00815 	stw	r23,32(sp)
   4b600:	dd800715 	stw	r22,28(sp)
   4b604:	dcc00415 	stw	r19,16(sp)
   4b608:	dc800315 	stw	r18,12(sp)
   4b60c:	dc400215 	stw	r17,8(sp)
   4b610:	3029883a 	mov	r20,r6
   4b614:	202b883a 	mov	r21,r4
   4b618:	2821883a 	mov	r16,r5
   4b61c:	10002126 	beq	r2,zero,4b6a4 <__sfvwrite_r+0xc4>
   4b620:	2880030b 	ldhu	r2,12(r5)
   4b624:	10c0020c 	andi	r3,r2,8
   4b628:	18ffffcc 	andi	r3,r3,65535
   4b62c:	18e0001c 	xori	r3,r3,32768
   4b630:	18e00004 	addi	r3,r3,-32768
   4b634:	18002826 	beq	r3,zero,4b6d8 <__sfvwrite_r+0xf8>
   4b638:	28c00417 	ldw	r3,16(r5)
   4b63c:	18002626 	beq	r3,zero,4b6d8 <__sfvwrite_r+0xf8>
   4b640:	10c0008c 	andi	r3,r2,2
   4b644:	18ffffcc 	andi	r3,r3,65535
   4b648:	18e0001c 	xori	r3,r3,32768
   4b64c:	18e00004 	addi	r3,r3,-32768
   4b650:	a4400017 	ldw	r17,0(r20)
   4b654:	18002b26 	beq	r3,zero,4b704 <__sfvwrite_r+0x124>
   4b658:	0027883a 	mov	r19,zero
   4b65c:	0025883a 	mov	r18,zero
   4b660:	05810004 	movi	r22,1024
   4b664:	980d883a 	mov	r6,r19
   4b668:	a809883a 	mov	r4,r21
   4b66c:	90004f26 	beq	r18,zero,4b7ac <__sfvwrite_r+0x1cc>
   4b670:	900f883a 	mov	r7,r18
   4b674:	81400717 	ldw	r5,28(r16)
   4b678:	b480012e 	bgeu	r22,r18,4b680 <__sfvwrite_r+0xa0>
   4b67c:	01c10004 	movi	r7,1024
   4b680:	80800917 	ldw	r2,36(r16)
   4b684:	103ee83a 	callr	r2
   4b688:	0080540e 	bge	zero,r2,4b7dc <__sfvwrite_r+0x1fc>
   4b68c:	a0c00217 	ldw	r3,8(r20)
   4b690:	98a7883a 	add	r19,r19,r2
   4b694:	90a5c83a 	sub	r18,r18,r2
   4b698:	1885c83a 	sub	r2,r3,r2
   4b69c:	a0800215 	stw	r2,8(r20)
   4b6a0:	103ff01e 	bne	r2,zero,4b664 <__alt_data_end+0xfffd9664>
   4b6a4:	0005883a 	mov	r2,zero
   4b6a8:	dfc00a17 	ldw	ra,40(sp)
   4b6ac:	df000917 	ldw	fp,36(sp)
   4b6b0:	ddc00817 	ldw	r23,32(sp)
   4b6b4:	dd800717 	ldw	r22,28(sp)
   4b6b8:	dd400617 	ldw	r21,24(sp)
   4b6bc:	dd000517 	ldw	r20,20(sp)
   4b6c0:	dcc00417 	ldw	r19,16(sp)
   4b6c4:	dc800317 	ldw	r18,12(sp)
   4b6c8:	dc400217 	ldw	r17,8(sp)
   4b6cc:	dc000117 	ldw	r16,4(sp)
   4b6d0:	dec00b04 	addi	sp,sp,44
   4b6d4:	f800283a 	ret
   4b6d8:	a809883a 	mov	r4,r21
   4b6dc:	800b883a 	mov	r5,r16
   4b6e0:	00490e00 	call	490e0 <__swsetup_r>
   4b6e4:	1000f01e 	bne	r2,zero,4baa8 <__sfvwrite_r+0x4c8>
   4b6e8:	8080030b 	ldhu	r2,12(r16)
   4b6ec:	a4400017 	ldw	r17,0(r20)
   4b6f0:	10c0008c 	andi	r3,r2,2
   4b6f4:	18ffffcc 	andi	r3,r3,65535
   4b6f8:	18e0001c 	xori	r3,r3,32768
   4b6fc:	18e00004 	addi	r3,r3,-32768
   4b700:	183fd51e 	bne	r3,zero,4b658 <__alt_data_end+0xfffd9658>
   4b704:	10c0004c 	andi	r3,r2,1
   4b708:	002d883a 	mov	r22,zero
   4b70c:	1800381e 	bne	r3,zero,4b7f0 <__sfvwrite_r+0x210>
   4b710:	0025883a 	mov	r18,zero
   4b714:	90002126 	beq	r18,zero,4b79c <__sfvwrite_r+0x1bc>
   4b718:	10c0800c 	andi	r3,r2,512
   4b71c:	18ffffcc 	andi	r3,r3,65535
   4b720:	18e0001c 	xori	r3,r3,32768
   4b724:	18e00004 	addi	r3,r3,-32768
   4b728:	84c00217 	ldw	r19,8(r16)
   4b72c:	18006b26 	beq	r3,zero,4b8dc <__sfvwrite_r+0x2fc>
   4b730:	980f883a 	mov	r7,r19
   4b734:	94c08636 	bltu	r18,r19,4b950 <__sfvwrite_r+0x370>
   4b738:	10c1200c 	andi	r3,r2,1152
   4b73c:	18009f1e 	bne	r3,zero,4b9bc <__sfvwrite_r+0x3dc>
   4b740:	81000017 	ldw	r4,0(r16)
   4b744:	982f883a 	mov	r23,r19
   4b748:	9039883a 	mov	fp,r18
   4b74c:	9027883a 	mov	r19,r18
   4b750:	380d883a 	mov	r6,r7
   4b754:	b00b883a 	mov	r5,r22
   4b758:	d9c00015 	stw	r7,0(sp)
   4b75c:	004c93c0 	call	4c93c <memmove>
   4b760:	d9c00017 	ldw	r7,0(sp)
   4b764:	81000217 	ldw	r4,8(r16)
   4b768:	80800017 	ldw	r2,0(r16)
   4b76c:	25efc83a 	sub	r23,r4,r23
   4b770:	11cf883a 	add	r7,r2,r7
   4b774:	85c00215 	stw	r23,8(r16)
   4b778:	81c00015 	stw	r7,0(r16)
   4b77c:	a0800217 	ldw	r2,8(r20)
   4b780:	b72d883a 	add	r22,r22,fp
   4b784:	9725c83a 	sub	r18,r18,fp
   4b788:	14e7c83a 	sub	r19,r2,r19
   4b78c:	a4c00215 	stw	r19,8(r20)
   4b790:	983fc426 	beq	r19,zero,4b6a4 <__alt_data_end+0xfffd96a4>
   4b794:	8080030b 	ldhu	r2,12(r16)
   4b798:	903fdf1e 	bne	r18,zero,4b718 <__alt_data_end+0xfffd9718>
   4b79c:	8d800017 	ldw	r22,0(r17)
   4b7a0:	8c800117 	ldw	r18,4(r17)
   4b7a4:	8c400204 	addi	r17,r17,8
   4b7a8:	003fda06 	br	4b714 <__alt_data_end+0xfffd9714>
   4b7ac:	8cc00017 	ldw	r19,0(r17)
   4b7b0:	8c800117 	ldw	r18,4(r17)
   4b7b4:	8c400204 	addi	r17,r17,8
   4b7b8:	003faa06 	br	4b664 <__alt_data_end+0xfffd9664>
   4b7bc:	004dc940 	call	4dc94 <_realloc_r>
   4b7c0:	102f883a 	mov	r23,r2
   4b7c4:	10009f1e 	bne	r2,zero,4ba44 <__sfvwrite_r+0x464>
   4b7c8:	81400417 	ldw	r5,16(r16)
   4b7cc:	a809883a 	mov	r4,r21
   4b7d0:	004b3100 	call	4b310 <_free_r>
   4b7d4:	00800304 	movi	r2,12
   4b7d8:	a8800015 	stw	r2,0(r21)
   4b7dc:	80c0030b 	ldhu	r3,12(r16)
   4b7e0:	00bfffc4 	movi	r2,-1
   4b7e4:	18c01014 	ori	r3,r3,64
   4b7e8:	80c0030d 	sth	r3,12(r16)
   4b7ec:	003fae06 	br	4b6a8 <__alt_data_end+0xfffd96a8>
   4b7f0:	0007883a 	mov	r3,zero
   4b7f4:	0039883a 	mov	fp,zero
   4b7f8:	0025883a 	mov	r18,zero
   4b7fc:	90001e26 	beq	r18,zero,4b878 <__sfvwrite_r+0x298>
   4b800:	18006526 	beq	r3,zero,4b998 <__sfvwrite_r+0x3b8>
   4b804:	b02f883a 	mov	r23,r22
   4b808:	9580012e 	bgeu	r18,r22,4b810 <__sfvwrite_r+0x230>
   4b80c:	902f883a 	mov	r23,r18
   4b810:	81000017 	ldw	r4,0(r16)
   4b814:	80800417 	ldw	r2,16(r16)
   4b818:	84c00217 	ldw	r19,8(r16)
   4b81c:	81c00517 	ldw	r7,20(r16)
   4b820:	1100022e 	bgeu	r2,r4,4b82c <__sfvwrite_r+0x24c>
   4b824:	99e7883a 	add	r19,r19,r7
   4b828:	9dc01816 	blt	r19,r23,4b88c <__sfvwrite_r+0x2ac>
   4b82c:	b9c03b16 	blt	r23,r7,4b91c <__sfvwrite_r+0x33c>
   4b830:	80800917 	ldw	r2,36(r16)
   4b834:	81400717 	ldw	r5,28(r16)
   4b838:	a809883a 	mov	r4,r21
   4b83c:	d8c00015 	stw	r3,0(sp)
   4b840:	e00d883a 	mov	r6,fp
   4b844:	103ee83a 	callr	r2
   4b848:	1027883a 	mov	r19,r2
   4b84c:	d8c00017 	ldw	r3,0(sp)
   4b850:	00bfe20e 	bge	zero,r2,4b7dc <__alt_data_end+0xfffd97dc>
   4b854:	b4edc83a 	sub	r22,r22,r19
   4b858:	b0001a26 	beq	r22,zero,4b8c4 <__sfvwrite_r+0x2e4>
   4b85c:	a0800217 	ldw	r2,8(r20)
   4b860:	e4f9883a 	add	fp,fp,r19
   4b864:	94e5c83a 	sub	r18,r18,r19
   4b868:	14e7c83a 	sub	r19,r2,r19
   4b86c:	a4c00215 	stw	r19,8(r20)
   4b870:	983f8c26 	beq	r19,zero,4b6a4 <__alt_data_end+0xfffd96a4>
   4b874:	903fe21e 	bne	r18,zero,4b800 <__alt_data_end+0xfffd9800>
   4b878:	8f000017 	ldw	fp,0(r17)
   4b87c:	8c800117 	ldw	r18,4(r17)
   4b880:	0007883a 	mov	r3,zero
   4b884:	8c400204 	addi	r17,r17,8
   4b888:	003fdc06 	br	4b7fc <__alt_data_end+0xfffd97fc>
   4b88c:	e00b883a 	mov	r5,fp
   4b890:	980d883a 	mov	r6,r19
   4b894:	d8c00015 	stw	r3,0(sp)
   4b898:	004c93c0 	call	4c93c <memmove>
   4b89c:	80800017 	ldw	r2,0(r16)
   4b8a0:	a809883a 	mov	r4,r21
   4b8a4:	800b883a 	mov	r5,r16
   4b8a8:	14c5883a 	add	r2,r2,r19
   4b8ac:	80800015 	stw	r2,0(r16)
   4b8b0:	004aa780 	call	4aa78 <_fflush_r>
   4b8b4:	d8c00017 	ldw	r3,0(sp)
   4b8b8:	103fc81e 	bne	r2,zero,4b7dc <__alt_data_end+0xfffd97dc>
   4b8bc:	b4edc83a 	sub	r22,r22,r19
   4b8c0:	b03fe61e 	bne	r22,zero,4b85c <__alt_data_end+0xfffd985c>
   4b8c4:	a809883a 	mov	r4,r21
   4b8c8:	800b883a 	mov	r5,r16
   4b8cc:	004aa780 	call	4aa78 <_fflush_r>
   4b8d0:	103fc21e 	bne	r2,zero,4b7dc <__alt_data_end+0xfffd97dc>
   4b8d4:	0007883a 	mov	r3,zero
   4b8d8:	003fe006 	br	4b85c <__alt_data_end+0xfffd985c>
   4b8dc:	81000017 	ldw	r4,0(r16)
   4b8e0:	80800417 	ldw	r2,16(r16)
   4b8e4:	1100022e 	bgeu	r2,r4,4b8f0 <__sfvwrite_r+0x310>
   4b8e8:	9839883a 	mov	fp,r19
   4b8ec:	9c806036 	bltu	r19,r18,4ba70 <__sfvwrite_r+0x490>
   4b8f0:	81c00517 	ldw	r7,20(r16)
   4b8f4:	91c01c36 	bltu	r18,r7,4b968 <__sfvwrite_r+0x388>
   4b8f8:	80800917 	ldw	r2,36(r16)
   4b8fc:	81400717 	ldw	r5,28(r16)
   4b900:	a809883a 	mov	r4,r21
   4b904:	b00d883a 	mov	r6,r22
   4b908:	103ee83a 	callr	r2
   4b90c:	1027883a 	mov	r19,r2
   4b910:	00bfb20e 	bge	zero,r2,4b7dc <__alt_data_end+0xfffd97dc>
   4b914:	1039883a 	mov	fp,r2
   4b918:	003f9806 	br	4b77c <__alt_data_end+0xfffd977c>
   4b91c:	b80d883a 	mov	r6,r23
   4b920:	e00b883a 	mov	r5,fp
   4b924:	d8c00015 	stw	r3,0(sp)
   4b928:	004c93c0 	call	4c93c <memmove>
   4b92c:	80800217 	ldw	r2,8(r16)
   4b930:	81000017 	ldw	r4,0(r16)
   4b934:	b827883a 	mov	r19,r23
   4b938:	15c5c83a 	sub	r2,r2,r23
   4b93c:	25ef883a 	add	r23,r4,r23
   4b940:	80800215 	stw	r2,8(r16)
   4b944:	85c00015 	stw	r23,0(r16)
   4b948:	d8c00017 	ldw	r3,0(sp)
   4b94c:	003fc106 	br	4b854 <__alt_data_end+0xfffd9854>
   4b950:	81000017 	ldw	r4,0(r16)
   4b954:	902f883a 	mov	r23,r18
   4b958:	9039883a 	mov	fp,r18
   4b95c:	9027883a 	mov	r19,r18
   4b960:	900f883a 	mov	r7,r18
   4b964:	003f7a06 	br	4b750 <__alt_data_end+0xfffd9750>
   4b968:	b00b883a 	mov	r5,r22
   4b96c:	900d883a 	mov	r6,r18
   4b970:	004c93c0 	call	4c93c <memmove>
   4b974:	80c00217 	ldw	r3,8(r16)
   4b978:	80800017 	ldw	r2,0(r16)
   4b97c:	9027883a 	mov	r19,r18
   4b980:	1c87c83a 	sub	r3,r3,r18
   4b984:	1485883a 	add	r2,r2,r18
   4b988:	80c00215 	stw	r3,8(r16)
   4b98c:	80800015 	stw	r2,0(r16)
   4b990:	9039883a 	mov	fp,r18
   4b994:	003f7906 	br	4b77c <__alt_data_end+0xfffd977c>
   4b998:	e009883a 	mov	r4,fp
   4b99c:	01400284 	movi	r5,10
   4b9a0:	900d883a 	mov	r6,r18
   4b9a4:	004c74c0 	call	4c74c <memchr>
   4b9a8:	10003c26 	beq	r2,zero,4ba9c <__sfvwrite_r+0x4bc>
   4b9ac:	15800044 	addi	r22,r2,1
   4b9b0:	b72dc83a 	sub	r22,r22,fp
   4b9b4:	00c00044 	movi	r3,1
   4b9b8:	003f9206 	br	4b804 <__alt_data_end+0xfffd9804>
   4b9bc:	81000517 	ldw	r4,20(r16)
   4b9c0:	81400417 	ldw	r5,16(r16)
   4b9c4:	80c00017 	ldw	r3,0(r16)
   4b9c8:	210d883a 	add	r6,r4,r4
   4b9cc:	3109883a 	add	r4,r6,r4
   4b9d0:	2026d7fa 	srli	r19,r4,31
   4b9d4:	1979c83a 	sub	fp,r3,r5
   4b9d8:	e1800044 	addi	r6,fp,1
   4b9dc:	9909883a 	add	r4,r19,r4
   4b9e0:	2027d07a 	srai	r19,r4,1
   4b9e4:	3489883a 	add	r4,r6,r18
   4b9e8:	980d883a 	mov	r6,r19
   4b9ec:	9900022e 	bgeu	r19,r4,4b9f8 <__sfvwrite_r+0x418>
   4b9f0:	2027883a 	mov	r19,r4
   4b9f4:	200d883a 	mov	r6,r4
   4b9f8:	1081000c 	andi	r2,r2,1024
   4b9fc:	10bfffcc 	andi	r2,r2,65535
   4ba00:	10a0001c 	xori	r2,r2,32768
   4ba04:	10a00004 	addi	r2,r2,-32768
   4ba08:	a809883a 	mov	r4,r21
   4ba0c:	103f6b26 	beq	r2,zero,4b7bc <__alt_data_end+0xfffd97bc>
   4ba10:	300b883a 	mov	r5,r6
   4ba14:	004bee00 	call	4bee0 <_malloc_r>
   4ba18:	102f883a 	mov	r23,r2
   4ba1c:	103f6d26 	beq	r2,zero,4b7d4 <__alt_data_end+0xfffd97d4>
   4ba20:	81400417 	ldw	r5,16(r16)
   4ba24:	1009883a 	mov	r4,r2
   4ba28:	e00d883a 	mov	r6,fp
   4ba2c:	004c8440 	call	4c844 <memcpy>
   4ba30:	8080030b 	ldhu	r2,12(r16)
   4ba34:	00fedfc4 	movi	r3,-1153
   4ba38:	10c4703a 	and	r2,r2,r3
   4ba3c:	10802014 	ori	r2,r2,128
   4ba40:	8080030d 	sth	r2,12(r16)
   4ba44:	bf09883a 	add	r4,r23,fp
   4ba48:	9f07c83a 	sub	r3,r19,fp
   4ba4c:	85c00415 	stw	r23,16(r16)
   4ba50:	84c00515 	stw	r19,20(r16)
   4ba54:	81000015 	stw	r4,0(r16)
   4ba58:	902f883a 	mov	r23,r18
   4ba5c:	80c00215 	stw	r3,8(r16)
   4ba60:	9039883a 	mov	fp,r18
   4ba64:	9027883a 	mov	r19,r18
   4ba68:	900f883a 	mov	r7,r18
   4ba6c:	003f3806 	br	4b750 <__alt_data_end+0xfffd9750>
   4ba70:	b00b883a 	mov	r5,r22
   4ba74:	980d883a 	mov	r6,r19
   4ba78:	004c93c0 	call	4c93c <memmove>
   4ba7c:	80800017 	ldw	r2,0(r16)
   4ba80:	a809883a 	mov	r4,r21
   4ba84:	800b883a 	mov	r5,r16
   4ba88:	14c5883a 	add	r2,r2,r19
   4ba8c:	80800015 	stw	r2,0(r16)
   4ba90:	004aa780 	call	4aa78 <_fflush_r>
   4ba94:	103f3926 	beq	r2,zero,4b77c <__alt_data_end+0xfffd977c>
   4ba98:	003f5006 	br	4b7dc <__alt_data_end+0xfffd97dc>
   4ba9c:	95800044 	addi	r22,r18,1
   4baa0:	00c00044 	movi	r3,1
   4baa4:	003f5706 	br	4b804 <__alt_data_end+0xfffd9804>
   4baa8:	80c0030b 	ldhu	r3,12(r16)
   4baac:	00bfffc4 	movi	r2,-1
   4bab0:	18c01014 	ori	r3,r3,64
   4bab4:	80c0030d 	sth	r3,12(r16)
   4bab8:	00c00244 	movi	r3,9
   4babc:	a8c00015 	stw	r3,0(r21)
   4bac0:	003ef906 	br	4b6a8 <__alt_data_end+0xfffd96a8>

0004bac4 <_fwalk>:
   4bac4:	defff904 	addi	sp,sp,-28
   4bac8:	dcc00315 	stw	r19,12(sp)
   4bacc:	24c0b804 	addi	r19,r4,736
   4bad0:	dd400515 	stw	r21,20(sp)
   4bad4:	dd000415 	stw	r20,16(sp)
   4bad8:	dfc00615 	stw	ra,24(sp)
   4badc:	dc800215 	stw	r18,8(sp)
   4bae0:	dc400115 	stw	r17,4(sp)
   4bae4:	dc000015 	stw	r16,0(sp)
   4bae8:	282b883a 	mov	r21,r5
   4baec:	0029883a 	mov	r20,zero
   4baf0:	004af280 	call	4af28 <__sfp_lock_acquire>
   4baf4:	98001226 	beq	r19,zero,4bb40 <_fwalk+0x7c>
   4baf8:	04bfffc4 	movi	r18,-1
   4bafc:	9c400117 	ldw	r17,4(r19)
   4bb00:	9c000217 	ldw	r16,8(r19)
   4bb04:	8c7fffc4 	addi	r17,r17,-1
   4bb08:	88000b16 	blt	r17,zero,4bb38 <_fwalk+0x74>
   4bb0c:	84000304 	addi	r16,r16,12
   4bb10:	80c0000f 	ldh	r3,0(r16)
   4bb14:	8c7fffc4 	addi	r17,r17,-1
   4bb18:	813ffd04 	addi	r4,r16,-12
   4bb1c:	18000426 	beq	r3,zero,4bb30 <_fwalk+0x6c>
   4bb20:	80c0008f 	ldh	r3,2(r16)
   4bb24:	1c800226 	beq	r3,r18,4bb30 <_fwalk+0x6c>
   4bb28:	a83ee83a 	callr	r21
   4bb2c:	a0a8b03a 	or	r20,r20,r2
   4bb30:	84001704 	addi	r16,r16,92
   4bb34:	8cbff61e 	bne	r17,r18,4bb10 <__alt_data_end+0xfffd9b10>
   4bb38:	9cc00017 	ldw	r19,0(r19)
   4bb3c:	983fef1e 	bne	r19,zero,4bafc <__alt_data_end+0xfffd9afc>
   4bb40:	004af2c0 	call	4af2c <__sfp_lock_release>
   4bb44:	a005883a 	mov	r2,r20
   4bb48:	dfc00617 	ldw	ra,24(sp)
   4bb4c:	dd400517 	ldw	r21,20(sp)
   4bb50:	dd000417 	ldw	r20,16(sp)
   4bb54:	dcc00317 	ldw	r19,12(sp)
   4bb58:	dc800217 	ldw	r18,8(sp)
   4bb5c:	dc400117 	ldw	r17,4(sp)
   4bb60:	dc000017 	ldw	r16,0(sp)
   4bb64:	dec00704 	addi	sp,sp,28
   4bb68:	f800283a 	ret

0004bb6c <_fwalk_reent>:
   4bb6c:	defff804 	addi	sp,sp,-32
   4bb70:	dcc00315 	stw	r19,12(sp)
   4bb74:	24c0b804 	addi	r19,r4,736
   4bb78:	dd800615 	stw	r22,24(sp)
   4bb7c:	dd400515 	stw	r21,20(sp)
   4bb80:	dd000415 	stw	r20,16(sp)
   4bb84:	dfc00715 	stw	ra,28(sp)
   4bb88:	dc800215 	stw	r18,8(sp)
   4bb8c:	dc400115 	stw	r17,4(sp)
   4bb90:	dc000015 	stw	r16,0(sp)
   4bb94:	2029883a 	mov	r20,r4
   4bb98:	282b883a 	mov	r21,r5
   4bb9c:	002d883a 	mov	r22,zero
   4bba0:	004af280 	call	4af28 <__sfp_lock_acquire>
   4bba4:	98001326 	beq	r19,zero,4bbf4 <_fwalk_reent+0x88>
   4bba8:	04bfffc4 	movi	r18,-1
   4bbac:	9c400117 	ldw	r17,4(r19)
   4bbb0:	9c000217 	ldw	r16,8(r19)
   4bbb4:	8c7fffc4 	addi	r17,r17,-1
   4bbb8:	88000c16 	blt	r17,zero,4bbec <_fwalk_reent+0x80>
   4bbbc:	84000304 	addi	r16,r16,12
   4bbc0:	80c0000f 	ldh	r3,0(r16)
   4bbc4:	8c7fffc4 	addi	r17,r17,-1
   4bbc8:	817ffd04 	addi	r5,r16,-12
   4bbcc:	18000526 	beq	r3,zero,4bbe4 <_fwalk_reent+0x78>
   4bbd0:	80c0008f 	ldh	r3,2(r16)
   4bbd4:	a009883a 	mov	r4,r20
   4bbd8:	1c800226 	beq	r3,r18,4bbe4 <_fwalk_reent+0x78>
   4bbdc:	a83ee83a 	callr	r21
   4bbe0:	b0acb03a 	or	r22,r22,r2
   4bbe4:	84001704 	addi	r16,r16,92
   4bbe8:	8cbff51e 	bne	r17,r18,4bbc0 <__alt_data_end+0xfffd9bc0>
   4bbec:	9cc00017 	ldw	r19,0(r19)
   4bbf0:	983fee1e 	bne	r19,zero,4bbac <__alt_data_end+0xfffd9bac>
   4bbf4:	004af2c0 	call	4af2c <__sfp_lock_release>
   4bbf8:	b005883a 	mov	r2,r22
   4bbfc:	dfc00717 	ldw	ra,28(sp)
   4bc00:	dd800617 	ldw	r22,24(sp)
   4bc04:	dd400517 	ldw	r21,20(sp)
   4bc08:	dd000417 	ldw	r20,16(sp)
   4bc0c:	dcc00317 	ldw	r19,12(sp)
   4bc10:	dc800217 	ldw	r18,8(sp)
   4bc14:	dc400117 	ldw	r17,4(sp)
   4bc18:	dc000017 	ldw	r16,0(sp)
   4bc1c:	dec00804 	addi	sp,sp,32
   4bc20:	f800283a 	ret

0004bc24 <iswspace>:
   4bc24:	00803fc4 	movi	r2,255
   4bc28:	11000a36 	bltu	r2,r4,4bc54 <iswspace+0x30>
   4bc2c:	00800174 	movhi	r2,5
   4bc30:	109f5604 	addi	r2,r2,32088
   4bc34:	10800017 	ldw	r2,0(r2)
   4bc38:	1109883a 	add	r4,r2,r4
   4bc3c:	20800003 	ldbu	r2,0(r4)
   4bc40:	1080020c 	andi	r2,r2,8
   4bc44:	10803fcc 	andi	r2,r2,255
   4bc48:	1080201c 	xori	r2,r2,128
   4bc4c:	10bfe004 	addi	r2,r2,-128
   4bc50:	f800283a 	ret
   4bc54:	0005883a 	mov	r2,zero
   4bc58:	f800283a 	ret

0004bc5c <_setlocale_r>:
   4bc5c:	defffc04 	addi	sp,sp,-16
   4bc60:	dc800215 	stw	r18,8(sp)
   4bc64:	dc400115 	stw	r17,4(sp)
   4bc68:	dc000015 	stw	r16,0(sp)
   4bc6c:	dfc00315 	stw	ra,12(sp)
   4bc70:	3021883a 	mov	r16,r6
   4bc74:	2023883a 	mov	r17,r4
   4bc78:	2825883a 	mov	r18,r5
   4bc7c:	30001626 	beq	r6,zero,4bcd8 <_setlocale_r+0x7c>
   4bc80:	3009883a 	mov	r4,r6
   4bc84:	01400174 	movhi	r5,5
   4bc88:	29573d04 	addi	r5,r5,23796
   4bc8c:	004e8300 	call	4e830 <strcmp>
   4bc90:	10000a1e 	bne	r2,zero,4bcbc <_setlocale_r+0x60>
   4bc94:	8c800c15 	stw	r18,48(r17)
   4bc98:	8c000d15 	stw	r16,52(r17)
   4bc9c:	00800174 	movhi	r2,5
   4bca0:	10973d04 	addi	r2,r2,23796
   4bca4:	dfc00317 	ldw	ra,12(sp)
   4bca8:	dc800217 	ldw	r18,8(sp)
   4bcac:	dc400117 	ldw	r17,4(sp)
   4bcb0:	dc000017 	ldw	r16,0(sp)
   4bcb4:	dec00404 	addi	sp,sp,16
   4bcb8:	f800283a 	ret
   4bcbc:	8009883a 	mov	r4,r16
   4bcc0:	01400174 	movhi	r5,5
   4bcc4:	29574704 	addi	r5,r5,23836
   4bcc8:	004e8300 	call	4e830 <strcmp>
   4bccc:	103ff126 	beq	r2,zero,4bc94 <__alt_data_end+0xfffd9c94>
   4bcd0:	0005883a 	mov	r2,zero
   4bcd4:	003ff306 	br	4bca4 <__alt_data_end+0xfffd9ca4>
   4bcd8:	00800174 	movhi	r2,5
   4bcdc:	10973d04 	addi	r2,r2,23796
   4bce0:	dfc00317 	ldw	ra,12(sp)
   4bce4:	dc800217 	ldw	r18,8(sp)
   4bce8:	dc400117 	ldw	r17,4(sp)
   4bcec:	dc000017 	ldw	r16,0(sp)
   4bcf0:	dec00404 	addi	sp,sp,16
   4bcf4:	f800283a 	ret

0004bcf8 <__locale_charset>:
   4bcf8:	00800174 	movhi	r2,5
   4bcfc:	10980704 	addi	r2,r2,24604
   4bd00:	f800283a 	ret

0004bd04 <_localeconv_r>:
   4bd04:	00800174 	movhi	r2,5
   4bd08:	10980b04 	addi	r2,r2,24620
   4bd0c:	f800283a 	ret

0004bd10 <setlocale>:
   4bd10:	00c00174 	movhi	r3,5
   4bd14:	18df5504 	addi	r3,r3,32084
   4bd18:	2005883a 	mov	r2,r4
   4bd1c:	19000017 	ldw	r4,0(r3)
   4bd20:	280d883a 	mov	r6,r5
   4bd24:	100b883a 	mov	r5,r2
   4bd28:	004bc5c1 	jmpi	4bc5c <_setlocale_r>

0004bd2c <localeconv>:
   4bd2c:	00800174 	movhi	r2,5
   4bd30:	10980b04 	addi	r2,r2,24620
   4bd34:	f800283a 	ret

0004bd38 <__smakebuf_r>:
   4bd38:	2880030b 	ldhu	r2,12(r5)
   4bd3c:	deffed04 	addi	sp,sp,-76
   4bd40:	dc401015 	stw	r17,64(sp)
   4bd44:	10c0008c 	andi	r3,r2,2
   4bd48:	18ffffcc 	andi	r3,r3,65535
   4bd4c:	18e0001c 	xori	r3,r3,32768
   4bd50:	dc000f15 	stw	r16,60(sp)
   4bd54:	dfc01215 	stw	ra,72(sp)
   4bd58:	dc801115 	stw	r18,68(sp)
   4bd5c:	18e00004 	addi	r3,r3,-32768
   4bd60:	2821883a 	mov	r16,r5
   4bd64:	2023883a 	mov	r17,r4
   4bd68:	1800381e 	bne	r3,zero,4be4c <__smakebuf_r+0x114>
   4bd6c:	2940038f 	ldh	r5,14(r5)
   4bd70:	28002d16 	blt	r5,zero,4be28 <__smakebuf_r+0xf0>
   4bd74:	d80d883a 	mov	r6,sp
   4bd78:	00511280 	call	51128 <_fstat_r>
   4bd7c:	10002916 	blt	r2,zero,4be24 <__smakebuf_r+0xec>
   4bd80:	d8800117 	ldw	r2,4(sp)
   4bd84:	00e00014 	movui	r3,32768
   4bd88:	10bc000c 	andi	r2,r2,61440
   4bd8c:	10c03c26 	beq	r2,r3,4be80 <__smakebuf_r+0x148>
   4bd90:	80c0030b 	ldhu	r3,12(r16)
   4bd94:	18c20014 	ori	r3,r3,2048
   4bd98:	80c0030d 	sth	r3,12(r16)
   4bd9c:	00c80004 	movi	r3,8192
   4bda0:	10c00c1e 	bne	r2,r3,4bdd4 <__smakebuf_r+0x9c>
   4bda4:	8140038f 	ldh	r5,14(r16)
   4bda8:	8809883a 	mov	r4,r17
   4bdac:	0051cfc0 	call	51cfc <_isatty_r>
   4bdb0:	10000826 	beq	r2,zero,4bdd4 <__smakebuf_r+0x9c>
   4bdb4:	80c0030b 	ldhu	r3,12(r16)
   4bdb8:	808010c4 	addi	r2,r16,67
   4bdbc:	80800015 	stw	r2,0(r16)
   4bdc0:	18c00054 	ori	r3,r3,1
   4bdc4:	80800415 	stw	r2,16(r16)
   4bdc8:	00800044 	movi	r2,1
   4bdcc:	80c0030d 	sth	r3,12(r16)
   4bdd0:	80800515 	stw	r2,20(r16)
   4bdd4:	04810004 	movi	r18,1024
   4bdd8:	8809883a 	mov	r4,r17
   4bddc:	900b883a 	mov	r5,r18
   4bde0:	004bee00 	call	4bee0 <_malloc_r>
   4bde4:	10003026 	beq	r2,zero,4bea8 <__smakebuf_r+0x170>
   4bde8:	80c0030b 	ldhu	r3,12(r16)
   4bdec:	01000174 	movhi	r4,5
   4bdf0:	212b2804 	addi	r4,r4,-21344
   4bdf4:	89000f15 	stw	r4,60(r17)
   4bdf8:	18c02014 	ori	r3,r3,128
   4bdfc:	80c0030d 	sth	r3,12(r16)
   4be00:	80800015 	stw	r2,0(r16)
   4be04:	80800415 	stw	r2,16(r16)
   4be08:	84800515 	stw	r18,20(r16)
   4be0c:	dfc01217 	ldw	ra,72(sp)
   4be10:	dc801117 	ldw	r18,68(sp)
   4be14:	dc401017 	ldw	r17,64(sp)
   4be18:	dc000f17 	ldw	r16,60(sp)
   4be1c:	dec01304 	addi	sp,sp,76
   4be20:	f800283a 	ret
   4be24:	8080030b 	ldhu	r2,12(r16)
   4be28:	10c0200c 	andi	r3,r2,128
   4be2c:	18ffffcc 	andi	r3,r3,65535
   4be30:	18e0001c 	xori	r3,r3,32768
   4be34:	18e00004 	addi	r3,r3,-32768
   4be38:	18000f1e 	bne	r3,zero,4be78 <__smakebuf_r+0x140>
   4be3c:	04810004 	movi	r18,1024
   4be40:	10820014 	ori	r2,r2,2048
   4be44:	8080030d 	sth	r2,12(r16)
   4be48:	003fe306 	br	4bdd8 <__alt_data_end+0xfffd9dd8>
   4be4c:	288010c4 	addi	r2,r5,67
   4be50:	28800015 	stw	r2,0(r5)
   4be54:	28800415 	stw	r2,16(r5)
   4be58:	00800044 	movi	r2,1
   4be5c:	28800515 	stw	r2,20(r5)
   4be60:	dfc01217 	ldw	ra,72(sp)
   4be64:	dc801117 	ldw	r18,68(sp)
   4be68:	dc401017 	ldw	r17,64(sp)
   4be6c:	dc000f17 	ldw	r16,60(sp)
   4be70:	dec01304 	addi	sp,sp,76
   4be74:	f800283a 	ret
   4be78:	04801004 	movi	r18,64
   4be7c:	003ff006 	br	4be40 <__alt_data_end+0xfffd9e40>
   4be80:	81000a17 	ldw	r4,40(r16)
   4be84:	00c00174 	movhi	r3,5
   4be88:	18f9f304 	addi	r3,r3,-6196
   4be8c:	20ffc01e 	bne	r4,r3,4bd90 <__alt_data_end+0xfffd9d90>
   4be90:	8080030b 	ldhu	r2,12(r16)
   4be94:	00c10004 	movi	r3,1024
   4be98:	80c01315 	stw	r3,76(r16)
   4be9c:	10c4b03a 	or	r2,r2,r3
   4bea0:	8080030d 	sth	r2,12(r16)
   4bea4:	003fcb06 	br	4bdd4 <__alt_data_end+0xfffd9dd4>
   4bea8:	8080030b 	ldhu	r2,12(r16)
   4beac:	10c0800c 	andi	r3,r2,512
   4beb0:	18ffffcc 	andi	r3,r3,65535
   4beb4:	18e0001c 	xori	r3,r3,32768
   4beb8:	18e00004 	addi	r3,r3,-32768
   4bebc:	183fd31e 	bne	r3,zero,4be0c <__alt_data_end+0xfffd9e0c>
   4bec0:	10800094 	ori	r2,r2,2
   4bec4:	80c010c4 	addi	r3,r16,67
   4bec8:	8080030d 	sth	r2,12(r16)
   4becc:	00800044 	movi	r2,1
   4bed0:	80c00015 	stw	r3,0(r16)
   4bed4:	80c00415 	stw	r3,16(r16)
   4bed8:	80800515 	stw	r2,20(r16)
   4bedc:	003fcb06 	br	4be0c <__alt_data_end+0xfffd9e0c>

0004bee0 <_malloc_r>:
   4bee0:	defff604 	addi	sp,sp,-40
   4bee4:	dc800215 	stw	r18,8(sp)
   4bee8:	dfc00915 	stw	ra,36(sp)
   4beec:	df000815 	stw	fp,32(sp)
   4bef0:	ddc00715 	stw	r23,28(sp)
   4bef4:	dd800615 	stw	r22,24(sp)
   4bef8:	dd400515 	stw	r21,20(sp)
   4befc:	dd000415 	stw	r20,16(sp)
   4bf00:	dcc00315 	stw	r19,12(sp)
   4bf04:	dc400115 	stw	r17,4(sp)
   4bf08:	dc000015 	stw	r16,0(sp)
   4bf0c:	288002c4 	addi	r2,r5,11
   4bf10:	00c00584 	movi	r3,22
   4bf14:	2025883a 	mov	r18,r4
   4bf18:	18802b2e 	bgeu	r3,r2,4bfc8 <_malloc_r+0xe8>
   4bf1c:	047ffe04 	movi	r17,-8
   4bf20:	1462703a 	and	r17,r2,r17
   4bf24:	88002a16 	blt	r17,zero,4bfd0 <_malloc_r+0xf0>
   4bf28:	89402936 	bltu	r17,r5,4bfd0 <_malloc_r+0xf0>
   4bf2c:	9009883a 	mov	r4,r18
   4bf30:	00545140 	call	54514 <__malloc_lock>
   4bf34:	00807dc4 	movi	r2,503
   4bf38:	14402936 	bltu	r2,r17,4bfe0 <_malloc_r+0x100>
   4bf3c:	8808d0fa 	srli	r4,r17,3
   4bf40:	04c00174 	movhi	r19,5
   4bf44:	9cd9c404 	addi	r19,r19,26384
   4bf48:	2105883a 	add	r2,r4,r4
   4bf4c:	1085883a 	add	r2,r2,r2
   4bf50:	1085883a 	add	r2,r2,r2
   4bf54:	9885883a 	add	r2,r19,r2
   4bf58:	14000317 	ldw	r16,12(r2)
   4bf5c:	80815526 	beq	r16,r2,4c4b4 <_malloc_r+0x5d4>
   4bf60:	81000117 	ldw	r4,4(r16)
   4bf64:	00bfff04 	movi	r2,-4
   4bf68:	80c00317 	ldw	r3,12(r16)
   4bf6c:	2084703a 	and	r2,r4,r2
   4bf70:	8085883a 	add	r2,r16,r2
   4bf74:	11800117 	ldw	r6,4(r2)
   4bf78:	81400217 	ldw	r5,8(r16)
   4bf7c:	9009883a 	mov	r4,r18
   4bf80:	31800054 	ori	r6,r6,1
   4bf84:	11800115 	stw	r6,4(r2)
   4bf88:	28c00315 	stw	r3,12(r5)
   4bf8c:	19400215 	stw	r5,8(r3)
   4bf90:	00545180 	call	54518 <__malloc_unlock>
   4bf94:	80800204 	addi	r2,r16,8
   4bf98:	dfc00917 	ldw	ra,36(sp)
   4bf9c:	df000817 	ldw	fp,32(sp)
   4bfa0:	ddc00717 	ldw	r23,28(sp)
   4bfa4:	dd800617 	ldw	r22,24(sp)
   4bfa8:	dd400517 	ldw	r21,20(sp)
   4bfac:	dd000417 	ldw	r20,16(sp)
   4bfb0:	dcc00317 	ldw	r19,12(sp)
   4bfb4:	dc800217 	ldw	r18,8(sp)
   4bfb8:	dc400117 	ldw	r17,4(sp)
   4bfbc:	dc000017 	ldw	r16,0(sp)
   4bfc0:	dec00a04 	addi	sp,sp,40
   4bfc4:	f800283a 	ret
   4bfc8:	04400404 	movi	r17,16
   4bfcc:	897fd72e 	bgeu	r17,r5,4bf2c <__alt_data_end+0xfffd9f2c>
   4bfd0:	00800304 	movi	r2,12
   4bfd4:	90800015 	stw	r2,0(r18)
   4bfd8:	0005883a 	mov	r2,zero
   4bfdc:	003fee06 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4bfe0:	8808d27a 	srli	r4,r17,9
   4bfe4:	20007126 	beq	r4,zero,4c1ac <_malloc_r+0x2cc>
   4bfe8:	00800104 	movi	r2,4
   4bfec:	1100eb36 	bltu	r2,r4,4c39c <_malloc_r+0x4bc>
   4bff0:	8808d1ba 	srli	r4,r17,6
   4bff4:	21000e04 	addi	r4,r4,56
   4bff8:	210b883a 	add	r5,r4,r4
   4bffc:	294b883a 	add	r5,r5,r5
   4c000:	294b883a 	add	r5,r5,r5
   4c004:	04c00174 	movhi	r19,5
   4c008:	9cd9c404 	addi	r19,r19,26384
   4c00c:	994b883a 	add	r5,r19,r5
   4c010:	2c000317 	ldw	r16,12(r5)
   4c014:	2c000e26 	beq	r5,r16,4c050 <_malloc_r+0x170>
   4c018:	80c00117 	ldw	r3,4(r16)
   4c01c:	01ffff04 	movi	r7,-4
   4c020:	018003c4 	movi	r6,15
   4c024:	19c6703a 	and	r3,r3,r7
   4c028:	1c45c83a 	sub	r2,r3,r17
   4c02c:	30800716 	blt	r6,r2,4c04c <_malloc_r+0x16c>
   4c030:	1000610e 	bge	r2,zero,4c1b8 <_malloc_r+0x2d8>
   4c034:	84000317 	ldw	r16,12(r16)
   4c038:	2c000526 	beq	r5,r16,4c050 <_malloc_r+0x170>
   4c03c:	80c00117 	ldw	r3,4(r16)
   4c040:	19c6703a 	and	r3,r3,r7
   4c044:	1c45c83a 	sub	r2,r3,r17
   4c048:	30bff90e 	bge	r6,r2,4c030 <__alt_data_end+0xfffda030>
   4c04c:	213fffc4 	addi	r4,r4,-1
   4c050:	21000044 	addi	r4,r4,1
   4c054:	9c000417 	ldw	r16,16(r19)
   4c058:	00c00174 	movhi	r3,5
   4c05c:	18d9c404 	addi	r3,r3,26384
   4c060:	1a400204 	addi	r9,r3,8
   4c064:	8240ff26 	beq	r16,r9,4c464 <_malloc_r+0x584>
   4c068:	81400117 	ldw	r5,4(r16)
   4c06c:	00bfff04 	movi	r2,-4
   4c070:	018003c4 	movi	r6,15
   4c074:	2884703a 	and	r2,r5,r2
   4c078:	144bc83a 	sub	r5,r2,r17
   4c07c:	3140ea16 	blt	r6,r5,4c428 <_malloc_r+0x548>
   4c080:	1a400515 	stw	r9,20(r3)
   4c084:	1a400415 	stw	r9,16(r3)
   4c088:	2800570e 	bge	r5,zero,4c1e8 <_malloc_r+0x308>
   4c08c:	01407fc4 	movi	r5,511
   4c090:	2880ca36 	bltu	r5,r2,4c3bc <_malloc_r+0x4dc>
   4c094:	1004d0fa 	srli	r2,r2,3
   4c098:	02000044 	movi	r8,1
   4c09c:	19c00117 	ldw	r7,4(r3)
   4c0a0:	108b883a 	add	r5,r2,r2
   4c0a4:	294b883a 	add	r5,r5,r5
   4c0a8:	1005d0ba 	srai	r2,r2,2
   4c0ac:	294b883a 	add	r5,r5,r5
   4c0b0:	28cb883a 	add	r5,r5,r3
   4c0b4:	29800217 	ldw	r6,8(r5)
   4c0b8:	4084983a 	sll	r2,r8,r2
   4c0bc:	81400315 	stw	r5,12(r16)
   4c0c0:	81800215 	stw	r6,8(r16)
   4c0c4:	11c4b03a 	or	r2,r2,r7
   4c0c8:	18800115 	stw	r2,4(r3)
   4c0cc:	2c000215 	stw	r16,8(r5)
   4c0d0:	34000315 	stw	r16,12(r6)
   4c0d4:	200bd0ba 	srai	r5,r4,2
   4c0d8:	00c00044 	movi	r3,1
   4c0dc:	194a983a 	sll	r5,r3,r5
   4c0e0:	11404936 	bltu	r2,r5,4c208 <_malloc_r+0x328>
   4c0e4:	1146703a 	and	r3,r2,r5
   4c0e8:	18000a1e 	bne	r3,zero,4c114 <_malloc_r+0x234>
   4c0ec:	00ffff04 	movi	r3,-4
   4c0f0:	294b883a 	add	r5,r5,r5
   4c0f4:	20c8703a 	and	r4,r4,r3
   4c0f8:	1146703a 	and	r3,r2,r5
   4c0fc:	21000104 	addi	r4,r4,4
   4c100:	1800041e 	bne	r3,zero,4c114 <_malloc_r+0x234>
   4c104:	294b883a 	add	r5,r5,r5
   4c108:	1146703a 	and	r3,r2,r5
   4c10c:	21000104 	addi	r4,r4,4
   4c110:	183ffc26 	beq	r3,zero,4c104 <__alt_data_end+0xfffda104>
   4c114:	023fff04 	movi	r8,-4
   4c118:	01c003c4 	movi	r7,15
   4c11c:	2105883a 	add	r2,r4,r4
   4c120:	1085883a 	add	r2,r2,r2
   4c124:	1085883a 	add	r2,r2,r2
   4c128:	9899883a 	add	r12,r19,r2
   4c12c:	62800304 	addi	r10,r12,12
   4c130:	2017883a 	mov	r11,r4
   4c134:	54000017 	ldw	r16,0(r10)
   4c138:	51bffd04 	addi	r6,r10,-12
   4c13c:	8180041e 	bne	r16,r6,4c150 <_malloc_r+0x270>
   4c140:	0000ca06 	br	4c46c <_malloc_r+0x58c>
   4c144:	10001c0e 	bge	r2,zero,4c1b8 <_malloc_r+0x2d8>
   4c148:	84000317 	ldw	r16,12(r16)
   4c14c:	8180c726 	beq	r16,r6,4c46c <_malloc_r+0x58c>
   4c150:	80c00117 	ldw	r3,4(r16)
   4c154:	1a06703a 	and	r3,r3,r8
   4c158:	1c45c83a 	sub	r2,r3,r17
   4c15c:	38bff90e 	bge	r7,r2,4c144 <__alt_data_end+0xfffda144>
   4c160:	81000317 	ldw	r4,12(r16)
   4c164:	81400217 	ldw	r5,8(r16)
   4c168:	8447883a 	add	r3,r16,r17
   4c16c:	8c400054 	ori	r17,r17,1
   4c170:	29000315 	stw	r4,12(r5)
   4c174:	21400215 	stw	r5,8(r4)
   4c178:	84400115 	stw	r17,4(r16)
   4c17c:	1889883a 	add	r4,r3,r2
   4c180:	11400054 	ori	r5,r2,1
   4c184:	98c00515 	stw	r3,20(r19)
   4c188:	98c00415 	stw	r3,16(r19)
   4c18c:	20800015 	stw	r2,0(r4)
   4c190:	1a400315 	stw	r9,12(r3)
   4c194:	1a400215 	stw	r9,8(r3)
   4c198:	19400115 	stw	r5,4(r3)
   4c19c:	9009883a 	mov	r4,r18
   4c1a0:	00545180 	call	54518 <__malloc_unlock>
   4c1a4:	80800204 	addi	r2,r16,8
   4c1a8:	003f7b06 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c1ac:	8808d0fa 	srli	r4,r17,3
   4c1b0:	210b883a 	add	r5,r4,r4
   4c1b4:	003f9106 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c1b8:	80c7883a 	add	r3,r16,r3
   4c1bc:	19400117 	ldw	r5,4(r3)
   4c1c0:	80800317 	ldw	r2,12(r16)
   4c1c4:	81000217 	ldw	r4,8(r16)
   4c1c8:	29400054 	ori	r5,r5,1
   4c1cc:	19400115 	stw	r5,4(r3)
   4c1d0:	20800315 	stw	r2,12(r4)
   4c1d4:	11000215 	stw	r4,8(r2)
   4c1d8:	9009883a 	mov	r4,r18
   4c1dc:	00545180 	call	54518 <__malloc_unlock>
   4c1e0:	80800204 	addi	r2,r16,8
   4c1e4:	003f6c06 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c1e8:	8085883a 	add	r2,r16,r2
   4c1ec:	10c00117 	ldw	r3,4(r2)
   4c1f0:	9009883a 	mov	r4,r18
   4c1f4:	18c00054 	ori	r3,r3,1
   4c1f8:	10c00115 	stw	r3,4(r2)
   4c1fc:	00545180 	call	54518 <__malloc_unlock>
   4c200:	80800204 	addi	r2,r16,8
   4c204:	003f6406 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c208:	9c000217 	ldw	r16,8(r19)
   4c20c:	00bfff04 	movi	r2,-4
   4c210:	85400117 	ldw	r21,4(r16)
   4c214:	a8aa703a 	and	r21,r21,r2
   4c218:	ac400336 	bltu	r21,r17,4c228 <_malloc_r+0x348>
   4c21c:	ac45c83a 	sub	r2,r21,r17
   4c220:	00c003c4 	movi	r3,15
   4c224:	18805316 	blt	r3,r2,4c374 <_malloc_r+0x494>
   4c228:	d5e6c717 	ldw	r23,-25828(gp)
   4c22c:	d0e00617 	ldw	r3,-32744(gp)
   4c230:	00bfffc4 	movi	r2,-1
   4c234:	8579883a 	add	fp,r16,r21
   4c238:	8def883a 	add	r23,r17,r23
   4c23c:	1880d226 	beq	r3,r2,4c588 <_malloc_r+0x6a8>
   4c240:	bdc403c4 	addi	r23,r23,4111
   4c244:	00bc0004 	movi	r2,-4096
   4c248:	b8ae703a 	and	r23,r23,r2
   4c24c:	9009883a 	mov	r4,r18
   4c250:	b80b883a 	mov	r5,r23
   4c254:	004e4fc0 	call	4e4fc <_sbrk_r>
   4c258:	1029883a 	mov	r20,r2
   4c25c:	00bfffc4 	movi	r2,-1
   4c260:	a080d126 	beq	r20,r2,4c5a8 <_malloc_r+0x6c8>
   4c264:	a7009f36 	bltu	r20,fp,4c4e4 <_malloc_r+0x604>
   4c268:	058001b4 	movhi	r22,6
   4c26c:	b5a62104 	addi	r22,r22,-26492
   4c270:	b0800017 	ldw	r2,0(r22)
   4c274:	b885883a 	add	r2,r23,r2
   4c278:	b0800015 	stw	r2,0(r22)
   4c27c:	e500cf26 	beq	fp,r20,4c5bc <_malloc_r+0x6dc>
   4c280:	d1200617 	ldw	r4,-32744(gp)
   4c284:	00ffffc4 	movi	r3,-1
   4c288:	20c0e026 	beq	r4,r3,4c60c <_malloc_r+0x72c>
   4c28c:	a739c83a 	sub	fp,r20,fp
   4c290:	1705883a 	add	r2,r2,fp
   4c294:	b0800015 	stw	r2,0(r22)
   4c298:	a08001cc 	andi	r2,r20,7
   4c29c:	1000a526 	beq	r2,zero,4c534 <_malloc_r+0x654>
   4c2a0:	a0a9c83a 	sub	r20,r20,r2
   4c2a4:	00c40204 	movi	r3,4104
   4c2a8:	a5000204 	addi	r20,r20,8
   4c2ac:	1885c83a 	sub	r2,r3,r2
   4c2b0:	a5c7883a 	add	r3,r20,r23
   4c2b4:	18c3ffcc 	andi	r3,r3,4095
   4c2b8:	10efc83a 	sub	r23,r2,r3
   4c2bc:	9009883a 	mov	r4,r18
   4c2c0:	b80b883a 	mov	r5,r23
   4c2c4:	004e4fc0 	call	4e4fc <_sbrk_r>
   4c2c8:	00ffffc4 	movi	r3,-1
   4c2cc:	10c0cc26 	beq	r2,r3,4c600 <_malloc_r+0x720>
   4c2d0:	1505c83a 	sub	r2,r2,r20
   4c2d4:	b887883a 	add	r3,r23,r2
   4c2d8:	18c00054 	ori	r3,r3,1
   4c2dc:	b0800017 	ldw	r2,0(r22)
   4c2e0:	9d000215 	stw	r20,8(r19)
   4c2e4:	a0c00115 	stw	r3,4(r20)
   4c2e8:	b885883a 	add	r2,r23,r2
   4c2ec:	b0800015 	stw	r2,0(r22)
   4c2f0:	84c00e26 	beq	r16,r19,4c32c <_malloc_r+0x44c>
   4c2f4:	00c003c4 	movi	r3,15
   4c2f8:	1d40902e 	bgeu	r3,r21,4c53c <_malloc_r+0x65c>
   4c2fc:	ad7ffd04 	addi	r21,r21,-12
   4c300:	013ffe04 	movi	r4,-8
   4c304:	a908703a 	and	r4,r21,r4
   4c308:	810b883a 	add	r5,r16,r4
   4c30c:	01800144 	movi	r6,5
   4c310:	29800115 	stw	r6,4(r5)
   4c314:	29800215 	stw	r6,8(r5)
   4c318:	81400117 	ldw	r5,4(r16)
   4c31c:	2940004c 	andi	r5,r5,1
   4c320:	214ab03a 	or	r5,r4,r5
   4c324:	81400115 	stw	r5,4(r16)
   4c328:	1900ae36 	bltu	r3,r4,4c5e4 <_malloc_r+0x704>
   4c32c:	d0e6c617 	ldw	r3,-25832(gp)
   4c330:	1880012e 	bgeu	r3,r2,4c338 <_malloc_r+0x458>
   4c334:	d0a6c615 	stw	r2,-25832(gp)
   4c338:	d0e6c517 	ldw	r3,-25836(gp)
   4c33c:	9c000217 	ldw	r16,8(r19)
   4c340:	1880012e 	bgeu	r3,r2,4c348 <_malloc_r+0x468>
   4c344:	d0a6c515 	stw	r2,-25836(gp)
   4c348:	80c00117 	ldw	r3,4(r16)
   4c34c:	00bfff04 	movi	r2,-4
   4c350:	1886703a 	and	r3,r3,r2
   4c354:	1c45c83a 	sub	r2,r3,r17
   4c358:	1c400236 	bltu	r3,r17,4c364 <_malloc_r+0x484>
   4c35c:	00c003c4 	movi	r3,15
   4c360:	18800416 	blt	r3,r2,4c374 <_malloc_r+0x494>
   4c364:	9009883a 	mov	r4,r18
   4c368:	00545180 	call	54518 <__malloc_unlock>
   4c36c:	0005883a 	mov	r2,zero
   4c370:	003f0906 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c374:	88c00054 	ori	r3,r17,1
   4c378:	10800054 	ori	r2,r2,1
   4c37c:	80c00115 	stw	r3,4(r16)
   4c380:	8463883a 	add	r17,r16,r17
   4c384:	88800115 	stw	r2,4(r17)
   4c388:	9009883a 	mov	r4,r18
   4c38c:	9c400215 	stw	r17,8(r19)
   4c390:	00545180 	call	54518 <__malloc_unlock>
   4c394:	80800204 	addi	r2,r16,8
   4c398:	003eff06 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c39c:	00800504 	movi	r2,20
   4c3a0:	1100492e 	bgeu	r2,r4,4c4c8 <_malloc_r+0x5e8>
   4c3a4:	00801504 	movi	r2,84
   4c3a8:	11005c36 	bltu	r2,r4,4c51c <_malloc_r+0x63c>
   4c3ac:	8808d33a 	srli	r4,r17,12
   4c3b0:	21001b84 	addi	r4,r4,110
   4c3b4:	210b883a 	add	r5,r4,r4
   4c3b8:	003f1006 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c3bc:	1006d27a 	srli	r3,r2,9
   4c3c0:	01400104 	movi	r5,4
   4c3c4:	28c0432e 	bgeu	r5,r3,4c4d4 <_malloc_r+0x5f4>
   4c3c8:	01400504 	movi	r5,20
   4c3cc:	28c07036 	bltu	r5,r3,4c590 <_malloc_r+0x6b0>
   4c3d0:	194016c4 	addi	r5,r3,91
   4c3d4:	294d883a 	add	r6,r5,r5
   4c3d8:	318d883a 	add	r6,r6,r6
   4c3dc:	318d883a 	add	r6,r6,r6
   4c3e0:	998d883a 	add	r6,r19,r6
   4c3e4:	30c00217 	ldw	r3,8(r6)
   4c3e8:	01c00174 	movhi	r7,5
   4c3ec:	39d9c404 	addi	r7,r7,26384
   4c3f0:	19805726 	beq	r3,r6,4c550 <_malloc_r+0x670>
   4c3f4:	01ffff04 	movi	r7,-4
   4c3f8:	19400117 	ldw	r5,4(r3)
   4c3fc:	29ca703a 	and	r5,r5,r7
   4c400:	1140022e 	bgeu	r2,r5,4c40c <_malloc_r+0x52c>
   4c404:	18c00217 	ldw	r3,8(r3)
   4c408:	30fffb1e 	bne	r6,r3,4c3f8 <__alt_data_end+0xfffda3f8>
   4c40c:	19400317 	ldw	r5,12(r3)
   4c410:	98800117 	ldw	r2,4(r19)
   4c414:	81400315 	stw	r5,12(r16)
   4c418:	80c00215 	stw	r3,8(r16)
   4c41c:	2c000215 	stw	r16,8(r5)
   4c420:	1c000315 	stw	r16,12(r3)
   4c424:	003f2b06 	br	4c0d4 <__alt_data_end+0xfffda0d4>
   4c428:	8445883a 	add	r2,r16,r17
   4c42c:	8c400054 	ori	r17,r17,1
   4c430:	18800515 	stw	r2,20(r3)
   4c434:	18800415 	stw	r2,16(r3)
   4c438:	29000054 	ori	r4,r5,1
   4c43c:	1147883a 	add	r3,r2,r5
   4c440:	84400115 	stw	r17,4(r16)
   4c444:	11000115 	stw	r4,4(r2)
   4c448:	12400315 	stw	r9,12(r2)
   4c44c:	12400215 	stw	r9,8(r2)
   4c450:	19400015 	stw	r5,0(r3)
   4c454:	9009883a 	mov	r4,r18
   4c458:	00545180 	call	54518 <__malloc_unlock>
   4c45c:	80800204 	addi	r2,r16,8
   4c460:	003ecd06 	br	4bf98 <__alt_data_end+0xfffd9f98>
   4c464:	18800117 	ldw	r2,4(r3)
   4c468:	003f1a06 	br	4c0d4 <__alt_data_end+0xfffda0d4>
   4c46c:	5ac00044 	addi	r11,r11,1
   4c470:	588000cc 	andi	r2,r11,3
   4c474:	52800204 	addi	r10,r10,8
   4c478:	103f2e1e 	bne	r2,zero,4c134 <__alt_data_end+0xfffda134>
   4c47c:	20c000cc 	andi	r3,r4,3
   4c480:	60bffe04 	addi	r2,r12,-8
   4c484:	18006f26 	beq	r3,zero,4c644 <_malloc_r+0x764>
   4c488:	63000017 	ldw	r12,0(r12)
   4c48c:	213fffc4 	addi	r4,r4,-1
   4c490:	60bffa26 	beq	r12,r2,4c47c <__alt_data_end+0xfffda47c>
   4c494:	98800117 	ldw	r2,4(r19)
   4c498:	294b883a 	add	r5,r5,r5
   4c49c:	117f5a36 	bltu	r2,r5,4c208 <__alt_data_end+0xfffda208>
   4c4a0:	283f5926 	beq	r5,zero,4c208 <__alt_data_end+0xfffda208>
   4c4a4:	1146703a 	and	r3,r2,r5
   4c4a8:	18001626 	beq	r3,zero,4c504 <_malloc_r+0x624>
   4c4ac:	5809883a 	mov	r4,r11
   4c4b0:	003f1a06 	br	4c11c <__alt_data_end+0xfffda11c>
   4c4b4:	80800204 	addi	r2,r16,8
   4c4b8:	84000517 	ldw	r16,20(r16)
   4c4bc:	143ea81e 	bne	r2,r16,4bf60 <__alt_data_end+0xfffd9f60>
   4c4c0:	21000084 	addi	r4,r4,2
   4c4c4:	003ee306 	br	4c054 <__alt_data_end+0xfffda054>
   4c4c8:	210016c4 	addi	r4,r4,91
   4c4cc:	210b883a 	add	r5,r4,r4
   4c4d0:	003eca06 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c4d4:	100ad1ba 	srli	r5,r2,6
   4c4d8:	29400e04 	addi	r5,r5,56
   4c4dc:	294d883a 	add	r6,r5,r5
   4c4e0:	003fbd06 	br	4c3d8 <__alt_data_end+0xfffda3d8>
   4c4e4:	84ff6026 	beq	r16,r19,4c268 <__alt_data_end+0xfffda268>
   4c4e8:	00800174 	movhi	r2,5
   4c4ec:	1099c404 	addi	r2,r2,26384
   4c4f0:	14000217 	ldw	r16,8(r2)
   4c4f4:	00bfff04 	movi	r2,-4
   4c4f8:	80c00117 	ldw	r3,4(r16)
   4c4fc:	1886703a 	and	r3,r3,r2
   4c500:	003f9406 	br	4c354 <__alt_data_end+0xfffda354>
   4c504:	294b883a 	add	r5,r5,r5
   4c508:	1146703a 	and	r3,r2,r5
   4c50c:	5ac00104 	addi	r11,r11,4
   4c510:	183ffc26 	beq	r3,zero,4c504 <__alt_data_end+0xfffda504>
   4c514:	5809883a 	mov	r4,r11
   4c518:	003f0006 	br	4c11c <__alt_data_end+0xfffda11c>
   4c51c:	00805504 	movi	r2,340
   4c520:	11001336 	bltu	r2,r4,4c570 <_malloc_r+0x690>
   4c524:	8808d3fa 	srli	r4,r17,15
   4c528:	21001dc4 	addi	r4,r4,119
   4c52c:	210b883a 	add	r5,r4,r4
   4c530:	003eb206 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c534:	00840004 	movi	r2,4096
   4c538:	003f5d06 	br	4c2b0 <__alt_data_end+0xfffda2b0>
   4c53c:	00800044 	movi	r2,1
   4c540:	a0800115 	stw	r2,4(r20)
   4c544:	a021883a 	mov	r16,r20
   4c548:	0007883a 	mov	r3,zero
   4c54c:	003f8106 	br	4c354 <__alt_data_end+0xfffda354>
   4c550:	280bd0ba 	srai	r5,r5,2
   4c554:	01800044 	movi	r6,1
   4c558:	38800117 	ldw	r2,4(r7)
   4c55c:	314c983a 	sll	r6,r6,r5
   4c560:	180b883a 	mov	r5,r3
   4c564:	3084b03a 	or	r2,r6,r2
   4c568:	38800115 	stw	r2,4(r7)
   4c56c:	003fa906 	br	4c414 <__alt_data_end+0xfffda414>
   4c570:	00815504 	movi	r2,1364
   4c574:	11001836 	bltu	r2,r4,4c5d8 <_malloc_r+0x6f8>
   4c578:	8808d4ba 	srli	r4,r17,18
   4c57c:	21001f04 	addi	r4,r4,124
   4c580:	210b883a 	add	r5,r4,r4
   4c584:	003e9d06 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c588:	bdc00404 	addi	r23,r23,16
   4c58c:	003f2f06 	br	4c24c <__alt_data_end+0xfffda24c>
   4c590:	01401504 	movi	r5,84
   4c594:	28c01f36 	bltu	r5,r3,4c614 <_malloc_r+0x734>
   4c598:	100ad33a 	srli	r5,r2,12
   4c59c:	29401b84 	addi	r5,r5,110
   4c5a0:	294d883a 	add	r6,r5,r5
   4c5a4:	003f8c06 	br	4c3d8 <__alt_data_end+0xfffda3d8>
   4c5a8:	9c000217 	ldw	r16,8(r19)
   4c5ac:	00bfff04 	movi	r2,-4
   4c5b0:	80c00117 	ldw	r3,4(r16)
   4c5b4:	1886703a 	and	r3,r3,r2
   4c5b8:	003f6606 	br	4c354 <__alt_data_end+0xfffda354>
   4c5bc:	e0c3ffcc 	andi	r3,fp,4095
   4c5c0:	183f2f1e 	bne	r3,zero,4c280 <__alt_data_end+0xfffda280>
   4c5c4:	98c00217 	ldw	r3,8(r19)
   4c5c8:	bd49883a 	add	r4,r23,r21
   4c5cc:	21000054 	ori	r4,r4,1
   4c5d0:	19000115 	stw	r4,4(r3)
   4c5d4:	003f5506 	br	4c32c <__alt_data_end+0xfffda32c>
   4c5d8:	01403f04 	movi	r5,252
   4c5dc:	01001f84 	movi	r4,126
   4c5e0:	003e8606 	br	4bffc <__alt_data_end+0xfffd9ffc>
   4c5e4:	9009883a 	mov	r4,r18
   4c5e8:	81400204 	addi	r5,r16,8
   4c5ec:	004b3100 	call	4b310 <_free_r>
   4c5f0:	008001b4 	movhi	r2,6
   4c5f4:	10a62104 	addi	r2,r2,-26492
   4c5f8:	10800017 	ldw	r2,0(r2)
   4c5fc:	003f4b06 	br	4c32c <__alt_data_end+0xfffda32c>
   4c600:	00c00044 	movi	r3,1
   4c604:	002f883a 	mov	r23,zero
   4c608:	003f3406 	br	4c2dc <__alt_data_end+0xfffda2dc>
   4c60c:	d5200615 	stw	r20,-32744(gp)
   4c610:	003f2106 	br	4c298 <__alt_data_end+0xfffda298>
   4c614:	01405504 	movi	r5,340
   4c618:	28c00436 	bltu	r5,r3,4c62c <_malloc_r+0x74c>
   4c61c:	100ad3fa 	srli	r5,r2,15
   4c620:	29401dc4 	addi	r5,r5,119
   4c624:	294d883a 	add	r6,r5,r5
   4c628:	003f6b06 	br	4c3d8 <__alt_data_end+0xfffda3d8>
   4c62c:	01415504 	movi	r5,1364
   4c630:	28c00936 	bltu	r5,r3,4c658 <_malloc_r+0x778>
   4c634:	100ad4ba 	srli	r5,r2,18
   4c638:	29401f04 	addi	r5,r5,124
   4c63c:	294d883a 	add	r6,r5,r5
   4c640:	003f6506 	br	4c3d8 <__alt_data_end+0xfffda3d8>
   4c644:	98800117 	ldw	r2,4(r19)
   4c648:	0146303a 	nor	r3,zero,r5
   4c64c:	1884703a 	and	r2,r3,r2
   4c650:	98800115 	stw	r2,4(r19)
   4c654:	003f9006 	br	4c498 <__alt_data_end+0xfffda498>
   4c658:	01803f04 	movi	r6,252
   4c65c:	01401f84 	movi	r5,126
   4c660:	003f5d06 	br	4c3d8 <__alt_data_end+0xfffda3d8>

0004c664 <_mbrtowc_r>:
   4c664:	defffc04 	addi	sp,sp,-16
   4c668:	dc000115 	stw	r16,4(sp)
   4c66c:	dc000417 	ldw	r16,16(sp)
   4c670:	dc400215 	stw	r17,8(sp)
   4c674:	dfc00315 	stw	ra,12(sp)
   4c678:	dc000015 	stw	r16,0(sp)
   4c67c:	2023883a 	mov	r17,r4
   4c680:	30000b26 	beq	r6,zero,4c6b0 <_mbrtowc_r+0x4c>
   4c684:	004c7080 	call	4c708 <_mbtowc_r>
   4c688:	00ffffc4 	movi	r3,-1
   4c68c:	10c0031e 	bne	r2,r3,4c69c <_mbrtowc_r+0x38>
   4c690:	80000015 	stw	zero,0(r16)
   4c694:	00c02284 	movi	r3,138
   4c698:	88c00015 	stw	r3,0(r17)
   4c69c:	dfc00317 	ldw	ra,12(sp)
   4c6a0:	dc400217 	ldw	r17,8(sp)
   4c6a4:	dc000117 	ldw	r16,4(sp)
   4c6a8:	dec00404 	addi	sp,sp,16
   4c6ac:	f800283a 	ret
   4c6b0:	000b883a 	mov	r5,zero
   4c6b4:	01800174 	movhi	r6,5
   4c6b8:	31974704 	addi	r6,r6,23836
   4c6bc:	01c00044 	movi	r7,1
   4c6c0:	004c7080 	call	4c708 <_mbtowc_r>
   4c6c4:	003ff006 	br	4c688 <__alt_data_end+0xfffda688>

0004c6c8 <mbrtowc>:
   4c6c8:	00800174 	movhi	r2,5
   4c6cc:	109f5504 	addi	r2,r2,32084
   4c6d0:	2011883a 	mov	r8,r4
   4c6d4:	11000017 	ldw	r4,0(r2)
   4c6d8:	defffe04 	addi	sp,sp,-8
   4c6dc:	2807883a 	mov	r3,r5
   4c6e0:	3005883a 	mov	r2,r6
   4c6e4:	d9c00015 	stw	r7,0(sp)
   4c6e8:	400b883a 	mov	r5,r8
   4c6ec:	180d883a 	mov	r6,r3
   4c6f0:	100f883a 	mov	r7,r2
   4c6f4:	dfc00115 	stw	ra,4(sp)
   4c6f8:	004c6640 	call	4c664 <_mbrtowc_r>
   4c6fc:	dfc00117 	ldw	ra,4(sp)
   4c700:	dec00204 	addi	sp,sp,8
   4c704:	f800283a 	ret

0004c708 <_mbtowc_r>:
   4c708:	deffff04 	addi	sp,sp,-4
   4c70c:	28000826 	beq	r5,zero,4c730 <_mbtowc_r+0x28>
   4c710:	30000926 	beq	r6,zero,4c738 <_mbtowc_r+0x30>
   4c714:	38000b26 	beq	r7,zero,4c744 <_mbtowc_r+0x3c>
   4c718:	30800003 	ldbu	r2,0(r6)
   4c71c:	28800015 	stw	r2,0(r5)
   4c720:	30800003 	ldbu	r2,0(r6)
   4c724:	1004c03a 	cmpne	r2,r2,zero
   4c728:	dec00104 	addi	sp,sp,4
   4c72c:	f800283a 	ret
   4c730:	d80b883a 	mov	r5,sp
   4c734:	303ff71e 	bne	r6,zero,4c714 <__alt_data_end+0xfffda714>
   4c738:	0005883a 	mov	r2,zero
   4c73c:	dec00104 	addi	sp,sp,4
   4c740:	f800283a 	ret
   4c744:	00bfff84 	movi	r2,-2
   4c748:	003ff706 	br	4c728 <__alt_data_end+0xfffda728>

0004c74c <memchr>:
   4c74c:	008000c4 	movi	r2,3
   4c750:	29403fcc 	andi	r5,r5,255
   4c754:	1180282e 	bgeu	r2,r6,4c7f8 <memchr+0xac>
   4c758:	2086703a 	and	r3,r4,r2
   4c75c:	1800351e 	bne	r3,zero,4c834 <memchr+0xe8>
   4c760:	2816923a 	slli	r11,r5,8
   4c764:	2093883a 	add	r9,r4,r2
   4c768:	22000084 	addi	r8,r4,2
   4c76c:	5957883a 	add	r11,r11,r5
   4c770:	5816923a 	slli	r11,r11,8
   4c774:	20c00044 	addi	r3,r4,1
   4c778:	037fbff4 	movhi	r13,65279
   4c77c:	6b7fbfc4 	addi	r13,r13,-257
   4c780:	5957883a 	add	r11,r11,r5
   4c784:	5816923a 	slli	r11,r11,8
   4c788:	03202074 	movhi	r12,32897
   4c78c:	63202004 	addi	r12,r12,-32640
   4c790:	101d883a 	mov	r14,r2
   4c794:	5957883a 	add	r11,r11,r5
   4c798:	21c00017 	ldw	r7,0(r4)
   4c79c:	31bfff04 	addi	r6,r6,-4
   4c7a0:	1805883a 	mov	r2,r3
   4c7a4:	3acef03a 	xor	r7,r7,r11
   4c7a8:	3b55883a 	add	r10,r7,r13
   4c7ac:	01ce303a 	nor	r7,zero,r7
   4c7b0:	51ce703a 	and	r7,r10,r7
   4c7b4:	3b0e703a 	and	r7,r7,r12
   4c7b8:	38000a26 	beq	r7,zero,4c7e4 <memchr+0x98>
   4c7bc:	21c00003 	ldbu	r7,0(r4)
   4c7c0:	39401e26 	beq	r7,r5,4c83c <memchr+0xf0>
   4c7c4:	19c00003 	ldbu	r7,0(r3)
   4c7c8:	39401926 	beq	r7,r5,4c830 <memchr+0xe4>
   4c7cc:	41c00003 	ldbu	r7,0(r8)
   4c7d0:	4005883a 	mov	r2,r8
   4c7d4:	39401626 	beq	r7,r5,4c830 <memchr+0xe4>
   4c7d8:	49c00003 	ldbu	r7,0(r9)
   4c7dc:	4805883a 	mov	r2,r9
   4c7e0:	39401326 	beq	r7,r5,4c830 <memchr+0xe4>
   4c7e4:	21000104 	addi	r4,r4,4
   4c7e8:	4a400104 	addi	r9,r9,4
   4c7ec:	42000104 	addi	r8,r8,4
   4c7f0:	18c00104 	addi	r3,r3,4
   4c7f4:	71bfe836 	bltu	r14,r6,4c798 <__alt_data_end+0xfffda798>
   4c7f8:	2005883a 	mov	r2,r4
   4c7fc:	30000a26 	beq	r6,zero,4c828 <memchr+0xdc>
   4c800:	10c00003 	ldbu	r3,0(r2)
   4c804:	19400a26 	beq	r3,r5,4c830 <memchr+0xe4>
   4c808:	10c00044 	addi	r3,r2,1
   4c80c:	118d883a 	add	r6,r2,r6
   4c810:	00000306 	br	4c820 <memchr+0xd4>
   4c814:	11000003 	ldbu	r4,0(r2)
   4c818:	18c00044 	addi	r3,r3,1
   4c81c:	21400426 	beq	r4,r5,4c830 <memchr+0xe4>
   4c820:	1805883a 	mov	r2,r3
   4c824:	19bffb1e 	bne	r3,r6,4c814 <__alt_data_end+0xfffda814>
   4c828:	0005883a 	mov	r2,zero
   4c82c:	f800283a 	ret
   4c830:	f800283a 	ret
   4c834:	2005883a 	mov	r2,r4
   4c838:	003ff106 	br	4c800 <__alt_data_end+0xfffda800>
   4c83c:	2005883a 	mov	r2,r4
   4c840:	f800283a 	ret

0004c844 <memcpy>:
   4c844:	00c003c4 	movi	r3,15
   4c848:	2005883a 	mov	r2,r4
   4c84c:	3009883a 	mov	r4,r6
   4c850:	1980032e 	bgeu	r3,r6,4c860 <memcpy+0x1c>
   4c854:	2886b03a 	or	r3,r5,r2
   4c858:	18c000cc 	andi	r3,r3,3
   4c85c:	18000926 	beq	r3,zero,4c884 <memcpy+0x40>
   4c860:	1007883a 	mov	r3,r2
   4c864:	290f883a 	add	r7,r5,r4
   4c868:	20000526 	beq	r4,zero,4c880 <memcpy+0x3c>
   4c86c:	29800003 	ldbu	r6,0(r5)
   4c870:	18c00044 	addi	r3,r3,1
   4c874:	29400044 	addi	r5,r5,1
   4c878:	19bfffc5 	stb	r6,-1(r3)
   4c87c:	29fffb1e 	bne	r5,r7,4c86c <__alt_data_end+0xfffda86c>
   4c880:	f800283a 	ret
   4c884:	327ffc04 	addi	r9,r6,-16
   4c888:	4812d13a 	srli	r9,r9,4
   4c88c:	11000404 	addi	r4,r2,16
   4c890:	1007883a 	mov	r3,r2
   4c894:	4810913a 	slli	r8,r9,4
   4c898:	280f883a 	mov	r7,r5
   4c89c:	2209883a 	add	r4,r4,r8
   4c8a0:	3a000017 	ldw	r8,0(r7)
   4c8a4:	18c00404 	addi	r3,r3,16
   4c8a8:	39c00404 	addi	r7,r7,16
   4c8ac:	1a3ffc15 	stw	r8,-16(r3)
   4c8b0:	3a3ffd17 	ldw	r8,-12(r7)
   4c8b4:	1a3ffd15 	stw	r8,-12(r3)
   4c8b8:	3a3ffe17 	ldw	r8,-8(r7)
   4c8bc:	1a3ffe15 	stw	r8,-8(r3)
   4c8c0:	3a3fff17 	ldw	r8,-4(r7)
   4c8c4:	1a3fff15 	stw	r8,-4(r3)
   4c8c8:	193ff51e 	bne	r3,r4,4c8a0 <__alt_data_end+0xfffda8a0>
   4c8cc:	49c00044 	addi	r7,r9,1
   4c8d0:	380e913a 	slli	r7,r7,4
   4c8d4:	310003cc 	andi	r4,r6,15
   4c8d8:	018000c4 	movi	r6,3
   4c8dc:	11c7883a 	add	r3,r2,r7
   4c8e0:	29cb883a 	add	r5,r5,r7
   4c8e4:	313fdf2e 	bgeu	r6,r4,4c864 <__alt_data_end+0xfffda864>
   4c8e8:	213fff04 	addi	r4,r4,-4
   4c8ec:	2014d0ba 	srli	r10,r4,2
   4c8f0:	1a400104 	addi	r9,r3,4
   4c8f4:	180d883a 	mov	r6,r3
   4c8f8:	528f883a 	add	r7,r10,r10
   4c8fc:	39cf883a 	add	r7,r7,r7
   4c900:	49d3883a 	add	r9,r9,r7
   4c904:	280f883a 	mov	r7,r5
   4c908:	3a000017 	ldw	r8,0(r7)
   4c90c:	31800104 	addi	r6,r6,4
   4c910:	39c00104 	addi	r7,r7,4
   4c914:	323fff15 	stw	r8,-4(r6)
   4c918:	327ffb1e 	bne	r6,r9,4c908 <__alt_data_end+0xfffda908>
   4c91c:	51800044 	addi	r6,r10,1
   4c920:	52bfff24 	muli	r10,r10,-4
   4c924:	318d883a 	add	r6,r6,r6
   4c928:	318d883a 	add	r6,r6,r6
   4c92c:	5109883a 	add	r4,r10,r4
   4c930:	298b883a 	add	r5,r5,r6
   4c934:	1987883a 	add	r3,r3,r6
   4c938:	003fca06 	br	4c864 <__alt_data_end+0xfffda864>

0004c93c <memmove>:
   4c93c:	2005883a 	mov	r2,r4
   4c940:	300f883a 	mov	r7,r6
   4c944:	29000b2e 	bgeu	r5,r4,4c974 <memmove+0x38>
   4c948:	2987883a 	add	r3,r5,r6
   4c94c:	20c0092e 	bgeu	r4,r3,4c974 <memmove+0x38>
   4c950:	218b883a 	add	r5,r4,r6
   4c954:	198fc83a 	sub	r7,r3,r6
   4c958:	30003f26 	beq	r6,zero,4ca58 <memmove+0x11c>
   4c95c:	18ffffc4 	addi	r3,r3,-1
   4c960:	19000003 	ldbu	r4,0(r3)
   4c964:	297fffc4 	addi	r5,r5,-1
   4c968:	29000005 	stb	r4,0(r5)
   4c96c:	19fffb1e 	bne	r3,r7,4c95c <__alt_data_end+0xfffda95c>
   4c970:	f800283a 	ret
   4c974:	00c003c4 	movi	r3,15
   4c978:	1980382e 	bgeu	r3,r6,4ca5c <memmove+0x120>
   4c97c:	2886b03a 	or	r3,r5,r2
   4c980:	18c000cc 	andi	r3,r3,3
   4c984:	1800351e 	bne	r3,zero,4ca5c <memmove+0x120>
   4c988:	327ffc04 	addi	r9,r6,-16
   4c98c:	4812d13a 	srli	r9,r9,4
   4c990:	12000404 	addi	r8,r2,16
   4c994:	1007883a 	mov	r3,r2
   4c998:	4808913a 	slli	r4,r9,4
   4c99c:	280f883a 	mov	r7,r5
   4c9a0:	4111883a 	add	r8,r8,r4
   4c9a4:	39000017 	ldw	r4,0(r7)
   4c9a8:	18c00404 	addi	r3,r3,16
   4c9ac:	39c00404 	addi	r7,r7,16
   4c9b0:	193ffc15 	stw	r4,-16(r3)
   4c9b4:	393ffd17 	ldw	r4,-12(r7)
   4c9b8:	193ffd15 	stw	r4,-12(r3)
   4c9bc:	393ffe17 	ldw	r4,-8(r7)
   4c9c0:	193ffe15 	stw	r4,-8(r3)
   4c9c4:	393fff17 	ldw	r4,-4(r7)
   4c9c8:	193fff15 	stw	r4,-4(r3)
   4c9cc:	1a3ff51e 	bne	r3,r8,4c9a4 <__alt_data_end+0xfffda9a4>
   4c9d0:	49000044 	addi	r4,r9,1
   4c9d4:	2008913a 	slli	r4,r4,4
   4c9d8:	31c003cc 	andi	r7,r6,15
   4c9dc:	1107883a 	add	r3,r2,r4
   4c9e0:	290b883a 	add	r5,r5,r4
   4c9e4:	010000c4 	movi	r4,3
   4c9e8:	21c0142e 	bgeu	r4,r7,4ca3c <memmove+0x100>
   4c9ec:	39ffff04 	addi	r7,r7,-4
   4c9f0:	3814d0ba 	srli	r10,r7,2
   4c9f4:	1a400104 	addi	r9,r3,4
   4c9f8:	180d883a 	mov	r6,r3
   4c9fc:	5289883a 	add	r4,r10,r10
   4ca00:	2109883a 	add	r4,r4,r4
   4ca04:	4913883a 	add	r9,r9,r4
   4ca08:	2809883a 	mov	r4,r5
   4ca0c:	22000017 	ldw	r8,0(r4)
   4ca10:	31800104 	addi	r6,r6,4
   4ca14:	21000104 	addi	r4,r4,4
   4ca18:	323fff15 	stw	r8,-4(r6)
   4ca1c:	327ffb1e 	bne	r6,r9,4ca0c <__alt_data_end+0xfffdaa0c>
   4ca20:	51000044 	addi	r4,r10,1
   4ca24:	52bfff24 	muli	r10,r10,-4
   4ca28:	2109883a 	add	r4,r4,r4
   4ca2c:	2109883a 	add	r4,r4,r4
   4ca30:	51cf883a 	add	r7,r10,r7
   4ca34:	290b883a 	add	r5,r5,r4
   4ca38:	1907883a 	add	r3,r3,r4
   4ca3c:	38000626 	beq	r7,zero,4ca58 <memmove+0x11c>
   4ca40:	19cf883a 	add	r7,r3,r7
   4ca44:	29800003 	ldbu	r6,0(r5)
   4ca48:	18c00044 	addi	r3,r3,1
   4ca4c:	29400044 	addi	r5,r5,1
   4ca50:	19bfffc5 	stb	r6,-1(r3)
   4ca54:	19fffb1e 	bne	r3,r7,4ca44 <__alt_data_end+0xfffdaa44>
   4ca58:	f800283a 	ret
   4ca5c:	1007883a 	mov	r3,r2
   4ca60:	003ff606 	br	4ca3c <__alt_data_end+0xfffdaa3c>

0004ca64 <memset>:
   4ca64:	00c000c4 	movi	r3,3
   4ca68:	2005883a 	mov	r2,r4
   4ca6c:	29403fcc 	andi	r5,r5,255
   4ca70:	19802d2e 	bgeu	r3,r6,4cb28 <memset+0xc4>
   4ca74:	20c6703a 	and	r3,r4,r3
   4ca78:	18002e1e 	bne	r3,zero,4cb34 <memset+0xd0>
   4ca7c:	2806923a 	slli	r3,r5,8
   4ca80:	010003c4 	movi	r4,15
   4ca84:	3011883a 	mov	r8,r6
   4ca88:	1946b03a 	or	r3,r3,r5
   4ca8c:	180e943a 	slli	r7,r3,16
   4ca90:	38ceb03a 	or	r7,r7,r3
   4ca94:	1007883a 	mov	r3,r2
   4ca98:	21800f2e 	bgeu	r4,r6,4cad8 <memset+0x74>
   4ca9c:	19c00015 	stw	r7,0(r3)
   4caa0:	19c00115 	stw	r7,4(r3)
   4caa4:	19c00215 	stw	r7,8(r3)
   4caa8:	19c00315 	stw	r7,12(r3)
   4caac:	423ffc04 	addi	r8,r8,-16
   4cab0:	18c00404 	addi	r3,r3,16
   4cab4:	223ff936 	bltu	r4,r8,4ca9c <__alt_data_end+0xfffdaa9c>
   4cab8:	30fffc04 	addi	r3,r6,-16
   4cabc:	1806d13a 	srli	r3,r3,4
   4cac0:	318003cc 	andi	r6,r6,15
   4cac4:	010000c4 	movi	r4,3
   4cac8:	18c00044 	addi	r3,r3,1
   4cacc:	1806913a 	slli	r3,r3,4
   4cad0:	10c7883a 	add	r3,r2,r3
   4cad4:	21800e2e 	bgeu	r4,r6,4cb10 <memset+0xac>
   4cad8:	1813883a 	mov	r9,r3
   4cadc:	3011883a 	mov	r8,r6
   4cae0:	010000c4 	movi	r4,3
   4cae4:	49c00015 	stw	r7,0(r9)
   4cae8:	423fff04 	addi	r8,r8,-4
   4caec:	4a400104 	addi	r9,r9,4
   4caf0:	223ffc36 	bltu	r4,r8,4cae4 <__alt_data_end+0xfffdaae4>
   4caf4:	313fff04 	addi	r4,r6,-4
   4caf8:	2008d0ba 	srli	r4,r4,2
   4cafc:	318000cc 	andi	r6,r6,3
   4cb00:	21000044 	addi	r4,r4,1
   4cb04:	2109883a 	add	r4,r4,r4
   4cb08:	2109883a 	add	r4,r4,r4
   4cb0c:	1907883a 	add	r3,r3,r4
   4cb10:	30000a26 	beq	r6,zero,4cb3c <memset+0xd8>
   4cb14:	198d883a 	add	r6,r3,r6
   4cb18:	19400005 	stb	r5,0(r3)
   4cb1c:	18c00044 	addi	r3,r3,1
   4cb20:	19bffd1e 	bne	r3,r6,4cb18 <__alt_data_end+0xfffdab18>
   4cb24:	f800283a 	ret
   4cb28:	2007883a 	mov	r3,r4
   4cb2c:	303ff91e 	bne	r6,zero,4cb14 <__alt_data_end+0xfffdab14>
   4cb30:	00000206 	br	4cb3c <memset+0xd8>
   4cb34:	2007883a 	mov	r3,r4
   4cb38:	003ff606 	br	4cb14 <__alt_data_end+0xfffdab14>
   4cb3c:	f800283a 	ret

0004cb40 <_Balloc>:
   4cb40:	20801317 	ldw	r2,76(r4)
   4cb44:	defffc04 	addi	sp,sp,-16
   4cb48:	dc400115 	stw	r17,4(sp)
   4cb4c:	dc000015 	stw	r16,0(sp)
   4cb50:	dfc00315 	stw	ra,12(sp)
   4cb54:	dc800215 	stw	r18,8(sp)
   4cb58:	2023883a 	mov	r17,r4
   4cb5c:	2821883a 	mov	r16,r5
   4cb60:	10000f26 	beq	r2,zero,4cba0 <_Balloc+0x60>
   4cb64:	8407883a 	add	r3,r16,r16
   4cb68:	18c7883a 	add	r3,r3,r3
   4cb6c:	10c7883a 	add	r3,r2,r3
   4cb70:	18800017 	ldw	r2,0(r3)
   4cb74:	10001126 	beq	r2,zero,4cbbc <_Balloc+0x7c>
   4cb78:	11000017 	ldw	r4,0(r2)
   4cb7c:	19000015 	stw	r4,0(r3)
   4cb80:	10000415 	stw	zero,16(r2)
   4cb84:	10000315 	stw	zero,12(r2)
   4cb88:	dfc00317 	ldw	ra,12(sp)
   4cb8c:	dc800217 	ldw	r18,8(sp)
   4cb90:	dc400117 	ldw	r17,4(sp)
   4cb94:	dc000017 	ldw	r16,0(sp)
   4cb98:	dec00404 	addi	sp,sp,16
   4cb9c:	f800283a 	ret
   4cba0:	01400104 	movi	r5,4
   4cba4:	01800404 	movi	r6,16
   4cba8:	0050eb80 	call	50eb8 <_calloc_r>
   4cbac:	88801315 	stw	r2,76(r17)
   4cbb0:	103fec1e 	bne	r2,zero,4cb64 <__alt_data_end+0xfffdab64>
   4cbb4:	0005883a 	mov	r2,zero
   4cbb8:	003ff306 	br	4cb88 <__alt_data_end+0xfffdab88>
   4cbbc:	01400044 	movi	r5,1
   4cbc0:	2c24983a 	sll	r18,r5,r16
   4cbc4:	8809883a 	mov	r4,r17
   4cbc8:	91800144 	addi	r6,r18,5
   4cbcc:	318d883a 	add	r6,r6,r6
   4cbd0:	318d883a 	add	r6,r6,r6
   4cbd4:	0050eb80 	call	50eb8 <_calloc_r>
   4cbd8:	103ff626 	beq	r2,zero,4cbb4 <__alt_data_end+0xfffdabb4>
   4cbdc:	14000115 	stw	r16,4(r2)
   4cbe0:	14800215 	stw	r18,8(r2)
   4cbe4:	003fe606 	br	4cb80 <__alt_data_end+0xfffdab80>

0004cbe8 <_Bfree>:
   4cbe8:	28000826 	beq	r5,zero,4cc0c <_Bfree+0x24>
   4cbec:	28c00117 	ldw	r3,4(r5)
   4cbf0:	20801317 	ldw	r2,76(r4)
   4cbf4:	18c7883a 	add	r3,r3,r3
   4cbf8:	18c7883a 	add	r3,r3,r3
   4cbfc:	10c5883a 	add	r2,r2,r3
   4cc00:	10c00017 	ldw	r3,0(r2)
   4cc04:	28c00015 	stw	r3,0(r5)
   4cc08:	11400015 	stw	r5,0(r2)
   4cc0c:	f800283a 	ret

0004cc10 <__multadd>:
   4cc10:	defffa04 	addi	sp,sp,-24
   4cc14:	dc000115 	stw	r16,4(sp)
   4cc18:	2c000417 	ldw	r16,16(r5)
   4cc1c:	dc800315 	stw	r18,12(sp)
   4cc20:	dc400215 	stw	r17,8(sp)
   4cc24:	dfc00515 	stw	ra,20(sp)
   4cc28:	dcc00415 	stw	r19,16(sp)
   4cc2c:	2823883a 	mov	r17,r5
   4cc30:	2025883a 	mov	r18,r4
   4cc34:	28c00504 	addi	r3,r5,20
   4cc38:	0011883a 	mov	r8,zero
   4cc3c:	1a800017 	ldw	r10,0(r3)
   4cc40:	18c00104 	addi	r3,r3,4
   4cc44:	42000044 	addi	r8,r8,1
   4cc48:	527fffcc 	andi	r9,r10,65535
   4cc4c:	4993383a 	mul	r9,r9,r6
   4cc50:	5014d43a 	srli	r10,r10,16
   4cc54:	49d3883a 	add	r9,r9,r7
   4cc58:	480ed43a 	srli	r7,r9,16
   4cc5c:	5195383a 	mul	r10,r10,r6
   4cc60:	4a7fffcc 	andi	r9,r9,65535
   4cc64:	3a8f883a 	add	r7,r7,r10
   4cc68:	3814943a 	slli	r10,r7,16
   4cc6c:	380ed43a 	srli	r7,r7,16
   4cc70:	5253883a 	add	r9,r10,r9
   4cc74:	1a7fff15 	stw	r9,-4(r3)
   4cc78:	443ff016 	blt	r8,r16,4cc3c <__alt_data_end+0xfffdac3c>
   4cc7c:	38000926 	beq	r7,zero,4cca4 <__multadd+0x94>
   4cc80:	88800217 	ldw	r2,8(r17)
   4cc84:	80800f0e 	bge	r16,r2,4ccc4 <__multadd+0xb4>
   4cc88:	80800144 	addi	r2,r16,5
   4cc8c:	1085883a 	add	r2,r2,r2
   4cc90:	1085883a 	add	r2,r2,r2
   4cc94:	8885883a 	add	r2,r17,r2
   4cc98:	84000044 	addi	r16,r16,1
   4cc9c:	11c00015 	stw	r7,0(r2)
   4cca0:	8c000415 	stw	r16,16(r17)
   4cca4:	8805883a 	mov	r2,r17
   4cca8:	dfc00517 	ldw	ra,20(sp)
   4ccac:	dcc00417 	ldw	r19,16(sp)
   4ccb0:	dc800317 	ldw	r18,12(sp)
   4ccb4:	dc400217 	ldw	r17,8(sp)
   4ccb8:	dc000117 	ldw	r16,4(sp)
   4ccbc:	dec00604 	addi	sp,sp,24
   4ccc0:	f800283a 	ret
   4ccc4:	89400117 	ldw	r5,4(r17)
   4ccc8:	9009883a 	mov	r4,r18
   4cccc:	d9c00015 	stw	r7,0(sp)
   4ccd0:	29400044 	addi	r5,r5,1
   4ccd4:	004cb400 	call	4cb40 <_Balloc>
   4ccd8:	89800417 	ldw	r6,16(r17)
   4ccdc:	89400304 	addi	r5,r17,12
   4cce0:	11000304 	addi	r4,r2,12
   4cce4:	31800084 	addi	r6,r6,2
   4cce8:	318d883a 	add	r6,r6,r6
   4ccec:	318d883a 	add	r6,r6,r6
   4ccf0:	1027883a 	mov	r19,r2
   4ccf4:	004c8440 	call	4c844 <memcpy>
   4ccf8:	88c00117 	ldw	r3,4(r17)
   4ccfc:	90801317 	ldw	r2,76(r18)
   4cd00:	d9c00017 	ldw	r7,0(sp)
   4cd04:	18c7883a 	add	r3,r3,r3
   4cd08:	18c7883a 	add	r3,r3,r3
   4cd0c:	10c5883a 	add	r2,r2,r3
   4cd10:	10c00017 	ldw	r3,0(r2)
   4cd14:	88c00015 	stw	r3,0(r17)
   4cd18:	14400015 	stw	r17,0(r2)
   4cd1c:	9823883a 	mov	r17,r19
   4cd20:	003fd906 	br	4cc88 <__alt_data_end+0xfffdac88>

0004cd24 <__s2b>:
   4cd24:	defff904 	addi	sp,sp,-28
   4cd28:	dd000415 	stw	r20,16(sp)
   4cd2c:	dc400115 	stw	r17,4(sp)
   4cd30:	2829883a 	mov	r20,r5
   4cd34:	2023883a 	mov	r17,r4
   4cd38:	01400244 	movi	r5,9
   4cd3c:	39000204 	addi	r4,r7,8
   4cd40:	dcc00315 	stw	r19,12(sp)
   4cd44:	dc800215 	stw	r18,8(sp)
   4cd48:	dfc00615 	stw	ra,24(sp)
   4cd4c:	dd400515 	stw	r21,20(sp)
   4cd50:	dc000015 	stw	r16,0(sp)
   4cd54:	3825883a 	mov	r18,r7
   4cd58:	3027883a 	mov	r19,r6
   4cd5c:	00457280 	call	45728 <__divsi3>
   4cd60:	00c00044 	movi	r3,1
   4cd64:	000b883a 	mov	r5,zero
   4cd68:	1880030e 	bge	r3,r2,4cd78 <__s2b+0x54>
   4cd6c:	18c7883a 	add	r3,r3,r3
   4cd70:	29400044 	addi	r5,r5,1
   4cd74:	18bffd16 	blt	r3,r2,4cd6c <__alt_data_end+0xfffdad6c>
   4cd78:	8809883a 	mov	r4,r17
   4cd7c:	004cb400 	call	4cb40 <_Balloc>
   4cd80:	d8c00717 	ldw	r3,28(sp)
   4cd84:	10c00515 	stw	r3,20(r2)
   4cd88:	00c00044 	movi	r3,1
   4cd8c:	10c00415 	stw	r3,16(r2)
   4cd90:	00c00244 	movi	r3,9
   4cd94:	1cc0210e 	bge	r3,r19,4ce1c <__s2b+0xf8>
   4cd98:	a0eb883a 	add	r21,r20,r3
   4cd9c:	a821883a 	mov	r16,r21
   4cda0:	a4e9883a 	add	r20,r20,r19
   4cda4:	81c00007 	ldb	r7,0(r16)
   4cda8:	8809883a 	mov	r4,r17
   4cdac:	84000044 	addi	r16,r16,1
   4cdb0:	100b883a 	mov	r5,r2
   4cdb4:	01800284 	movi	r6,10
   4cdb8:	39fff404 	addi	r7,r7,-48
   4cdbc:	004cc100 	call	4cc10 <__multadd>
   4cdc0:	853ff81e 	bne	r16,r20,4cda4 <__alt_data_end+0xfffdada4>
   4cdc4:	ace1883a 	add	r16,r21,r19
   4cdc8:	843ffe04 	addi	r16,r16,-8
   4cdcc:	9c800a0e 	bge	r19,r18,4cdf8 <__s2b+0xd4>
   4cdd0:	94e5c83a 	sub	r18,r18,r19
   4cdd4:	84a5883a 	add	r18,r16,r18
   4cdd8:	81c00007 	ldb	r7,0(r16)
   4cddc:	8809883a 	mov	r4,r17
   4cde0:	84000044 	addi	r16,r16,1
   4cde4:	100b883a 	mov	r5,r2
   4cde8:	01800284 	movi	r6,10
   4cdec:	39fff404 	addi	r7,r7,-48
   4cdf0:	004cc100 	call	4cc10 <__multadd>
   4cdf4:	84bff81e 	bne	r16,r18,4cdd8 <__alt_data_end+0xfffdadd8>
   4cdf8:	dfc00617 	ldw	ra,24(sp)
   4cdfc:	dd400517 	ldw	r21,20(sp)
   4ce00:	dd000417 	ldw	r20,16(sp)
   4ce04:	dcc00317 	ldw	r19,12(sp)
   4ce08:	dc800217 	ldw	r18,8(sp)
   4ce0c:	dc400117 	ldw	r17,4(sp)
   4ce10:	dc000017 	ldw	r16,0(sp)
   4ce14:	dec00704 	addi	sp,sp,28
   4ce18:	f800283a 	ret
   4ce1c:	a4000284 	addi	r16,r20,10
   4ce20:	1827883a 	mov	r19,r3
   4ce24:	003fe906 	br	4cdcc <__alt_data_end+0xfffdadcc>

0004ce28 <__hi0bits>:
   4ce28:	20bfffec 	andhi	r2,r4,65535
   4ce2c:	1000141e 	bne	r2,zero,4ce80 <__hi0bits+0x58>
   4ce30:	2008943a 	slli	r4,r4,16
   4ce34:	00800404 	movi	r2,16
   4ce38:	20ffc02c 	andhi	r3,r4,65280
   4ce3c:	1800021e 	bne	r3,zero,4ce48 <__hi0bits+0x20>
   4ce40:	2008923a 	slli	r4,r4,8
   4ce44:	10800204 	addi	r2,r2,8
   4ce48:	20fc002c 	andhi	r3,r4,61440
   4ce4c:	1800021e 	bne	r3,zero,4ce58 <__hi0bits+0x30>
   4ce50:	2008913a 	slli	r4,r4,4
   4ce54:	10800104 	addi	r2,r2,4
   4ce58:	20f0002c 	andhi	r3,r4,49152
   4ce5c:	1800031e 	bne	r3,zero,4ce6c <__hi0bits+0x44>
   4ce60:	2109883a 	add	r4,r4,r4
   4ce64:	10800084 	addi	r2,r2,2
   4ce68:	2109883a 	add	r4,r4,r4
   4ce6c:	20000316 	blt	r4,zero,4ce7c <__hi0bits+0x54>
   4ce70:	2110002c 	andhi	r4,r4,16384
   4ce74:	2000041e 	bne	r4,zero,4ce88 <__hi0bits+0x60>
   4ce78:	00800804 	movi	r2,32
   4ce7c:	f800283a 	ret
   4ce80:	0005883a 	mov	r2,zero
   4ce84:	003fec06 	br	4ce38 <__alt_data_end+0xfffdae38>
   4ce88:	10800044 	addi	r2,r2,1
   4ce8c:	f800283a 	ret

0004ce90 <__lo0bits>:
   4ce90:	20c00017 	ldw	r3,0(r4)
   4ce94:	188001cc 	andi	r2,r3,7
   4ce98:	10000826 	beq	r2,zero,4cebc <__lo0bits+0x2c>
   4ce9c:	1880004c 	andi	r2,r3,1
   4cea0:	1000211e 	bne	r2,zero,4cf28 <__lo0bits+0x98>
   4cea4:	1880008c 	andi	r2,r3,2
   4cea8:	1000211e 	bne	r2,zero,4cf30 <__lo0bits+0xa0>
   4ceac:	1806d0ba 	srli	r3,r3,2
   4ceb0:	00800084 	movi	r2,2
   4ceb4:	20c00015 	stw	r3,0(r4)
   4ceb8:	f800283a 	ret
   4cebc:	18bfffcc 	andi	r2,r3,65535
   4cec0:	10001326 	beq	r2,zero,4cf10 <__lo0bits+0x80>
   4cec4:	0005883a 	mov	r2,zero
   4cec8:	19403fcc 	andi	r5,r3,255
   4cecc:	2800021e 	bne	r5,zero,4ced8 <__lo0bits+0x48>
   4ced0:	1806d23a 	srli	r3,r3,8
   4ced4:	10800204 	addi	r2,r2,8
   4ced8:	194003cc 	andi	r5,r3,15
   4cedc:	2800021e 	bne	r5,zero,4cee8 <__lo0bits+0x58>
   4cee0:	1806d13a 	srli	r3,r3,4
   4cee4:	10800104 	addi	r2,r2,4
   4cee8:	194000cc 	andi	r5,r3,3
   4ceec:	2800021e 	bne	r5,zero,4cef8 <__lo0bits+0x68>
   4cef0:	1806d0ba 	srli	r3,r3,2
   4cef4:	10800084 	addi	r2,r2,2
   4cef8:	1940004c 	andi	r5,r3,1
   4cefc:	2800081e 	bne	r5,zero,4cf20 <__lo0bits+0x90>
   4cf00:	1806d07a 	srli	r3,r3,1
   4cf04:	1800051e 	bne	r3,zero,4cf1c <__lo0bits+0x8c>
   4cf08:	00800804 	movi	r2,32
   4cf0c:	f800283a 	ret
   4cf10:	1806d43a 	srli	r3,r3,16
   4cf14:	00800404 	movi	r2,16
   4cf18:	003feb06 	br	4cec8 <__alt_data_end+0xfffdaec8>
   4cf1c:	10800044 	addi	r2,r2,1
   4cf20:	20c00015 	stw	r3,0(r4)
   4cf24:	f800283a 	ret
   4cf28:	0005883a 	mov	r2,zero
   4cf2c:	f800283a 	ret
   4cf30:	1806d07a 	srli	r3,r3,1
   4cf34:	00800044 	movi	r2,1
   4cf38:	20c00015 	stw	r3,0(r4)
   4cf3c:	f800283a 	ret

0004cf40 <__i2b>:
   4cf40:	defffd04 	addi	sp,sp,-12
   4cf44:	dc000015 	stw	r16,0(sp)
   4cf48:	04000044 	movi	r16,1
   4cf4c:	dc400115 	stw	r17,4(sp)
   4cf50:	2823883a 	mov	r17,r5
   4cf54:	800b883a 	mov	r5,r16
   4cf58:	dfc00215 	stw	ra,8(sp)
   4cf5c:	004cb400 	call	4cb40 <_Balloc>
   4cf60:	14400515 	stw	r17,20(r2)
   4cf64:	14000415 	stw	r16,16(r2)
   4cf68:	dfc00217 	ldw	ra,8(sp)
   4cf6c:	dc400117 	ldw	r17,4(sp)
   4cf70:	dc000017 	ldw	r16,0(sp)
   4cf74:	dec00304 	addi	sp,sp,12
   4cf78:	f800283a 	ret

0004cf7c <__multiply>:
   4cf7c:	defffa04 	addi	sp,sp,-24
   4cf80:	dcc00315 	stw	r19,12(sp)
   4cf84:	dc400115 	stw	r17,4(sp)
   4cf88:	34c00417 	ldw	r19,16(r6)
   4cf8c:	2c400417 	ldw	r17,16(r5)
   4cf90:	dd000415 	stw	r20,16(sp)
   4cf94:	dc800215 	stw	r18,8(sp)
   4cf98:	dfc00515 	stw	ra,20(sp)
   4cf9c:	dc000015 	stw	r16,0(sp)
   4cfa0:	2825883a 	mov	r18,r5
   4cfa4:	3029883a 	mov	r20,r6
   4cfa8:	8cc0050e 	bge	r17,r19,4cfc0 <__multiply+0x44>
   4cfac:	8807883a 	mov	r3,r17
   4cfb0:	3025883a 	mov	r18,r6
   4cfb4:	9823883a 	mov	r17,r19
   4cfb8:	2829883a 	mov	r20,r5
   4cfbc:	1827883a 	mov	r19,r3
   4cfc0:	90800217 	ldw	r2,8(r18)
   4cfc4:	8ce1883a 	add	r16,r17,r19
   4cfc8:	91400117 	ldw	r5,4(r18)
   4cfcc:	1400010e 	bge	r2,r16,4cfd4 <__multiply+0x58>
   4cfd0:	29400044 	addi	r5,r5,1
   4cfd4:	004cb400 	call	4cb40 <_Balloc>
   4cfd8:	83c00144 	addi	r15,r16,5
   4cfdc:	7bdf883a 	add	r15,r15,r15
   4cfe0:	7bdf883a 	add	r15,r15,r15
   4cfe4:	13800504 	addi	r14,r2,20
   4cfe8:	13df883a 	add	r15,r2,r15
   4cfec:	7007883a 	mov	r3,r14
   4cff0:	73c0032e 	bgeu	r14,r15,4d000 <__multiply+0x84>
   4cff4:	18000015 	stw	zero,0(r3)
   4cff8:	18c00104 	addi	r3,r3,4
   4cffc:	1bfffd36 	bltu	r3,r15,4cff4 <__alt_data_end+0xfffdaff4>
   4d000:	99800144 	addi	r6,r19,5
   4d004:	8b000144 	addi	r12,r17,5
   4d008:	318d883a 	add	r6,r6,r6
   4d00c:	6319883a 	add	r12,r12,r12
   4d010:	318d883a 	add	r6,r6,r6
   4d014:	6319883a 	add	r12,r12,r12
   4d018:	a3400504 	addi	r13,r20,20
   4d01c:	a18d883a 	add	r6,r20,r6
   4d020:	94400504 	addi	r17,r18,20
   4d024:	9319883a 	add	r12,r18,r12
   4d028:	6980392e 	bgeu	r13,r6,4d110 <__multiply+0x194>
   4d02c:	6a800017 	ldw	r10,0(r13)
   4d030:	52ffffcc 	andi	r11,r10,65535
   4d034:	58001826 	beq	r11,zero,4d098 <__multiply+0x11c>
   4d038:	7007883a 	mov	r3,r14
   4d03c:	8809883a 	mov	r4,r17
   4d040:	000b883a 	mov	r5,zero
   4d044:	22400017 	ldw	r9,0(r4)
   4d048:	1a000017 	ldw	r8,0(r3)
   4d04c:	21000104 	addi	r4,r4,4
   4d050:	49ffffcc 	andi	r7,r9,65535
   4d054:	3acf383a 	mul	r7,r7,r11
   4d058:	4812d43a 	srli	r9,r9,16
   4d05c:	42bfffcc 	andi	r10,r8,65535
   4d060:	3a8f883a 	add	r7,r7,r10
   4d064:	394f883a 	add	r7,r7,r5
   4d068:	4010d43a 	srli	r8,r8,16
   4d06c:	4acb383a 	mul	r5,r9,r11
   4d070:	3814d43a 	srli	r10,r7,16
   4d074:	19c0000d 	sth	r7,0(r3)
   4d078:	2a0b883a 	add	r5,r5,r8
   4d07c:	2a8b883a 	add	r5,r5,r10
   4d080:	1940008d 	sth	r5,2(r3)
   4d084:	280ad43a 	srli	r5,r5,16
   4d088:	18c00104 	addi	r3,r3,4
   4d08c:	233fed36 	bltu	r4,r12,4d044 <__alt_data_end+0xfffdb044>
   4d090:	19400015 	stw	r5,0(r3)
   4d094:	6a800017 	ldw	r10,0(r13)
   4d098:	5014d43a 	srli	r10,r10,16
   4d09c:	50001926 	beq	r10,zero,4d104 <__multiply+0x188>
   4d0a0:	71400017 	ldw	r5,0(r14)
   4d0a4:	7007883a 	mov	r3,r14
   4d0a8:	8809883a 	mov	r4,r17
   4d0ac:	280f883a 	mov	r7,r5
   4d0b0:	0017883a 	mov	r11,zero
   4d0b4:	22400017 	ldw	r9,0(r4)
   4d0b8:	380ed43a 	srli	r7,r7,16
   4d0bc:	1940000d 	sth	r5,0(r3)
   4d0c0:	4a3fffcc 	andi	r8,r9,65535
   4d0c4:	4291383a 	mul	r8,r8,r10
   4d0c8:	4812d43a 	srli	r9,r9,16
   4d0cc:	18c00104 	addi	r3,r3,4
   4d0d0:	41d1883a 	add	r8,r8,r7
   4d0d4:	19c00017 	ldw	r7,0(r3)
   4d0d8:	42d1883a 	add	r8,r8,r11
   4d0dc:	4a93383a 	mul	r9,r9,r10
   4d0e0:	1a3fff8d 	sth	r8,-2(r3)
   4d0e4:	4010d43a 	srli	r8,r8,16
   4d0e8:	397fffcc 	andi	r5,r7,65535
   4d0ec:	2a4b883a 	add	r5,r5,r9
   4d0f0:	2a0b883a 	add	r5,r5,r8
   4d0f4:	21000104 	addi	r4,r4,4
   4d0f8:	2816d43a 	srli	r11,r5,16
   4d0fc:	233fed36 	bltu	r4,r12,4d0b4 <__alt_data_end+0xfffdb0b4>
   4d100:	19400015 	stw	r5,0(r3)
   4d104:	6b400104 	addi	r13,r13,4
   4d108:	73800104 	addi	r14,r14,4
   4d10c:	69bfc736 	bltu	r13,r6,4d02c <__alt_data_end+0xfffdb02c>
   4d110:	0400090e 	bge	zero,r16,4d138 <__multiply+0x1bc>
   4d114:	78ffff17 	ldw	r3,-4(r15)
   4d118:	7bffff04 	addi	r15,r15,-4
   4d11c:	18000326 	beq	r3,zero,4d12c <__multiply+0x1b0>
   4d120:	00000506 	br	4d138 <__multiply+0x1bc>
   4d124:	78c00017 	ldw	r3,0(r15)
   4d128:	1800031e 	bne	r3,zero,4d138 <__multiply+0x1bc>
   4d12c:	843fffc4 	addi	r16,r16,-1
   4d130:	7bffff04 	addi	r15,r15,-4
   4d134:	803ffb1e 	bne	r16,zero,4d124 <__alt_data_end+0xfffdb124>
   4d138:	14000415 	stw	r16,16(r2)
   4d13c:	dfc00517 	ldw	ra,20(sp)
   4d140:	dd000417 	ldw	r20,16(sp)
   4d144:	dcc00317 	ldw	r19,12(sp)
   4d148:	dc800217 	ldw	r18,8(sp)
   4d14c:	dc400117 	ldw	r17,4(sp)
   4d150:	dc000017 	ldw	r16,0(sp)
   4d154:	dec00604 	addi	sp,sp,24
   4d158:	f800283a 	ret

0004d15c <__pow5mult>:
   4d15c:	defffb04 	addi	sp,sp,-20
   4d160:	dcc00315 	stw	r19,12(sp)
   4d164:	dc800215 	stw	r18,8(sp)
   4d168:	dc000015 	stw	r16,0(sp)
   4d16c:	dfc00415 	stw	ra,16(sp)
   4d170:	dc400115 	stw	r17,4(sp)
   4d174:	308000cc 	andi	r2,r6,3
   4d178:	3021883a 	mov	r16,r6
   4d17c:	2027883a 	mov	r19,r4
   4d180:	2825883a 	mov	r18,r5
   4d184:	10002e1e 	bne	r2,zero,4d240 <__pow5mult+0xe4>
   4d188:	8021d0ba 	srai	r16,r16,2
   4d18c:	80001a26 	beq	r16,zero,4d1f8 <__pow5mult+0x9c>
   4d190:	9c401217 	ldw	r17,72(r19)
   4d194:	8800061e 	bne	r17,zero,4d1b0 <__pow5mult+0x54>
   4d198:	00003406 	br	4d26c <__pow5mult+0x110>
   4d19c:	8021d07a 	srai	r16,r16,1
   4d1a0:	80001526 	beq	r16,zero,4d1f8 <__pow5mult+0x9c>
   4d1a4:	88c00017 	ldw	r3,0(r17)
   4d1a8:	18001b26 	beq	r3,zero,4d218 <__pow5mult+0xbc>
   4d1ac:	1823883a 	mov	r17,r3
   4d1b0:	80c0004c 	andi	r3,r16,1
   4d1b4:	183ff926 	beq	r3,zero,4d19c <__alt_data_end+0xfffdb19c>
   4d1b8:	900b883a 	mov	r5,r18
   4d1bc:	880d883a 	mov	r6,r17
   4d1c0:	9809883a 	mov	r4,r19
   4d1c4:	004cf7c0 	call	4cf7c <__multiply>
   4d1c8:	90001b26 	beq	r18,zero,4d238 <__pow5mult+0xdc>
   4d1cc:	91000117 	ldw	r4,4(r18)
   4d1d0:	98c01317 	ldw	r3,76(r19)
   4d1d4:	8021d07a 	srai	r16,r16,1
   4d1d8:	2109883a 	add	r4,r4,r4
   4d1dc:	2109883a 	add	r4,r4,r4
   4d1e0:	1907883a 	add	r3,r3,r4
   4d1e4:	19000017 	ldw	r4,0(r3)
   4d1e8:	91000015 	stw	r4,0(r18)
   4d1ec:	1c800015 	stw	r18,0(r3)
   4d1f0:	1025883a 	mov	r18,r2
   4d1f4:	803feb1e 	bne	r16,zero,4d1a4 <__alt_data_end+0xfffdb1a4>
   4d1f8:	9005883a 	mov	r2,r18
   4d1fc:	dfc00417 	ldw	ra,16(sp)
   4d200:	dcc00317 	ldw	r19,12(sp)
   4d204:	dc800217 	ldw	r18,8(sp)
   4d208:	dc400117 	ldw	r17,4(sp)
   4d20c:	dc000017 	ldw	r16,0(sp)
   4d210:	dec00504 	addi	sp,sp,20
   4d214:	f800283a 	ret
   4d218:	880b883a 	mov	r5,r17
   4d21c:	880d883a 	mov	r6,r17
   4d220:	9809883a 	mov	r4,r19
   4d224:	004cf7c0 	call	4cf7c <__multiply>
   4d228:	88800015 	stw	r2,0(r17)
   4d22c:	10000015 	stw	zero,0(r2)
   4d230:	1023883a 	mov	r17,r2
   4d234:	003fde06 	br	4d1b0 <__alt_data_end+0xfffdb1b0>
   4d238:	1025883a 	mov	r18,r2
   4d23c:	003fd706 	br	4d19c <__alt_data_end+0xfffdb19c>
   4d240:	10bfffc4 	addi	r2,r2,-1
   4d244:	1085883a 	add	r2,r2,r2
   4d248:	00c00174 	movhi	r3,5
   4d24c:	18d85d04 	addi	r3,r3,24948
   4d250:	1085883a 	add	r2,r2,r2
   4d254:	1885883a 	add	r2,r3,r2
   4d258:	11800017 	ldw	r6,0(r2)
   4d25c:	000f883a 	mov	r7,zero
   4d260:	004cc100 	call	4cc10 <__multadd>
   4d264:	1025883a 	mov	r18,r2
   4d268:	003fc706 	br	4d188 <__alt_data_end+0xfffdb188>
   4d26c:	9809883a 	mov	r4,r19
   4d270:	01409c44 	movi	r5,625
   4d274:	004cf400 	call	4cf40 <__i2b>
   4d278:	98801215 	stw	r2,72(r19)
   4d27c:	1023883a 	mov	r17,r2
   4d280:	10000015 	stw	zero,0(r2)
   4d284:	003fca06 	br	4d1b0 <__alt_data_end+0xfffdb1b0>

0004d288 <__lshift>:
   4d288:	defff904 	addi	sp,sp,-28
   4d28c:	dd400515 	stw	r21,20(sp)
   4d290:	dc400115 	stw	r17,4(sp)
   4d294:	2d400417 	ldw	r21,16(r5)
   4d298:	3023d17a 	srai	r17,r6,5
   4d29c:	28800217 	ldw	r2,8(r5)
   4d2a0:	dd000415 	stw	r20,16(sp)
   4d2a4:	8d6b883a 	add	r21,r17,r21
   4d2a8:	dcc00315 	stw	r19,12(sp)
   4d2ac:	dc800215 	stw	r18,8(sp)
   4d2b0:	dc000015 	stw	r16,0(sp)
   4d2b4:	dfc00615 	stw	ra,24(sp)
   4d2b8:	ac000044 	addi	r16,r21,1
   4d2bc:	2825883a 	mov	r18,r5
   4d2c0:	3029883a 	mov	r20,r6
   4d2c4:	2027883a 	mov	r19,r4
   4d2c8:	29400117 	ldw	r5,4(r5)
   4d2cc:	1400030e 	bge	r2,r16,4d2dc <__lshift+0x54>
   4d2d0:	1085883a 	add	r2,r2,r2
   4d2d4:	29400044 	addi	r5,r5,1
   4d2d8:	143ffd16 	blt	r2,r16,4d2d0 <__alt_data_end+0xfffdb2d0>
   4d2dc:	9809883a 	mov	r4,r19
   4d2e0:	004cb400 	call	4cb40 <_Balloc>
   4d2e4:	10c00504 	addi	r3,r2,20
   4d2e8:	0440090e 	bge	zero,r17,4d310 <__lshift+0x88>
   4d2ec:	000f883a 	mov	r7,zero
   4d2f0:	18000015 	stw	zero,0(r3)
   4d2f4:	39c00044 	addi	r7,r7,1
   4d2f8:	18c00104 	addi	r3,r3,4
   4d2fc:	3c7ffc1e 	bne	r7,r17,4d2f0 <__alt_data_end+0xfffdb2f0>
   4d300:	38c00144 	addi	r3,r7,5
   4d304:	18c7883a 	add	r3,r3,r3
   4d308:	18c7883a 	add	r3,r3,r3
   4d30c:	10c7883a 	add	r3,r2,r3
   4d310:	92000417 	ldw	r8,16(r18)
   4d314:	a18007cc 	andi	r6,r20,31
   4d318:	91c00504 	addi	r7,r18,20
   4d31c:	42000144 	addi	r8,r8,5
   4d320:	4211883a 	add	r8,r8,r8
   4d324:	4211883a 	add	r8,r8,r8
   4d328:	9211883a 	add	r8,r18,r8
   4d32c:	30002226 	beq	r6,zero,4d3b8 <__lshift+0x130>
   4d330:	02800804 	movi	r10,32
   4d334:	5195c83a 	sub	r10,r10,r6
   4d338:	000b883a 	mov	r5,zero
   4d33c:	3a400017 	ldw	r9,0(r7)
   4d340:	18c00104 	addi	r3,r3,4
   4d344:	39c00104 	addi	r7,r7,4
   4d348:	4992983a 	sll	r9,r9,r6
   4d34c:	2a4ab03a 	or	r5,r5,r9
   4d350:	197fff15 	stw	r5,-4(r3)
   4d354:	397fff17 	ldw	r5,-4(r7)
   4d358:	2a8ad83a 	srl	r5,r5,r10
   4d35c:	3a3ff736 	bltu	r7,r8,4d33c <__alt_data_end+0xfffdb33c>
   4d360:	19400015 	stw	r5,0(r3)
   4d364:	28000126 	beq	r5,zero,4d36c <__lshift+0xe4>
   4d368:	ac000084 	addi	r16,r21,2
   4d36c:	91000117 	ldw	r4,4(r18)
   4d370:	98c01317 	ldw	r3,76(r19)
   4d374:	843fffc4 	addi	r16,r16,-1
   4d378:	2109883a 	add	r4,r4,r4
   4d37c:	2109883a 	add	r4,r4,r4
   4d380:	1907883a 	add	r3,r3,r4
   4d384:	19000017 	ldw	r4,0(r3)
   4d388:	14000415 	stw	r16,16(r2)
   4d38c:	91000015 	stw	r4,0(r18)
   4d390:	1c800015 	stw	r18,0(r3)
   4d394:	dfc00617 	ldw	ra,24(sp)
   4d398:	dd400517 	ldw	r21,20(sp)
   4d39c:	dd000417 	ldw	r20,16(sp)
   4d3a0:	dcc00317 	ldw	r19,12(sp)
   4d3a4:	dc800217 	ldw	r18,8(sp)
   4d3a8:	dc400117 	ldw	r17,4(sp)
   4d3ac:	dc000017 	ldw	r16,0(sp)
   4d3b0:	dec00704 	addi	sp,sp,28
   4d3b4:	f800283a 	ret
   4d3b8:	39400017 	ldw	r5,0(r7)
   4d3bc:	18c00104 	addi	r3,r3,4
   4d3c0:	39c00104 	addi	r7,r7,4
   4d3c4:	197fff15 	stw	r5,-4(r3)
   4d3c8:	3a3fe82e 	bgeu	r7,r8,4d36c <__alt_data_end+0xfffdb36c>
   4d3cc:	39400017 	ldw	r5,0(r7)
   4d3d0:	18c00104 	addi	r3,r3,4
   4d3d4:	39c00104 	addi	r7,r7,4
   4d3d8:	197fff15 	stw	r5,-4(r3)
   4d3dc:	3a3ff636 	bltu	r7,r8,4d3b8 <__alt_data_end+0xfffdb3b8>
   4d3e0:	003fe206 	br	4d36c <__alt_data_end+0xfffdb36c>

0004d3e4 <__mcmp>:
   4d3e4:	20800417 	ldw	r2,16(r4)
   4d3e8:	28c00417 	ldw	r3,16(r5)
   4d3ec:	10c5c83a 	sub	r2,r2,r3
   4d3f0:	10000f1e 	bne	r2,zero,4d430 <__mcmp+0x4c>
   4d3f4:	18c00144 	addi	r3,r3,5
   4d3f8:	18c7883a 	add	r3,r3,r3
   4d3fc:	18c7883a 	add	r3,r3,r3
   4d400:	21c00504 	addi	r7,r4,20
   4d404:	28cb883a 	add	r5,r5,r3
   4d408:	20c9883a 	add	r4,r4,r3
   4d40c:	213fff04 	addi	r4,r4,-4
   4d410:	297fff04 	addi	r5,r5,-4
   4d414:	21800017 	ldw	r6,0(r4)
   4d418:	28c00017 	ldw	r3,0(r5)
   4d41c:	30c0021e 	bne	r6,r3,4d428 <__mcmp+0x44>
   4d420:	393ffa36 	bltu	r7,r4,4d40c <__alt_data_end+0xfffdb40c>
   4d424:	f800283a 	ret
   4d428:	30c00236 	bltu	r6,r3,4d434 <__mcmp+0x50>
   4d42c:	00800044 	movi	r2,1
   4d430:	f800283a 	ret
   4d434:	00bfffc4 	movi	r2,-1
   4d438:	f800283a 	ret

0004d43c <__mdiff>:
   4d43c:	defffb04 	addi	sp,sp,-20
   4d440:	dc000015 	stw	r16,0(sp)
   4d444:	2821883a 	mov	r16,r5
   4d448:	dc800215 	stw	r18,8(sp)
   4d44c:	300b883a 	mov	r5,r6
   4d450:	2025883a 	mov	r18,r4
   4d454:	8009883a 	mov	r4,r16
   4d458:	dc400115 	stw	r17,4(sp)
   4d45c:	dfc00415 	stw	ra,16(sp)
   4d460:	dcc00315 	stw	r19,12(sp)
   4d464:	3023883a 	mov	r17,r6
   4d468:	004d3e40 	call	4d3e4 <__mcmp>
   4d46c:	10005026 	beq	r2,zero,4d5b0 <__mdiff+0x174>
   4d470:	10004a16 	blt	r2,zero,4d59c <__mdiff+0x160>
   4d474:	0027883a 	mov	r19,zero
   4d478:	81400117 	ldw	r5,4(r16)
   4d47c:	9009883a 	mov	r4,r18
   4d480:	004cb400 	call	4cb40 <_Balloc>
   4d484:	82400417 	ldw	r9,16(r16)
   4d488:	89800417 	ldw	r6,16(r17)
   4d48c:	14c00315 	stw	r19,12(r2)
   4d490:	4b800144 	addi	r14,r9,5
   4d494:	31800144 	addi	r6,r6,5
   4d498:	739d883a 	add	r14,r14,r14
   4d49c:	318d883a 	add	r6,r6,r6
   4d4a0:	739d883a 	add	r14,r14,r14
   4d4a4:	318d883a 	add	r6,r6,r6
   4d4a8:	81c00504 	addi	r7,r16,20
   4d4ac:	839d883a 	add	r14,r16,r14
   4d4b0:	8a000504 	addi	r8,r17,20
   4d4b4:	898d883a 	add	r6,r17,r6
   4d4b8:	10c00504 	addi	r3,r2,20
   4d4bc:	0009883a 	mov	r4,zero
   4d4c0:	3b000017 	ldw	r12,0(r7)
   4d4c4:	42c00017 	ldw	r11,0(r8)
   4d4c8:	42000104 	addi	r8,r8,4
   4d4cc:	62bfffcc 	andi	r10,r12,65535
   4d4d0:	5b7fffcc 	andi	r13,r11,65535
   4d4d4:	5109883a 	add	r4,r10,r4
   4d4d8:	2355c83a 	sub	r10,r4,r13
   4d4dc:	5816d43a 	srli	r11,r11,16
   4d4e0:	6008d43a 	srli	r4,r12,16
   4d4e4:	501bd43a 	srai	r13,r10,16
   4d4e8:	1a80000d 	sth	r10,0(r3)
   4d4ec:	22c9c83a 	sub	r4,r4,r11
   4d4f0:	2349883a 	add	r4,r4,r13
   4d4f4:	1900008d 	sth	r4,2(r3)
   4d4f8:	39c00104 	addi	r7,r7,4
   4d4fc:	2009d43a 	srai	r4,r4,16
   4d500:	18c00104 	addi	r3,r3,4
   4d504:	41bfee36 	bltu	r8,r6,4d4c0 <__alt_data_end+0xfffdb4c0>
   4d508:	180b883a 	mov	r5,r3
   4d50c:	3815883a 	mov	r10,r7
   4d510:	3b80132e 	bgeu	r7,r14,4d560 <__mdiff+0x124>
   4d514:	3a000017 	ldw	r8,0(r7)
   4d518:	18c00104 	addi	r3,r3,4
   4d51c:	39c00104 	addi	r7,r7,4
   4d520:	41bfffcc 	andi	r6,r8,65535
   4d524:	310d883a 	add	r6,r6,r4
   4d528:	3009d43a 	srai	r4,r6,16
   4d52c:	4010d43a 	srli	r8,r8,16
   4d530:	19bfff0d 	sth	r6,-4(r3)
   4d534:	2209883a 	add	r4,r4,r8
   4d538:	193fff8d 	sth	r4,-2(r3)
   4d53c:	2009d43a 	srai	r4,r4,16
   4d540:	3bbff436 	bltu	r7,r14,4d514 <__alt_data_end+0xfffdb514>
   4d544:	0286303a 	nor	r3,zero,r10
   4d548:	1b87883a 	add	r3,r3,r14
   4d54c:	1806d0ba 	srli	r3,r3,2
   4d550:	18c00044 	addi	r3,r3,1
   4d554:	18c7883a 	add	r3,r3,r3
   4d558:	18c7883a 	add	r3,r3,r3
   4d55c:	28c7883a 	add	r3,r5,r3
   4d560:	193fff17 	ldw	r4,-4(r3)
   4d564:	18ffff04 	addi	r3,r3,-4
   4d568:	2000041e 	bne	r4,zero,4d57c <__mdiff+0x140>
   4d56c:	18ffff04 	addi	r3,r3,-4
   4d570:	19000017 	ldw	r4,0(r3)
   4d574:	4a7fffc4 	addi	r9,r9,-1
   4d578:	203ffc26 	beq	r4,zero,4d56c <__alt_data_end+0xfffdb56c>
   4d57c:	12400415 	stw	r9,16(r2)
   4d580:	dfc00417 	ldw	ra,16(sp)
   4d584:	dcc00317 	ldw	r19,12(sp)
   4d588:	dc800217 	ldw	r18,8(sp)
   4d58c:	dc400117 	ldw	r17,4(sp)
   4d590:	dc000017 	ldw	r16,0(sp)
   4d594:	dec00504 	addi	sp,sp,20
   4d598:	f800283a 	ret
   4d59c:	8005883a 	mov	r2,r16
   4d5a0:	04c00044 	movi	r19,1
   4d5a4:	8821883a 	mov	r16,r17
   4d5a8:	1023883a 	mov	r17,r2
   4d5ac:	003fb206 	br	4d478 <__alt_data_end+0xfffdb478>
   4d5b0:	9009883a 	mov	r4,r18
   4d5b4:	000b883a 	mov	r5,zero
   4d5b8:	004cb400 	call	4cb40 <_Balloc>
   4d5bc:	00c00044 	movi	r3,1
   4d5c0:	10c00415 	stw	r3,16(r2)
   4d5c4:	10000515 	stw	zero,20(r2)
   4d5c8:	dfc00417 	ldw	ra,16(sp)
   4d5cc:	dcc00317 	ldw	r19,12(sp)
   4d5d0:	dc800217 	ldw	r18,8(sp)
   4d5d4:	dc400117 	ldw	r17,4(sp)
   4d5d8:	dc000017 	ldw	r16,0(sp)
   4d5dc:	dec00504 	addi	sp,sp,20
   4d5e0:	f800283a 	ret

0004d5e4 <__ulp>:
   4d5e4:	295ffc2c 	andhi	r5,r5,32752
   4d5e8:	00bf3034 	movhi	r2,64704
   4d5ec:	2887883a 	add	r3,r5,r2
   4d5f0:	00c0020e 	bge	zero,r3,4d5fc <__ulp+0x18>
   4d5f4:	0005883a 	mov	r2,zero
   4d5f8:	f800283a 	ret
   4d5fc:	00c7c83a 	sub	r3,zero,r3
   4d600:	1805d53a 	srai	r2,r3,20
   4d604:	00c004c4 	movi	r3,19
   4d608:	18800a0e 	bge	r3,r2,4d634 <__ulp+0x50>
   4d60c:	01000c84 	movi	r4,50
   4d610:	0007883a 	mov	r3,zero
   4d614:	20800516 	blt	r4,r2,4d62c <__ulp+0x48>
   4d618:	01000cc4 	movi	r4,51
   4d61c:	2085c83a 	sub	r2,r4,r2
   4d620:	01000044 	movi	r4,1
   4d624:	2084983a 	sll	r2,r4,r2
   4d628:	f800283a 	ret
   4d62c:	00800044 	movi	r2,1
   4d630:	f800283a 	ret
   4d634:	00c00234 	movhi	r3,8
   4d638:	1887d83a 	sra	r3,r3,r2
   4d63c:	0005883a 	mov	r2,zero
   4d640:	f800283a 	ret

0004d644 <__b2d>:
   4d644:	defffa04 	addi	sp,sp,-24
   4d648:	dc000015 	stw	r16,0(sp)
   4d64c:	24000417 	ldw	r16,16(r4)
   4d650:	dc400115 	stw	r17,4(sp)
   4d654:	dcc00315 	stw	r19,12(sp)
   4d658:	84000144 	addi	r16,r16,5
   4d65c:	8421883a 	add	r16,r16,r16
   4d660:	8421883a 	add	r16,r16,r16
   4d664:	2421883a 	add	r16,r4,r16
   4d668:	847fff17 	ldw	r17,-4(r16)
   4d66c:	24c00504 	addi	r19,r4,20
   4d670:	dd000415 	stw	r20,16(sp)
   4d674:	8809883a 	mov	r4,r17
   4d678:	dc800215 	stw	r18,8(sp)
   4d67c:	2829883a 	mov	r20,r5
   4d680:	dfc00515 	stw	ra,20(sp)
   4d684:	004ce280 	call	4ce28 <__hi0bits>
   4d688:	00c00804 	movi	r3,32
   4d68c:	1887c83a 	sub	r3,r3,r2
   4d690:	a0c00015 	stw	r3,0(r20)
   4d694:	00c00284 	movi	r3,10
   4d698:	84bfff04 	addi	r18,r16,-4
   4d69c:	18801216 	blt	r3,r2,4d6e8 <__b2d+0xa4>
   4d6a0:	010002c4 	movi	r4,11
   4d6a4:	2089c83a 	sub	r4,r4,r2
   4d6a8:	8906d83a 	srl	r3,r17,r4
   4d6ac:	18cffc34 	orhi	r3,r3,16368
   4d6b0:	9c80322e 	bgeu	r19,r18,4d77c <__b2d+0x138>
   4d6b4:	817ffe17 	ldw	r5,-8(r16)
   4d6b8:	2908d83a 	srl	r4,r5,r4
   4d6bc:	10800544 	addi	r2,r2,21
   4d6c0:	88a2983a 	sll	r17,r17,r2
   4d6c4:	2444b03a 	or	r2,r4,r17
   4d6c8:	dfc00517 	ldw	ra,20(sp)
   4d6cc:	dd000417 	ldw	r20,16(sp)
   4d6d0:	dcc00317 	ldw	r19,12(sp)
   4d6d4:	dc800217 	ldw	r18,8(sp)
   4d6d8:	dc400117 	ldw	r17,4(sp)
   4d6dc:	dc000017 	ldw	r16,0(sp)
   4d6e0:	dec00604 	addi	sp,sp,24
   4d6e4:	f800283a 	ret
   4d6e8:	9c801636 	bltu	r19,r18,4d744 <__b2d+0x100>
   4d6ec:	113ffd44 	addi	r4,r2,-11
   4d6f0:	000b883a 	mov	r5,zero
   4d6f4:	20001726 	beq	r4,zero,4d754 <__b2d+0x110>
   4d6f8:	00c00ac4 	movi	r3,43
   4d6fc:	1885c83a 	sub	r2,r3,r2
   4d700:	8906983a 	sll	r3,r17,r4
   4d704:	288cd83a 	srl	r6,r5,r2
   4d708:	18cffc34 	orhi	r3,r3,16368
   4d70c:	1986b03a 	or	r3,r3,r6
   4d710:	9c801c2e 	bgeu	r19,r18,4d784 <__b2d+0x140>
   4d714:	91bfff17 	ldw	r6,-4(r18)
   4d718:	3084d83a 	srl	r2,r6,r2
   4d71c:	2908983a 	sll	r4,r5,r4
   4d720:	1104b03a 	or	r2,r2,r4
   4d724:	dfc00517 	ldw	ra,20(sp)
   4d728:	dd000417 	ldw	r20,16(sp)
   4d72c:	dcc00317 	ldw	r19,12(sp)
   4d730:	dc800217 	ldw	r18,8(sp)
   4d734:	dc400117 	ldw	r17,4(sp)
   4d738:	dc000017 	ldw	r16,0(sp)
   4d73c:	dec00604 	addi	sp,sp,24
   4d740:	f800283a 	ret
   4d744:	113ffd44 	addi	r4,r2,-11
   4d748:	84bffe04 	addi	r18,r16,-8
   4d74c:	817ffe17 	ldw	r5,-8(r16)
   4d750:	203fe91e 	bne	r4,zero,4d6f8 <__alt_data_end+0xfffdb6f8>
   4d754:	88cffc34 	orhi	r3,r17,16368
   4d758:	2805883a 	mov	r2,r5
   4d75c:	dfc00517 	ldw	ra,20(sp)
   4d760:	dd000417 	ldw	r20,16(sp)
   4d764:	dcc00317 	ldw	r19,12(sp)
   4d768:	dc800217 	ldw	r18,8(sp)
   4d76c:	dc400117 	ldw	r17,4(sp)
   4d770:	dc000017 	ldw	r16,0(sp)
   4d774:	dec00604 	addi	sp,sp,24
   4d778:	f800283a 	ret
   4d77c:	0009883a 	mov	r4,zero
   4d780:	003fce06 	br	4d6bc <__alt_data_end+0xfffdb6bc>
   4d784:	0005883a 	mov	r2,zero
   4d788:	003fe406 	br	4d71c <__alt_data_end+0xfffdb71c>

0004d78c <__d2b>:
   4d78c:	defff804 	addi	sp,sp,-32
   4d790:	dc400315 	stw	r17,12(sp)
   4d794:	3023883a 	mov	r17,r6
   4d798:	dc800415 	stw	r18,16(sp)
   4d79c:	8824907a 	slli	r18,r17,1
   4d7a0:	dcc00515 	stw	r19,20(sp)
   4d7a4:	2827883a 	mov	r19,r5
   4d7a8:	9024d57a 	srli	r18,r18,21
   4d7ac:	01400044 	movi	r5,1
   4d7b0:	dd000615 	stw	r20,24(sp)
   4d7b4:	dc000215 	stw	r16,8(sp)
   4d7b8:	dfc00715 	stw	ra,28(sp)
   4d7bc:	3829883a 	mov	r20,r7
   4d7c0:	004cb400 	call	4cb40 <_Balloc>
   4d7c4:	1021883a 	mov	r16,r2
   4d7c8:	00800434 	movhi	r2,16
   4d7cc:	10bfffc4 	addi	r2,r2,-1
   4d7d0:	88a2703a 	and	r17,r17,r2
   4d7d4:	90000126 	beq	r18,zero,4d7dc <__d2b+0x50>
   4d7d8:	8c400434 	orhi	r17,r17,16
   4d7dc:	dc400015 	stw	r17,0(sp)
   4d7e0:	98002226 	beq	r19,zero,4d86c <__d2b+0xe0>
   4d7e4:	d9000104 	addi	r4,sp,4
   4d7e8:	dcc00115 	stw	r19,4(sp)
   4d7ec:	004ce900 	call	4ce90 <__lo0bits>
   4d7f0:	d8c00017 	ldw	r3,0(sp)
   4d7f4:	10002d1e 	bne	r2,zero,4d8ac <__d2b+0x120>
   4d7f8:	d9000117 	ldw	r4,4(sp)
   4d7fc:	81000515 	stw	r4,20(r16)
   4d800:	1823003a 	cmpeq	r17,r3,zero
   4d804:	01000084 	movi	r4,2
   4d808:	2463c83a 	sub	r17,r4,r17
   4d80c:	80c00615 	stw	r3,24(r16)
   4d810:	84400415 	stw	r17,16(r16)
   4d814:	90001d1e 	bne	r18,zero,4d88c <__d2b+0x100>
   4d818:	88c00104 	addi	r3,r17,4
   4d81c:	18c7883a 	add	r3,r3,r3
   4d820:	18c7883a 	add	r3,r3,r3
   4d824:	80c7883a 	add	r3,r16,r3
   4d828:	19000017 	ldw	r4,0(r3)
   4d82c:	10bef384 	addi	r2,r2,-1074
   4d830:	a0800015 	stw	r2,0(r20)
   4d834:	004ce280 	call	4ce28 <__hi0bits>
   4d838:	8822917a 	slli	r17,r17,5
   4d83c:	d8c00817 	ldw	r3,32(sp)
   4d840:	8885c83a 	sub	r2,r17,r2
   4d844:	18800015 	stw	r2,0(r3)
   4d848:	8005883a 	mov	r2,r16
   4d84c:	dfc00717 	ldw	ra,28(sp)
   4d850:	dd000617 	ldw	r20,24(sp)
   4d854:	dcc00517 	ldw	r19,20(sp)
   4d858:	dc800417 	ldw	r18,16(sp)
   4d85c:	dc400317 	ldw	r17,12(sp)
   4d860:	dc000217 	ldw	r16,8(sp)
   4d864:	dec00804 	addi	sp,sp,32
   4d868:	f800283a 	ret
   4d86c:	d809883a 	mov	r4,sp
   4d870:	004ce900 	call	4ce90 <__lo0bits>
   4d874:	d8c00017 	ldw	r3,0(sp)
   4d878:	04400044 	movi	r17,1
   4d87c:	84400415 	stw	r17,16(r16)
   4d880:	80c00515 	stw	r3,20(r16)
   4d884:	10800804 	addi	r2,r2,32
   4d888:	903fe326 	beq	r18,zero,4d818 <__alt_data_end+0xfffdb818>
   4d88c:	00c00d44 	movi	r3,53
   4d890:	94bef344 	addi	r18,r18,-1075
   4d894:	90a5883a 	add	r18,r18,r2
   4d898:	1885c83a 	sub	r2,r3,r2
   4d89c:	d8c00817 	ldw	r3,32(sp)
   4d8a0:	a4800015 	stw	r18,0(r20)
   4d8a4:	18800015 	stw	r2,0(r3)
   4d8a8:	003fe706 	br	4d848 <__alt_data_end+0xfffdb848>
   4d8ac:	01000804 	movi	r4,32
   4d8b0:	2089c83a 	sub	r4,r4,r2
   4d8b4:	1908983a 	sll	r4,r3,r4
   4d8b8:	d9400117 	ldw	r5,4(sp)
   4d8bc:	1886d83a 	srl	r3,r3,r2
   4d8c0:	2148b03a 	or	r4,r4,r5
   4d8c4:	81000515 	stw	r4,20(r16)
   4d8c8:	d8c00015 	stw	r3,0(sp)
   4d8cc:	003fcc06 	br	4d800 <__alt_data_end+0xfffdb800>

0004d8d0 <__ratio>:
   4d8d0:	defff904 	addi	sp,sp,-28
   4d8d4:	dc400315 	stw	r17,12(sp)
   4d8d8:	2823883a 	mov	r17,r5
   4d8dc:	d9400104 	addi	r5,sp,4
   4d8e0:	dfc00615 	stw	ra,24(sp)
   4d8e4:	dcc00515 	stw	r19,20(sp)
   4d8e8:	dc800415 	stw	r18,16(sp)
   4d8ec:	2027883a 	mov	r19,r4
   4d8f0:	dc000215 	stw	r16,8(sp)
   4d8f4:	004d6440 	call	4d644 <__b2d>
   4d8f8:	8809883a 	mov	r4,r17
   4d8fc:	d80b883a 	mov	r5,sp
   4d900:	1025883a 	mov	r18,r2
   4d904:	1821883a 	mov	r16,r3
   4d908:	004d6440 	call	4d644 <__b2d>
   4d90c:	99400417 	ldw	r5,16(r19)
   4d910:	89000417 	ldw	r4,16(r17)
   4d914:	d9800117 	ldw	r6,4(sp)
   4d918:	2909c83a 	sub	r4,r5,r4
   4d91c:	d9400017 	ldw	r5,0(sp)
   4d920:	2008917a 	slli	r4,r4,5
   4d924:	314bc83a 	sub	r5,r6,r5
   4d928:	290b883a 	add	r5,r5,r4
   4d92c:	01400e0e 	bge	zero,r5,4d968 <__ratio+0x98>
   4d930:	280a953a 	slli	r5,r5,20
   4d934:	2c21883a 	add	r16,r5,r16
   4d938:	9009883a 	mov	r4,r18
   4d93c:	800b883a 	mov	r5,r16
   4d940:	100d883a 	mov	r6,r2
   4d944:	180f883a 	mov	r7,r3
   4d948:	00532600 	call	53260 <__divdf3>
   4d94c:	dfc00617 	ldw	ra,24(sp)
   4d950:	dcc00517 	ldw	r19,20(sp)
   4d954:	dc800417 	ldw	r18,16(sp)
   4d958:	dc400317 	ldw	r17,12(sp)
   4d95c:	dc000217 	ldw	r16,8(sp)
   4d960:	dec00704 	addi	sp,sp,28
   4d964:	f800283a 	ret
   4d968:	280a953a 	slli	r5,r5,20
   4d96c:	1947c83a 	sub	r3,r3,r5
   4d970:	003ff106 	br	4d938 <__alt_data_end+0xfffdb938>

0004d974 <_mprec_log10>:
   4d974:	defffe04 	addi	sp,sp,-8
   4d978:	dc000015 	stw	r16,0(sp)
   4d97c:	dfc00115 	stw	ra,4(sp)
   4d980:	008005c4 	movi	r2,23
   4d984:	2021883a 	mov	r16,r4
   4d988:	11000d0e 	bge	r2,r4,4d9c0 <_mprec_log10+0x4c>
   4d98c:	0005883a 	mov	r2,zero
   4d990:	00cffc34 	movhi	r3,16368
   4d994:	843fffc4 	addi	r16,r16,-1
   4d998:	1009883a 	mov	r4,r2
   4d99c:	180b883a 	mov	r5,r3
   4d9a0:	000d883a 	mov	r6,zero
   4d9a4:	01d00934 	movhi	r7,16420
   4d9a8:	0052f7c0 	call	52f7c <__muldf3>
   4d9ac:	803ff91e 	bne	r16,zero,4d994 <__alt_data_end+0xfffdb994>
   4d9b0:	dfc00117 	ldw	ra,4(sp)
   4d9b4:	dc000017 	ldw	r16,0(sp)
   4d9b8:	dec00204 	addi	sp,sp,8
   4d9bc:	f800283a 	ret
   4d9c0:	202090fa 	slli	r16,r4,3
   4d9c4:	00800174 	movhi	r2,5
   4d9c8:	10982b04 	addi	r2,r2,24748
   4d9cc:	1421883a 	add	r16,r2,r16
   4d9d0:	80800017 	ldw	r2,0(r16)
   4d9d4:	80c00117 	ldw	r3,4(r16)
   4d9d8:	dfc00117 	ldw	ra,4(sp)
   4d9dc:	dc000017 	ldw	r16,0(sp)
   4d9e0:	dec00204 	addi	sp,sp,8
   4d9e4:	f800283a 	ret

0004d9e8 <__copybits>:
   4d9e8:	297fffc4 	addi	r5,r5,-1
   4d9ec:	31c00417 	ldw	r7,16(r6)
   4d9f0:	2811d17a 	srai	r8,r5,5
   4d9f4:	30800504 	addi	r2,r6,20
   4d9f8:	39c00144 	addi	r7,r7,5
   4d9fc:	42000044 	addi	r8,r8,1
   4da00:	39cf883a 	add	r7,r7,r7
   4da04:	4211883a 	add	r8,r8,r8
   4da08:	39cf883a 	add	r7,r7,r7
   4da0c:	4211883a 	add	r8,r8,r8
   4da10:	31cf883a 	add	r7,r6,r7
   4da14:	2211883a 	add	r8,r4,r8
   4da18:	11c00d2e 	bgeu	r2,r7,4da50 <__copybits+0x68>
   4da1c:	2007883a 	mov	r3,r4
   4da20:	11400017 	ldw	r5,0(r2)
   4da24:	18c00104 	addi	r3,r3,4
   4da28:	10800104 	addi	r2,r2,4
   4da2c:	197fff15 	stw	r5,-4(r3)
   4da30:	11fffb36 	bltu	r2,r7,4da20 <__alt_data_end+0xfffdba20>
   4da34:	3985c83a 	sub	r2,r7,r6
   4da38:	10bffac4 	addi	r2,r2,-21
   4da3c:	1004d0ba 	srli	r2,r2,2
   4da40:	10800044 	addi	r2,r2,1
   4da44:	1085883a 	add	r2,r2,r2
   4da48:	1085883a 	add	r2,r2,r2
   4da4c:	2089883a 	add	r4,r4,r2
   4da50:	2200032e 	bgeu	r4,r8,4da60 <__copybits+0x78>
   4da54:	20000015 	stw	zero,0(r4)
   4da58:	21000104 	addi	r4,r4,4
   4da5c:	223ffd36 	bltu	r4,r8,4da54 <__alt_data_end+0xfffdba54>
   4da60:	f800283a 	ret

0004da64 <__any_on>:
   4da64:	21800417 	ldw	r6,16(r4)
   4da68:	2805d17a 	srai	r2,r5,5
   4da6c:	20c00504 	addi	r3,r4,20
   4da70:	30800f0e 	bge	r6,r2,4dab0 <__any_on+0x4c>
   4da74:	3005883a 	mov	r2,r6
   4da78:	10800144 	addi	r2,r2,5
   4da7c:	1085883a 	add	r2,r2,r2
   4da80:	1085883a 	add	r2,r2,r2
   4da84:	2089883a 	add	r4,r4,r2
   4da88:	1900152e 	bgeu	r3,r4,4dae0 <__any_on+0x7c>
   4da8c:	20bfff17 	ldw	r2,-4(r4)
   4da90:	213fff04 	addi	r4,r4,-4
   4da94:	1000041e 	bne	r2,zero,4daa8 <__any_on+0x44>
   4da98:	1900112e 	bgeu	r3,r4,4dae0 <__any_on+0x7c>
   4da9c:	213fff04 	addi	r4,r4,-4
   4daa0:	20800017 	ldw	r2,0(r4)
   4daa4:	103ffc26 	beq	r2,zero,4da98 <__alt_data_end+0xfffdba98>
   4daa8:	00800044 	movi	r2,1
   4daac:	f800283a 	ret
   4dab0:	11bff10e 	bge	r2,r6,4da78 <__alt_data_end+0xfffdba78>
   4dab4:	294007cc 	andi	r5,r5,31
   4dab8:	283fef26 	beq	r5,zero,4da78 <__alt_data_end+0xfffdba78>
   4dabc:	11800144 	addi	r6,r2,5
   4dac0:	318d883a 	add	r6,r6,r6
   4dac4:	318d883a 	add	r6,r6,r6
   4dac8:	218d883a 	add	r6,r4,r6
   4dacc:	31800017 	ldw	r6,0(r6)
   4dad0:	314ed83a 	srl	r7,r6,r5
   4dad4:	394a983a 	sll	r5,r7,r5
   4dad8:	29bff31e 	bne	r5,r6,4daa8 <__alt_data_end+0xfffdbaa8>
   4dadc:	003fe606 	br	4da78 <__alt_data_end+0xfffdba78>
   4dae0:	0005883a 	mov	r2,zero
   4dae4:	f800283a 	ret

0004dae8 <_putc_r>:
   4dae8:	defffc04 	addi	sp,sp,-16
   4daec:	dc000215 	stw	r16,8(sp)
   4daf0:	dfc00315 	stw	ra,12(sp)
   4daf4:	2021883a 	mov	r16,r4
   4daf8:	20000226 	beq	r4,zero,4db04 <_putc_r+0x1c>
   4dafc:	20800e17 	ldw	r2,56(r4)
   4db00:	10001d26 	beq	r2,zero,4db78 <_putc_r+0x90>
   4db04:	30800217 	ldw	r2,8(r6)
   4db08:	10bfffc4 	addi	r2,r2,-1
   4db0c:	30800215 	stw	r2,8(r6)
   4db10:	10000a16 	blt	r2,zero,4db3c <_putc_r+0x54>
   4db14:	30800017 	ldw	r2,0(r6)
   4db18:	11400005 	stb	r5,0(r2)
   4db1c:	30800017 	ldw	r2,0(r6)
   4db20:	10c00044 	addi	r3,r2,1
   4db24:	10800003 	ldbu	r2,0(r2)
   4db28:	30c00015 	stw	r3,0(r6)
   4db2c:	dfc00317 	ldw	ra,12(sp)
   4db30:	dc000217 	ldw	r16,8(sp)
   4db34:	dec00404 	addi	sp,sp,16
   4db38:	f800283a 	ret
   4db3c:	30c00617 	ldw	r3,24(r6)
   4db40:	10c01316 	blt	r2,r3,4db90 <_putc_r+0xa8>
   4db44:	30800017 	ldw	r2,0(r6)
   4db48:	01000284 	movi	r4,10
   4db4c:	11400005 	stb	r5,0(r2)
   4db50:	30c00017 	ldw	r3,0(r6)
   4db54:	19400003 	ldbu	r5,0(r3)
   4db58:	29000d26 	beq	r5,r4,4db90 <_putc_r+0xa8>
   4db5c:	18c00044 	addi	r3,r3,1
   4db60:	2805883a 	mov	r2,r5
   4db64:	30c00015 	stw	r3,0(r6)
   4db68:	dfc00317 	ldw	ra,12(sp)
   4db6c:	dc000217 	ldw	r16,8(sp)
   4db70:	dec00404 	addi	sp,sp,16
   4db74:	f800283a 	ret
   4db78:	d9400015 	stw	r5,0(sp)
   4db7c:	d9800115 	stw	r6,4(sp)
   4db80:	004ad200 	call	4ad20 <__sinit>
   4db84:	d9800117 	ldw	r6,4(sp)
   4db88:	d9400017 	ldw	r5,0(sp)
   4db8c:	003fdd06 	br	4db04 <__alt_data_end+0xfffdbb04>
   4db90:	8009883a 	mov	r4,r16
   4db94:	dfc00317 	ldw	ra,12(sp)
   4db98:	dc000217 	ldw	r16,8(sp)
   4db9c:	dec00404 	addi	sp,sp,16
   4dba0:	0050cf41 	jmpi	50cf4 <__swbuf_r>

0004dba4 <putc>:
   4dba4:	defffc04 	addi	sp,sp,-16
   4dba8:	dc400115 	stw	r17,4(sp)
   4dbac:	04400174 	movhi	r17,5
   4dbb0:	8c5f5504 	addi	r17,r17,32084
   4dbb4:	88800017 	ldw	r2,0(r17)
   4dbb8:	dc800215 	stw	r18,8(sp)
   4dbbc:	dc000015 	stw	r16,0(sp)
   4dbc0:	dfc00315 	stw	ra,12(sp)
   4dbc4:	2025883a 	mov	r18,r4
   4dbc8:	2821883a 	mov	r16,r5
   4dbcc:	10000226 	beq	r2,zero,4dbd8 <putc+0x34>
   4dbd0:	10c00e17 	ldw	r3,56(r2)
   4dbd4:	18002126 	beq	r3,zero,4dc5c <putc+0xb8>
   4dbd8:	80800217 	ldw	r2,8(r16)
   4dbdc:	10bfffc4 	addi	r2,r2,-1
   4dbe0:	80800215 	stw	r2,8(r16)
   4dbe4:	10000c16 	blt	r2,zero,4dc18 <putc+0x74>
   4dbe8:	80800017 	ldw	r2,0(r16)
   4dbec:	14800005 	stb	r18,0(r2)
   4dbf0:	80800017 	ldw	r2,0(r16)
   4dbf4:	10c00044 	addi	r3,r2,1
   4dbf8:	10800003 	ldbu	r2,0(r2)
   4dbfc:	80c00015 	stw	r3,0(r16)
   4dc00:	dfc00317 	ldw	ra,12(sp)
   4dc04:	dc800217 	ldw	r18,8(sp)
   4dc08:	dc400117 	ldw	r17,4(sp)
   4dc0c:	dc000017 	ldw	r16,0(sp)
   4dc10:	dec00404 	addi	sp,sp,16
   4dc14:	f800283a 	ret
   4dc18:	80c00617 	ldw	r3,24(r16)
   4dc1c:	10c01216 	blt	r2,r3,4dc68 <putc+0xc4>
   4dc20:	80800017 	ldw	r2,0(r16)
   4dc24:	01000284 	movi	r4,10
   4dc28:	14800005 	stb	r18,0(r2)
   4dc2c:	80c00017 	ldw	r3,0(r16)
   4dc30:	19400003 	ldbu	r5,0(r3)
   4dc34:	29001526 	beq	r5,r4,4dc8c <putc+0xe8>
   4dc38:	18c00044 	addi	r3,r3,1
   4dc3c:	2805883a 	mov	r2,r5
   4dc40:	80c00015 	stw	r3,0(r16)
   4dc44:	dfc00317 	ldw	ra,12(sp)
   4dc48:	dc800217 	ldw	r18,8(sp)
   4dc4c:	dc400117 	ldw	r17,4(sp)
   4dc50:	dc000017 	ldw	r16,0(sp)
   4dc54:	dec00404 	addi	sp,sp,16
   4dc58:	f800283a 	ret
   4dc5c:	1009883a 	mov	r4,r2
   4dc60:	004ad200 	call	4ad20 <__sinit>
   4dc64:	003fdc06 	br	4dbd8 <__alt_data_end+0xfffdbbd8>
   4dc68:	89000017 	ldw	r4,0(r17)
   4dc6c:	900b883a 	mov	r5,r18
   4dc70:	800d883a 	mov	r6,r16
   4dc74:	dfc00317 	ldw	ra,12(sp)
   4dc78:	dc800217 	ldw	r18,8(sp)
   4dc7c:	dc400117 	ldw	r17,4(sp)
   4dc80:	dc000017 	ldw	r16,0(sp)
   4dc84:	dec00404 	addi	sp,sp,16
   4dc88:	0050cf41 	jmpi	50cf4 <__swbuf_r>
   4dc8c:	89000017 	ldw	r4,0(r17)
   4dc90:	003ff706 	br	4dc70 <__alt_data_end+0xfffdbc70>

0004dc94 <_realloc_r>:
   4dc94:	defff504 	addi	sp,sp,-44
   4dc98:	dd400615 	stw	r21,24(sp)
   4dc9c:	dc800315 	stw	r18,12(sp)
   4dca0:	dc000115 	stw	r16,4(sp)
   4dca4:	dfc00a15 	stw	ra,40(sp)
   4dca8:	df000915 	stw	fp,36(sp)
   4dcac:	ddc00815 	stw	r23,32(sp)
   4dcb0:	dd800715 	stw	r22,28(sp)
   4dcb4:	dd000515 	stw	r20,20(sp)
   4dcb8:	dcc00415 	stw	r19,16(sp)
   4dcbc:	dc400215 	stw	r17,8(sp)
   4dcc0:	2821883a 	mov	r16,r5
   4dcc4:	202b883a 	mov	r21,r4
   4dcc8:	3025883a 	mov	r18,r6
   4dccc:	28009626 	beq	r5,zero,4df28 <_realloc_r+0x294>
   4dcd0:	00545140 	call	54514 <__malloc_lock>
   4dcd4:	80bfff17 	ldw	r2,-4(r16)
   4dcd8:	04ffff04 	movi	r19,-4
   4dcdc:	90c002c4 	addi	r3,r18,11
   4dce0:	01000584 	movi	r4,22
   4dce4:	85bffe04 	addi	r22,r16,-8
   4dce8:	14e6703a 	and	r19,r2,r19
   4dcec:	20c0372e 	bgeu	r4,r3,4ddcc <_realloc_r+0x138>
   4dcf0:	047ffe04 	movi	r17,-8
   4dcf4:	1c62703a 	and	r17,r3,r17
   4dcf8:	8807883a 	mov	r3,r17
   4dcfc:	88005a16 	blt	r17,zero,4de68 <_realloc_r+0x1d4>
   4dd00:	8c805936 	bltu	r17,r18,4de68 <_realloc_r+0x1d4>
   4dd04:	98c0340e 	bge	r19,r3,4ddd8 <_realloc_r+0x144>
   4dd08:	07000174 	movhi	fp,5
   4dd0c:	e719c404 	addi	fp,fp,26384
   4dd10:	e1400217 	ldw	r5,8(fp)
   4dd14:	b4c9883a 	add	r4,r22,r19
   4dd18:	29009026 	beq	r5,r4,4df5c <_realloc_r+0x2c8>
   4dd1c:	21800117 	ldw	r6,4(r4)
   4dd20:	01ffff84 	movi	r7,-2
   4dd24:	31ce703a 	and	r7,r6,r7
   4dd28:	21cf883a 	add	r7,r4,r7
   4dd2c:	39c00117 	ldw	r7,4(r7)
   4dd30:	39c0004c 	andi	r7,r7,1
   4dd34:	38004326 	beq	r7,zero,4de44 <_realloc_r+0x1b0>
   4dd38:	000d883a 	mov	r6,zero
   4dd3c:	0009883a 	mov	r4,zero
   4dd40:	1080004c 	andi	r2,r2,1
   4dd44:	10005a1e 	bne	r2,zero,4deb0 <_realloc_r+0x21c>
   4dd48:	85fffe17 	ldw	r23,-8(r16)
   4dd4c:	00bfff04 	movi	r2,-4
   4dd50:	b5efc83a 	sub	r23,r22,r23
   4dd54:	b9c00117 	ldw	r7,4(r23)
   4dd58:	388e703a 	and	r7,r7,r2
   4dd5c:	3ccf883a 	add	r7,r7,r19
   4dd60:	20005226 	beq	r4,zero,4deac <_realloc_r+0x218>
   4dd64:	31e9883a 	add	r20,r6,r7
   4dd68:	2140c726 	beq	r4,r5,4e088 <_realloc_r+0x3f4>
   4dd6c:	a0c04f16 	blt	r20,r3,4deac <_realloc_r+0x218>
   4dd70:	20800317 	ldw	r2,12(r4)
   4dd74:	20c00217 	ldw	r3,8(r4)
   4dd78:	99bfff04 	addi	r6,r19,-4
   4dd7c:	01000904 	movi	r4,36
   4dd80:	18800315 	stw	r2,12(r3)
   4dd84:	10c00215 	stw	r3,8(r2)
   4dd88:	b8c00217 	ldw	r3,8(r23)
   4dd8c:	b8800317 	ldw	r2,12(r23)
   4dd90:	bc800204 	addi	r18,r23,8
   4dd94:	18800315 	stw	r2,12(r3)
   4dd98:	10c00215 	stw	r3,8(r2)
   4dd9c:	2180ed36 	bltu	r4,r6,4e154 <_realloc_r+0x4c0>
   4dda0:	008004c4 	movi	r2,19
   4dda4:	11809b2e 	bgeu	r2,r6,4e014 <_realloc_r+0x380>
   4dda8:	80800017 	ldw	r2,0(r16)
   4ddac:	b8800215 	stw	r2,8(r23)
   4ddb0:	80800117 	ldw	r2,4(r16)
   4ddb4:	b8800315 	stw	r2,12(r23)
   4ddb8:	008006c4 	movi	r2,27
   4ddbc:	1180f936 	bltu	r2,r6,4e1a4 <_realloc_r+0x510>
   4ddc0:	b8800404 	addi	r2,r23,16
   4ddc4:	80c00204 	addi	r3,r16,8
   4ddc8:	00009406 	br	4e01c <_realloc_r+0x388>
   4ddcc:	00c00404 	movi	r3,16
   4ddd0:	1823883a 	mov	r17,r3
   4ddd4:	003fca06 	br	4dd00 <__alt_data_end+0xfffdbd00>
   4ddd8:	9829883a 	mov	r20,r19
   4dddc:	a447c83a 	sub	r3,r20,r17
   4dde0:	010003c4 	movi	r4,15
   4dde4:	1080004c 	andi	r2,r2,1
   4dde8:	20c02336 	bltu	r4,r3,4de78 <_realloc_r+0x1e4>
   4ddec:	1504b03a 	or	r2,r2,r20
   4ddf0:	b0800115 	stw	r2,4(r22)
   4ddf4:	b52d883a 	add	r22,r22,r20
   4ddf8:	b0800117 	ldw	r2,4(r22)
   4ddfc:	10800054 	ori	r2,r2,1
   4de00:	b0800115 	stw	r2,4(r22)
   4de04:	a809883a 	mov	r4,r21
   4de08:	00545180 	call	54518 <__malloc_unlock>
   4de0c:	8025883a 	mov	r18,r16
   4de10:	9005883a 	mov	r2,r18
   4de14:	dfc00a17 	ldw	ra,40(sp)
   4de18:	df000917 	ldw	fp,36(sp)
   4de1c:	ddc00817 	ldw	r23,32(sp)
   4de20:	dd800717 	ldw	r22,28(sp)
   4de24:	dd400617 	ldw	r21,24(sp)
   4de28:	dd000517 	ldw	r20,20(sp)
   4de2c:	dcc00417 	ldw	r19,16(sp)
   4de30:	dc800317 	ldw	r18,12(sp)
   4de34:	dc400217 	ldw	r17,8(sp)
   4de38:	dc000117 	ldw	r16,4(sp)
   4de3c:	dec00b04 	addi	sp,sp,44
   4de40:	f800283a 	ret
   4de44:	01ffff04 	movi	r7,-4
   4de48:	31cc703a 	and	r6,r6,r7
   4de4c:	34e9883a 	add	r20,r6,r19
   4de50:	a0ffbb16 	blt	r20,r3,4dd40 <__alt_data_end+0xfffdbd40>
   4de54:	20c00317 	ldw	r3,12(r4)
   4de58:	21000217 	ldw	r4,8(r4)
   4de5c:	20c00315 	stw	r3,12(r4)
   4de60:	19000215 	stw	r4,8(r3)
   4de64:	003fdd06 	br	4dddc <__alt_data_end+0xfffdbddc>
   4de68:	00800304 	movi	r2,12
   4de6c:	a8800015 	stw	r2,0(r21)
   4de70:	0025883a 	mov	r18,zero
   4de74:	003fe606 	br	4de10 <__alt_data_end+0xfffdbe10>
   4de78:	1444b03a 	or	r2,r2,r17
   4de7c:	b0800115 	stw	r2,4(r22)
   4de80:	b44b883a 	add	r5,r22,r17
   4de84:	18800054 	ori	r2,r3,1
   4de88:	28800115 	stw	r2,4(r5)
   4de8c:	28c7883a 	add	r3,r5,r3
   4de90:	18800117 	ldw	r2,4(r3)
   4de94:	a809883a 	mov	r4,r21
   4de98:	29400204 	addi	r5,r5,8
   4de9c:	10800054 	ori	r2,r2,1
   4dea0:	18800115 	stw	r2,4(r3)
   4dea4:	004b3100 	call	4b310 <_free_r>
   4dea8:	003fd606 	br	4de04 <__alt_data_end+0xfffdbe04>
   4deac:	38c0330e 	bge	r7,r3,4df7c <_realloc_r+0x2e8>
   4deb0:	900b883a 	mov	r5,r18
   4deb4:	a809883a 	mov	r4,r21
   4deb8:	004bee00 	call	4bee0 <_malloc_r>
   4debc:	1025883a 	mov	r18,r2
   4dec0:	10001626 	beq	r2,zero,4df1c <_realloc_r+0x288>
   4dec4:	80bfff17 	ldw	r2,-4(r16)
   4dec8:	00ffff84 	movi	r3,-2
   4decc:	913ffe04 	addi	r4,r18,-8
   4ded0:	10c6703a 	and	r3,r2,r3
   4ded4:	b0c7883a 	add	r3,r22,r3
   4ded8:	20c09926 	beq	r4,r3,4e140 <_realloc_r+0x4ac>
   4dedc:	99bfff04 	addi	r6,r19,-4
   4dee0:	00800904 	movi	r2,36
   4dee4:	11806436 	bltu	r2,r6,4e078 <_realloc_r+0x3e4>
   4dee8:	00c004c4 	movi	r3,19
   4deec:	19804036 	bltu	r3,r6,4dff0 <_realloc_r+0x35c>
   4def0:	9005883a 	mov	r2,r18
   4def4:	8007883a 	mov	r3,r16
   4def8:	19000017 	ldw	r4,0(r3)
   4defc:	11000015 	stw	r4,0(r2)
   4df00:	19000117 	ldw	r4,4(r3)
   4df04:	11000115 	stw	r4,4(r2)
   4df08:	18c00217 	ldw	r3,8(r3)
   4df0c:	10c00215 	stw	r3,8(r2)
   4df10:	a809883a 	mov	r4,r21
   4df14:	800b883a 	mov	r5,r16
   4df18:	004b3100 	call	4b310 <_free_r>
   4df1c:	a809883a 	mov	r4,r21
   4df20:	00545180 	call	54518 <__malloc_unlock>
   4df24:	003fba06 	br	4de10 <__alt_data_end+0xfffdbe10>
   4df28:	300b883a 	mov	r5,r6
   4df2c:	dfc00a17 	ldw	ra,40(sp)
   4df30:	df000917 	ldw	fp,36(sp)
   4df34:	ddc00817 	ldw	r23,32(sp)
   4df38:	dd800717 	ldw	r22,28(sp)
   4df3c:	dd400617 	ldw	r21,24(sp)
   4df40:	dd000517 	ldw	r20,20(sp)
   4df44:	dcc00417 	ldw	r19,16(sp)
   4df48:	dc800317 	ldw	r18,12(sp)
   4df4c:	dc400217 	ldw	r17,8(sp)
   4df50:	dc000117 	ldw	r16,4(sp)
   4df54:	dec00b04 	addi	sp,sp,44
   4df58:	004bee01 	jmpi	4bee0 <_malloc_r>
   4df5c:	29800117 	ldw	r6,4(r5)
   4df60:	013fff04 	movi	r4,-4
   4df64:	89c00404 	addi	r7,r17,16
   4df68:	310c703a 	and	r6,r6,r4
   4df6c:	34c9883a 	add	r4,r6,r19
   4df70:	21c0340e 	bge	r4,r7,4e044 <_realloc_r+0x3b0>
   4df74:	2809883a 	mov	r4,r5
   4df78:	003f7106 	br	4dd40 <__alt_data_end+0xfffdbd40>
   4df7c:	b8800317 	ldw	r2,12(r23)
   4df80:	b8c00217 	ldw	r3,8(r23)
   4df84:	99bfff04 	addi	r6,r19,-4
   4df88:	01000904 	movi	r4,36
   4df8c:	18800315 	stw	r2,12(r3)
   4df90:	10c00215 	stw	r3,8(r2)
   4df94:	bc800204 	addi	r18,r23,8
   4df98:	21807836 	bltu	r4,r6,4e17c <_realloc_r+0x4e8>
   4df9c:	008004c4 	movi	r2,19
   4dfa0:	1180732e 	bgeu	r2,r6,4e170 <_realloc_r+0x4dc>
   4dfa4:	80800017 	ldw	r2,0(r16)
   4dfa8:	b8800215 	stw	r2,8(r23)
   4dfac:	80800117 	ldw	r2,4(r16)
   4dfb0:	b8800315 	stw	r2,12(r23)
   4dfb4:	008006c4 	movi	r2,27
   4dfb8:	11808936 	bltu	r2,r6,4e1e0 <_realloc_r+0x54c>
   4dfbc:	b8800404 	addi	r2,r23,16
   4dfc0:	80c00204 	addi	r3,r16,8
   4dfc4:	19000017 	ldw	r4,0(r3)
   4dfc8:	9021883a 	mov	r16,r18
   4dfcc:	3829883a 	mov	r20,r7
   4dfd0:	11000015 	stw	r4,0(r2)
   4dfd4:	19000117 	ldw	r4,4(r3)
   4dfd8:	b82d883a 	mov	r22,r23
   4dfdc:	11000115 	stw	r4,4(r2)
   4dfe0:	18c00217 	ldw	r3,8(r3)
   4dfe4:	10c00215 	stw	r3,8(r2)
   4dfe8:	b8800117 	ldw	r2,4(r23)
   4dfec:	003f7b06 	br	4dddc <__alt_data_end+0xfffdbddc>
   4dff0:	80c00017 	ldw	r3,0(r16)
   4dff4:	90c00015 	stw	r3,0(r18)
   4dff8:	80c00117 	ldw	r3,4(r16)
   4dffc:	90c00115 	stw	r3,4(r18)
   4e000:	00c006c4 	movi	r3,27
   4e004:	19804636 	bltu	r3,r6,4e120 <_realloc_r+0x48c>
   4e008:	90800204 	addi	r2,r18,8
   4e00c:	80c00204 	addi	r3,r16,8
   4e010:	003fb906 	br	4def8 <__alt_data_end+0xfffdbef8>
   4e014:	9005883a 	mov	r2,r18
   4e018:	8007883a 	mov	r3,r16
   4e01c:	19000017 	ldw	r4,0(r3)
   4e020:	9021883a 	mov	r16,r18
   4e024:	b82d883a 	mov	r22,r23
   4e028:	11000015 	stw	r4,0(r2)
   4e02c:	19000117 	ldw	r4,4(r3)
   4e030:	11000115 	stw	r4,4(r2)
   4e034:	18c00217 	ldw	r3,8(r3)
   4e038:	10c00215 	stw	r3,8(r2)
   4e03c:	b8800117 	ldw	r2,4(r23)
   4e040:	003f6606 	br	4dddc <__alt_data_end+0xfffdbddc>
   4e044:	2445c83a 	sub	r2,r4,r17
   4e048:	b46d883a 	add	r22,r22,r17
   4e04c:	10800054 	ori	r2,r2,1
   4e050:	b0800115 	stw	r2,4(r22)
   4e054:	80bfff17 	ldw	r2,-4(r16)
   4e058:	a809883a 	mov	r4,r21
   4e05c:	e5800215 	stw	r22,8(fp)
   4e060:	1080004c 	andi	r2,r2,1
   4e064:	88a2b03a 	or	r17,r17,r2
   4e068:	847fff15 	stw	r17,-4(r16)
   4e06c:	00545180 	call	54518 <__malloc_unlock>
   4e070:	8025883a 	mov	r18,r16
   4e074:	003f6606 	br	4de10 <__alt_data_end+0xfffdbe10>
   4e078:	9009883a 	mov	r4,r18
   4e07c:	800b883a 	mov	r5,r16
   4e080:	004c93c0 	call	4c93c <memmove>
   4e084:	003fa206 	br	4df10 <__alt_data_end+0xfffdbf10>
   4e088:	88800404 	addi	r2,r17,16
   4e08c:	a0bf8716 	blt	r20,r2,4deac <__alt_data_end+0xfffdbeac>
   4e090:	b8800317 	ldw	r2,12(r23)
   4e094:	b8c00217 	ldw	r3,8(r23)
   4e098:	99bfff04 	addi	r6,r19,-4
   4e09c:	01000904 	movi	r4,36
   4e0a0:	18800315 	stw	r2,12(r3)
   4e0a4:	10c00215 	stw	r3,8(r2)
   4e0a8:	bc800204 	addi	r18,r23,8
   4e0ac:	21806536 	bltu	r4,r6,4e244 <_realloc_r+0x5b0>
   4e0b0:	008004c4 	movi	r2,19
   4e0b4:	1180592e 	bgeu	r2,r6,4e21c <_realloc_r+0x588>
   4e0b8:	80800017 	ldw	r2,0(r16)
   4e0bc:	b8800215 	stw	r2,8(r23)
   4e0c0:	80800117 	ldw	r2,4(r16)
   4e0c4:	b8800315 	stw	r2,12(r23)
   4e0c8:	008006c4 	movi	r2,27
   4e0cc:	11806136 	bltu	r2,r6,4e254 <_realloc_r+0x5c0>
   4e0d0:	b8800404 	addi	r2,r23,16
   4e0d4:	80c00204 	addi	r3,r16,8
   4e0d8:	19000017 	ldw	r4,0(r3)
   4e0dc:	11000015 	stw	r4,0(r2)
   4e0e0:	19000117 	ldw	r4,4(r3)
   4e0e4:	11000115 	stw	r4,4(r2)
   4e0e8:	18c00217 	ldw	r3,8(r3)
   4e0ec:	10c00215 	stw	r3,8(r2)
   4e0f0:	a447c83a 	sub	r3,r20,r17
   4e0f4:	bc45883a 	add	r2,r23,r17
   4e0f8:	18c00054 	ori	r3,r3,1
   4e0fc:	10c00115 	stw	r3,4(r2)
   4e100:	b8c00117 	ldw	r3,4(r23)
   4e104:	e0800215 	stw	r2,8(fp)
   4e108:	a809883a 	mov	r4,r21
   4e10c:	1880004c 	andi	r2,r3,1
   4e110:	88a2b03a 	or	r17,r17,r2
   4e114:	bc400115 	stw	r17,4(r23)
   4e118:	00545180 	call	54518 <__malloc_unlock>
   4e11c:	003f3c06 	br	4de10 <__alt_data_end+0xfffdbe10>
   4e120:	80c00217 	ldw	r3,8(r16)
   4e124:	90c00215 	stw	r3,8(r18)
   4e128:	80c00317 	ldw	r3,12(r16)
   4e12c:	90c00315 	stw	r3,12(r18)
   4e130:	30802426 	beq	r6,r2,4e1c4 <_realloc_r+0x530>
   4e134:	90800404 	addi	r2,r18,16
   4e138:	80c00404 	addi	r3,r16,16
   4e13c:	003f6e06 	br	4def8 <__alt_data_end+0xfffdbef8>
   4e140:	953fff17 	ldw	r20,-4(r18)
   4e144:	00ffff04 	movi	r3,-4
   4e148:	a0e8703a 	and	r20,r20,r3
   4e14c:	a4e9883a 	add	r20,r20,r19
   4e150:	003f2206 	br	4dddc <__alt_data_end+0xfffdbddc>
   4e154:	800b883a 	mov	r5,r16
   4e158:	9009883a 	mov	r4,r18
   4e15c:	004c93c0 	call	4c93c <memmove>
   4e160:	9021883a 	mov	r16,r18
   4e164:	b8800117 	ldw	r2,4(r23)
   4e168:	b82d883a 	mov	r22,r23
   4e16c:	003f1b06 	br	4dddc <__alt_data_end+0xfffdbddc>
   4e170:	9005883a 	mov	r2,r18
   4e174:	8007883a 	mov	r3,r16
   4e178:	003f9206 	br	4dfc4 <__alt_data_end+0xfffdbfc4>
   4e17c:	800b883a 	mov	r5,r16
   4e180:	9009883a 	mov	r4,r18
   4e184:	d9c00015 	stw	r7,0(sp)
   4e188:	004c93c0 	call	4c93c <memmove>
   4e18c:	d9c00017 	ldw	r7,0(sp)
   4e190:	9021883a 	mov	r16,r18
   4e194:	b8800117 	ldw	r2,4(r23)
   4e198:	3829883a 	mov	r20,r7
   4e19c:	b82d883a 	mov	r22,r23
   4e1a0:	003f0e06 	br	4dddc <__alt_data_end+0xfffdbddc>
   4e1a4:	80800217 	ldw	r2,8(r16)
   4e1a8:	b8800415 	stw	r2,16(r23)
   4e1ac:	80800317 	ldw	r2,12(r16)
   4e1b0:	b8800515 	stw	r2,20(r23)
   4e1b4:	31001226 	beq	r6,r4,4e200 <_realloc_r+0x56c>
   4e1b8:	b8800604 	addi	r2,r23,24
   4e1bc:	80c00404 	addi	r3,r16,16
   4e1c0:	003f9606 	br	4e01c <__alt_data_end+0xfffdc01c>
   4e1c4:	81000417 	ldw	r4,16(r16)
   4e1c8:	90800604 	addi	r2,r18,24
   4e1cc:	80c00604 	addi	r3,r16,24
   4e1d0:	91000415 	stw	r4,16(r18)
   4e1d4:	81000517 	ldw	r4,20(r16)
   4e1d8:	91000515 	stw	r4,20(r18)
   4e1dc:	003f4606 	br	4def8 <__alt_data_end+0xfffdbef8>
   4e1e0:	80800217 	ldw	r2,8(r16)
   4e1e4:	b8800415 	stw	r2,16(r23)
   4e1e8:	80800317 	ldw	r2,12(r16)
   4e1ec:	b8800515 	stw	r2,20(r23)
   4e1f0:	31000d26 	beq	r6,r4,4e228 <_realloc_r+0x594>
   4e1f4:	b8800604 	addi	r2,r23,24
   4e1f8:	80c00404 	addi	r3,r16,16
   4e1fc:	003f7106 	br	4dfc4 <__alt_data_end+0xfffdbfc4>
   4e200:	81000417 	ldw	r4,16(r16)
   4e204:	b8800804 	addi	r2,r23,32
   4e208:	80c00604 	addi	r3,r16,24
   4e20c:	b9000615 	stw	r4,24(r23)
   4e210:	81000517 	ldw	r4,20(r16)
   4e214:	b9000715 	stw	r4,28(r23)
   4e218:	003f8006 	br	4e01c <__alt_data_end+0xfffdc01c>
   4e21c:	9005883a 	mov	r2,r18
   4e220:	8007883a 	mov	r3,r16
   4e224:	003fac06 	br	4e0d8 <__alt_data_end+0xfffdc0d8>
   4e228:	81000417 	ldw	r4,16(r16)
   4e22c:	b8800804 	addi	r2,r23,32
   4e230:	80c00604 	addi	r3,r16,24
   4e234:	b9000615 	stw	r4,24(r23)
   4e238:	81000517 	ldw	r4,20(r16)
   4e23c:	b9000715 	stw	r4,28(r23)
   4e240:	003f6006 	br	4dfc4 <__alt_data_end+0xfffdbfc4>
   4e244:	9009883a 	mov	r4,r18
   4e248:	800b883a 	mov	r5,r16
   4e24c:	004c93c0 	call	4c93c <memmove>
   4e250:	003fa706 	br	4e0f0 <__alt_data_end+0xfffdc0f0>
   4e254:	80800217 	ldw	r2,8(r16)
   4e258:	b8800415 	stw	r2,16(r23)
   4e25c:	80800317 	ldw	r2,12(r16)
   4e260:	b8800515 	stw	r2,20(r23)
   4e264:	31000326 	beq	r6,r4,4e274 <_realloc_r+0x5e0>
   4e268:	b8800604 	addi	r2,r23,24
   4e26c:	80c00404 	addi	r3,r16,16
   4e270:	003f9906 	br	4e0d8 <__alt_data_end+0xfffdc0d8>
   4e274:	81000417 	ldw	r4,16(r16)
   4e278:	b8800804 	addi	r2,r23,32
   4e27c:	80c00604 	addi	r3,r16,24
   4e280:	b9000615 	stw	r4,24(r23)
   4e284:	81000517 	ldw	r4,20(r16)
   4e288:	b9000715 	stw	r4,28(r23)
   4e28c:	003f9206 	br	4e0d8 <__alt_data_end+0xfffdc0d8>

0004e290 <lflush>:
   4e290:	20c0030b 	ldhu	r3,12(r4)
   4e294:	00800244 	movi	r2,9
   4e298:	18c0024c 	andi	r3,r3,9
   4e29c:	18800226 	beq	r3,r2,4e2a8 <lflush+0x18>
   4e2a0:	0005883a 	mov	r2,zero
   4e2a4:	f800283a 	ret
   4e2a8:	004ac601 	jmpi	4ac60 <fflush>

0004e2ac <__srefill_r>:
   4e2ac:	defffd04 	addi	sp,sp,-12
   4e2b0:	dc400115 	stw	r17,4(sp)
   4e2b4:	dc000015 	stw	r16,0(sp)
   4e2b8:	dfc00215 	stw	ra,8(sp)
   4e2bc:	2023883a 	mov	r17,r4
   4e2c0:	2821883a 	mov	r16,r5
   4e2c4:	20000226 	beq	r4,zero,4e2d0 <__srefill_r+0x24>
   4e2c8:	20800e17 	ldw	r2,56(r4)
   4e2cc:	10004426 	beq	r2,zero,4e3e0 <__srefill_r+0x134>
   4e2d0:	8080030b 	ldhu	r2,12(r16)
   4e2d4:	80000115 	stw	zero,4(r16)
   4e2d8:	10c0080c 	andi	r3,r2,32
   4e2dc:	18ffffcc 	andi	r3,r3,65535
   4e2e0:	18e0001c 	xori	r3,r3,32768
   4e2e4:	18e00004 	addi	r3,r3,-32768
   4e2e8:	1800371e 	bne	r3,zero,4e3c8 <__srefill_r+0x11c>
   4e2ec:	10c0010c 	andi	r3,r2,4
   4e2f0:	18ffffcc 	andi	r3,r3,65535
   4e2f4:	18e0001c 	xori	r3,r3,32768
   4e2f8:	18e00004 	addi	r3,r3,-32768
   4e2fc:	18002226 	beq	r3,zero,4e388 <__srefill_r+0xdc>
   4e300:	81400c17 	ldw	r5,48(r16)
   4e304:	28000826 	beq	r5,zero,4e328 <__srefill_r+0x7c>
   4e308:	80801004 	addi	r2,r16,64
   4e30c:	28800226 	beq	r5,r2,4e318 <__srefill_r+0x6c>
   4e310:	8809883a 	mov	r4,r17
   4e314:	004b3100 	call	4b310 <_free_r>
   4e318:	80800f17 	ldw	r2,60(r16)
   4e31c:	80000c15 	stw	zero,48(r16)
   4e320:	80800115 	stw	r2,4(r16)
   4e324:	1000401e 	bne	r2,zero,4e428 <__srefill_r+0x17c>
   4e328:	80800417 	ldw	r2,16(r16)
   4e32c:	10005026 	beq	r2,zero,4e470 <__srefill_r+0x1c4>
   4e330:	8080030b 	ldhu	r2,12(r16)
   4e334:	108000cc 	andi	r2,r2,3
   4e338:	10002b1e 	bne	r2,zero,4e3e8 <__srefill_r+0x13c>
   4e33c:	81800417 	ldw	r6,16(r16)
   4e340:	80800817 	ldw	r2,32(r16)
   4e344:	81400717 	ldw	r5,28(r16)
   4e348:	81c00517 	ldw	r7,20(r16)
   4e34c:	8809883a 	mov	r4,r17
   4e350:	81800015 	stw	r6,0(r16)
   4e354:	103ee83a 	callr	r2
   4e358:	8100030b 	ldhu	r4,12(r16)
   4e35c:	00f7ffc4 	movi	r3,-8193
   4e360:	80800115 	stw	r2,4(r16)
   4e364:	20c6703a 	and	r3,r4,r3
   4e368:	80c0030d 	sth	r3,12(r16)
   4e36c:	0080130e 	bge	zero,r2,4e3bc <__srefill_r+0x110>
   4e370:	0005883a 	mov	r2,zero
   4e374:	dfc00217 	ldw	ra,8(sp)
   4e378:	dc400117 	ldw	r17,4(sp)
   4e37c:	dc000017 	ldw	r16,0(sp)
   4e380:	dec00304 	addi	sp,sp,12
   4e384:	f800283a 	ret
   4e388:	10c0040c 	andi	r3,r2,16
   4e38c:	18ffffcc 	andi	r3,r3,65535
   4e390:	18e0001c 	xori	r3,r3,32768
   4e394:	18e00004 	addi	r3,r3,-32768
   4e398:	18003926 	beq	r3,zero,4e480 <__srefill_r+0x1d4>
   4e39c:	10c0020c 	andi	r3,r2,8
   4e3a0:	18ffffcc 	andi	r3,r3,65535
   4e3a4:	18e0001c 	xori	r3,r3,32768
   4e3a8:	18e00004 	addi	r3,r3,-32768
   4e3ac:	1800261e 	bne	r3,zero,4e448 <__srefill_r+0x19c>
   4e3b0:	10800114 	ori	r2,r2,4
   4e3b4:	8080030d 	sth	r2,12(r16)
   4e3b8:	003fdb06 	br	4e328 <__alt_data_end+0xfffdc328>
   4e3bc:	1000111e 	bne	r2,zero,4e404 <__srefill_r+0x158>
   4e3c0:	18c00814 	ori	r3,r3,32
   4e3c4:	80c0030d 	sth	r3,12(r16)
   4e3c8:	00bfffc4 	movi	r2,-1
   4e3cc:	dfc00217 	ldw	ra,8(sp)
   4e3d0:	dc400117 	ldw	r17,4(sp)
   4e3d4:	dc000017 	ldw	r16,0(sp)
   4e3d8:	dec00304 	addi	sp,sp,12
   4e3dc:	f800283a 	ret
   4e3e0:	004ad200 	call	4ad20 <__sinit>
   4e3e4:	003fba06 	br	4e2d0 <__alt_data_end+0xfffdc2d0>
   4e3e8:	00800174 	movhi	r2,5
   4e3ec:	109f5404 	addi	r2,r2,32080
   4e3f0:	11000017 	ldw	r4,0(r2)
   4e3f4:	01400174 	movhi	r5,5
   4e3f8:	2978a404 	addi	r5,r5,-7536
   4e3fc:	004bac40 	call	4bac4 <_fwalk>
   4e400:	003fce06 	br	4e33c <__alt_data_end+0xfffdc33c>
   4e404:	18c01014 	ori	r3,r3,64
   4e408:	00bfffc4 	movi	r2,-1
   4e40c:	80000115 	stw	zero,4(r16)
   4e410:	80c0030d 	sth	r3,12(r16)
   4e414:	dfc00217 	ldw	ra,8(sp)
   4e418:	dc400117 	ldw	r17,4(sp)
   4e41c:	dc000017 	ldw	r16,0(sp)
   4e420:	dec00304 	addi	sp,sp,12
   4e424:	f800283a 	ret
   4e428:	80c00e17 	ldw	r3,56(r16)
   4e42c:	0005883a 	mov	r2,zero
   4e430:	80c00015 	stw	r3,0(r16)
   4e434:	dfc00217 	ldw	ra,8(sp)
   4e438:	dc400117 	ldw	r17,4(sp)
   4e43c:	dc000017 	ldw	r16,0(sp)
   4e440:	dec00304 	addi	sp,sp,12
   4e444:	f800283a 	ret
   4e448:	8809883a 	mov	r4,r17
   4e44c:	800b883a 	mov	r5,r16
   4e450:	004aa780 	call	4aa78 <_fflush_r>
   4e454:	103fdc1e 	bne	r2,zero,4e3c8 <__alt_data_end+0xfffdc3c8>
   4e458:	8080030b 	ldhu	r2,12(r16)
   4e45c:	00fffdc4 	movi	r3,-9
   4e460:	80000215 	stw	zero,8(r16)
   4e464:	1884703a 	and	r2,r3,r2
   4e468:	80000615 	stw	zero,24(r16)
   4e46c:	003fd006 	br	4e3b0 <__alt_data_end+0xfffdc3b0>
   4e470:	8809883a 	mov	r4,r17
   4e474:	800b883a 	mov	r5,r16
   4e478:	004bd380 	call	4bd38 <__smakebuf_r>
   4e47c:	003fac06 	br	4e330 <__alt_data_end+0xfffdc330>
   4e480:	00c00244 	movi	r3,9
   4e484:	10801014 	ori	r2,r2,64
   4e488:	88c00015 	stw	r3,0(r17)
   4e48c:	8080030d 	sth	r2,12(r16)
   4e490:	00bfffc4 	movi	r2,-1
   4e494:	003fb706 	br	4e374 <__alt_data_end+0xfffdc374>

0004e498 <__isinfd>:
   4e498:	0105c83a 	sub	r2,zero,r4
   4e49c:	1108b03a 	or	r4,r2,r4
   4e4a0:	2004d7fa 	srli	r2,r4,31
   4e4a4:	00e00034 	movhi	r3,32768
   4e4a8:	18ffffc4 	addi	r3,r3,-1
   4e4ac:	28ca703a 	and	r5,r5,r3
   4e4b0:	1144b03a 	or	r2,r2,r5
   4e4b4:	00dffc34 	movhi	r3,32752
   4e4b8:	1885c83a 	sub	r2,r3,r2
   4e4bc:	0087c83a 	sub	r3,zero,r2
   4e4c0:	1884b03a 	or	r2,r3,r2
   4e4c4:	1005d7fa 	srai	r2,r2,31
   4e4c8:	10800044 	addi	r2,r2,1
   4e4cc:	f800283a 	ret

0004e4d0 <__isnand>:
   4e4d0:	0105c83a 	sub	r2,zero,r4
   4e4d4:	1108b03a 	or	r4,r2,r4
   4e4d8:	2004d7fa 	srli	r2,r4,31
   4e4dc:	00e00034 	movhi	r3,32768
   4e4e0:	18ffffc4 	addi	r3,r3,-1
   4e4e4:	28ca703a 	and	r5,r5,r3
   4e4e8:	1144b03a 	or	r2,r2,r5
   4e4ec:	00dffc34 	movhi	r3,32752
   4e4f0:	1885c83a 	sub	r2,r3,r2
   4e4f4:	1004d7fa 	srli	r2,r2,31
   4e4f8:	f800283a 	ret

0004e4fc <_sbrk_r>:
   4e4fc:	defffd04 	addi	sp,sp,-12
   4e500:	dc400115 	stw	r17,4(sp)
   4e504:	dc000015 	stw	r16,0(sp)
   4e508:	2023883a 	mov	r17,r4
   4e50c:	040001b4 	movhi	r16,6
   4e510:	84261a04 	addi	r16,r16,-26520
   4e514:	2809883a 	mov	r4,r5
   4e518:	dfc00215 	stw	ra,8(sp)
   4e51c:	80000015 	stw	zero,0(r16)
   4e520:	00545e80 	call	545e8 <sbrk>
   4e524:	00ffffc4 	movi	r3,-1
   4e528:	10c00526 	beq	r2,r3,4e540 <_sbrk_r+0x44>
   4e52c:	dfc00217 	ldw	ra,8(sp)
   4e530:	dc400117 	ldw	r17,4(sp)
   4e534:	dc000017 	ldw	r16,0(sp)
   4e538:	dec00304 	addi	sp,sp,12
   4e53c:	f800283a 	ret
   4e540:	80c00017 	ldw	r3,0(r16)
   4e544:	183ff926 	beq	r3,zero,4e52c <__alt_data_end+0xfffdc52c>
   4e548:	88c00015 	stw	r3,0(r17)
   4e54c:	dfc00217 	ldw	ra,8(sp)
   4e550:	dc400117 	ldw	r17,4(sp)
   4e554:	dc000017 	ldw	r16,0(sp)
   4e558:	dec00304 	addi	sp,sp,12
   4e55c:	f800283a 	ret

0004e560 <__sccl>:
   4e560:	2a400003 	ldbu	r9,0(r5)
   4e564:	00801784 	movi	r2,94
   4e568:	48802626 	beq	r9,r2,4e604 <__sccl+0xa4>
   4e56c:	28800044 	addi	r2,r5,1
   4e570:	0011883a 	mov	r8,zero
   4e574:	000b883a 	mov	r5,zero
   4e578:	0007883a 	mov	r3,zero
   4e57c:	01c04004 	movi	r7,256
   4e580:	20cd883a 	add	r6,r4,r3
   4e584:	32000005 	stb	r8,0(r6)
   4e588:	18c00044 	addi	r3,r3,1
   4e58c:	19fffc1e 	bne	r3,r7,4e580 <__alt_data_end+0xfffdc580>
   4e590:	48000f26 	beq	r9,zero,4e5d0 <__sccl+0x70>
   4e594:	01800044 	movi	r6,1
   4e598:	314dc83a 	sub	r6,r6,r5
   4e59c:	02001744 	movi	r8,93
   4e5a0:	01400b44 	movi	r5,45
   4e5a4:	2247883a 	add	r3,r4,r9
   4e5a8:	19800005 	stb	r6,0(r3)
   4e5ac:	10c00003 	ldbu	r3,0(r2)
   4e5b0:	11c00044 	addi	r7,r2,1
   4e5b4:	19400a26 	beq	r3,r5,4e5e0 <__sccl+0x80>
   4e5b8:	1a000726 	beq	r3,r8,4e5d8 <__sccl+0x78>
   4e5bc:	1800011e 	bne	r3,zero,4e5c4 <__sccl+0x64>
   4e5c0:	f800283a 	ret
   4e5c4:	1813883a 	mov	r9,r3
   4e5c8:	3805883a 	mov	r2,r7
   4e5cc:	003ff506 	br	4e5a4 <__alt_data_end+0xfffdc5a4>
   4e5d0:	10bfffc4 	addi	r2,r2,-1
   4e5d4:	f800283a 	ret
   4e5d8:	3805883a 	mov	r2,r7
   4e5dc:	f800283a 	ret
   4e5e0:	10c00043 	ldbu	r3,1(r2)
   4e5e4:	1a000c26 	beq	r3,r8,4e618 <__sccl+0xb8>
   4e5e8:	1a400b16 	blt	r3,r9,4e618 <__sccl+0xb8>
   4e5ec:	10800084 	addi	r2,r2,2
   4e5f0:	4a400044 	addi	r9,r9,1
   4e5f4:	224f883a 	add	r7,r4,r9
   4e5f8:	39800005 	stb	r6,0(r7)
   4e5fc:	48fffc16 	blt	r9,r3,4e5f0 <__alt_data_end+0xfffdc5f0>
   4e600:	003fea06 	br	4e5ac <__alt_data_end+0xfffdc5ac>
   4e604:	2a400043 	ldbu	r9,1(r5)
   4e608:	28800084 	addi	r2,r5,2
   4e60c:	02000044 	movi	r8,1
   4e610:	01400044 	movi	r5,1
   4e614:	003fd806 	br	4e578 <__alt_data_end+0xfffdc578>
   4e618:	2813883a 	mov	r9,r5
   4e61c:	3805883a 	mov	r2,r7
   4e620:	003fe006 	br	4e5a4 <__alt_data_end+0xfffdc5a4>

0004e624 <nanf>:
   4e624:	009ff034 	movhi	r2,32704
   4e628:	f800283a 	ret

0004e62c <_sprintf_r>:
   4e62c:	deffe704 	addi	sp,sp,-100
   4e630:	2807883a 	mov	r3,r5
   4e634:	dfc01715 	stw	ra,92(sp)
   4e638:	d9c01815 	stw	r7,96(sp)
   4e63c:	00a00034 	movhi	r2,32768
   4e640:	10bfffc4 	addi	r2,r2,-1
   4e644:	02008204 	movi	r8,520
   4e648:	d8800215 	stw	r2,8(sp)
   4e64c:	d8800515 	stw	r2,20(sp)
   4e650:	d80b883a 	mov	r5,sp
   4e654:	d9c01804 	addi	r7,sp,96
   4e658:	00bfffc4 	movi	r2,-1
   4e65c:	d8c00015 	stw	r3,0(sp)
   4e660:	d8c00415 	stw	r3,16(sp)
   4e664:	da00030d 	sth	r8,12(sp)
   4e668:	d880038d 	sth	r2,14(sp)
   4e66c:	0045b8c0 	call	45b8c <___vfprintf_internal_r>
   4e670:	d8c00017 	ldw	r3,0(sp)
   4e674:	18000005 	stb	zero,0(r3)
   4e678:	dfc01717 	ldw	ra,92(sp)
   4e67c:	dec01904 	addi	sp,sp,100
   4e680:	f800283a 	ret

0004e684 <sprintf>:
   4e684:	deffe604 	addi	sp,sp,-104
   4e688:	2007883a 	mov	r3,r4
   4e68c:	dfc01715 	stw	ra,92(sp)
   4e690:	d9801815 	stw	r6,96(sp)
   4e694:	d9c01915 	stw	r7,100(sp)
   4e698:	00800174 	movhi	r2,5
   4e69c:	109f5504 	addi	r2,r2,32084
   4e6a0:	11000017 	ldw	r4,0(r2)
   4e6a4:	00a00034 	movhi	r2,32768
   4e6a8:	10bfffc4 	addi	r2,r2,-1
   4e6ac:	280d883a 	mov	r6,r5
   4e6b0:	02008204 	movi	r8,520
   4e6b4:	d8800215 	stw	r2,8(sp)
   4e6b8:	d8800515 	stw	r2,20(sp)
   4e6bc:	d80b883a 	mov	r5,sp
   4e6c0:	d9c01804 	addi	r7,sp,96
   4e6c4:	00bfffc4 	movi	r2,-1
   4e6c8:	d8c00015 	stw	r3,0(sp)
   4e6cc:	d8c00415 	stw	r3,16(sp)
   4e6d0:	da00030d 	sth	r8,12(sp)
   4e6d4:	d880038d 	sth	r2,14(sp)
   4e6d8:	0045b8c0 	call	45b8c <___vfprintf_internal_r>
   4e6dc:	d8c00017 	ldw	r3,0(sp)
   4e6e0:	18000005 	stb	zero,0(r3)
   4e6e4:	dfc01717 	ldw	ra,92(sp)
   4e6e8:	dec01a04 	addi	sp,sp,104
   4e6ec:	f800283a 	ret

0004e6f0 <__sread>:
   4e6f0:	defffe04 	addi	sp,sp,-8
   4e6f4:	dc000015 	stw	r16,0(sp)
   4e6f8:	2821883a 	mov	r16,r5
   4e6fc:	2940038f 	ldh	r5,14(r5)
   4e700:	dfc00115 	stw	ra,4(sp)
   4e704:	0051dcc0 	call	51dcc <_read_r>
   4e708:	10000716 	blt	r2,zero,4e728 <__sread+0x38>
   4e70c:	80c01417 	ldw	r3,80(r16)
   4e710:	1887883a 	add	r3,r3,r2
   4e714:	80c01415 	stw	r3,80(r16)
   4e718:	dfc00117 	ldw	ra,4(sp)
   4e71c:	dc000017 	ldw	r16,0(sp)
   4e720:	dec00204 	addi	sp,sp,8
   4e724:	f800283a 	ret
   4e728:	80c0030b 	ldhu	r3,12(r16)
   4e72c:	18fbffcc 	andi	r3,r3,61439
   4e730:	80c0030d 	sth	r3,12(r16)
   4e734:	dfc00117 	ldw	ra,4(sp)
   4e738:	dc000017 	ldw	r16,0(sp)
   4e73c:	dec00204 	addi	sp,sp,8
   4e740:	f800283a 	ret

0004e744 <__swrite>:
   4e744:	2880030b 	ldhu	r2,12(r5)
   4e748:	defffb04 	addi	sp,sp,-20
   4e74c:	dcc00315 	stw	r19,12(sp)
   4e750:	10c0400c 	andi	r3,r2,256
   4e754:	18ffffcc 	andi	r3,r3,65535
   4e758:	18e0001c 	xori	r3,r3,32768
   4e75c:	dc800215 	stw	r18,8(sp)
   4e760:	dc400115 	stw	r17,4(sp)
   4e764:	dc000015 	stw	r16,0(sp)
   4e768:	dfc00415 	stw	ra,16(sp)
   4e76c:	18e00004 	addi	r3,r3,-32768
   4e770:	2821883a 	mov	r16,r5
   4e774:	2027883a 	mov	r19,r4
   4e778:	3025883a 	mov	r18,r6
   4e77c:	3823883a 	mov	r17,r7
   4e780:	18000526 	beq	r3,zero,4e798 <__swrite+0x54>
   4e784:	2940038f 	ldh	r5,14(r5)
   4e788:	000d883a 	mov	r6,zero
   4e78c:	01c00084 	movi	r7,2
   4e790:	0051d600 	call	51d60 <_lseek_r>
   4e794:	8080030b 	ldhu	r2,12(r16)
   4e798:	8140038f 	ldh	r5,14(r16)
   4e79c:	10bbffcc 	andi	r2,r2,61439
   4e7a0:	9809883a 	mov	r4,r19
   4e7a4:	900d883a 	mov	r6,r18
   4e7a8:	880f883a 	mov	r7,r17
   4e7ac:	8080030d 	sth	r2,12(r16)
   4e7b0:	dfc00417 	ldw	ra,16(sp)
   4e7b4:	dcc00317 	ldw	r19,12(sp)
   4e7b8:	dc800217 	ldw	r18,8(sp)
   4e7bc:	dc400117 	ldw	r17,4(sp)
   4e7c0:	dc000017 	ldw	r16,0(sp)
   4e7c4:	dec00504 	addi	sp,sp,20
   4e7c8:	0050e4c1 	jmpi	50e4c <_write_r>

0004e7cc <__sseek>:
   4e7cc:	defffe04 	addi	sp,sp,-8
   4e7d0:	dc000015 	stw	r16,0(sp)
   4e7d4:	2821883a 	mov	r16,r5
   4e7d8:	2940038f 	ldh	r5,14(r5)
   4e7dc:	dfc00115 	stw	ra,4(sp)
   4e7e0:	0051d600 	call	51d60 <_lseek_r>
   4e7e4:	00ffffc4 	movi	r3,-1
   4e7e8:	10c00826 	beq	r2,r3,4e80c <__sseek+0x40>
   4e7ec:	80c0030b 	ldhu	r3,12(r16)
   4e7f0:	80801415 	stw	r2,80(r16)
   4e7f4:	18c40014 	ori	r3,r3,4096
   4e7f8:	80c0030d 	sth	r3,12(r16)
   4e7fc:	dfc00117 	ldw	ra,4(sp)
   4e800:	dc000017 	ldw	r16,0(sp)
   4e804:	dec00204 	addi	sp,sp,8
   4e808:	f800283a 	ret
   4e80c:	80c0030b 	ldhu	r3,12(r16)
   4e810:	18fbffcc 	andi	r3,r3,61439
   4e814:	80c0030d 	sth	r3,12(r16)
   4e818:	dfc00117 	ldw	ra,4(sp)
   4e81c:	dc000017 	ldw	r16,0(sp)
   4e820:	dec00204 	addi	sp,sp,8
   4e824:	f800283a 	ret

0004e828 <__sclose>:
   4e828:	2940038f 	ldh	r5,14(r5)
   4e82c:	0050f741 	jmpi	50f74 <_close_r>

0004e830 <strcmp>:
   4e830:	2904b03a 	or	r2,r5,r4
   4e834:	108000cc 	andi	r2,r2,3
   4e838:	1000171e 	bne	r2,zero,4e898 <strcmp+0x68>
   4e83c:	20800017 	ldw	r2,0(r4)
   4e840:	28c00017 	ldw	r3,0(r5)
   4e844:	10c0141e 	bne	r2,r3,4e898 <strcmp+0x68>
   4e848:	027fbff4 	movhi	r9,65279
   4e84c:	4a7fbfc4 	addi	r9,r9,-257
   4e850:	1247883a 	add	r3,r2,r9
   4e854:	0084303a 	nor	r2,zero,r2
   4e858:	1884703a 	and	r2,r3,r2
   4e85c:	02202074 	movhi	r8,32897
   4e860:	42202004 	addi	r8,r8,-32640
   4e864:	1204703a 	and	r2,r2,r8
   4e868:	10000226 	beq	r2,zero,4e874 <strcmp+0x44>
   4e86c:	00001706 	br	4e8cc <strcmp+0x9c>
   4e870:	3000161e 	bne	r6,zero,4e8cc <strcmp+0x9c>
   4e874:	21000104 	addi	r4,r4,4
   4e878:	20800017 	ldw	r2,0(r4)
   4e87c:	29400104 	addi	r5,r5,4
   4e880:	28c00017 	ldw	r3,0(r5)
   4e884:	124f883a 	add	r7,r2,r9
   4e888:	008c303a 	nor	r6,zero,r2
   4e88c:	398c703a 	and	r6,r7,r6
   4e890:	320c703a 	and	r6,r6,r8
   4e894:	10fff626 	beq	r2,r3,4e870 <__alt_data_end+0xfffdc870>
   4e898:	20800007 	ldb	r2,0(r4)
   4e89c:	1000051e 	bne	r2,zero,4e8b4 <strcmp+0x84>
   4e8a0:	00000606 	br	4e8bc <strcmp+0x8c>
   4e8a4:	21000044 	addi	r4,r4,1
   4e8a8:	20800007 	ldb	r2,0(r4)
   4e8ac:	29400044 	addi	r5,r5,1
   4e8b0:	10000226 	beq	r2,zero,4e8bc <strcmp+0x8c>
   4e8b4:	28c00007 	ldb	r3,0(r5)
   4e8b8:	10fffa26 	beq	r2,r3,4e8a4 <__alt_data_end+0xfffdc8a4>
   4e8bc:	20c00003 	ldbu	r3,0(r4)
   4e8c0:	28800003 	ldbu	r2,0(r5)
   4e8c4:	1885c83a 	sub	r2,r3,r2
   4e8c8:	f800283a 	ret
   4e8cc:	0005883a 	mov	r2,zero
   4e8d0:	f800283a 	ret

0004e8d4 <_strtod_r>:
   4e8d4:	deffe004 	addi	sp,sp,-128
   4e8d8:	dd801c15 	stw	r22,112(sp)
   4e8dc:	dc001615 	stw	r16,88(sp)
   4e8e0:	282d883a 	mov	r22,r5
   4e8e4:	d9801115 	stw	r6,68(sp)
   4e8e8:	d9400c15 	stw	r5,48(sp)
   4e8ec:	2807883a 	mov	r3,r5
   4e8f0:	dfc01f15 	stw	ra,124(sp)
   4e8f4:	df001e15 	stw	fp,120(sp)
   4e8f8:	ddc01d15 	stw	r23,116(sp)
   4e8fc:	dd401b15 	stw	r21,108(sp)
   4e900:	dd001a15 	stw	r20,104(sp)
   4e904:	dcc01915 	stw	r19,100(sp)
   4e908:	dc801815 	stw	r18,96(sp)
   4e90c:	dc401715 	stw	r17,92(sp)
   4e910:	2021883a 	mov	r16,r4
   4e914:	d8000615 	stw	zero,24(sp)
   4e918:	d8000715 	stw	zero,28(sp)
   4e91c:	01400b44 	movi	r5,45
   4e920:	01800174 	movhi	r6,5
   4e924:	31bab104 	addi	r6,r6,-5436
   4e928:	18800003 	ldbu	r2,0(r3)
   4e92c:	11003fcc 	andi	r4,r2,255
   4e930:	29005f2e 	bgeu	r5,r4,4eab0 <_strtod_r+0x1dc>
   4e934:	10803fcc 	andi	r2,r2,255
   4e938:	1080201c 	xori	r2,r2,128
   4e93c:	1811883a 	mov	r8,r3
   4e940:	d8001215 	stw	zero,72(sp)
   4e944:	10bfe004 	addi	r2,r2,-128
   4e948:	00c00c04 	movi	r3,48
   4e94c:	10c10426 	beq	r2,r3,4ed60 <_strtod_r+0x48c>
   4e950:	000b883a 	mov	r5,zero
   4e954:	02400bc4 	movi	r9,47
   4e958:	100f883a 	mov	r7,r2
   4e95c:	48843e0e 	bge	r9,r2,4fa58 <_strtod_r+0x1184>
   4e960:	02c00e44 	movi	r11,57
   4e964:	58844116 	blt	r11,r2,4fa6c <_strtod_r+0x1198>
   4e968:	40c00044 	addi	r3,r8,1
   4e96c:	0029883a 	mov	r20,zero
   4e970:	0025883a 	mov	r18,zero
   4e974:	0023883a 	mov	r17,zero
   4e978:	02800204 	movi	r10,8
   4e97c:	010003c4 	movi	r4,15
   4e980:	5440a216 	blt	r10,r17,4ec0c <_strtod_r+0x338>
   4e984:	948002a4 	muli	r18,r18,10
   4e988:	90a5883a 	add	r18,r18,r2
   4e98c:	94bff404 	addi	r18,r18,-48
   4e990:	d8c00c15 	stw	r3,48(sp)
   4e994:	18800007 	ldb	r2,0(r3)
   4e998:	8c400044 	addi	r17,r17,1
   4e99c:	180d883a 	mov	r6,r3
   4e9a0:	100f883a 	mov	r7,r2
   4e9a4:	4880a30e 	bge	r9,r2,4ec34 <_strtod_r+0x360>
   4e9a8:	18c00044 	addi	r3,r3,1
   4e9ac:	58bff40e 	bge	r11,r2,4e980 <__alt_data_end+0xfffdc980>
   4e9b0:	4027883a 	mov	r19,r8
   4e9b4:	882b883a 	mov	r21,r17
   4e9b8:	0007883a 	mov	r3,zero
   4e9bc:	000d883a 	mov	r6,zero
   4e9c0:	0011883a 	mov	r8,zero
   4e9c4:	00801944 	movi	r2,101
   4e9c8:	3880f426 	beq	r7,r2,4ed9c <_strtod_r+0x4c8>
   4e9cc:	00801144 	movi	r2,69
   4e9d0:	3880f226 	beq	r7,r2,4ed9c <_strtod_r+0x4c8>
   4e9d4:	0009883a 	mov	r4,zero
   4e9d8:	8800ca26 	beq	r17,zero,4ed04 <_strtod_r+0x430>
   4e9dc:	218dc83a 	sub	r6,r4,r6
   4e9e0:	d9801015 	stw	r6,64(sp)
   4e9e4:	a800011e 	bne	r21,zero,4e9ec <_strtod_r+0x118>
   4e9e8:	882b883a 	mov	r21,r17
   4e9ec:	00800404 	movi	r2,16
   4e9f0:	882d883a 	mov	r22,r17
   4e9f4:	1440010e 	bge	r2,r17,4e9fc <_strtod_r+0x128>
   4e9f8:	102d883a 	mov	r22,r2
   4e9fc:	9009883a 	mov	r4,r18
   4ea00:	00538440 	call	53844 <__floatunsidf>
   4ea04:	d8800615 	stw	r2,24(sp)
   4ea08:	d8c00715 	stw	r3,28(sp)
   4ea0c:	01000244 	movi	r4,9
   4ea10:	2580150e 	bge	r4,r22,4ea68 <_strtod_r+0x194>
   4ea14:	b13ffdc4 	addi	r4,r22,-9
   4ea18:	200890fa 	slli	r4,r4,3
   4ea1c:	180b883a 	mov	r5,r3
   4ea20:	00c00174 	movhi	r3,5
   4ea24:	18d82b04 	addi	r3,r3,24748
   4ea28:	1907883a 	add	r3,r3,r4
   4ea2c:	19800017 	ldw	r6,0(r3)
   4ea30:	19c00117 	ldw	r7,4(r3)
   4ea34:	1009883a 	mov	r4,r2
   4ea38:	0052f7c0 	call	52f7c <__muldf3>
   4ea3c:	a009883a 	mov	r4,r20
   4ea40:	102f883a 	mov	r23,r2
   4ea44:	1839883a 	mov	fp,r3
   4ea48:	00538440 	call	53844 <__floatunsidf>
   4ea4c:	b809883a 	mov	r4,r23
   4ea50:	e00b883a 	mov	r5,fp
   4ea54:	100d883a 	mov	r6,r2
   4ea58:	180f883a 	mov	r7,r3
   4ea5c:	0052ec80 	call	52ec8 <__adddf3>
   4ea60:	d8800615 	stw	r2,24(sp)
   4ea64:	d8c00715 	stw	r3,28(sp)
   4ea68:	008003c4 	movi	r2,15
   4ea6c:	14411416 	blt	r2,r17,4eec0 <_strtod_r+0x5ec>
   4ea70:	d9001017 	ldw	r4,64(sp)
   4ea74:	20010f26 	beq	r4,zero,4eeb4 <_strtod_r+0x5e0>
   4ea78:	d9401017 	ldw	r5,64(sp)
   4ea7c:	01441a0e 	bge	zero,r5,4fae8 <_strtod_r+0x1214>
   4ea80:	00c00584 	movi	r3,22
   4ea84:	1943fd16 	blt	r3,r5,4fa7c <_strtod_r+0x11a8>
   4ea88:	280490fa 	slli	r2,r5,3
   4ea8c:	00c00174 	movhi	r3,5
   4ea90:	18d82b04 	addi	r3,r3,24748
   4ea94:	d9000617 	ldw	r4,24(sp)
   4ea98:	1885883a 	add	r2,r3,r2
   4ea9c:	d9400717 	ldw	r5,28(sp)
   4eaa0:	11800017 	ldw	r6,0(r2)
   4eaa4:	11c00117 	ldw	r7,4(r2)
   4eaa8:	0052f7c0 	call	52f7c <__muldf3>
   4eaac:	00003c06 	br	4eba0 <_strtod_r+0x2cc>
   4eab0:	2109883a 	add	r4,r4,r4
   4eab4:	2109883a 	add	r4,r4,r4
   4eab8:	2189883a 	add	r4,r4,r6
   4eabc:	21000017 	ldw	r4,0(r4)
   4eac0:	2000683a 	jmp	r4
   4eac4:	0004ec04 	movi	zero,5040
   4eac8:	0004e934 	movhi	zero,5028
   4eacc:	0004e934 	movhi	zero,5028
   4ead0:	0004e934 	movhi	zero,5028
   4ead4:	0004e934 	movhi	zero,5028
   4ead8:	0004e934 	movhi	zero,5028
   4eadc:	0004e934 	movhi	zero,5028
   4eae0:	0004e934 	movhi	zero,5028
   4eae4:	0004e934 	movhi	zero,5028
   4eae8:	0004ebf8 	rdprs	zero,zero,5039
   4eaec:	0004ebf8 	rdprs	zero,zero,5039
   4eaf0:	0004ebf8 	rdprs	zero,zero,5039
   4eaf4:	0004ebf8 	rdprs	zero,zero,5039
   4eaf8:	0004ebf8 	rdprs	zero,zero,5039
   4eafc:	0004e934 	movhi	zero,5028
   4eb00:	0004e934 	movhi	zero,5028
   4eb04:	0004e934 	movhi	zero,5028
   4eb08:	0004e934 	movhi	zero,5028
   4eb0c:	0004e934 	movhi	zero,5028
   4eb10:	0004e934 	movhi	zero,5028
   4eb14:	0004e934 	movhi	zero,5028
   4eb18:	0004e934 	movhi	zero,5028
   4eb1c:	0004e934 	movhi	zero,5028
   4eb20:	0004e934 	movhi	zero,5028
   4eb24:	0004e934 	movhi	zero,5028
   4eb28:	0004e934 	movhi	zero,5028
   4eb2c:	0004e934 	movhi	zero,5028
   4eb30:	0004e934 	movhi	zero,5028
   4eb34:	0004e934 	movhi	zero,5028
   4eb38:	0004e934 	movhi	zero,5028
   4eb3c:	0004e934 	movhi	zero,5028
   4eb40:	0004e934 	movhi	zero,5028
   4eb44:	0004ebf8 	rdprs	zero,zero,5039
   4eb48:	0004e934 	movhi	zero,5028
   4eb4c:	0004e934 	movhi	zero,5028
   4eb50:	0004e934 	movhi	zero,5028
   4eb54:	0004e934 	movhi	zero,5028
   4eb58:	0004e934 	movhi	zero,5028
   4eb5c:	0004e934 	movhi	zero,5028
   4eb60:	0004e934 	movhi	zero,5028
   4eb64:	0004e934 	movhi	zero,5028
   4eb68:	0004e934 	movhi	zero,5028
   4eb6c:	0004e934 	movhi	zero,5028
   4eb70:	0004ebf0 	cmpltui	zero,zero,5039
   4eb74:	0004e934 	movhi	zero,5028
   4eb78:	0004eb7c 	xorhi	zero,zero,5037
   4eb7c:	00800044 	movi	r2,1
   4eb80:	d8801215 	stw	r2,72(sp)
   4eb84:	1a000044 	addi	r8,r3,1
   4eb88:	da000c15 	stw	r8,48(sp)
   4eb8c:	18800047 	ldb	r2,1(r3)
   4eb90:	103f6d1e 	bne	r2,zero,4e948 <__alt_data_end+0xfffdc948>
   4eb94:	0007883a 	mov	r3,zero
   4eb98:	dd800c15 	stw	r22,48(sp)
   4eb9c:	d8001215 	stw	zero,72(sp)
   4eba0:	d9001117 	ldw	r4,68(sp)
   4eba4:	20000326 	beq	r4,zero,4ebb4 <_strtod_r+0x2e0>
   4eba8:	d9000c17 	ldw	r4,48(sp)
   4ebac:	d9401117 	ldw	r5,68(sp)
   4ebb0:	29000015 	stw	r4,0(r5)
   4ebb4:	d9001217 	ldw	r4,72(sp)
   4ebb8:	20000126 	beq	r4,zero,4ebc0 <_strtod_r+0x2ec>
   4ebbc:	18e0003c 	xorhi	r3,r3,32768
   4ebc0:	dfc01f17 	ldw	ra,124(sp)
   4ebc4:	df001e17 	ldw	fp,120(sp)
   4ebc8:	ddc01d17 	ldw	r23,116(sp)
   4ebcc:	dd801c17 	ldw	r22,112(sp)
   4ebd0:	dd401b17 	ldw	r21,108(sp)
   4ebd4:	dd001a17 	ldw	r20,104(sp)
   4ebd8:	dcc01917 	ldw	r19,100(sp)
   4ebdc:	dc801817 	ldw	r18,96(sp)
   4ebe0:	dc401717 	ldw	r17,92(sp)
   4ebe4:	dc001617 	ldw	r16,88(sp)
   4ebe8:	dec02004 	addi	sp,sp,128
   4ebec:	f800283a 	ret
   4ebf0:	d8001215 	stw	zero,72(sp)
   4ebf4:	003fe306 	br	4eb84 <__alt_data_end+0xfffdcb84>
   4ebf8:	18c00044 	addi	r3,r3,1
   4ebfc:	d8c00c15 	stw	r3,48(sp)
   4ec00:	003f4906 	br	4e928 <__alt_data_end+0xfffdc928>
   4ec04:	0005883a 	mov	r2,zero
   4ec08:	003fe206 	br	4eb94 <__alt_data_end+0xfffdcb94>
   4ec0c:	247f6016 	blt	r4,r17,4e990 <__alt_data_end+0xfffdc990>
   4ec10:	a50002a4 	muli	r20,r20,10
   4ec14:	d8c00c15 	stw	r3,48(sp)
   4ec18:	8c400044 	addi	r17,r17,1
   4ec1c:	a0a9883a 	add	r20,r20,r2
   4ec20:	18800007 	ldb	r2,0(r3)
   4ec24:	a53ff404 	addi	r20,r20,-48
   4ec28:	180d883a 	mov	r6,r3
   4ec2c:	100f883a 	mov	r7,r2
   4ec30:	48bf5d16 	blt	r9,r2,4e9a8 <__alt_data_end+0xfffdc9a8>
   4ec34:	00c00b84 	movi	r3,46
   4ec38:	10c0901e 	bne	r2,r3,4ee7c <_strtod_r+0x5a8>
   4ec3c:	30800044 	addi	r2,r6,1
   4ec40:	d8800c15 	stw	r2,48(sp)
   4ec44:	31c00047 	ldb	r7,1(r6)
   4ec48:	8802221e 	bne	r17,zero,4f4d4 <_strtod_r+0xc00>
   4ec4c:	00800c04 	movi	r2,48
   4ec50:	3883cd1e 	bne	r7,r2,4fb88 <_strtod_r+0x12b4>
   4ec54:	00800044 	movi	r2,1
   4ec58:	3813883a 	mov	r9,r7
   4ec5c:	1007883a 	mov	r3,r2
   4ec60:	10800044 	addi	r2,r2,1
   4ec64:	3089883a 	add	r4,r6,r2
   4ec68:	d9000c15 	stw	r4,48(sp)
   4ec6c:	30c9883a 	add	r4,r6,r3
   4ec70:	21c00047 	ldb	r7,1(r4)
   4ec74:	3a7ff926 	beq	r7,r9,4ec5c <__alt_data_end+0xfffdcc5c>
   4ec78:	38bff3c4 	addi	r2,r7,-49
   4ec7c:	01000204 	movi	r4,8
   4ec80:	20826d36 	bltu	r4,r2,4f638 <_strtod_r+0xd64>
   4ec84:	dcc00c17 	ldw	r19,48(sp)
   4ec88:	180d883a 	mov	r6,r3
   4ec8c:	0013883a 	mov	r9,zero
   4ec90:	9817883a 	mov	r11,r19
   4ec94:	00c00044 	movi	r3,1
   4ec98:	3a3ff404 	addi	r8,r7,-48
   4ec9c:	40001526 	beq	r8,zero,4ecf4 <_strtod_r+0x420>
   4eca0:	00800044 	movi	r2,1
   4eca4:	30cd883a 	add	r6,r6,r3
   4eca8:	18840126 	beq	r3,r2,4fcb0 <_strtod_r+0x13dc>
   4ecac:	48d5883a 	add	r10,r9,r3
   4ecb0:	52bfffc4 	addi	r10,r10,-1
   4ecb4:	4805883a 	mov	r2,r9
   4ecb8:	01c00204 	movi	r7,8
   4ecbc:	03000404 	movi	r12,16
   4ecc0:	10800044 	addi	r2,r2,1
   4ecc4:	113fffc4 	addi	r4,r2,-1
   4ecc8:	39028016 	blt	r7,r4,4f6cc <_strtod_r+0xdf8>
   4eccc:	948002a4 	muli	r18,r18,10
   4ecd0:	12bffb1e 	bne	r2,r10,4ecc0 <__alt_data_end+0xfffdccc0>
   4ecd4:	48c5883a 	add	r2,r9,r3
   4ecd8:	10bfffc4 	addi	r2,r2,-1
   4ecdc:	00c00204 	movi	r3,8
   4ece0:	12400044 	addi	r9,r2,1
   4ece4:	1883a216 	blt	r3,r2,4fb70 <_strtod_r+0x129c>
   4ece8:	948002a4 	muli	r18,r18,10
   4ecec:	0007883a 	mov	r3,zero
   4ecf0:	9225883a 	add	r18,r18,r8
   4ecf4:	58800044 	addi	r2,r11,1
   4ecf8:	d8800c15 	stw	r2,48(sp)
   4ecfc:	59c00047 	ldb	r7,1(r11)
   4ed00:	0001f806 	br	4f4e4 <_strtod_r+0xc10>
   4ed04:	18006b1e 	bne	r3,zero,4eeb4 <_strtod_r+0x5e0>
   4ed08:	28006a1e 	bne	r5,zero,4eeb4 <_strtod_r+0x5e0>
   4ed0c:	4002131e 	bne	r8,zero,4f55c <_strtod_r+0xc88>
   4ed10:	00801384 	movi	r2,78
   4ed14:	38838526 	beq	r7,r2,4fb2c <_strtod_r+0x1258>
   4ed18:	11c38016 	blt	r2,r7,4fb1c <_strtod_r+0x1248>
   4ed1c:	00801244 	movi	r2,73
   4ed20:	38820e1e 	bne	r7,r2,4f55c <_strtod_r+0xc88>
   4ed24:	d8800c17 	ldw	r2,48(sp)
   4ed28:	01000174 	movhi	r4,5
   4ed2c:	21186004 	addi	r4,r4,24960
   4ed30:	01801004 	movi	r6,64
   4ed34:	01c01684 	movi	r7,90
   4ed38:	21400007 	ldb	r5,0(r4)
   4ed3c:	21000044 	addi	r4,r4,1
   4ed40:	2803c126 	beq	r5,zero,4fc48 <_strtod_r+0x1374>
   4ed44:	10800044 	addi	r2,r2,1
   4ed48:	10c00007 	ldb	r3,0(r2)
   4ed4c:	30c0020e 	bge	r6,r3,4ed58 <_strtod_r+0x484>
   4ed50:	38c00116 	blt	r7,r3,4ed58 <_strtod_r+0x484>
   4ed54:	18c00804 	addi	r3,r3,32
   4ed58:	197ff726 	beq	r3,r5,4ed38 <__alt_data_end+0xfffdcd38>
   4ed5c:	0001ff06 	br	4f55c <_strtod_r+0xc88>
   4ed60:	40c00047 	ldb	r3,1(r8)
   4ed64:	01001604 	movi	r4,88
   4ed68:	19025b26 	beq	r3,r4,4f6d8 <_strtod_r+0xe04>
   4ed6c:	01001e04 	movi	r4,120
   4ed70:	19025926 	beq	r3,r4,4f6d8 <_strtod_r+0xe04>
   4ed74:	40c00044 	addi	r3,r8,1
   4ed78:	1009883a 	mov	r4,r2
   4ed7c:	d8c00c15 	stw	r3,48(sp)
   4ed80:	18800007 	ldb	r2,0(r3)
   4ed84:	1811883a 	mov	r8,r3
   4ed88:	18c00044 	addi	r3,r3,1
   4ed8c:	113ffb26 	beq	r2,r4,4ed7c <__alt_data_end+0xfffdcd7c>
   4ed90:	1001e126 	beq	r2,zero,4f518 <_strtod_r+0xc44>
   4ed94:	01400044 	movi	r5,1
   4ed98:	003eee06 	br	4e954 <__alt_data_end+0xfffdc954>
   4ed9c:	8800011e 	bne	r17,zero,4eda4 <_strtod_r+0x4d0>
   4eda0:	1801ed26 	beq	r3,zero,4f558 <_strtod_r+0xc84>
   4eda4:	dd800c17 	ldw	r22,48(sp)
   4eda8:	b0800044 	addi	r2,r22,1
   4edac:	d8800c15 	stw	r2,48(sp)
   4edb0:	b1c00047 	ldb	r7,1(r22)
   4edb4:	00800ac4 	movi	r2,43
   4edb8:	3881d526 	beq	r7,r2,4f510 <_strtod_r+0xc3c>
   4edbc:	00800b44 	movi	r2,45
   4edc0:	3881ce26 	beq	r7,r2,4f4fc <_strtod_r+0xc28>
   4edc4:	0015883a 	mov	r10,zero
   4edc8:	38bff404 	addi	r2,r7,-48
   4edcc:	01000244 	movi	r4,9
   4edd0:	2081bc36 	bltu	r4,r2,4f4c4 <_strtod_r+0xbf0>
   4edd4:	00800c04 	movi	r2,48
   4edd8:	3880071e 	bne	r7,r2,4edf8 <_strtod_r+0x524>
   4eddc:	d8800c17 	ldw	r2,48(sp)
   4ede0:	3809883a 	mov	r4,r7
   4ede4:	10800044 	addi	r2,r2,1
   4ede8:	d8800c15 	stw	r2,48(sp)
   4edec:	11c00007 	ldb	r7,0(r2)
   4edf0:	10800044 	addi	r2,r2,1
   4edf4:	393ffc26 	beq	r7,r4,4ede8 <__alt_data_end+0xfffdcde8>
   4edf8:	38bff3c4 	addi	r2,r7,-49
   4edfc:	01000204 	movi	r4,8
   4ee00:	20bef436 	bltu	r4,r2,4e9d4 <__alt_data_end+0xfffdc9d4>
   4ee04:	db400c17 	ldw	r13,48(sp)
   4ee08:	393ff404 	addi	r4,r7,-48
   4ee0c:	02c00bc4 	movi	r11,47
   4ee10:	6a400044 	addi	r9,r13,1
   4ee14:	da400c15 	stw	r9,48(sp)
   4ee18:	69c00047 	ldb	r7,1(r13)
   4ee1c:	59c00d0e 	bge	r11,r7,4ee54 <_strtod_r+0x580>
   4ee20:	03000e44 	movi	r12,57
   4ee24:	61c00b16 	blt	r12,r7,4ee54 <_strtod_r+0x580>
   4ee28:	68800084 	addi	r2,r13,2
   4ee2c:	00000206 	br	4ee38 <_strtod_r+0x564>
   4ee30:	10800044 	addi	r2,r2,1
   4ee34:	61c00716 	blt	r12,r7,4ee54 <_strtod_r+0x580>
   4ee38:	210002a4 	muli	r4,r4,10
   4ee3c:	d8800c15 	stw	r2,48(sp)
   4ee40:	1013883a 	mov	r9,r2
   4ee44:	21c9883a 	add	r4,r4,r7
   4ee48:	11c00007 	ldb	r7,0(r2)
   4ee4c:	213ff404 	addi	r4,r4,-48
   4ee50:	59fff716 	blt	r11,r7,4ee30 <__alt_data_end+0xfffdce30>
   4ee54:	4b53c83a 	sub	r9,r9,r13
   4ee58:	00800204 	movi	r2,8
   4ee5c:	1242fc16 	blt	r2,r9,4fa50 <_strtod_r+0x117c>
   4ee60:	009387c4 	movi	r2,19999
   4ee64:	1100010e 	bge	r2,r4,4ee6c <_strtod_r+0x598>
   4ee68:	1009883a 	mov	r4,r2
   4ee6c:	503eda26 	beq	r10,zero,4e9d8 <__alt_data_end+0xfffdc9d8>
   4ee70:	0109c83a 	sub	r4,zero,r4
   4ee74:	883ed91e 	bne	r17,zero,4e9dc <__alt_data_end+0xfffdc9dc>
   4ee78:	003fa206 	br	4ed04 <__alt_data_end+0xfffdcd04>
   4ee7c:	4027883a 	mov	r19,r8
   4ee80:	882b883a 	mov	r21,r17
   4ee84:	0007883a 	mov	r3,zero
   4ee88:	000d883a 	mov	r6,zero
   4ee8c:	0011883a 	mov	r8,zero
   4ee90:	003ece06 	br	4e9cc <__alt_data_end+0xfffdc9cc>
   4ee94:	00dffc34 	movhi	r3,32752
   4ee98:	d8c00715 	stw	r3,28(sp)
   4ee9c:	d8000615 	stw	zero,24(sp)
   4eea0:	1080020c 	andi	r2,r2,8
   4eea4:	10000326 	beq	r2,zero,4eeb4 <_strtod_r+0x5e0>
   4eea8:	d8800717 	ldw	r2,28(sp)
   4eeac:	10a00034 	orhi	r2,r2,32768
   4eeb0:	d8800715 	stw	r2,28(sp)
   4eeb4:	d8800617 	ldw	r2,24(sp)
   4eeb8:	d8c00717 	ldw	r3,28(sp)
   4eebc:	003f3806 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4eec0:	d9001017 	ldw	r4,64(sp)
   4eec4:	8dadc83a 	sub	r22,r17,r22
   4eec8:	25ad883a 	add	r22,r4,r22
   4eecc:	05829b0e 	bge	zero,r22,4f93c <_strtod_r+0x1068>
   4eed0:	b08003cc 	andi	r2,r22,15
   4eed4:	10000b26 	beq	r2,zero,4ef04 <_strtod_r+0x630>
   4eed8:	100490fa 	slli	r2,r2,3
   4eedc:	00c00174 	movhi	r3,5
   4eee0:	18d82b04 	addi	r3,r3,24748
   4eee4:	d9000617 	ldw	r4,24(sp)
   4eee8:	1885883a 	add	r2,r3,r2
   4eeec:	d9400717 	ldw	r5,28(sp)
   4eef0:	11800017 	ldw	r6,0(r2)
   4eef4:	11c00117 	ldw	r7,4(r2)
   4eef8:	0052f7c0 	call	52f7c <__muldf3>
   4eefc:	d8800615 	stw	r2,24(sp)
   4ef00:	d8c00715 	stw	r3,28(sp)
   4ef04:	00bffc04 	movi	r2,-16
   4ef08:	b0ac703a 	and	r22,r22,r2
   4ef0c:	b0019a1e 	bne	r22,zero,4f578 <_strtod_r+0xca4>
   4ef10:	0029883a 	mov	r20,zero
   4ef14:	8009883a 	mov	r4,r16
   4ef18:	980b883a 	mov	r5,r19
   4ef1c:	dc800015 	stw	r18,0(sp)
   4ef20:	a80d883a 	mov	r6,r21
   4ef24:	880f883a 	mov	r7,r17
   4ef28:	004cd240 	call	4cd24 <__s2b>
   4ef2c:	d9001017 	ldw	r4,64(sp)
   4ef30:	102d883a 	mov	r22,r2
   4ef34:	b1400304 	addi	r5,r22,12
   4ef38:	2005d7fa 	srai	r2,r4,31
   4ef3c:	0107c83a 	sub	r3,zero,r4
   4ef40:	d9401315 	stw	r5,76(sp)
   4ef44:	1886703a 	and	r3,r3,r2
   4ef48:	d8c00e15 	stw	r3,56(sp)
   4ef4c:	b1400117 	ldw	r5,4(r22)
   4ef50:	8009883a 	mov	r4,r16
   4ef54:	0027883a 	mov	r19,zero
   4ef58:	004cb400 	call	4cb40 <_Balloc>
   4ef5c:	b1800417 	ldw	r6,16(r22)
   4ef60:	d9401317 	ldw	r5,76(sp)
   4ef64:	11000304 	addi	r4,r2,12
   4ef68:	31800084 	addi	r6,r6,2
   4ef6c:	318d883a 	add	r6,r6,r6
   4ef70:	318d883a 	add	r6,r6,r6
   4ef74:	1025883a 	mov	r18,r2
   4ef78:	004c8440 	call	4c844 <memcpy>
   4ef7c:	d9400617 	ldw	r5,24(sp)
   4ef80:	d9800717 	ldw	r6,28(sp)
   4ef84:	d8800a04 	addi	r2,sp,40
   4ef88:	8009883a 	mov	r4,r16
   4ef8c:	d9c00d04 	addi	r7,sp,52
   4ef90:	d8800015 	stw	r2,0(sp)
   4ef94:	004d78c0 	call	4d78c <__d2b>
   4ef98:	8009883a 	mov	r4,r16
   4ef9c:	01400044 	movi	r5,1
   4efa0:	d8800b15 	stw	r2,44(sp)
   4efa4:	004cf400 	call	4cf40 <__i2b>
   4efa8:	d8c01017 	ldw	r3,64(sp)
   4efac:	1023883a 	mov	r17,r2
   4efb0:	00c0010e 	bge	zero,r3,4efb8 <_strtod_r+0x6e4>
   4efb4:	1827883a 	mov	r19,r3
   4efb8:	d8800d17 	ldw	r2,52(sp)
   4efbc:	1000de16 	blt	r2,zero,4f338 <_strtod_r+0xa64>
   4efc0:	d9000e17 	ldw	r4,56(sp)
   4efc4:	9807883a 	mov	r3,r19
   4efc8:	20af883a 	add	r23,r4,r2
   4efcc:	d9000a17 	ldw	r4,40(sp)
   4efd0:	1505c83a 	sub	r2,r2,r20
   4efd4:	017f00c4 	movi	r5,-1021
   4efd8:	110d883a 	add	r6,r2,r4
   4efdc:	31409a0e 	bge	r6,r5,4f248 <_strtod_r+0x974>
   4efe0:	10810cc4 	addi	r2,r2,1075
   4efe4:	b8b9883a 	add	fp,r23,r2
   4efe8:	1885883a 	add	r2,r3,r2
   4efec:	152b883a 	add	r21,r2,r20
   4eff0:	e005883a 	mov	r2,fp
   4eff4:	bf00010e 	bge	r23,fp,4effc <_strtod_r+0x728>
   4eff8:	b805883a 	mov	r2,r23
   4effc:	a880010e 	bge	r21,r2,4f004 <_strtod_r+0x730>
   4f000:	a805883a 	mov	r2,r21
   4f004:	0080030e 	bge	zero,r2,4f014 <_strtod_r+0x740>
   4f008:	e0b9c83a 	sub	fp,fp,r2
   4f00c:	a8abc83a 	sub	r21,r21,r2
   4f010:	b8afc83a 	sub	r23,r23,r2
   4f014:	d9400e17 	ldw	r5,56(sp)
   4f018:	28000f26 	beq	r5,zero,4f058 <_strtod_r+0x784>
   4f01c:	280d883a 	mov	r6,r5
   4f020:	8009883a 	mov	r4,r16
   4f024:	880b883a 	mov	r5,r17
   4f028:	004d15c0 	call	4d15c <__pow5mult>
   4f02c:	d9800b17 	ldw	r6,44(sp)
   4f030:	8009883a 	mov	r4,r16
   4f034:	100b883a 	mov	r5,r2
   4f038:	1023883a 	mov	r17,r2
   4f03c:	004cf7c0 	call	4cf7c <__multiply>
   4f040:	d9400b17 	ldw	r5,44(sp)
   4f044:	8009883a 	mov	r4,r16
   4f048:	d8801415 	stw	r2,80(sp)
   4f04c:	004cbe80 	call	4cbe8 <_Bfree>
   4f050:	d8801417 	ldw	r2,80(sp)
   4f054:	d8800b15 	stw	r2,44(sp)
   4f058:	0700050e 	bge	zero,fp,4f070 <_strtod_r+0x79c>
   4f05c:	d9400b17 	ldw	r5,44(sp)
   4f060:	8009883a 	mov	r4,r16
   4f064:	e00d883a 	mov	r6,fp
   4f068:	004d2880 	call	4d288 <__lshift>
   4f06c:	d8800b15 	stw	r2,44(sp)
   4f070:	98000526 	beq	r19,zero,4f088 <_strtod_r+0x7b4>
   4f074:	900b883a 	mov	r5,r18
   4f078:	8009883a 	mov	r4,r16
   4f07c:	980d883a 	mov	r6,r19
   4f080:	004d15c0 	call	4d15c <__pow5mult>
   4f084:	1025883a 	mov	r18,r2
   4f088:	0540050e 	bge	zero,r21,4f0a0 <_strtod_r+0x7cc>
   4f08c:	900b883a 	mov	r5,r18
   4f090:	8009883a 	mov	r4,r16
   4f094:	a80d883a 	mov	r6,r21
   4f098:	004d2880 	call	4d288 <__lshift>
   4f09c:	1025883a 	mov	r18,r2
   4f0a0:	05c0050e 	bge	zero,r23,4f0b8 <_strtod_r+0x7e4>
   4f0a4:	880b883a 	mov	r5,r17
   4f0a8:	8009883a 	mov	r4,r16
   4f0ac:	b80d883a 	mov	r6,r23
   4f0b0:	004d2880 	call	4d288 <__lshift>
   4f0b4:	1023883a 	mov	r17,r2
   4f0b8:	d9400b17 	ldw	r5,44(sp)
   4f0bc:	8009883a 	mov	r4,r16
   4f0c0:	900d883a 	mov	r6,r18
   4f0c4:	004d43c0 	call	4d43c <__mdiff>
   4f0c8:	1027883a 	mov	r19,r2
   4f0cc:	10800317 	ldw	r2,12(r2)
   4f0d0:	9809883a 	mov	r4,r19
   4f0d4:	98000315 	stw	zero,12(r19)
   4f0d8:	880b883a 	mov	r5,r17
   4f0dc:	d8800f15 	stw	r2,60(sp)
   4f0e0:	004d3e40 	call	4d3e4 <__mcmp>
   4f0e4:	1001bf16 	blt	r2,zero,4f7e4 <_strtod_r+0xf10>
   4f0e8:	1001ee26 	beq	r2,zero,4f8a4 <_strtod_r+0xfd0>
   4f0ec:	9809883a 	mov	r4,r19
   4f0f0:	880b883a 	mov	r5,r17
   4f0f4:	004d8d00 	call	4d8d0 <__ratio>
   4f0f8:	1009883a 	mov	r4,r2
   4f0fc:	180b883a 	mov	r5,r3
   4f100:	000d883a 	mov	r6,zero
   4f104:	01d00034 	movhi	r7,16384
   4f108:	102f883a 	mov	r23,r2
   4f10c:	1839883a 	mov	fp,r3
   4f110:	00535f00 	call	535f0 <__ledf2>
   4f114:	00804f16 	blt	zero,r2,4f254 <_strtod_r+0x980>
   4f118:	d9400f17 	ldw	r5,60(sp)
   4f11c:	28008926 	beq	r5,zero,4f344 <_strtod_r+0xa70>
   4f120:	da400717 	ldw	r9,28(sp)
   4f124:	05cffc34 	movhi	r23,16368
   4f128:	d8000815 	stw	zero,32(sp)
   4f12c:	ddc00915 	stw	r23,36(sp)
   4f130:	002b883a 	mov	r21,zero
   4f134:	4f1ffc2c 	andhi	fp,r9,32752
   4f138:	009ff834 	movhi	r2,32736
   4f13c:	e0805526 	beq	fp,r2,4f294 <_strtod_r+0x9c0>
   4f140:	a0001b26 	beq	r20,zero,4f1b0 <_strtod_r+0x8dc>
   4f144:	0081a834 	movhi	r2,1696
   4f148:	17001936 	bltu	r2,fp,4f1b0 <_strtod_r+0x8dc>
   4f14c:	a809883a 	mov	r4,r21
   4f150:	b80b883a 	mov	r5,r23
   4f154:	01bff034 	movhi	r6,65472
   4f158:	01d07834 	movhi	r7,16864
   4f15c:	39ffffc4 	addi	r7,r7,-1
   4f160:	00535f00 	call	535f0 <__ledf2>
   4f164:	00800d16 	blt	zero,r2,4f19c <_strtod_r+0x8c8>
   4f168:	a809883a 	mov	r4,r21
   4f16c:	b80b883a 	mov	r5,r23
   4f170:	0051e980 	call	51e98 <__fixunsdfsi>
   4f174:	1000d026 	beq	r2,zero,4f4b8 <_strtod_r+0xbe4>
   4f178:	1009883a 	mov	r4,r2
   4f17c:	00538440 	call	53844 <__floatunsidf>
   4f180:	102b883a 	mov	r21,r2
   4f184:	182f883a 	mov	r23,r3
   4f188:	d9400f17 	ldw	r5,60(sp)
   4f18c:	2800c81e 	bne	r5,zero,4f4b0 <_strtod_r+0xbdc>
   4f190:	b8a0003c 	xorhi	r2,r23,32768
   4f194:	dd400815 	stw	r21,32(sp)
   4f198:	d8800915 	stw	r2,36(sp)
   4f19c:	d8c00917 	ldw	r3,36(sp)
   4f1a0:	0081ac34 	movhi	r2,1712
   4f1a4:	1885883a 	add	r2,r3,r2
   4f1a8:	1705c83a 	sub	r2,r2,fp
   4f1ac:	d8800915 	stw	r2,36(sp)
   4f1b0:	d9000617 	ldw	r4,24(sp)
   4f1b4:	d9400717 	ldw	r5,28(sp)
   4f1b8:	004d5e40 	call	4d5e4 <__ulp>
   4f1bc:	da800617 	ldw	r10,24(sp)
   4f1c0:	da400717 	ldw	r9,28(sp)
   4f1c4:	d9800817 	ldw	r6,32(sp)
   4f1c8:	d9c00917 	ldw	r7,36(sp)
   4f1cc:	1009883a 	mov	r4,r2
   4f1d0:	180b883a 	mov	r5,r3
   4f1d4:	da401515 	stw	r9,84(sp)
   4f1d8:	da801415 	stw	r10,80(sp)
   4f1dc:	0052f7c0 	call	52f7c <__muldf3>
   4f1e0:	da401517 	ldw	r9,84(sp)
   4f1e4:	da801417 	ldw	r10,80(sp)
   4f1e8:	100d883a 	mov	r6,r2
   4f1ec:	480b883a 	mov	r5,r9
   4f1f0:	5009883a 	mov	r4,r10
   4f1f4:	180f883a 	mov	r7,r3
   4f1f8:	0052ec80 	call	52ec8 <__adddf3>
   4f1fc:	d8800615 	stw	r2,24(sp)
   4f200:	d8c00715 	stw	r3,28(sp)
   4f204:	1813883a 	mov	r9,r3
   4f208:	a000021e 	bne	r20,zero,4f214 <_strtod_r+0x940>
   4f20c:	489ffc2c 	andhi	r2,r9,32752
   4f210:	e0807226 	beq	fp,r2,4f3dc <_strtod_r+0xb08>
   4f214:	d9400b17 	ldw	r5,44(sp)
   4f218:	8009883a 	mov	r4,r16
   4f21c:	004cbe80 	call	4cbe8 <_Bfree>
   4f220:	8009883a 	mov	r4,r16
   4f224:	900b883a 	mov	r5,r18
   4f228:	004cbe80 	call	4cbe8 <_Bfree>
   4f22c:	8009883a 	mov	r4,r16
   4f230:	880b883a 	mov	r5,r17
   4f234:	004cbe80 	call	4cbe8 <_Bfree>
   4f238:	8009883a 	mov	r4,r16
   4f23c:	980b883a 	mov	r5,r19
   4f240:	004cbe80 	call	4cbe8 <_Bfree>
   4f244:	003f4106 	br	4ef4c <__alt_data_end+0xfffdcf4c>
   4f248:	00800d84 	movi	r2,54
   4f24c:	1105c83a 	sub	r2,r2,r4
   4f250:	003f6406 	br	4efe4 <__alt_data_end+0xfffdcfe4>
   4f254:	b809883a 	mov	r4,r23
   4f258:	e00b883a 	mov	r5,fp
   4f25c:	000d883a 	mov	r6,zero
   4f260:	01cff834 	movhi	r7,16352
   4f264:	0052f7c0 	call	52f7c <__muldf3>
   4f268:	d9000f17 	ldw	r4,60(sp)
   4f26c:	102b883a 	mov	r21,r2
   4f270:	182f883a 	mov	r23,r3
   4f274:	2000011e 	bne	r4,zero,4f27c <_strtod_r+0x9a8>
   4f278:	18e0003c 	xorhi	r3,r3,32768
   4f27c:	da400717 	ldw	r9,28(sp)
   4f280:	d8800815 	stw	r2,32(sp)
   4f284:	d8c00915 	stw	r3,36(sp)
   4f288:	4f1ffc2c 	andhi	fp,r9,32752
   4f28c:	009ff834 	movhi	r2,32736
   4f290:	e0bfab1e 	bne	fp,r2,4f140 <__alt_data_end+0xfffdd140>
   4f294:	d8800617 	ldw	r2,24(sp)
   4f298:	00ff2c34 	movhi	r3,64688
   4f29c:	48d3883a 	add	r9,r9,r3
   4f2a0:	1009883a 	mov	r4,r2
   4f2a4:	d8800415 	stw	r2,16(sp)
   4f2a8:	d8800717 	ldw	r2,28(sp)
   4f2ac:	480b883a 	mov	r5,r9
   4f2b0:	da400715 	stw	r9,28(sp)
   4f2b4:	d8800515 	stw	r2,20(sp)
   4f2b8:	004d5e40 	call	4d5e4 <__ulp>
   4f2bc:	da800617 	ldw	r10,24(sp)
   4f2c0:	da400717 	ldw	r9,28(sp)
   4f2c4:	d9800817 	ldw	r6,32(sp)
   4f2c8:	d9c00917 	ldw	r7,36(sp)
   4f2cc:	1009883a 	mov	r4,r2
   4f2d0:	180b883a 	mov	r5,r3
   4f2d4:	da401515 	stw	r9,84(sp)
   4f2d8:	da801415 	stw	r10,80(sp)
   4f2dc:	0052f7c0 	call	52f7c <__muldf3>
   4f2e0:	da801417 	ldw	r10,80(sp)
   4f2e4:	da401517 	ldw	r9,84(sp)
   4f2e8:	100d883a 	mov	r6,r2
   4f2ec:	5009883a 	mov	r4,r10
   4f2f0:	480b883a 	mov	r5,r9
   4f2f4:	180f883a 	mov	r7,r3
   4f2f8:	0052ec80 	call	52ec8 <__adddf3>
   4f2fc:	d8800615 	stw	r2,24(sp)
   4f300:	015f2834 	movhi	r5,31904
   4f304:	297fffc4 	addi	r5,r5,-1
   4f308:	189ffc2c 	andhi	r2,r3,32752
   4f30c:	2880642e 	bgeu	r5,r2,4f4a0 <_strtod_r+0xbcc>
   4f310:	d8800517 	ldw	r2,20(sp)
   4f314:	00dffc34 	movhi	r3,32752
   4f318:	18ffffc4 	addi	r3,r3,-1
   4f31c:	10c17926 	beq	r2,r3,4f904 <_strtod_r+0x1030>
   4f320:	011ffc34 	movhi	r4,32752
   4f324:	213fffc4 	addi	r4,r4,-1
   4f328:	00bfffc4 	movi	r2,-1
   4f32c:	d9000715 	stw	r4,28(sp)
   4f330:	d8800615 	stw	r2,24(sp)
   4f334:	003fb706 	br	4f214 <__alt_data_end+0xfffdd214>
   4f338:	9887c83a 	sub	r3,r19,r2
   4f33c:	ddc00e17 	ldw	r23,56(sp)
   4f340:	003f2206 	br	4efcc <__alt_data_end+0xfffdcfcc>
   4f344:	d8800617 	ldw	r2,24(sp)
   4f348:	10001a1e 	bne	r2,zero,4f3b4 <_strtod_r+0xae0>
   4f34c:	da400717 	ldw	r9,28(sp)
   4f350:	00c00434 	movhi	r3,16
   4f354:	18ffffc4 	addi	r3,r3,-1
   4f358:	48c4703a 	and	r2,r9,r3
   4f35c:	1000191e 	bne	r2,zero,4f3c4 <_strtod_r+0xaf0>
   4f360:	b809883a 	mov	r4,r23
   4f364:	e00b883a 	mov	r5,fp
   4f368:	000d883a 	mov	r6,zero
   4f36c:	01cffc34 	movhi	r7,16368
   4f370:	da401515 	stw	r9,84(sp)
   4f374:	00535940 	call	53594 <__ltdf2>
   4f378:	da401517 	ldw	r9,84(sp)
   4f37c:	1001af16 	blt	r2,zero,4fa3c <_strtod_r+0x1168>
   4f380:	b809883a 	mov	r4,r23
   4f384:	e00b883a 	mov	r5,fp
   4f388:	000d883a 	mov	r6,zero
   4f38c:	01cff834 	movhi	r7,16352
   4f390:	0052f7c0 	call	52f7c <__muldf3>
   4f394:	da401517 	ldw	r9,84(sp)
   4f398:	182f883a 	mov	r23,r3
   4f39c:	102b883a 	mov	r21,r2
   4f3a0:	1007883a 	mov	r3,r2
   4f3a4:	b8a0003c 	xorhi	r2,r23,32768
   4f3a8:	d8c00815 	stw	r3,32(sp)
   4f3ac:	d8800915 	stw	r2,36(sp)
   4f3b0:	003f6006 	br	4f134 <__alt_data_end+0xfffdd134>
   4f3b4:	00c00044 	movi	r3,1
   4f3b8:	da400717 	ldw	r9,28(sp)
   4f3bc:	10c0011e 	bne	r2,r3,4f3c4 <_strtod_r+0xaf0>
   4f3c0:	4800bd26 	beq	r9,zero,4f6b8 <_strtod_r+0xde4>
   4f3c4:	00affc34 	movhi	r2,49136
   4f3c8:	d8000815 	stw	zero,32(sp)
   4f3cc:	d8800915 	stw	r2,36(sp)
   4f3d0:	002b883a 	mov	r21,zero
   4f3d4:	05cffc34 	movhi	r23,16368
   4f3d8:	003f5606 	br	4f134 <__alt_data_end+0xfffdd134>
   4f3dc:	b80b883a 	mov	r5,r23
   4f3e0:	a809883a 	mov	r4,r21
   4f3e4:	da401515 	stw	r9,84(sp)
   4f3e8:	00537200 	call	53720 <__fixdfsi>
   4f3ec:	1009883a 	mov	r4,r2
   4f3f0:	005364c0 	call	5364c <__floatsidf>
   4f3f4:	b80b883a 	mov	r5,r23
   4f3f8:	a809883a 	mov	r4,r21
   4f3fc:	100d883a 	mov	r6,r2
   4f400:	180f883a 	mov	r7,r3
   4f404:	0052f1c0 	call	52f1c <__subdf3>
   4f408:	102f883a 	mov	r23,r2
   4f40c:	d8800f17 	ldw	r2,60(sp)
   4f410:	1839883a 	mov	fp,r3
   4f414:	da401517 	ldw	r9,84(sp)
   4f418:	1000021e 	bne	r2,zero,4f424 <_strtod_r+0xb50>
   4f41c:	d8800617 	ldw	r2,24(sp)
   4f420:	10004026 	beq	r2,zero,4f524 <_strtod_r+0xc50>
   4f424:	b809883a 	mov	r4,r23
   4f428:	e00b883a 	mov	r5,fp
   4f42c:	01a52834 	movhi	r6,38048
   4f430:	318d6544 	addi	r6,r6,13717
   4f434:	01cff834 	movhi	r7,16352
   4f438:	39ffffc4 	addi	r7,r7,-1
   4f43c:	00535940 	call	53594 <__ltdf2>
   4f440:	10000716 	blt	r2,zero,4f460 <_strtod_r+0xb8c>
   4f444:	b809883a 	mov	r4,r23
   4f448:	e00b883a 	mov	r5,fp
   4f44c:	018d6c34 	movhi	r6,13744
   4f450:	31b94d44 	addi	r6,r6,-6859
   4f454:	01cff834 	movhi	r7,16352
   4f458:	00534cc0 	call	534cc <__gtdf2>
   4f45c:	00bf6d0e 	bge	zero,r2,4f214 <__alt_data_end+0xfffdd214>
   4f460:	d9400b17 	ldw	r5,44(sp)
   4f464:	8009883a 	mov	r4,r16
   4f468:	004cbe80 	call	4cbe8 <_Bfree>
   4f46c:	8009883a 	mov	r4,r16
   4f470:	900b883a 	mov	r5,r18
   4f474:	004cbe80 	call	4cbe8 <_Bfree>
   4f478:	8009883a 	mov	r4,r16
   4f47c:	880b883a 	mov	r5,r17
   4f480:	004cbe80 	call	4cbe8 <_Bfree>
   4f484:	8009883a 	mov	r4,r16
   4f488:	b00b883a 	mov	r5,r22
   4f48c:	004cbe80 	call	4cbe8 <_Bfree>
   4f490:	8009883a 	mov	r4,r16
   4f494:	980b883a 	mov	r5,r19
   4f498:	004cbe80 	call	4cbe8 <_Bfree>
   4f49c:	003e8506 	br	4eeb4 <__alt_data_end+0xfffdceb4>
   4f4a0:	0240d434 	movhi	r9,848
   4f4a4:	1a53883a 	add	r9,r3,r9
   4f4a8:	da400715 	stw	r9,28(sp)
   4f4ac:	003f5606 	br	4f208 <__alt_data_end+0xfffdd208>
   4f4b0:	b805883a 	mov	r2,r23
   4f4b4:	003f3706 	br	4f194 <__alt_data_end+0xfffdd194>
   4f4b8:	002b883a 	mov	r21,zero
   4f4bc:	05cffc34 	movhi	r23,16368
   4f4c0:	003f3106 	br	4f188 <__alt_data_end+0xfffdd188>
   4f4c4:	dd800c15 	stw	r22,48(sp)
   4f4c8:	0009883a 	mov	r4,zero
   4f4cc:	883d431e 	bne	r17,zero,4e9dc <__alt_data_end+0xfffdc9dc>
   4f4d0:	003e0c06 	br	4ed04 <__alt_data_end+0xfffdcd04>
   4f4d4:	4027883a 	mov	r19,r8
   4f4d8:	8813883a 	mov	r9,r17
   4f4dc:	0007883a 	mov	r3,zero
   4f4e0:	000d883a 	mov	r6,zero
   4f4e4:	3a3ff404 	addi	r8,r7,-48
   4f4e8:	00800244 	movi	r2,9
   4f4ec:	12001e36 	bltu	r2,r8,4f568 <_strtod_r+0xc94>
   4f4f0:	18c00044 	addi	r3,r3,1
   4f4f4:	dac00c17 	ldw	r11,48(sp)
   4f4f8:	003de806 	br	4ec9c <__alt_data_end+0xfffdcc9c>
   4f4fc:	02800044 	movi	r10,1
   4f500:	b0800084 	addi	r2,r22,2
   4f504:	d8800c15 	stw	r2,48(sp)
   4f508:	b1c00087 	ldb	r7,2(r22)
   4f50c:	003e2e06 	br	4edc8 <__alt_data_end+0xfffdcdc8>
   4f510:	0015883a 	mov	r10,zero
   4f514:	003ffa06 	br	4f500 <__alt_data_end+0xfffdd500>
   4f518:	0005883a 	mov	r2,zero
   4f51c:	0007883a 	mov	r3,zero
   4f520:	003d9f06 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4f524:	00c00434 	movhi	r3,16
   4f528:	18ffffc4 	addi	r3,r3,-1
   4f52c:	48d2703a 	and	r9,r9,r3
   4f530:	483fbc1e 	bne	r9,zero,4f424 <__alt_data_end+0xfffdd424>
   4f534:	b809883a 	mov	r4,r23
   4f538:	e00b883a 	mov	r5,fp
   4f53c:	01a52834 	movhi	r6,38048
   4f540:	318d6544 	addi	r6,r6,13717
   4f544:	01cff434 	movhi	r7,16336
   4f548:	39ffffc4 	addi	r7,r7,-1
   4f54c:	00535940 	call	53594 <__ltdf2>
   4f550:	103f300e 	bge	r2,zero,4f214 <__alt_data_end+0xfffdd214>
   4f554:	003fc206 	br	4f460 <__alt_data_end+0xfffdd460>
   4f558:	283e121e 	bne	r5,zero,4eda4 <__alt_data_end+0xfffdcda4>
   4f55c:	d8800617 	ldw	r2,24(sp)
   4f560:	d8c00717 	ldw	r3,28(sp)
   4f564:	003d8c06 	br	4eb98 <__alt_data_end+0xfffdcb98>
   4f568:	882b883a 	mov	r21,r17
   4f56c:	02000044 	movi	r8,1
   4f570:	4823883a 	mov	r17,r9
   4f574:	003d1306 	br	4e9c4 <__alt_data_end+0xfffdc9c4>
   4f578:	00804d04 	movi	r2,308
   4f57c:	1580ea16 	blt	r2,r22,4f928 <_strtod_r+0x1054>
   4f580:	b02dd13a 	srai	r22,r22,4
   4f584:	02400044 	movi	r9,1
   4f588:	4d81c40e 	bge	r9,r22,4fc9c <_strtod_r+0x13c8>
   4f58c:	d8800617 	ldw	r2,24(sp)
   4f590:	d8c00717 	ldw	r3,28(sp)
   4f594:	01400174 	movhi	r5,5
   4f598:	29582104 	addi	r5,r5,24708
   4f59c:	d9400e15 	stw	r5,56(sp)
   4f5a0:	2839883a 	mov	fp,r5
   4f5a4:	002f883a 	mov	r23,zero
   4f5a8:	4829883a 	mov	r20,r9
   4f5ac:	b180004c 	andi	r6,r22,1
   4f5b0:	30000526 	beq	r6,zero,4f5c8 <_strtod_r+0xcf4>
   4f5b4:	e1800017 	ldw	r6,0(fp)
   4f5b8:	e1c00117 	ldw	r7,4(fp)
   4f5bc:	1009883a 	mov	r4,r2
   4f5c0:	180b883a 	mov	r5,r3
   4f5c4:	0052f7c0 	call	52f7c <__muldf3>
   4f5c8:	b02dd07a 	srai	r22,r22,1
   4f5cc:	bdc00044 	addi	r23,r23,1
   4f5d0:	e7000204 	addi	fp,fp,8
   4f5d4:	a5bff516 	blt	r20,r22,4f5ac <__alt_data_end+0xfffdd5ac>
   4f5d8:	d8800615 	stw	r2,24(sp)
   4f5dc:	d8c00715 	stw	r3,28(sp)
   4f5e0:	b81090fa 	slli	r8,r23,3
   4f5e4:	d8c00e17 	ldw	r3,56(sp)
   4f5e8:	d9400717 	ldw	r5,28(sp)
   4f5ec:	d9000617 	ldw	r4,24(sp)
   4f5f0:	1a29883a 	add	r20,r3,r8
   4f5f4:	a1800017 	ldw	r6,0(r20)
   4f5f8:	a1c00117 	ldw	r7,4(r20)
   4f5fc:	00bf2c34 	movhi	r2,64688
   4f600:	288b883a 	add	r5,r5,r2
   4f604:	0052f7c0 	call	52f7c <__muldf3>
   4f608:	d8800615 	stw	r2,24(sp)
   4f60c:	011f2834 	movhi	r4,31904
   4f610:	189ffc2c 	andhi	r2,r3,32752
   4f614:	2080c436 	bltu	r4,r2,4f928 <_strtod_r+0x1054>
   4f618:	011f2434 	movhi	r4,31888
   4f61c:	20815c2e 	bgeu	r4,r2,4fb90 <_strtod_r+0x12bc>
   4f620:	009ffc34 	movhi	r2,32752
   4f624:	10bfffc4 	addi	r2,r2,-1
   4f628:	d8800715 	stw	r2,28(sp)
   4f62c:	00bfffc4 	movi	r2,-1
   4f630:	d8800615 	stw	r2,24(sp)
   4f634:	003e3606 	br	4ef10 <__alt_data_end+0xfffdcf10>
   4f638:	4027883a 	mov	r19,r8
   4f63c:	002b883a 	mov	r21,zero
   4f640:	000d883a 	mov	r6,zero
   4f644:	02000044 	movi	r8,1
   4f648:	003cde06 	br	4e9c4 <__alt_data_end+0xfffdc9c4>
   4f64c:	d8800717 	ldw	r2,28(sp)
   4f650:	00c00434 	movhi	r3,16
   4f654:	18ffffc4 	addi	r3,r3,-1
   4f658:	10c6703a 	and	r3,r2,r3
   4f65c:	1801421e 	bne	r3,zero,4fb68 <_strtod_r+0x1294>
   4f660:	d8c00617 	ldw	r3,24(sp)
   4f664:	18007a26 	beq	r3,zero,4f850 <_strtod_r+0xf7c>
   4f668:	18c0004c 	andi	r3,r3,1
   4f66c:	1800a326 	beq	r3,zero,4f8fc <_strtod_r+0x1028>
   4f670:	df000617 	ldw	fp,24(sp)
   4f674:	dd400717 	ldw	r21,28(sp)
   4f678:	e009883a 	mov	r4,fp
   4f67c:	a80b883a 	mov	r5,r21
   4f680:	004d5e40 	call	4d5e4 <__ulp>
   4f684:	e009883a 	mov	r4,fp
   4f688:	a80b883a 	mov	r5,r21
   4f68c:	100d883a 	mov	r6,r2
   4f690:	180f883a 	mov	r7,r3
   4f694:	0052f1c0 	call	52f1c <__subdf3>
   4f698:	1009883a 	mov	r4,r2
   4f69c:	180b883a 	mov	r5,r3
   4f6a0:	000d883a 	mov	r6,zero
   4f6a4:	000f883a 	mov	r7,zero
   4f6a8:	d8800615 	stw	r2,24(sp)
   4f6ac:	d8c00715 	stw	r3,28(sp)
   4f6b0:	00534140 	call	53414 <__eqdf2>
   4f6b4:	1000911e 	bne	r2,zero,4f8fc <_strtod_r+0x1028>
   4f6b8:	d8000615 	stw	zero,24(sp)
   4f6bc:	d8000715 	stw	zero,28(sp)
   4f6c0:	00800884 	movi	r2,34
   4f6c4:	80800015 	stw	r2,0(r16)
   4f6c8:	003f6506 	br	4f460 <__alt_data_end+0xfffdd460>
   4f6cc:	60bd8016 	blt	r12,r2,4ecd0 <__alt_data_end+0xfffdccd0>
   4f6d0:	a50002a4 	muli	r20,r20,10
   4f6d4:	003d7e06 	br	4ecd0 <__alt_data_end+0xfffdccd0>
   4f6d8:	d8c01217 	ldw	r3,72(sp)
   4f6dc:	d8800b04 	addi	r2,sp,44
   4f6e0:	04800174 	movhi	r18,5
   4f6e4:	949ac604 	addi	r18,r18,27416
   4f6e8:	d8800015 	stw	r2,0(sp)
   4f6ec:	d8c00115 	stw	r3,4(sp)
   4f6f0:	8009883a 	mov	r4,r16
   4f6f4:	d9400c04 	addi	r5,sp,48
   4f6f8:	900d883a 	mov	r6,r18
   4f6fc:	d9c00a04 	addi	r7,sp,40
   4f700:	00513300 	call	51330 <__gethex>
   4f704:	144001cc 	andi	r17,r2,7
   4f708:	883dea26 	beq	r17,zero,4eeb4 <__alt_data_end+0xfffdceb4>
   4f70c:	00c00184 	movi	r3,6
   4f710:	88c0f226 	beq	r17,r3,4fadc <_strtod_r+0x1208>
   4f714:	d9800b17 	ldw	r6,44(sp)
   4f718:	30000826 	beq	r6,zero,4f73c <_strtod_r+0xe68>
   4f71c:	91400017 	ldw	r5,0(r18)
   4f720:	d9000204 	addi	r4,sp,8
   4f724:	d8801415 	stw	r2,80(sp)
   4f728:	004d9e80 	call	4d9e8 <__copybits>
   4f72c:	d9400b17 	ldw	r5,44(sp)
   4f730:	8009883a 	mov	r4,r16
   4f734:	004cbe80 	call	4cbe8 <_Bfree>
   4f738:	d8801417 	ldw	r2,80(sp)
   4f73c:	00c00184 	movi	r3,6
   4f740:	d9000a17 	ldw	r4,40(sp)
   4f744:	1c7dd636 	bltu	r3,r17,4eea0 <__alt_data_end+0xfffdcea0>
   4f748:	8c63883a 	add	r17,r17,r17
   4f74c:	8c63883a 	add	r17,r17,r17
   4f750:	00c00174 	movhi	r3,5
   4f754:	18fdd904 	addi	r3,r3,-2204
   4f758:	88c7883a 	add	r3,r17,r3
   4f75c:	18c00017 	ldw	r3,0(r3)
   4f760:	1800683a 	jmp	r3
   4f764:	0004f7d8 	cmpnei	zero,zero,5087
   4f768:	0004f794 	movui	zero,5086
   4f76c:	0004f780 	call	4f78 <__reset-0x3b088>
   4f770:	0004ee94 	movui	zero,5050
   4f774:	0004f7c0 	call	4f7c <__reset-0x3b084>
   4f778:	0004f794 	movui	zero,5086
   4f77c:	0004f7d8 	cmpnei	zero,zero,5087
   4f780:	d8c00217 	ldw	r3,8(sp)
   4f784:	d8c00615 	stw	r3,24(sp)
   4f788:	d8c00317 	ldw	r3,12(sp)
   4f78c:	d8c00715 	stw	r3,28(sp)
   4f790:	003dc306 	br	4eea0 <__alt_data_end+0xfffdcea0>
   4f794:	21010cc4 	addi	r4,r4,1075
   4f798:	d9400317 	ldw	r5,12(sp)
   4f79c:	2008953a 	slli	r4,r4,20
   4f7a0:	00fffc34 	movhi	r3,65520
   4f7a4:	18ffffc4 	addi	r3,r3,-1
   4f7a8:	28c6703a 	and	r3,r5,r3
   4f7ac:	20c6b03a 	or	r3,r4,r3
   4f7b0:	d9000217 	ldw	r4,8(sp)
   4f7b4:	d8c00715 	stw	r3,28(sp)
   4f7b8:	d9000615 	stw	r4,24(sp)
   4f7bc:	003db806 	br	4eea0 <__alt_data_end+0xfffdcea0>
   4f7c0:	00e00034 	movhi	r3,32768
   4f7c4:	18ffffc4 	addi	r3,r3,-1
   4f7c8:	d8c00715 	stw	r3,28(sp)
   4f7cc:	00ffffc4 	movi	r3,-1
   4f7d0:	d8c00615 	stw	r3,24(sp)
   4f7d4:	003db206 	br	4eea0 <__alt_data_end+0xfffdcea0>
   4f7d8:	d8000715 	stw	zero,28(sp)
   4f7dc:	d8000615 	stw	zero,24(sp)
   4f7e0:	003daf06 	br	4eea0 <__alt_data_end+0xfffdcea0>
   4f7e4:	d8c00f17 	ldw	r3,60(sp)
   4f7e8:	1800441e 	bne	r3,zero,4f8fc <_strtod_r+0x1028>
   4f7ec:	d8800617 	ldw	r2,24(sp)
   4f7f0:	1000421e 	bne	r2,zero,4f8fc <_strtod_r+0x1028>
   4f7f4:	d8800717 	ldw	r2,28(sp)
   4f7f8:	00c00434 	movhi	r3,16
   4f7fc:	18ffffc4 	addi	r3,r3,-1
   4f800:	10c6703a 	and	r3,r2,r3
   4f804:	18003d1e 	bne	r3,zero,4f8fc <_strtod_r+0x1028>
   4f808:	109ffc2c 	andhi	r2,r2,32752
   4f80c:	00c1ac34 	movhi	r3,1712
   4f810:	18803a2e 	bgeu	r3,r2,4f8fc <_strtod_r+0x1028>
   4f814:	98800517 	ldw	r2,20(r19)
   4f818:	1000031e 	bne	r2,zero,4f828 <_strtod_r+0xf54>
   4f81c:	98800417 	ldw	r2,16(r19)
   4f820:	00c00044 	movi	r3,1
   4f824:	1880350e 	bge	r3,r2,4f8fc <_strtod_r+0x1028>
   4f828:	980b883a 	mov	r5,r19
   4f82c:	8009883a 	mov	r4,r16
   4f830:	01800044 	movi	r6,1
   4f834:	004d2880 	call	4d288 <__lshift>
   4f838:	1009883a 	mov	r4,r2
   4f83c:	880b883a 	mov	r5,r17
   4f840:	1027883a 	mov	r19,r2
   4f844:	004d3e40 	call	4d3e4 <__mcmp>
   4f848:	00802c0e 	bge	zero,r2,4f8fc <_strtod_r+0x1028>
   4f84c:	d8800717 	ldw	r2,28(sp)
   4f850:	109ffc2c 	andhi	r2,r2,32752
   4f854:	a000e926 	beq	r20,zero,4fbfc <_strtod_r+0x1328>
   4f858:	00c1ac34 	movhi	r3,1712
   4f85c:	1880e736 	bltu	r3,r2,4fbfc <_strtod_r+0x1328>
   4f860:	00c0dc34 	movhi	r3,880
   4f864:	18bf942e 	bgeu	r3,r2,4f6b8 <__alt_data_end+0xfffdd6b8>
   4f868:	d9000617 	ldw	r4,24(sp)
   4f86c:	d9400717 	ldw	r5,28(sp)
   4f870:	008e5434 	movhi	r2,14672
   4f874:	000d883a 	mov	r6,zero
   4f878:	100f883a 	mov	r7,r2
   4f87c:	d8800515 	stw	r2,20(sp)
   4f880:	d8000415 	stw	zero,16(sp)
   4f884:	0052f7c0 	call	52f7c <__muldf3>
   4f888:	d8800615 	stw	r2,24(sp)
   4f88c:	d8c00715 	stw	r3,28(sp)
   4f890:	183ef31e 	bne	r3,zero,4f460 <__alt_data_end+0xfffdd460>
   4f894:	103ef21e 	bne	r2,zero,4f460 <__alt_data_end+0xfffdd460>
   4f898:	00800884 	movi	r2,34
   4f89c:	80800015 	stw	r2,0(r16)
   4f8a0:	003eef06 	br	4f460 <__alt_data_end+0xfffdd460>
   4f8a4:	d9000f17 	ldw	r4,60(sp)
   4f8a8:	203f6826 	beq	r4,zero,4f64c <__alt_data_end+0xfffdd64c>
   4f8ac:	d8c00717 	ldw	r3,28(sp)
   4f8b0:	00800434 	movhi	r2,16
   4f8b4:	10bfffc4 	addi	r2,r2,-1
   4f8b8:	1888703a 	and	r4,r3,r2
   4f8bc:	2080b926 	beq	r4,r2,4fba4 <_strtod_r+0x12d0>
   4f8c0:	d8800617 	ldw	r2,24(sp)
   4f8c4:	1080004c 	andi	r2,r2,1
   4f8c8:	10000c26 	beq	r2,zero,4f8fc <_strtod_r+0x1028>
   4f8cc:	df000617 	ldw	fp,24(sp)
   4f8d0:	dd400717 	ldw	r21,28(sp)
   4f8d4:	e009883a 	mov	r4,fp
   4f8d8:	a80b883a 	mov	r5,r21
   4f8dc:	004d5e40 	call	4d5e4 <__ulp>
   4f8e0:	e009883a 	mov	r4,fp
   4f8e4:	a80b883a 	mov	r5,r21
   4f8e8:	100d883a 	mov	r6,r2
   4f8ec:	180f883a 	mov	r7,r3
   4f8f0:	0052ec80 	call	52ec8 <__adddf3>
   4f8f4:	d8800615 	stw	r2,24(sp)
   4f8f8:	d8c00715 	stw	r3,28(sp)
   4f8fc:	a03fda1e 	bne	r20,zero,4f868 <__alt_data_end+0xfffdd868>
   4f900:	003ed706 	br	4f460 <__alt_data_end+0xfffdd460>
   4f904:	d8c00417 	ldw	r3,16(sp)
   4f908:	00bfffc4 	movi	r2,-1
   4f90c:	18be841e 	bne	r3,r2,4f320 <__alt_data_end+0xfffdd320>
   4f910:	00800884 	movi	r2,34
   4f914:	80800015 	stw	r2,0(r16)
   4f918:	009ffc34 	movhi	r2,32752
   4f91c:	d8800715 	stw	r2,28(sp)
   4f920:	d8000615 	stw	zero,24(sp)
   4f924:	003ece06 	br	4f460 <__alt_data_end+0xfffdd460>
   4f928:	00800884 	movi	r2,34
   4f92c:	80800015 	stw	r2,0(r16)
   4f930:	00dffc34 	movhi	r3,32752
   4f934:	0005883a 	mov	r2,zero
   4f938:	003c9906 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4f93c:	b03d7426 	beq	r22,zero,4ef10 <__alt_data_end+0xfffdcf10>
   4f940:	05adc83a 	sub	r22,zero,r22
   4f944:	b08003cc 	andi	r2,r22,15
   4f948:	10000b26 	beq	r2,zero,4f978 <_strtod_r+0x10a4>
   4f94c:	100490fa 	slli	r2,r2,3
   4f950:	00c00174 	movhi	r3,5
   4f954:	18d82b04 	addi	r3,r3,24748
   4f958:	d9000617 	ldw	r4,24(sp)
   4f95c:	1885883a 	add	r2,r3,r2
   4f960:	d9400717 	ldw	r5,28(sp)
   4f964:	11800017 	ldw	r6,0(r2)
   4f968:	11c00117 	ldw	r7,4(r2)
   4f96c:	00532600 	call	53260 <__divdf3>
   4f970:	d8800615 	stw	r2,24(sp)
   4f974:	d8c00715 	stw	r3,28(sp)
   4f978:	b02dd13a 	srai	r22,r22,4
   4f97c:	b03d6426 	beq	r22,zero,4ef10 <__alt_data_end+0xfffdcf10>
   4f980:	008007c4 	movi	r2,31
   4f984:	15802816 	blt	r2,r22,4fa28 <_strtod_r+0x1154>
   4f988:	b080040c 	andi	r2,r22,16
   4f98c:	1000ca1e 	bne	r2,zero,4fcb8 <_strtod_r+0x13e4>
   4f990:	0029883a 	mov	r20,zero
   4f994:	0580100e 	bge	zero,r22,4f9d8 <_strtod_r+0x1104>
   4f998:	d8800617 	ldw	r2,24(sp)
   4f99c:	d8c00717 	ldw	r3,28(sp)
   4f9a0:	07000174 	movhi	fp,5
   4f9a4:	e7186404 	addi	fp,fp,24976
   4f9a8:	b180004c 	andi	r6,r22,1
   4f9ac:	30000526 	beq	r6,zero,4f9c4 <_strtod_r+0x10f0>
   4f9b0:	e1800017 	ldw	r6,0(fp)
   4f9b4:	e1c00117 	ldw	r7,4(fp)
   4f9b8:	1009883a 	mov	r4,r2
   4f9bc:	180b883a 	mov	r5,r3
   4f9c0:	0052f7c0 	call	52f7c <__muldf3>
   4f9c4:	b02dd07a 	srai	r22,r22,1
   4f9c8:	e7000204 	addi	fp,fp,8
   4f9cc:	b03ff61e 	bne	r22,zero,4f9a8 <__alt_data_end+0xfffdd9a8>
   4f9d0:	d8800615 	stw	r2,24(sp)
   4f9d4:	d8c00715 	stw	r3,28(sp)
   4f9d8:	a0000d26 	beq	r20,zero,4fa10 <_strtod_r+0x113c>
   4f9dc:	d8c00717 	ldw	r3,28(sp)
   4f9e0:	01001ac4 	movi	r4,107
   4f9e4:	189ffc2c 	andhi	r2,r3,32752
   4f9e8:	1004d53a 	srli	r2,r2,20
   4f9ec:	2085c83a 	sub	r2,r4,r2
   4f9f0:	0080070e 	bge	zero,r2,4fa10 <_strtod_r+0x113c>
   4f9f4:	010007c4 	movi	r4,31
   4f9f8:	2080c00e 	bge	r4,r2,4fcfc <_strtod_r+0x1428>
   4f9fc:	d8000615 	stw	zero,24(sp)
   4fa00:	01000d04 	movi	r4,52
   4fa04:	2080c30e 	bge	r4,r2,4fd14 <_strtod_r+0x1440>
   4fa08:	0080dc34 	movhi	r2,880
   4fa0c:	d8800715 	stw	r2,28(sp)
   4fa10:	d9000617 	ldw	r4,24(sp)
   4fa14:	d9400717 	ldw	r5,28(sp)
   4fa18:	000d883a 	mov	r6,zero
   4fa1c:	000f883a 	mov	r7,zero
   4fa20:	00534140 	call	53414 <__eqdf2>
   4fa24:	103d3b1e 	bne	r2,zero,4ef14 <__alt_data_end+0xfffdcf14>
   4fa28:	00800884 	movi	r2,34
   4fa2c:	80800015 	stw	r2,0(r16)
   4fa30:	0007883a 	mov	r3,zero
   4fa34:	0005883a 	mov	r2,zero
   4fa38:	003c5906 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4fa3c:	0007883a 	mov	r3,zero
   4fa40:	00aff834 	movhi	r2,49120
   4fa44:	002b883a 	mov	r21,zero
   4fa48:	05cff834 	movhi	r23,16352
   4fa4c:	003e5606 	br	4f3a8 <__alt_data_end+0xfffdd3a8>
   4fa50:	011387c4 	movi	r4,19999
   4fa54:	003d0506 	br	4ee6c <__alt_data_end+0xfffdce6c>
   4fa58:	400d883a 	mov	r6,r8
   4fa5c:	0029883a 	mov	r20,zero
   4fa60:	0025883a 	mov	r18,zero
   4fa64:	0023883a 	mov	r17,zero
   4fa68:	003c7206 	br	4ec34 <__alt_data_end+0xfffdcc34>
   4fa6c:	0029883a 	mov	r20,zero
   4fa70:	0025883a 	mov	r18,zero
   4fa74:	0023883a 	mov	r17,zero
   4fa78:	003bcd06 	br	4e9b0 <__alt_data_end+0xfffdc9b0>
   4fa7c:	d9001017 	ldw	r4,64(sp)
   4fa80:	00c00944 	movi	r3,37
   4fa84:	1c47c83a 	sub	r3,r3,r17
   4fa88:	193d0d16 	blt	r3,r4,4eec0 <__alt_data_end+0xfffdcec0>
   4fa8c:	1463c83a 	sub	r17,r2,r17
   4fa90:	880490fa 	slli	r2,r17,3
   4fa94:	04000174 	movhi	r16,5
   4fa98:	84182b04 	addi	r16,r16,24748
   4fa9c:	d9000617 	ldw	r4,24(sp)
   4faa0:	8085883a 	add	r2,r16,r2
   4faa4:	d9400717 	ldw	r5,28(sp)
   4faa8:	11800017 	ldw	r6,0(r2)
   4faac:	11c00117 	ldw	r7,4(r2)
   4fab0:	0052f7c0 	call	52f7c <__muldf3>
   4fab4:	d9401017 	ldw	r5,64(sp)
   4fab8:	1009883a 	mov	r4,r2
   4fabc:	2c4dc83a 	sub	r6,r5,r17
   4fac0:	300c90fa 	slli	r6,r6,3
   4fac4:	180b883a 	mov	r5,r3
   4fac8:	81a1883a 	add	r16,r16,r6
   4facc:	81800017 	ldw	r6,0(r16)
   4fad0:	81c00117 	ldw	r7,4(r16)
   4fad4:	0052f7c0 	call	52f7c <__muldf3>
   4fad8:	003c3106 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4fadc:	dd800c15 	stw	r22,48(sp)
   4fae0:	d8001215 	stw	zero,72(sp)
   4fae4:	003cf306 	br	4eeb4 <__alt_data_end+0xfffdceb4>
   4fae8:	d8c01017 	ldw	r3,64(sp)
   4faec:	00bffa84 	movi	r2,-22
   4faf0:	18bcf316 	blt	r3,r2,4eec0 <__alt_data_end+0xfffdcec0>
   4faf4:	180490fa 	slli	r2,r3,3
   4faf8:	00c00174 	movhi	r3,5
   4fafc:	18d82b04 	addi	r3,r3,24748
   4fb00:	d9000617 	ldw	r4,24(sp)
   4fb04:	1885c83a 	sub	r2,r3,r2
   4fb08:	d9400717 	ldw	r5,28(sp)
   4fb0c:	11800017 	ldw	r6,0(r2)
   4fb10:	11c00117 	ldw	r7,4(r2)
   4fb14:	00532600 	call	53260 <__divdf3>
   4fb18:	003c2106 	br	4eba0 <__alt_data_end+0xfffdcba0>
   4fb1c:	00801a44 	movi	r2,105
   4fb20:	38bc8026 	beq	r7,r2,4ed24 <__alt_data_end+0xfffdcd24>
   4fb24:	00801b84 	movi	r2,110
   4fb28:	38be8c1e 	bne	r7,r2,4f55c <__alt_data_end+0xfffdd55c>
   4fb2c:	d8c00c17 	ldw	r3,48(sp)
   4fb30:	01000174 	movhi	r4,5
   4fb34:	21186304 	addi	r4,r4,24972
   4fb38:	01801004 	movi	r6,64
   4fb3c:	01c01684 	movi	r7,90
   4fb40:	21400007 	ldb	r5,0(r4)
   4fb44:	21000044 	addi	r4,r4,1
   4fb48:	28003626 	beq	r5,zero,4fc24 <_strtod_r+0x1350>
   4fb4c:	18c00044 	addi	r3,r3,1
   4fb50:	18800007 	ldb	r2,0(r3)
   4fb54:	3080020e 	bge	r6,r2,4fb60 <_strtod_r+0x128c>
   4fb58:	38800116 	blt	r7,r2,4fb60 <_strtod_r+0x128c>
   4fb5c:	10800804 	addi	r2,r2,32
   4fb60:	117ff726 	beq	r2,r5,4fb40 <__alt_data_end+0xfffddb40>
   4fb64:	003e7d06 	br	4f55c <__alt_data_end+0xfffdd55c>
   4fb68:	d8c00617 	ldw	r3,24(sp)
   4fb6c:	003ebe06 	br	4f668 <__alt_data_end+0xfffdd668>
   4fb70:	00800404 	movi	r2,16
   4fb74:	12401f16 	blt	r2,r9,4fbf4 <_strtod_r+0x1320>
   4fb78:	a50002a4 	muli	r20,r20,10
   4fb7c:	0007883a 	mov	r3,zero
   4fb80:	a229883a 	add	r20,r20,r8
   4fb84:	003c5b06 	br	4ecf4 <__alt_data_end+0xfffdccf4>
   4fb88:	0007883a 	mov	r3,zero
   4fb8c:	003c3a06 	br	4ec78 <__alt_data_end+0xfffdcc78>
   4fb90:	0080d434 	movhi	r2,848
   4fb94:	1887883a 	add	r3,r3,r2
   4fb98:	d8c00715 	stw	r3,28(sp)
   4fb9c:	0029883a 	mov	r20,zero
   4fba0:	003cdc06 	br	4ef14 <__alt_data_end+0xfffdcf14>
   4fba4:	d8800617 	ldw	r2,24(sp)
   4fba8:	a0001026 	beq	r20,zero,4fbec <_strtod_r+0x1318>
   4fbac:	191ffc2c 	andhi	r4,r3,32752
   4fbb0:	0141a834 	movhi	r5,1696
   4fbb4:	29000d36 	bltu	r5,r4,4fbec <_strtod_r+0x1318>
   4fbb8:	2008d53a 	srli	r4,r4,20
   4fbbc:	01401ac4 	movi	r5,107
   4fbc0:	2909c83a 	sub	r4,r5,r4
   4fbc4:	017fffc4 	movi	r5,-1
   4fbc8:	2908983a 	sll	r4,r5,r4
   4fbcc:	113f3d1e 	bne	r2,r4,4f8c4 <__alt_data_end+0xfffdd8c4>
   4fbd0:	18dffc2c 	andhi	r3,r3,32752
   4fbd4:	00800434 	movhi	r2,16
   4fbd8:	1885883a 	add	r2,r3,r2
   4fbdc:	d8800715 	stw	r2,28(sp)
   4fbe0:	d8000615 	stw	zero,24(sp)
   4fbe4:	a03f201e 	bne	r20,zero,4f868 <__alt_data_end+0xfffdd868>
   4fbe8:	003e1d06 	br	4f460 <__alt_data_end+0xfffdd460>
   4fbec:	013fffc4 	movi	r4,-1
   4fbf0:	003ff606 	br	4fbcc <__alt_data_end+0xfffddbcc>
   4fbf4:	0007883a 	mov	r3,zero
   4fbf8:	003c3e06 	br	4ecf4 <__alt_data_end+0xfffdccf4>
   4fbfc:	00fffc34 	movhi	r3,65520
   4fc00:	10c5883a 	add	r2,r2,r3
   4fc04:	00c00434 	movhi	r3,16
   4fc08:	18ffffc4 	addi	r3,r3,-1
   4fc0c:	10c4b03a 	or	r2,r2,r3
   4fc10:	d8800715 	stw	r2,28(sp)
   4fc14:	00bfffc4 	movi	r2,-1
   4fc18:	d8800615 	stw	r2,24(sp)
   4fc1c:	a03f121e 	bne	r20,zero,4f868 <__alt_data_end+0xfffdd868>
   4fc20:	003e0f06 	br	4f460 <__alt_data_end+0xfffdd460>
   4fc24:	18800044 	addi	r2,r3,1
   4fc28:	d8800c15 	stw	r2,48(sp)
   4fc2c:	18c00047 	ldb	r3,1(r3)
   4fc30:	00800a04 	movi	r2,40
   4fc34:	18802426 	beq	r3,r2,4fcc8 <_strtod_r+0x13f4>
   4fc38:	00bffe34 	movhi	r2,65528
   4fc3c:	d8800715 	stw	r2,28(sp)
   4fc40:	d8000615 	stw	zero,24(sp)
   4fc44:	003c9b06 	br	4eeb4 <__alt_data_end+0xfffdceb4>
   4fc48:	1011883a 	mov	r8,r2
   4fc4c:	d8800c15 	stw	r2,48(sp)
   4fc50:	01000174 	movhi	r4,5
   4fc54:	21186104 	addi	r4,r4,24964
   4fc58:	01801004 	movi	r6,64
   4fc5c:	01c01684 	movi	r7,90
   4fc60:	21400007 	ldb	r5,0(r4)
   4fc64:	10800044 	addi	r2,r2,1
   4fc68:	21000044 	addi	r4,r4,1
   4fc6c:	28001426 	beq	r5,zero,4fcc0 <_strtod_r+0x13ec>
   4fc70:	10c00007 	ldb	r3,0(r2)
   4fc74:	30c0020e 	bge	r6,r3,4fc80 <_strtod_r+0x13ac>
   4fc78:	38c00116 	blt	r7,r3,4fc80 <_strtod_r+0x13ac>
   4fc7c:	18c00804 	addi	r3,r3,32
   4fc80:	197ff726 	beq	r3,r5,4fc60 <__alt_data_end+0xfffddc60>
   4fc84:	40800044 	addi	r2,r8,1
   4fc88:	d8800c15 	stw	r2,48(sp)
   4fc8c:	009ffc34 	movhi	r2,32752
   4fc90:	d8800715 	stw	r2,28(sp)
   4fc94:	d8000615 	stw	zero,24(sp)
   4fc98:	003c8606 	br	4eeb4 <__alt_data_end+0xfffdceb4>
   4fc9c:	00800174 	movhi	r2,5
   4fca0:	10982104 	addi	r2,r2,24708
   4fca4:	002f883a 	mov	r23,zero
   4fca8:	d8800e15 	stw	r2,56(sp)
   4fcac:	003e4c06 	br	4f5e0 <__alt_data_end+0xfffdd5e0>
   4fcb0:	4805883a 	mov	r2,r9
   4fcb4:	003c0906 	br	4ecdc <__alt_data_end+0xfffdccdc>
   4fcb8:	05001a84 	movi	r20,106
   4fcbc:	003f3506 	br	4f994 <__alt_data_end+0xfffdd994>
   4fcc0:	d8800c15 	stw	r2,48(sp)
   4fcc4:	003ff106 	br	4fc8c <__alt_data_end+0xfffddc8c>
   4fcc8:	d9000c04 	addi	r4,sp,48
   4fccc:	01400174 	movhi	r5,5
   4fcd0:	295acb04 	addi	r5,r5,27436
   4fcd4:	d9800204 	addi	r6,sp,8
   4fcd8:	0051a700 	call	51a70 <__hexnan>
   4fcdc:	00c00144 	movi	r3,5
   4fce0:	10ffd51e 	bne	r2,r3,4fc38 <__alt_data_end+0xfffddc38>
   4fce4:	d8800317 	ldw	r2,12(sp)
   4fce8:	109ffc34 	orhi	r2,r2,32752
   4fcec:	d8800715 	stw	r2,28(sp)
   4fcf0:	d8800217 	ldw	r2,8(sp)
   4fcf4:	d8800615 	stw	r2,24(sp)
   4fcf8:	003c6e06 	br	4eeb4 <__alt_data_end+0xfffdceb4>
   4fcfc:	00ffffc4 	movi	r3,-1
   4fd00:	1884983a 	sll	r2,r3,r2
   4fd04:	d8c00617 	ldw	r3,24(sp)
   4fd08:	1884703a 	and	r2,r3,r2
   4fd0c:	d8800615 	stw	r2,24(sp)
   4fd10:	003f3f06 	br	4fa10 <__alt_data_end+0xfffdda10>
   4fd14:	10bff804 	addi	r2,r2,-32
   4fd18:	013fffc4 	movi	r4,-1
   4fd1c:	2084983a 	sll	r2,r4,r2
   4fd20:	10c6703a 	and	r3,r2,r3
   4fd24:	d8c00715 	stw	r3,28(sp)
   4fd28:	003f3906 	br	4fa10 <__alt_data_end+0xfffdda10>

0004fd2c <strtod>:
   4fd2c:	00c00174 	movhi	r3,5
   4fd30:	18df5504 	addi	r3,r3,32084
   4fd34:	2005883a 	mov	r2,r4
   4fd38:	19000017 	ldw	r4,0(r3)
   4fd3c:	280d883a 	mov	r6,r5
   4fd40:	100b883a 	mov	r5,r2
   4fd44:	004e8d41 	jmpi	4e8d4 <_strtod_r>

0004fd48 <strtof>:
   4fd48:	defffb04 	addi	sp,sp,-20
   4fd4c:	dcc00315 	stw	r19,12(sp)
   4fd50:	04c00174 	movhi	r19,5
   4fd54:	9cdf5504 	addi	r19,r19,32084
   4fd58:	2005883a 	mov	r2,r4
   4fd5c:	99000017 	ldw	r4,0(r19)
   4fd60:	280d883a 	mov	r6,r5
   4fd64:	100b883a 	mov	r5,r2
   4fd68:	dfc00415 	stw	ra,16(sp)
   4fd6c:	dc800215 	stw	r18,8(sp)
   4fd70:	dc400115 	stw	r17,4(sp)
   4fd74:	dc000015 	stw	r16,0(sp)
   4fd78:	004e8d40 	call	4e8d4 <_strtod_r>
   4fd7c:	1009883a 	mov	r4,r2
   4fd80:	180b883a 	mov	r5,r3
   4fd84:	1025883a 	mov	r18,r2
   4fd88:	1823883a 	mov	r17,r3
   4fd8c:	00537e40 	call	537e4 <__truncdfsf2>
   4fd90:	1009883a 	mov	r4,r2
   4fd94:	000b883a 	mov	r5,zero
   4fd98:	1021883a 	mov	r16,r2
   4fd9c:	0052a700 	call	52a70 <__nesf2>
   4fda0:	1000111e 	bne	r2,zero,4fde8 <strtof+0xa0>
   4fda4:	9009883a 	mov	r4,r18
   4fda8:	880b883a 	mov	r5,r17
   4fdac:	000d883a 	mov	r6,zero
   4fdb0:	000f883a 	mov	r7,zero
   4fdb4:	00534700 	call	53470 <__nedf2>
   4fdb8:	10000b26 	beq	r2,zero,4fde8 <strtof+0xa0>
   4fdbc:	98800017 	ldw	r2,0(r19)
   4fdc0:	00c00884 	movi	r3,34
   4fdc4:	10c00015 	stw	r3,0(r2)
   4fdc8:	8005883a 	mov	r2,r16
   4fdcc:	dfc00417 	ldw	ra,16(sp)
   4fdd0:	dcc00317 	ldw	r19,12(sp)
   4fdd4:	dc800217 	ldw	r18,8(sp)
   4fdd8:	dc400117 	ldw	r17,4(sp)
   4fddc:	dc000017 	ldw	r16,0(sp)
   4fde0:	dec00504 	addi	sp,sp,20
   4fde4:	f800283a 	ret
   4fde8:	8009883a 	mov	r4,r16
   4fdec:	015fe034 	movhi	r5,32640
   4fdf0:	297fffc4 	addi	r5,r5,-1
   4fdf4:	0052ac40 	call	52ac4 <__gtsf2>
   4fdf8:	0080070e 	bge	zero,r2,4fe18 <strtof+0xd0>
   4fdfc:	9009883a 	mov	r4,r18
   4fe00:	880b883a 	mov	r5,r17
   4fe04:	01bfffc4 	movi	r6,-1
   4fe08:	01dffc34 	movhi	r7,32752
   4fe0c:	39ffffc4 	addi	r7,r7,-1
   4fe10:	00534cc0 	call	534cc <__gtdf2>
   4fe14:	00bfe90e 	bge	zero,r2,4fdbc <__alt_data_end+0xfffdddbc>
   4fe18:	8009883a 	mov	r4,r16
   4fe1c:	017fe034 	movhi	r5,65408
   4fe20:	297fffc4 	addi	r5,r5,-1
   4fe24:	0052b200 	call	52b20 <__ltsf2>
   4fe28:	103fe70e 	bge	r2,zero,4fdc8 <__alt_data_end+0xfffdddc8>
   4fe2c:	9009883a 	mov	r4,r18
   4fe30:	880b883a 	mov	r5,r17
   4fe34:	01bfffc4 	movi	r6,-1
   4fe38:	01fffc34 	movhi	r7,65520
   4fe3c:	39ffffc4 	addi	r7,r7,-1
   4fe40:	00535940 	call	53594 <__ltdf2>
   4fe44:	103fdd0e 	bge	r2,zero,4fdbc <__alt_data_end+0xfffdddbc>
   4fe48:	8005883a 	mov	r2,r16
   4fe4c:	dfc00417 	ldw	ra,16(sp)
   4fe50:	dcc00317 	ldw	r19,12(sp)
   4fe54:	dc800217 	ldw	r18,8(sp)
   4fe58:	dc400117 	ldw	r17,4(sp)
   4fe5c:	dc000017 	ldw	r16,0(sp)
   4fe60:	dec00504 	addi	sp,sp,20
   4fe64:	f800283a 	ret

0004fe68 <_strtol_r>:
   4fe68:	defff404 	addi	sp,sp,-48
   4fe6c:	00800174 	movhi	r2,5
   4fe70:	109f5604 	addi	r2,r2,32088
   4fe74:	dcc00515 	stw	r19,20(sp)
   4fe78:	14c00017 	ldw	r19,0(r2)
   4fe7c:	ddc00915 	stw	r23,36(sp)
   4fe80:	dd800815 	stw	r22,32(sp)
   4fe84:	dd000615 	stw	r20,24(sp)
   4fe88:	dc000215 	stw	r16,8(sp)
   4fe8c:	dfc00b15 	stw	ra,44(sp)
   4fe90:	df000a15 	stw	fp,40(sp)
   4fe94:	dd400715 	stw	r21,28(sp)
   4fe98:	dc800415 	stw	r18,16(sp)
   4fe9c:	dc400315 	stw	r17,12(sp)
   4fea0:	282d883a 	mov	r22,r5
   4fea4:	d9000015 	stw	r4,0(sp)
   4fea8:	302f883a 	mov	r23,r6
   4feac:	3829883a 	mov	r20,r7
   4feb0:	2821883a 	mov	r16,r5
   4feb4:	84400007 	ldb	r17,0(r16)
   4feb8:	84000044 	addi	r16,r16,1
   4febc:	9c45883a 	add	r2,r19,r17
   4fec0:	10800003 	ldbu	r2,0(r2)
   4fec4:	1080020c 	andi	r2,r2,8
   4fec8:	10803fcc 	andi	r2,r2,255
   4fecc:	1080201c 	xori	r2,r2,128
   4fed0:	10bfe004 	addi	r2,r2,-128
   4fed4:	103ff71e 	bne	r2,zero,4feb4 <__alt_data_end+0xfffddeb4>
   4fed8:	00800b44 	movi	r2,45
   4fedc:	88806726 	beq	r17,r2,5007c <_strtol_r+0x214>
   4fee0:	00800ac4 	movi	r2,43
   4fee4:	88806926 	beq	r17,r2,5008c <_strtol_r+0x224>
   4fee8:	0039883a 	mov	fp,zero
   4feec:	a000461e 	bne	r20,zero,50008 <_strtol_r+0x1a0>
   4fef0:	00800c04 	movi	r2,48
   4fef4:	88804826 	beq	r17,r2,50018 <_strtol_r+0x1b0>
   4fef8:	05000284 	movi	r20,10
   4fefc:	a02b883a 	mov	r21,r20
   4ff00:	00a00034 	movhi	r2,32768
   4ff04:	e025003a 	cmpeq	r18,fp,zero
   4ff08:	14a5c83a 	sub	r18,r2,r18
   4ff0c:	9009883a 	mov	r4,r18
   4ff10:	a80b883a 	mov	r5,r21
   4ff14:	00457dc0 	call	457dc <__umodsi3>
   4ff18:	9009883a 	mov	r4,r18
   4ff1c:	a80b883a 	mov	r5,r21
   4ff20:	d8800115 	stw	r2,4(sp)
   4ff24:	00457d40 	call	457d4 <__udivsi3>
   4ff28:	9c47883a 	add	r3,r19,r17
   4ff2c:	18c00003 	ldbu	r3,0(r3)
   4ff30:	100f883a 	mov	r7,r2
   4ff34:	0013883a 	mov	r9,zero
   4ff38:	1a00010c 	andi	r8,r3,4
   4ff3c:	42003fcc 	andi	r8,r8,255
   4ff40:	4200201c 	xori	r8,r8,128
   4ff44:	423fe004 	addi	r8,r8,-128
   4ff48:	0009883a 	mov	r4,zero
   4ff4c:	02bfffc4 	movi	r10,-1
   4ff50:	d9800117 	ldw	r6,4(sp)
   4ff54:	40001126 	beq	r8,zero,4ff9c <_strtol_r+0x134>
   4ff58:	8c7ff404 	addi	r17,r17,-48
   4ff5c:	8d00160e 	bge	r17,r20,4ffb8 <_strtol_r+0x150>
   4ff60:	4a800526 	beq	r9,r10,4ff78 <_strtol_r+0x110>
   4ff64:	39003736 	bltu	r7,r4,50044 <_strtol_r+0x1dc>
   4ff68:	21c03526 	beq	r4,r7,50040 <_strtol_r+0x1d8>
   4ff6c:	2549383a 	mul	r4,r4,r21
   4ff70:	02400044 	movi	r9,1
   4ff74:	8909883a 	add	r4,r17,r4
   4ff78:	84400007 	ldb	r17,0(r16)
   4ff7c:	84000044 	addi	r16,r16,1
   4ff80:	9c47883a 	add	r3,r19,r17
   4ff84:	18c00003 	ldbu	r3,0(r3)
   4ff88:	1a00010c 	andi	r8,r3,4
   4ff8c:	42003fcc 	andi	r8,r8,255
   4ff90:	4200201c 	xori	r8,r8,128
   4ff94:	423fe004 	addi	r8,r8,-128
   4ff98:	403fef1e 	bne	r8,zero,4ff58 <__alt_data_end+0xfffddf58>
   4ff9c:	1a0000cc 	andi	r8,r3,3
   4ffa0:	40000526 	beq	r8,zero,4ffb8 <_strtol_r+0x150>
   4ffa4:	18c0004c 	andi	r3,r3,1
   4ffa8:	18002826 	beq	r3,zero,5004c <_strtol_r+0x1e4>
   4ffac:	00800dc4 	movi	r2,55
   4ffb0:	88a3c83a 	sub	r17,r17,r2
   4ffb4:	8d3fea16 	blt	r17,r20,4ff60 <__alt_data_end+0xfffddf60>
   4ffb8:	00bfffc4 	movi	r2,-1
   4ffbc:	48802626 	beq	r9,r2,50058 <_strtol_r+0x1f0>
   4ffc0:	e0000126 	beq	fp,zero,4ffc8 <_strtol_r+0x160>
   4ffc4:	0109c83a 	sub	r4,zero,r4
   4ffc8:	2005883a 	mov	r2,r4
   4ffcc:	b8000226 	beq	r23,zero,4ffd8 <_strtol_r+0x170>
   4ffd0:	4800281e 	bne	r9,zero,50074 <_strtol_r+0x20c>
   4ffd4:	bd800015 	stw	r22,0(r23)
   4ffd8:	dfc00b17 	ldw	ra,44(sp)
   4ffdc:	df000a17 	ldw	fp,40(sp)
   4ffe0:	ddc00917 	ldw	r23,36(sp)
   4ffe4:	dd800817 	ldw	r22,32(sp)
   4ffe8:	dd400717 	ldw	r21,28(sp)
   4ffec:	dd000617 	ldw	r20,24(sp)
   4fff0:	dcc00517 	ldw	r19,20(sp)
   4fff4:	dc800417 	ldw	r18,16(sp)
   4fff8:	dc400317 	ldw	r17,12(sp)
   4fffc:	dc000217 	ldw	r16,8(sp)
   50000:	dec00c04 	addi	sp,sp,48
   50004:	f800283a 	ret
   50008:	00800404 	movi	r2,16
   5000c:	a0bfbb1e 	bne	r20,r2,4fefc <__alt_data_end+0xfffddefc>
   50010:	00800c04 	movi	r2,48
   50014:	88bfb91e 	bne	r17,r2,4fefc <__alt_data_end+0xfffddefc>
   50018:	80800007 	ldb	r2,0(r16)
   5001c:	00c01e04 	movi	r3,120
   50020:	10c01e26 	beq	r2,r3,5009c <_strtol_r+0x234>
   50024:	00c01604 	movi	r3,88
   50028:	10c01c26 	beq	r2,r3,5009c <_strtol_r+0x234>
   5002c:	a000201e 	bne	r20,zero,500b0 <_strtol_r+0x248>
   50030:	05400204 	movi	r21,8
   50034:	04400c04 	movi	r17,48
   50038:	a829883a 	mov	r20,r21
   5003c:	003fb006 	br	4ff00 <__alt_data_end+0xfffddf00>
   50040:	347fca0e 	bge	r6,r17,4ff6c <__alt_data_end+0xfffddf6c>
   50044:	027fffc4 	movi	r9,-1
   50048:	003fcb06 	br	4ff78 <__alt_data_end+0xfffddf78>
   5004c:	008015c4 	movi	r2,87
   50050:	88a3c83a 	sub	r17,r17,r2
   50054:	003fd706 	br	4ffb4 <__alt_data_end+0xfffddfb4>
   50058:	d9000017 	ldw	r4,0(sp)
   5005c:	00c00884 	movi	r3,34
   50060:	e005003a 	cmpeq	r2,fp,zero
   50064:	20c00015 	stw	r3,0(r4)
   50068:	00e00034 	movhi	r3,32768
   5006c:	1885c83a 	sub	r2,r3,r2
   50070:	b83fd926 	beq	r23,zero,4ffd8 <__alt_data_end+0xfffddfd8>
   50074:	85bfffc4 	addi	r22,r16,-1
   50078:	003fd606 	br	4ffd4 <__alt_data_end+0xfffddfd4>
   5007c:	07000044 	movi	fp,1
   50080:	84400007 	ldb	r17,0(r16)
   50084:	8721883a 	add	r16,r16,fp
   50088:	003f9806 	br	4feec <__alt_data_end+0xfffddeec>
   5008c:	84400007 	ldb	r17,0(r16)
   50090:	0039883a 	mov	fp,zero
   50094:	84000044 	addi	r16,r16,1
   50098:	003f9406 	br	4feec <__alt_data_end+0xfffddeec>
   5009c:	05400404 	movi	r21,16
   500a0:	84400047 	ldb	r17,1(r16)
   500a4:	a829883a 	mov	r20,r21
   500a8:	84000084 	addi	r16,r16,2
   500ac:	003f9406 	br	4ff00 <__alt_data_end+0xfffddf00>
   500b0:	a02b883a 	mov	r21,r20
   500b4:	04400c04 	movi	r17,48
   500b8:	003f9106 	br	4ff00 <__alt_data_end+0xfffddf00>

000500bc <strtol>:
   500bc:	00800174 	movhi	r2,5
   500c0:	109f5504 	addi	r2,r2,32084
   500c4:	2007883a 	mov	r3,r4
   500c8:	11000017 	ldw	r4,0(r2)
   500cc:	2805883a 	mov	r2,r5
   500d0:	300f883a 	mov	r7,r6
   500d4:	180b883a 	mov	r5,r3
   500d8:	100d883a 	mov	r6,r2
   500dc:	004fe681 	jmpi	4fe68 <_strtol_r>

000500e0 <_strtoll_r>:
   500e0:	defff004 	addi	sp,sp,-64
   500e4:	00800174 	movhi	r2,5
   500e8:	109f5604 	addi	r2,r2,32088
   500ec:	ddc00d15 	stw	r23,52(sp)
   500f0:	15c00017 	ldw	r23,0(r2)
   500f4:	df000e15 	stw	fp,56(sp)
   500f8:	dc000615 	stw	r16,24(sp)
   500fc:	dfc00f15 	stw	ra,60(sp)
   50100:	dd800c15 	stw	r22,48(sp)
   50104:	dd400b15 	stw	r21,44(sp)
   50108:	dd000a15 	stw	r20,40(sp)
   5010c:	dcc00915 	stw	r19,36(sp)
   50110:	dc800815 	stw	r18,32(sp)
   50114:	dc400715 	stw	r17,28(sp)
   50118:	d9400015 	stw	r5,0(sp)
   5011c:	d9000415 	stw	r4,16(sp)
   50120:	d9800115 	stw	r6,4(sp)
   50124:	3839883a 	mov	fp,r7
   50128:	2821883a 	mov	r16,r5
   5012c:	82000007 	ldb	r8,0(r16)
   50130:	84000044 	addi	r16,r16,1
   50134:	ba05883a 	add	r2,r23,r8
   50138:	10800003 	ldbu	r2,0(r2)
   5013c:	1080020c 	andi	r2,r2,8
   50140:	10803fcc 	andi	r2,r2,255
   50144:	1080201c 	xori	r2,r2,128
   50148:	10bfe004 	addi	r2,r2,-128
   5014c:	103ff71e 	bne	r2,zero,5012c <__alt_data_end+0xfffde12c>
   50150:	00800b44 	movi	r2,45
   50154:	40807a26 	beq	r8,r2,50340 <_strtoll_r+0x260>
   50158:	00800ac4 	movi	r2,43
   5015c:	40808826 	beq	r8,r2,50380 <_strtoll_r+0x2a0>
   50160:	d8000215 	stw	zero,8(sp)
   50164:	e000061e 	bne	fp,zero,50180 <_strtoll_r+0xa0>
   50168:	00800c04 	movi	r2,48
   5016c:	40808b26 	beq	r8,r2,5039c <_strtoll_r+0x2bc>
   50170:	04800284 	movi	r18,10
   50174:	0027883a 	mov	r19,zero
   50178:	9039883a 	mov	fp,r18
   5017c:	00000406 	br	50190 <_strtoll_r+0xb0>
   50180:	00800404 	movi	r2,16
   50184:	e0809926 	beq	fp,r2,503ec <_strtoll_r+0x30c>
   50188:	e027d7fa 	srai	r19,fp,31
   5018c:	e025883a 	mov	r18,fp
   50190:	d9000217 	ldw	r4,8(sp)
   50194:	20006226 	beq	r4,zero,50320 <_strtoll_r+0x240>
   50198:	002b883a 	mov	r21,zero
   5019c:	04600034 	movhi	r17,32768
   501a0:	a809883a 	mov	r4,r21
   501a4:	880b883a 	mov	r5,r17
   501a8:	900d883a 	mov	r6,r18
   501ac:	980f883a 	mov	r7,r19
   501b0:	da000515 	stw	r8,20(sp)
   501b4:	00524e40 	call	524e4 <__umoddi3>
   501b8:	a809883a 	mov	r4,r21
   501bc:	880b883a 	mov	r5,r17
   501c0:	900d883a 	mov	r6,r18
   501c4:	980f883a 	mov	r7,r19
   501c8:	d8800315 	stw	r2,12(sp)
   501cc:	0051f1c0 	call	51f1c <__udivdi3>
   501d0:	da000517 	ldw	r8,20(sp)
   501d4:	182b883a 	mov	r21,r3
   501d8:	1023883a 	mov	r17,r2
   501dc:	ba0d883a 	add	r6,r23,r8
   501e0:	31800003 	ldbu	r6,0(r6)
   501e4:	0007883a 	mov	r3,zero
   501e8:	0009883a 	mov	r4,zero
   501ec:	3240010c 	andi	r9,r6,4
   501f0:	4a403fcc 	andi	r9,r9,255
   501f4:	4a40201c 	xori	r9,r9,128
   501f8:	4a7fe004 	addi	r9,r9,-128
   501fc:	000b883a 	mov	r5,zero
   50200:	05bfffc4 	movi	r22,-1
   50204:	48001026 	beq	r9,zero,50248 <_strtoll_r+0x168>
   50208:	453ff404 	addi	r20,r8,-48
   5020c:	a700150e 	bge	r20,fp,50264 <_strtoll_r+0x184>
   50210:	1d800426 	beq	r3,r22,50224 <_strtoll_r+0x144>
   50214:	a9400236 	bltu	r21,r5,50220 <_strtoll_r+0x140>
   50218:	2d402e1e 	bne	r5,r21,502d4 <_strtoll_r+0x1f4>
   5021c:	89002d2e 	bgeu	r17,r4,502d4 <_strtoll_r+0x1f4>
   50220:	00ffffc4 	movi	r3,-1
   50224:	82000007 	ldb	r8,0(r16)
   50228:	84000044 	addi	r16,r16,1
   5022c:	ba0d883a 	add	r6,r23,r8
   50230:	31800003 	ldbu	r6,0(r6)
   50234:	3240010c 	andi	r9,r6,4
   50238:	4a403fcc 	andi	r9,r9,255
   5023c:	4a40201c 	xori	r9,r9,128
   50240:	4a7fe004 	addi	r9,r9,-128
   50244:	483ff01e 	bne	r9,zero,50208 <__alt_data_end+0xfffde208>
   50248:	308000cc 	andi	r2,r6,3
   5024c:	10000526 	beq	r2,zero,50264 <_strtoll_r+0x184>
   50250:	3180004c 	andi	r6,r6,1
   50254:	30002b26 	beq	r6,zero,50304 <_strtoll_r+0x224>
   50258:	00800dc4 	movi	r2,55
   5025c:	40a9c83a 	sub	r20,r8,r2
   50260:	a73feb16 	blt	r20,fp,50210 <__alt_data_end+0xfffde210>
   50264:	00bfffc4 	movi	r2,-1
   50268:	18803a26 	beq	r3,r2,50354 <_strtoll_r+0x274>
   5026c:	d8800217 	ldw	r2,8(sp)
   50270:	10000426 	beq	r2,zero,50284 <_strtoll_r+0x1a4>
   50274:	0109c83a 	sub	r4,zero,r4
   50278:	2004c03a 	cmpne	r2,r4,zero
   5027c:	014bc83a 	sub	r5,zero,r5
   50280:	288bc83a 	sub	r5,r5,r2
   50284:	d8800117 	ldw	r2,4(sp)
   50288:	10004f26 	beq	r2,zero,503c8 <_strtoll_r+0x2e8>
   5028c:	2005883a 	mov	r2,r4
   50290:	1800271e 	bne	r3,zero,50330 <_strtoll_r+0x250>
   50294:	2807883a 	mov	r3,r5
   50298:	d9400017 	ldw	r5,0(sp)
   5029c:	d9000117 	ldw	r4,4(sp)
   502a0:	21400015 	stw	r5,0(r4)
   502a4:	dfc00f17 	ldw	ra,60(sp)
   502a8:	df000e17 	ldw	fp,56(sp)
   502ac:	ddc00d17 	ldw	r23,52(sp)
   502b0:	dd800c17 	ldw	r22,48(sp)
   502b4:	dd400b17 	ldw	r21,44(sp)
   502b8:	dd000a17 	ldw	r20,40(sp)
   502bc:	dcc00917 	ldw	r19,36(sp)
   502c0:	dc800817 	ldw	r18,32(sp)
   502c4:	dc400717 	ldw	r17,28(sp)
   502c8:	dc000617 	ldw	r16,24(sp)
   502cc:	dec01004 	addi	sp,sp,64
   502d0:	f800283a 	ret
   502d4:	24400e26 	beq	r4,r17,50310 <_strtoll_r+0x230>
   502d8:	900d883a 	mov	r6,r18
   502dc:	980f883a 	mov	r7,r19
   502e0:	0051e380 	call	51e38 <__muldi3>
   502e4:	a00dd7fa 	srai	r6,r20,31
   502e8:	a085883a 	add	r2,r20,r2
   502ec:	1511803a 	cmpltu	r8,r2,r20
   502f0:	30c7883a 	add	r3,r6,r3
   502f4:	40cb883a 	add	r5,r8,r3
   502f8:	1009883a 	mov	r4,r2
   502fc:	00c00044 	movi	r3,1
   50300:	003fc806 	br	50224 <__alt_data_end+0xfffde224>
   50304:	008015c4 	movi	r2,87
   50308:	40a9c83a 	sub	r20,r8,r2
   5030c:	003fd406 	br	50260 <__alt_data_end+0xfffde260>
   50310:	2d7ff11e 	bne	r5,r21,502d8 <__alt_data_end+0xfffde2d8>
   50314:	d8800317 	ldw	r2,12(sp)
   50318:	153fc116 	blt	r2,r20,50220 <__alt_data_end+0xfffde220>
   5031c:	003fee06 	br	502d8 <__alt_data_end+0xfffde2d8>
   50320:	057fffc4 	movi	r21,-1
   50324:	04600034 	movhi	r17,32768
   50328:	8c7fffc4 	addi	r17,r17,-1
   5032c:	003f9c06 	br	501a0 <__alt_data_end+0xfffde1a0>
   50330:	2807883a 	mov	r3,r5
   50334:	843fffc4 	addi	r16,r16,-1
   50338:	dc000015 	stw	r16,0(sp)
   5033c:	003fd606 	br	50298 <__alt_data_end+0xfffde298>
   50340:	00800044 	movi	r2,1
   50344:	82000007 	ldb	r8,0(r16)
   50348:	d8800215 	stw	r2,8(sp)
   5034c:	80a1883a 	add	r16,r16,r2
   50350:	003f8406 	br	50164 <__alt_data_end+0xfffde164>
   50354:	d9000217 	ldw	r4,8(sp)
   50358:	20000d1e 	bne	r4,zero,50390 <_strtoll_r+0x2b0>
   5035c:	1805883a 	mov	r2,r3
   50360:	00e00034 	movhi	r3,32768
   50364:	18ffffc4 	addi	r3,r3,-1
   50368:	d9400417 	ldw	r5,16(sp)
   5036c:	01000884 	movi	r4,34
   50370:	29000015 	stw	r4,0(r5)
   50374:	d9000117 	ldw	r4,4(sp)
   50378:	203fee1e 	bne	r4,zero,50334 <__alt_data_end+0xfffde334>
   5037c:	003fc906 	br	502a4 <__alt_data_end+0xfffde2a4>
   50380:	82000007 	ldb	r8,0(r16)
   50384:	d8000215 	stw	zero,8(sp)
   50388:	84000044 	addi	r16,r16,1
   5038c:	003f7506 	br	50164 <__alt_data_end+0xfffde164>
   50390:	0005883a 	mov	r2,zero
   50394:	00e00034 	movhi	r3,32768
   50398:	003ff306 	br	50368 <__alt_data_end+0xfffde368>
   5039c:	80800007 	ldb	r2,0(r16)
   503a0:	00c01e04 	movi	r3,120
   503a4:	10c00b26 	beq	r2,r3,503d4 <_strtoll_r+0x2f4>
   503a8:	00c01604 	movi	r3,88
   503ac:	10c00926 	beq	r2,r3,503d4 <_strtoll_r+0x2f4>
   503b0:	e000131e 	bne	fp,zero,50400 <_strtoll_r+0x320>
   503b4:	04800204 	movi	r18,8
   503b8:	0027883a 	mov	r19,zero
   503bc:	02000c04 	movi	r8,48
   503c0:	9039883a 	mov	fp,r18
   503c4:	003f7206 	br	50190 <__alt_data_end+0xfffde190>
   503c8:	2005883a 	mov	r2,r4
   503cc:	2807883a 	mov	r3,r5
   503d0:	003fb406 	br	502a4 <__alt_data_end+0xfffde2a4>
   503d4:	04800404 	movi	r18,16
   503d8:	82000047 	ldb	r8,1(r16)
   503dc:	0027883a 	mov	r19,zero
   503e0:	84000084 	addi	r16,r16,2
   503e4:	9039883a 	mov	fp,r18
   503e8:	003f6906 	br	50190 <__alt_data_end+0xfffde190>
   503ec:	00800c04 	movi	r2,48
   503f0:	40bfea26 	beq	r8,r2,5039c <__alt_data_end+0xfffde39c>
   503f4:	e025883a 	mov	r18,fp
   503f8:	0027883a 	mov	r19,zero
   503fc:	003f6406 	br	50190 <__alt_data_end+0xfffde190>
   50400:	e025883a 	mov	r18,fp
   50404:	e027d7fa 	srai	r19,fp,31
   50408:	02000c04 	movi	r8,48
   5040c:	003f6006 	br	50190 <__alt_data_end+0xfffde190>

00050410 <_strtoul_r>:
   50410:	defff604 	addi	sp,sp,-40
   50414:	00800174 	movhi	r2,5
   50418:	109f5604 	addi	r2,r2,32088
   5041c:	dc800315 	stw	r18,12(sp)
   50420:	14800017 	ldw	r18,0(r2)
   50424:	dd800715 	stw	r22,28(sp)
   50428:	dd400615 	stw	r21,24(sp)
   5042c:	dcc00415 	stw	r19,16(sp)
   50430:	dc000115 	stw	r16,4(sp)
   50434:	dfc00915 	stw	ra,36(sp)
   50438:	ddc00815 	stw	r23,32(sp)
   5043c:	dd000515 	stw	r20,20(sp)
   50440:	dc400215 	stw	r17,8(sp)
   50444:	282b883a 	mov	r21,r5
   50448:	202d883a 	mov	r22,r4
   5044c:	3827883a 	mov	r19,r7
   50450:	2821883a 	mov	r16,r5
   50454:	84400007 	ldb	r17,0(r16)
   50458:	84000044 	addi	r16,r16,1
   5045c:	9445883a 	add	r2,r18,r17
   50460:	10800003 	ldbu	r2,0(r2)
   50464:	1080020c 	andi	r2,r2,8
   50468:	10803fcc 	andi	r2,r2,255
   5046c:	1080201c 	xori	r2,r2,128
   50470:	10bfe004 	addi	r2,r2,-128
   50474:	103ff71e 	bne	r2,zero,50454 <__alt_data_end+0xfffde454>
   50478:	00800b44 	movi	r2,45
   5047c:	88805926 	beq	r17,r2,505e4 <_strtoul_r+0x1d4>
   50480:	00800ac4 	movi	r2,43
   50484:	88805b26 	beq	r17,r2,505f4 <_strtoul_r+0x1e4>
   50488:	002f883a 	mov	r23,zero
   5048c:	9800081e 	bne	r19,zero,504b0 <_strtoul_r+0xa0>
   50490:	00800c04 	movi	r2,48
   50494:	88805d26 	beq	r17,r2,5060c <_strtoul_r+0x1fc>
   50498:	04c00284 	movi	r19,10
   5049c:	01400144 	movi	r5,5
   504a0:	050666b4 	movhi	r20,6554
   504a4:	a5266644 	addi	r20,r20,-26215
   504a8:	9809883a 	mov	r4,r19
   504ac:	00000d06 	br	504e4 <_strtoul_r+0xd4>
   504b0:	00800404 	movi	r2,16
   504b4:	98805326 	beq	r19,r2,50604 <_strtoul_r+0x1f4>
   504b8:	013fffc4 	movi	r4,-1
   504bc:	980b883a 	mov	r5,r19
   504c0:	d9800015 	stw	r6,0(sp)
   504c4:	00457d40 	call	457d4 <__udivsi3>
   504c8:	013fffc4 	movi	r4,-1
   504cc:	980b883a 	mov	r5,r19
   504d0:	1029883a 	mov	r20,r2
   504d4:	00457dc0 	call	457dc <__umodsi3>
   504d8:	d9800017 	ldw	r6,0(sp)
   504dc:	100b883a 	mov	r5,r2
   504e0:	9809883a 	mov	r4,r19
   504e4:	9447883a 	add	r3,r18,r17
   504e8:	18c00003 	ldbu	r3,0(r3)
   504ec:	0013883a 	mov	r9,zero
   504f0:	0005883a 	mov	r2,zero
   504f4:	1a00010c 	andi	r8,r3,4
   504f8:	42003fcc 	andi	r8,r8,255
   504fc:	4200201c 	xori	r8,r8,128
   50500:	423fe004 	addi	r8,r8,-128
   50504:	02bfffc4 	movi	r10,-1
   50508:	40001126 	beq	r8,zero,50550 <_strtoul_r+0x140>
   5050c:	8c7ff404 	addi	r17,r17,-48
   50510:	8cc0160e 	bge	r17,r19,5056c <_strtoul_r+0x15c>
   50514:	4a800526 	beq	r9,r10,5052c <_strtoul_r+0x11c>
   50518:	a0802736 	bltu	r20,r2,505b8 <_strtoul_r+0x1a8>
   5051c:	15002526 	beq	r2,r20,505b4 <_strtoul_r+0x1a4>
   50520:	1107383a 	mul	r3,r2,r4
   50524:	02400044 	movi	r9,1
   50528:	88c5883a 	add	r2,r17,r3
   5052c:	84400007 	ldb	r17,0(r16)
   50530:	84000044 	addi	r16,r16,1
   50534:	9447883a 	add	r3,r18,r17
   50538:	18c00003 	ldbu	r3,0(r3)
   5053c:	1a00010c 	andi	r8,r3,4
   50540:	42003fcc 	andi	r8,r8,255
   50544:	4200201c 	xori	r8,r8,128
   50548:	423fe004 	addi	r8,r8,-128
   5054c:	403fef1e 	bne	r8,zero,5050c <__alt_data_end+0xfffde50c>
   50550:	19c000cc 	andi	r7,r3,3
   50554:	38000526 	beq	r7,zero,5056c <_strtoul_r+0x15c>
   50558:	18c0004c 	andi	r3,r3,1
   5055c:	18001826 	beq	r3,zero,505c0 <_strtoul_r+0x1b0>
   50560:	00c00dc4 	movi	r3,55
   50564:	88e3c83a 	sub	r17,r17,r3
   50568:	8cffea16 	blt	r17,r19,50514 <__alt_data_end+0xfffde514>
   5056c:	00ffffc4 	movi	r3,-1
   50570:	48c01626 	beq	r9,r3,505cc <_strtoul_r+0x1bc>
   50574:	b8000126 	beq	r23,zero,5057c <_strtoul_r+0x16c>
   50578:	0085c83a 	sub	r2,zero,r2
   5057c:	30000226 	beq	r6,zero,50588 <_strtoul_r+0x178>
   50580:	4800161e 	bne	r9,zero,505dc <_strtoul_r+0x1cc>
   50584:	35400015 	stw	r21,0(r6)
   50588:	dfc00917 	ldw	ra,36(sp)
   5058c:	ddc00817 	ldw	r23,32(sp)
   50590:	dd800717 	ldw	r22,28(sp)
   50594:	dd400617 	ldw	r21,24(sp)
   50598:	dd000517 	ldw	r20,20(sp)
   5059c:	dcc00417 	ldw	r19,16(sp)
   505a0:	dc800317 	ldw	r18,12(sp)
   505a4:	dc400217 	ldw	r17,8(sp)
   505a8:	dc000117 	ldw	r16,4(sp)
   505ac:	dec00a04 	addi	sp,sp,40
   505b0:	f800283a 	ret
   505b4:	2c7fda0e 	bge	r5,r17,50520 <__alt_data_end+0xfffde520>
   505b8:	027fffc4 	movi	r9,-1
   505bc:	003fdb06 	br	5052c <__alt_data_end+0xfffde52c>
   505c0:	00c015c4 	movi	r3,87
   505c4:	88e3c83a 	sub	r17,r17,r3
   505c8:	003fe706 	br	50568 <__alt_data_end+0xfffde568>
   505cc:	00800884 	movi	r2,34
   505d0:	b0800015 	stw	r2,0(r22)
   505d4:	4805883a 	mov	r2,r9
   505d8:	303feb26 	beq	r6,zero,50588 <__alt_data_end+0xfffde588>
   505dc:	857fffc4 	addi	r21,r16,-1
   505e0:	003fe806 	br	50584 <__alt_data_end+0xfffde584>
   505e4:	05c00044 	movi	r23,1
   505e8:	84400007 	ldb	r17,0(r16)
   505ec:	85e1883a 	add	r16,r16,r23
   505f0:	003fa606 	br	5048c <__alt_data_end+0xfffde48c>
   505f4:	84400007 	ldb	r17,0(r16)
   505f8:	002f883a 	mov	r23,zero
   505fc:	84000044 	addi	r16,r16,1
   50600:	003fa206 	br	5048c <__alt_data_end+0xfffde48c>
   50604:	00800c04 	movi	r2,48
   50608:	88bfab1e 	bne	r17,r2,504b8 <__alt_data_end+0xfffde4b8>
   5060c:	80800007 	ldb	r2,0(r16)
   50610:	00c01e04 	movi	r3,120
   50614:	10c00a26 	beq	r2,r3,50640 <_strtoul_r+0x230>
   50618:	00c01604 	movi	r3,88
   5061c:	10c00826 	beq	r2,r3,50640 <_strtoul_r+0x230>
   50620:	98000f1e 	bne	r19,zero,50660 <_strtoul_r+0x250>
   50624:	01000204 	movi	r4,8
   50628:	014001c4 	movi	r5,7
   5062c:	05080034 	movhi	r20,8192
   50630:	a53fffc4 	addi	r20,r20,-1
   50634:	04400c04 	movi	r17,48
   50638:	2027883a 	mov	r19,r4
   5063c:	003fa906 	br	504e4 <__alt_data_end+0xfffde4e4>
   50640:	01000404 	movi	r4,16
   50644:	84400047 	ldb	r17,1(r16)
   50648:	014003c4 	movi	r5,15
   5064c:	84000084 	addi	r16,r16,2
   50650:	05040034 	movhi	r20,4096
   50654:	a53fffc4 	addi	r20,r20,-1
   50658:	2027883a 	mov	r19,r4
   5065c:	003fa106 	br	504e4 <__alt_data_end+0xfffde4e4>
   50660:	013fffc4 	movi	r4,-1
   50664:	980b883a 	mov	r5,r19
   50668:	d9800015 	stw	r6,0(sp)
   5066c:	00457d40 	call	457d4 <__udivsi3>
   50670:	013fffc4 	movi	r4,-1
   50674:	980b883a 	mov	r5,r19
   50678:	1029883a 	mov	r20,r2
   5067c:	00457dc0 	call	457dc <__umodsi3>
   50680:	100b883a 	mov	r5,r2
   50684:	9809883a 	mov	r4,r19
   50688:	04400c04 	movi	r17,48
   5068c:	d9800017 	ldw	r6,0(sp)
   50690:	003f9406 	br	504e4 <__alt_data_end+0xfffde4e4>

00050694 <strtoul>:
   50694:	00800174 	movhi	r2,5
   50698:	109f5504 	addi	r2,r2,32084
   5069c:	2007883a 	mov	r3,r4
   506a0:	11000017 	ldw	r4,0(r2)
   506a4:	2805883a 	mov	r2,r5
   506a8:	300f883a 	mov	r7,r6
   506ac:	180b883a 	mov	r5,r3
   506b0:	100d883a 	mov	r6,r2
   506b4:	00504101 	jmpi	50410 <_strtoul_r>

000506b8 <_strtoull_r>:
   506b8:	defff004 	addi	sp,sp,-64
   506bc:	00800174 	movhi	r2,5
   506c0:	109f5604 	addi	r2,r2,32088
   506c4:	dd800c15 	stw	r22,48(sp)
   506c8:	15800017 	ldw	r22,0(r2)
   506cc:	df000e15 	stw	fp,56(sp)
   506d0:	dc000615 	stw	r16,24(sp)
   506d4:	dfc00f15 	stw	ra,60(sp)
   506d8:	ddc00d15 	stw	r23,52(sp)
   506dc:	dd400b15 	stw	r21,44(sp)
   506e0:	dd000a15 	stw	r20,40(sp)
   506e4:	dcc00915 	stw	r19,36(sp)
   506e8:	dc800815 	stw	r18,32(sp)
   506ec:	dc400715 	stw	r17,28(sp)
   506f0:	d9400015 	stw	r5,0(sp)
   506f4:	d9000415 	stw	r4,16(sp)
   506f8:	d9800115 	stw	r6,4(sp)
   506fc:	3839883a 	mov	fp,r7
   50700:	2821883a 	mov	r16,r5
   50704:	82000007 	ldb	r8,0(r16)
   50708:	84000044 	addi	r16,r16,1
   5070c:	b205883a 	add	r2,r22,r8
   50710:	10800003 	ldbu	r2,0(r2)
   50714:	1080020c 	andi	r2,r2,8
   50718:	10803fcc 	andi	r2,r2,255
   5071c:	1080201c 	xori	r2,r2,128
   50720:	10bfe004 	addi	r2,r2,-128
   50724:	103ff71e 	bne	r2,zero,50704 <__alt_data_end+0xfffde704>
   50728:	00800b44 	movi	r2,45
   5072c:	40807e26 	beq	r8,r2,50928 <_strtoull_r+0x270>
   50730:	00800ac4 	movi	r2,43
   50734:	40808126 	beq	r8,r2,5093c <_strtoull_r+0x284>
   50738:	d8000315 	stw	zero,12(sp)
   5073c:	e0000c1e 	bne	fp,zero,50770 <_strtoull_r+0xb8>
   50740:	00800c04 	movi	r2,48
   50744:	40808126 	beq	r8,r2,5094c <_strtoull_r+0x294>
   50748:	04c00284 	movi	r19,10
   5074c:	00800144 	movi	r2,5
   50750:	d8800215 	stw	r2,8(sp)
   50754:	046666b4 	movhi	r17,39322
   50758:	8c666644 	addi	r17,r17,-26215
   5075c:	05c666b4 	movhi	r23,6554
   50760:	bde66644 	addi	r23,r23,-26215
   50764:	0025883a 	mov	r18,zero
   50768:	9839883a 	mov	fp,r19
   5076c:	00001306 	br	507bc <_strtoull_r+0x104>
   50770:	00800404 	movi	r2,16
   50774:	e0809026 	beq	fp,r2,509b8 <_strtoull_r+0x300>
   50778:	e025d7fa 	srai	r18,fp,31
   5077c:	013fffc4 	movi	r4,-1
   50780:	200b883a 	mov	r5,r4
   50784:	e00d883a 	mov	r6,fp
   50788:	900f883a 	mov	r7,r18
   5078c:	da000515 	stw	r8,20(sp)
   50790:	0051f1c0 	call	51f1c <__udivdi3>
   50794:	013fffc4 	movi	r4,-1
   50798:	200b883a 	mov	r5,r4
   5079c:	e00d883a 	mov	r6,fp
   507a0:	900f883a 	mov	r7,r18
   507a4:	1023883a 	mov	r17,r2
   507a8:	182f883a 	mov	r23,r3
   507ac:	00524e40 	call	524e4 <__umoddi3>
   507b0:	da000517 	ldw	r8,20(sp)
   507b4:	d8800215 	stw	r2,8(sp)
   507b8:	e027883a 	mov	r19,fp
   507bc:	b20d883a 	add	r6,r22,r8
   507c0:	32400003 	ldbu	r9,0(r6)
   507c4:	0007883a 	mov	r3,zero
   507c8:	0009883a 	mov	r4,zero
   507cc:	4a80010c 	andi	r10,r9,4
   507d0:	52803fcc 	andi	r10,r10,255
   507d4:	5280201c 	xori	r10,r10,128
   507d8:	52bfe004 	addi	r10,r10,-128
   507dc:	000b883a 	mov	r5,zero
   507e0:	057fffc4 	movi	r21,-1
   507e4:	50001026 	beq	r10,zero,50828 <_strtoull_r+0x170>
   507e8:	453ff404 	addi	r20,r8,-48
   507ec:	a700150e 	bge	r20,fp,50844 <_strtoull_r+0x18c>
   507f0:	1d400426 	beq	r3,r21,50804 <_strtoull_r+0x14c>
   507f4:	b9400236 	bltu	r23,r5,50800 <_strtoull_r+0x148>
   507f8:	2dc0301e 	bne	r5,r23,508bc <_strtoull_r+0x204>
   507fc:	89002f2e 	bgeu	r17,r4,508bc <_strtoull_r+0x204>
   50800:	00ffffc4 	movi	r3,-1
   50804:	82000007 	ldb	r8,0(r16)
   50808:	84000044 	addi	r16,r16,1
   5080c:	b20d883a 	add	r6,r22,r8
   50810:	32400003 	ldbu	r9,0(r6)
   50814:	4a80010c 	andi	r10,r9,4
   50818:	52803fcc 	andi	r10,r10,255
   5081c:	5280201c 	xori	r10,r10,128
   50820:	52bfe004 	addi	r10,r10,-128
   50824:	503ff01e 	bne	r10,zero,507e8 <__alt_data_end+0xfffde7e8>
   50828:	488000cc 	andi	r2,r9,3
   5082c:	10000526 	beq	r2,zero,50844 <_strtoull_r+0x18c>
   50830:	4a40004c 	andi	r9,r9,1
   50834:	48002d26 	beq	r9,zero,508ec <_strtoull_r+0x234>
   50838:	00800dc4 	movi	r2,55
   5083c:	40a9c83a 	sub	r20,r8,r2
   50840:	a73feb16 	blt	r20,fp,507f0 <__alt_data_end+0xfffde7f0>
   50844:	00bfffc4 	movi	r2,-1
   50848:	18802f26 	beq	r3,r2,50908 <_strtoull_r+0x250>
   5084c:	d8800317 	ldw	r2,12(sp)
   50850:	10000426 	beq	r2,zero,50864 <_strtoull_r+0x1ac>
   50854:	0109c83a 	sub	r4,zero,r4
   50858:	2004c03a 	cmpne	r2,r4,zero
   5085c:	014bc83a 	sub	r5,zero,r5
   50860:	288bc83a 	sub	r5,r5,r2
   50864:	d8800117 	ldw	r2,4(sp)
   50868:	10000626 	beq	r2,zero,50884 <_strtoull_r+0x1cc>
   5086c:	18000226 	beq	r3,zero,50878 <_strtoull_r+0x1c0>
   50870:	843fffc4 	addi	r16,r16,-1
   50874:	dc000015 	stw	r16,0(sp)
   50878:	d8800017 	ldw	r2,0(sp)
   5087c:	d8c00117 	ldw	r3,4(sp)
   50880:	18800015 	stw	r2,0(r3)
   50884:	2005883a 	mov	r2,r4
   50888:	2807883a 	mov	r3,r5
   5088c:	dfc00f17 	ldw	ra,60(sp)
   50890:	df000e17 	ldw	fp,56(sp)
   50894:	ddc00d17 	ldw	r23,52(sp)
   50898:	dd800c17 	ldw	r22,48(sp)
   5089c:	dd400b17 	ldw	r21,44(sp)
   508a0:	dd000a17 	ldw	r20,40(sp)
   508a4:	dcc00917 	ldw	r19,36(sp)
   508a8:	dc800817 	ldw	r18,32(sp)
   508ac:	dc400717 	ldw	r17,28(sp)
   508b0:	dc000617 	ldw	r16,24(sp)
   508b4:	dec01004 	addi	sp,sp,64
   508b8:	f800283a 	ret
   508bc:	24400e26 	beq	r4,r17,508f8 <_strtoull_r+0x240>
   508c0:	980d883a 	mov	r6,r19
   508c4:	900f883a 	mov	r7,r18
   508c8:	0051e380 	call	51e38 <__muldi3>
   508cc:	a00dd7fa 	srai	r6,r20,31
   508d0:	a085883a 	add	r2,r20,r2
   508d4:	1511803a 	cmpltu	r8,r2,r20
   508d8:	30c7883a 	add	r3,r6,r3
   508dc:	40cb883a 	add	r5,r8,r3
   508e0:	1009883a 	mov	r4,r2
   508e4:	00c00044 	movi	r3,1
   508e8:	003fc606 	br	50804 <__alt_data_end+0xfffde804>
   508ec:	008015c4 	movi	r2,87
   508f0:	40a9c83a 	sub	r20,r8,r2
   508f4:	003fd206 	br	50840 <__alt_data_end+0xfffde840>
   508f8:	2dfff11e 	bne	r5,r23,508c0 <__alt_data_end+0xfffde8c0>
   508fc:	d8800217 	ldw	r2,8(sp)
   50900:	153fbf16 	blt	r2,r20,50800 <__alt_data_end+0xfffde800>
   50904:	003fee06 	br	508c0 <__alt_data_end+0xfffde8c0>
   50908:	d9000417 	ldw	r4,16(sp)
   5090c:	00800884 	movi	r2,34
   50910:	180b883a 	mov	r5,r3
   50914:	20800015 	stw	r2,0(r4)
   50918:	d8800117 	ldw	r2,4(sp)
   5091c:	1809883a 	mov	r4,r3
   50920:	103fd31e 	bne	r2,zero,50870 <__alt_data_end+0xfffde870>
   50924:	003fd706 	br	50884 <__alt_data_end+0xfffde884>
   50928:	00800044 	movi	r2,1
   5092c:	82000007 	ldb	r8,0(r16)
   50930:	d8800315 	stw	r2,12(sp)
   50934:	80a1883a 	add	r16,r16,r2
   50938:	003f8006 	br	5073c <__alt_data_end+0xfffde73c>
   5093c:	82000007 	ldb	r8,0(r16)
   50940:	d8000315 	stw	zero,12(sp)
   50944:	84000044 	addi	r16,r16,1
   50948:	003f7c06 	br	5073c <__alt_data_end+0xfffde73c>
   5094c:	80800007 	ldb	r2,0(r16)
   50950:	00c01e04 	movi	r3,120
   50954:	10c00d26 	beq	r2,r3,5098c <_strtoull_r+0x2d4>
   50958:	00c01604 	movi	r3,88
   5095c:	10c00b26 	beq	r2,r3,5098c <_strtoull_r+0x2d4>
   50960:	e000291e 	bne	fp,zero,50a08 <_strtoull_r+0x350>
   50964:	04c00204 	movi	r19,8
   50968:	008001c4 	movi	r2,7
   5096c:	d8800215 	stw	r2,8(sp)
   50970:	047fffc4 	movi	r17,-1
   50974:	05c80034 	movhi	r23,8192
   50978:	bdffffc4 	addi	r23,r23,-1
   5097c:	0025883a 	mov	r18,zero
   50980:	02000c04 	movi	r8,48
   50984:	9839883a 	mov	fp,r19
   50988:	003f8c06 	br	507bc <__alt_data_end+0xfffde7bc>
   5098c:	04c00404 	movi	r19,16
   50990:	008003c4 	movi	r2,15
   50994:	82000047 	ldb	r8,1(r16)
   50998:	d8800215 	stw	r2,8(sp)
   5099c:	84000084 	addi	r16,r16,2
   509a0:	047fffc4 	movi	r17,-1
   509a4:	05c40034 	movhi	r23,4096
   509a8:	bdffffc4 	addi	r23,r23,-1
   509ac:	0025883a 	mov	r18,zero
   509b0:	9839883a 	mov	fp,r19
   509b4:	003f8106 	br	507bc <__alt_data_end+0xfffde7bc>
   509b8:	00800c04 	movi	r2,48
   509bc:	40bfe326 	beq	r8,r2,5094c <__alt_data_end+0xfffde94c>
   509c0:	013fffc4 	movi	r4,-1
   509c4:	200b883a 	mov	r5,r4
   509c8:	e00d883a 	mov	r6,fp
   509cc:	000f883a 	mov	r7,zero
   509d0:	da000515 	stw	r8,20(sp)
   509d4:	0051f1c0 	call	51f1c <__udivdi3>
   509d8:	013fffc4 	movi	r4,-1
   509dc:	200b883a 	mov	r5,r4
   509e0:	e00d883a 	mov	r6,fp
   509e4:	000f883a 	mov	r7,zero
   509e8:	1023883a 	mov	r17,r2
   509ec:	182f883a 	mov	r23,r3
   509f0:	00524e40 	call	524e4 <__umoddi3>
   509f4:	d8800215 	stw	r2,8(sp)
   509f8:	e027883a 	mov	r19,fp
   509fc:	0025883a 	mov	r18,zero
   50a00:	da000517 	ldw	r8,20(sp)
   50a04:	003f6d06 	br	507bc <__alt_data_end+0xfffde7bc>
   50a08:	e025d7fa 	srai	r18,fp,31
   50a0c:	013fffc4 	movi	r4,-1
   50a10:	200b883a 	mov	r5,r4
   50a14:	e00d883a 	mov	r6,fp
   50a18:	900f883a 	mov	r7,r18
   50a1c:	0051f1c0 	call	51f1c <__udivdi3>
   50a20:	013fffc4 	movi	r4,-1
   50a24:	200b883a 	mov	r5,r4
   50a28:	e00d883a 	mov	r6,fp
   50a2c:	900f883a 	mov	r7,r18
   50a30:	1023883a 	mov	r17,r2
   50a34:	182f883a 	mov	r23,r3
   50a38:	00524e40 	call	524e4 <__umoddi3>
   50a3c:	d8800215 	stw	r2,8(sp)
   50a40:	e027883a 	mov	r19,fp
   50a44:	02000c04 	movi	r8,48
   50a48:	003f5c06 	br	507bc <__alt_data_end+0xfffde7bc>

00050a4c <__submore>:
   50a4c:	defffa04 	addi	sp,sp,-24
   50a50:	dc000015 	stw	r16,0(sp)
   50a54:	2821883a 	mov	r16,r5
   50a58:	29400c17 	ldw	r5,48(r5)
   50a5c:	dfc00515 	stw	ra,20(sp)
   50a60:	dd000415 	stw	r20,16(sp)
   50a64:	dcc00315 	stw	r19,12(sp)
   50a68:	dc800215 	stw	r18,8(sp)
   50a6c:	dc400115 	stw	r17,4(sp)
   50a70:	80801004 	addi	r2,r16,64
   50a74:	28801726 	beq	r5,r2,50ad4 <__submore+0x88>
   50a78:	84400d17 	ldw	r17,52(r16)
   50a7c:	8c67883a 	add	r19,r17,r17
   50a80:	980d883a 	mov	r6,r19
   50a84:	004dc940 	call	4dc94 <_realloc_r>
   50a88:	1025883a 	mov	r18,r2
   50a8c:	10002926 	beq	r2,zero,50b34 <__submore+0xe8>
   50a90:	1469883a 	add	r20,r2,r17
   50a94:	a009883a 	mov	r4,r20
   50a98:	100b883a 	mov	r5,r2
   50a9c:	880d883a 	mov	r6,r17
   50aa0:	004c8440 	call	4c844 <memcpy>
   50aa4:	0005883a 	mov	r2,zero
   50aa8:	85000015 	stw	r20,0(r16)
   50aac:	84800c15 	stw	r18,48(r16)
   50ab0:	84c00d15 	stw	r19,52(r16)
   50ab4:	dfc00517 	ldw	ra,20(sp)
   50ab8:	dd000417 	ldw	r20,16(sp)
   50abc:	dcc00317 	ldw	r19,12(sp)
   50ac0:	dc800217 	ldw	r18,8(sp)
   50ac4:	dc400117 	ldw	r17,4(sp)
   50ac8:	dc000017 	ldw	r16,0(sp)
   50acc:	dec00604 	addi	sp,sp,24
   50ad0:	f800283a 	ret
   50ad4:	04410004 	movi	r17,1024
   50ad8:	880b883a 	mov	r5,r17
   50adc:	004bee00 	call	4bee0 <_malloc_r>
   50ae0:	1007883a 	mov	r3,r2
   50ae4:	10001326 	beq	r2,zero,50b34 <__submore+0xe8>
   50ae8:	80801083 	ldbu	r2,66(r16)
   50aec:	80c00c15 	stw	r3,48(r16)
   50af0:	84400d15 	stw	r17,52(r16)
   50af4:	1880ffc5 	stb	r2,1023(r3)
   50af8:	81401043 	ldbu	r5,65(r16)
   50afc:	1900ff44 	addi	r4,r3,1021
   50b00:	0005883a 	mov	r2,zero
   50b04:	1940ff85 	stb	r5,1022(r3)
   50b08:	81401003 	ldbu	r5,64(r16)
   50b0c:	1940ff45 	stb	r5,1021(r3)
   50b10:	81000015 	stw	r4,0(r16)
   50b14:	dfc00517 	ldw	ra,20(sp)
   50b18:	dd000417 	ldw	r20,16(sp)
   50b1c:	dcc00317 	ldw	r19,12(sp)
   50b20:	dc800217 	ldw	r18,8(sp)
   50b24:	dc400117 	ldw	r17,4(sp)
   50b28:	dc000017 	ldw	r16,0(sp)
   50b2c:	dec00604 	addi	sp,sp,24
   50b30:	f800283a 	ret
   50b34:	00bfffc4 	movi	r2,-1
   50b38:	003fde06 	br	50ab4 <__alt_data_end+0xfffdeab4>

00050b3c <_ungetc_r>:
   50b3c:	defffc04 	addi	sp,sp,-16
   50b40:	dc800215 	stw	r18,8(sp)
   50b44:	dc400115 	stw	r17,4(sp)
   50b48:	dc000015 	stw	r16,0(sp)
   50b4c:	dfc00315 	stw	ra,12(sp)
   50b50:	00bfffc4 	movi	r2,-1
   50b54:	2825883a 	mov	r18,r5
   50b58:	2023883a 	mov	r17,r4
   50b5c:	3021883a 	mov	r16,r6
   50b60:	28803026 	beq	r5,r2,50c24 <_ungetc_r+0xe8>
   50b64:	20000226 	beq	r4,zero,50b70 <_ungetc_r+0x34>
   50b68:	20800e17 	ldw	r2,56(r4)
   50b6c:	10002f26 	beq	r2,zero,50c2c <_ungetc_r+0xf0>
   50b70:	80c0030b 	ldhu	r3,12(r16)
   50b74:	00bff7c4 	movi	r2,-33
   50b78:	1900010c 	andi	r4,r3,4
   50b7c:	213fffcc 	andi	r4,r4,65535
   50b80:	1884703a 	and	r2,r3,r2
   50b84:	2120001c 	xori	r4,r4,32768
   50b88:	8080030d 	sth	r2,12(r16)
   50b8c:	21200004 	addi	r4,r4,-32768
   50b90:	20000c1e 	bne	r4,zero,50bc4 <_ungetc_r+0x88>
   50b94:	1900040c 	andi	r4,r3,16
   50b98:	213fffcc 	andi	r4,r4,65535
   50b9c:	2120001c 	xori	r4,r4,32768
   50ba0:	21200004 	addi	r4,r4,-32768
   50ba4:	20001f26 	beq	r4,zero,50c24 <_ungetc_r+0xe8>
   50ba8:	18c0020c 	andi	r3,r3,8
   50bac:	18ffffcc 	andi	r3,r3,65535
   50bb0:	18e0001c 	xori	r3,r3,32768
   50bb4:	18e00004 	addi	r3,r3,-32768
   50bb8:	1800371e 	bne	r3,zero,50c98 <_ungetc_r+0x15c>
   50bbc:	10800114 	ori	r2,r2,4
   50bc0:	8080030d 	sth	r2,12(r16)
   50bc4:	80800c17 	ldw	r2,48(r16)
   50bc8:	94803fcc 	andi	r18,r18,255
   50bcc:	10001926 	beq	r2,zero,50c34 <_ungetc_r+0xf8>
   50bd0:	80c00117 	ldw	r3,4(r16)
   50bd4:	80800d17 	ldw	r2,52(r16)
   50bd8:	18800e0e 	bge	r3,r2,50c14 <_ungetc_r+0xd8>
   50bdc:	80800017 	ldw	r2,0(r16)
   50be0:	10ffffc4 	addi	r3,r2,-1
   50be4:	80c00015 	stw	r3,0(r16)
   50be8:	14bfffc5 	stb	r18,-1(r2)
   50bec:	80800117 	ldw	r2,4(r16)
   50bf0:	10800044 	addi	r2,r2,1
   50bf4:	80800115 	stw	r2,4(r16)
   50bf8:	9005883a 	mov	r2,r18
   50bfc:	dfc00317 	ldw	ra,12(sp)
   50c00:	dc800217 	ldw	r18,8(sp)
   50c04:	dc400117 	ldw	r17,4(sp)
   50c08:	dc000017 	ldw	r16,0(sp)
   50c0c:	dec00404 	addi	sp,sp,16
   50c10:	f800283a 	ret
   50c14:	8809883a 	mov	r4,r17
   50c18:	800b883a 	mov	r5,r16
   50c1c:	0050a4c0 	call	50a4c <__submore>
   50c20:	103fee26 	beq	r2,zero,50bdc <__alt_data_end+0xfffdebdc>
   50c24:	04bfffc4 	movi	r18,-1
   50c28:	003ff306 	br	50bf8 <__alt_data_end+0xfffdebf8>
   50c2c:	004ad200 	call	4ad20 <__sinit>
   50c30:	003fcf06 	br	50b70 <__alt_data_end+0xfffdeb70>
   50c34:	80c00417 	ldw	r3,16(r16)
   50c38:	80800017 	ldw	r2,0(r16)
   50c3c:	18000326 	beq	r3,zero,50c4c <_ungetc_r+0x110>
   50c40:	1880022e 	bgeu	r3,r2,50c4c <_ungetc_r+0x110>
   50c44:	10ffffc3 	ldbu	r3,-1(r2)
   50c48:	1c801d26 	beq	r3,r18,50cc0 <_ungetc_r+0x184>
   50c4c:	81400117 	ldw	r5,4(r16)
   50c50:	80800e15 	stw	r2,56(r16)
   50c54:	008000c4 	movi	r2,3
   50c58:	80800d15 	stw	r2,52(r16)
   50c5c:	00800044 	movi	r2,1
   50c60:	81001004 	addi	r4,r16,64
   50c64:	80c01084 	addi	r3,r16,66
   50c68:	80800115 	stw	r2,4(r16)
   50c6c:	9005883a 	mov	r2,r18
   50c70:	81400f15 	stw	r5,60(r16)
   50c74:	81000c15 	stw	r4,48(r16)
   50c78:	84801085 	stb	r18,66(r16)
   50c7c:	80c00015 	stw	r3,0(r16)
   50c80:	dfc00317 	ldw	ra,12(sp)
   50c84:	dc800217 	ldw	r18,8(sp)
   50c88:	dc400117 	ldw	r17,4(sp)
   50c8c:	dc000017 	ldw	r16,0(sp)
   50c90:	dec00404 	addi	sp,sp,16
   50c94:	f800283a 	ret
   50c98:	8809883a 	mov	r4,r17
   50c9c:	800b883a 	mov	r5,r16
   50ca0:	004aa780 	call	4aa78 <_fflush_r>
   50ca4:	103fdf1e 	bne	r2,zero,50c24 <__alt_data_end+0xfffdec24>
   50ca8:	8080030b 	ldhu	r2,12(r16)
   50cac:	00fffdc4 	movi	r3,-9
   50cb0:	80000215 	stw	zero,8(r16)
   50cb4:	1884703a 	and	r2,r3,r2
   50cb8:	80000615 	stw	zero,24(r16)
   50cbc:	003fbf06 	br	50bbc <__alt_data_end+0xfffdebbc>
   50cc0:	80c00117 	ldw	r3,4(r16)
   50cc4:	10bfffc4 	addi	r2,r2,-1
   50cc8:	80800015 	stw	r2,0(r16)
   50ccc:	18800044 	addi	r2,r3,1
   50cd0:	80800115 	stw	r2,4(r16)
   50cd4:	003fc806 	br	50bf8 <__alt_data_end+0xfffdebf8>

00050cd8 <ungetc>:
   50cd8:	00c00174 	movhi	r3,5
   50cdc:	18df5504 	addi	r3,r3,32084
   50ce0:	2005883a 	mov	r2,r4
   50ce4:	19000017 	ldw	r4,0(r3)
   50ce8:	280d883a 	mov	r6,r5
   50cec:	100b883a 	mov	r5,r2
   50cf0:	0050b3c1 	jmpi	50b3c <_ungetc_r>

00050cf4 <__swbuf_r>:
   50cf4:	defffc04 	addi	sp,sp,-16
   50cf8:	dc800215 	stw	r18,8(sp)
   50cfc:	dc400115 	stw	r17,4(sp)
   50d00:	dc000015 	stw	r16,0(sp)
   50d04:	dfc00315 	stw	ra,12(sp)
   50d08:	2023883a 	mov	r17,r4
   50d0c:	2825883a 	mov	r18,r5
   50d10:	3021883a 	mov	r16,r6
   50d14:	20000226 	beq	r4,zero,50d20 <__swbuf_r+0x2c>
   50d18:	20800e17 	ldw	r2,56(r4)
   50d1c:	10003b26 	beq	r2,zero,50e0c <__swbuf_r+0x118>
   50d20:	8080030b 	ldhu	r2,12(r16)
   50d24:	80c00617 	ldw	r3,24(r16)
   50d28:	1080020c 	andi	r2,r2,8
   50d2c:	10bfffcc 	andi	r2,r2,65535
   50d30:	10a0001c 	xori	r2,r2,32768
   50d34:	80c00215 	stw	r3,8(r16)
   50d38:	10a00004 	addi	r2,r2,-32768
   50d3c:	10002226 	beq	r2,zero,50dc8 <__swbuf_r+0xd4>
   50d40:	80800417 	ldw	r2,16(r16)
   50d44:	10002026 	beq	r2,zero,50dc8 <__swbuf_r+0xd4>
   50d48:	80c00017 	ldw	r3,0(r16)
   50d4c:	81000517 	ldw	r4,20(r16)
   50d50:	94803fcc 	andi	r18,r18,255
   50d54:	1885c83a 	sub	r2,r3,r2
   50d58:	1100250e 	bge	r2,r4,50df0 <__swbuf_r+0xfc>
   50d5c:	10800044 	addi	r2,r2,1
   50d60:	81400217 	ldw	r5,8(r16)
   50d64:	19000044 	addi	r4,r3,1
   50d68:	297fffc4 	addi	r5,r5,-1
   50d6c:	81400215 	stw	r5,8(r16)
   50d70:	1c800005 	stb	r18,0(r3)
   50d74:	80c00517 	ldw	r3,20(r16)
   50d78:	81000015 	stw	r4,0(r16)
   50d7c:	18800c26 	beq	r3,r2,50db0 <__swbuf_r+0xbc>
   50d80:	8080030b 	ldhu	r2,12(r16)
   50d84:	1080004c 	andi	r2,r2,1
   50d88:	10000226 	beq	r2,zero,50d94 <__swbuf_r+0xa0>
   50d8c:	00800284 	movi	r2,10
   50d90:	90800726 	beq	r18,r2,50db0 <__swbuf_r+0xbc>
   50d94:	9005883a 	mov	r2,r18
   50d98:	dfc00317 	ldw	ra,12(sp)
   50d9c:	dc800217 	ldw	r18,8(sp)
   50da0:	dc400117 	ldw	r17,4(sp)
   50da4:	dc000017 	ldw	r16,0(sp)
   50da8:	dec00404 	addi	sp,sp,16
   50dac:	f800283a 	ret
   50db0:	8809883a 	mov	r4,r17
   50db4:	800b883a 	mov	r5,r16
   50db8:	004aa780 	call	4aa78 <_fflush_r>
   50dbc:	103ff526 	beq	r2,zero,50d94 <__alt_data_end+0xfffded94>
   50dc0:	04bfffc4 	movi	r18,-1
   50dc4:	003ff306 	br	50d94 <__alt_data_end+0xfffded94>
   50dc8:	8809883a 	mov	r4,r17
   50dcc:	800b883a 	mov	r5,r16
   50dd0:	00490e00 	call	490e0 <__swsetup_r>
   50dd4:	10000f1e 	bne	r2,zero,50e14 <__swbuf_r+0x120>
   50dd8:	80800417 	ldw	r2,16(r16)
   50ddc:	80c00017 	ldw	r3,0(r16)
   50de0:	81000517 	ldw	r4,20(r16)
   50de4:	94803fcc 	andi	r18,r18,255
   50de8:	1885c83a 	sub	r2,r3,r2
   50dec:	113fdb16 	blt	r2,r4,50d5c <__alt_data_end+0xfffded5c>
   50df0:	8809883a 	mov	r4,r17
   50df4:	800b883a 	mov	r5,r16
   50df8:	004aa780 	call	4aa78 <_fflush_r>
   50dfc:	103ff01e 	bne	r2,zero,50dc0 <__alt_data_end+0xfffdedc0>
   50e00:	80c00017 	ldw	r3,0(r16)
   50e04:	00800044 	movi	r2,1
   50e08:	003fd506 	br	50d60 <__alt_data_end+0xfffded60>
   50e0c:	004ad200 	call	4ad20 <__sinit>
   50e10:	003fc306 	br	50d20 <__alt_data_end+0xfffded20>
   50e14:	8080030b 	ldhu	r2,12(r16)
   50e18:	04bfffc4 	movi	r18,-1
   50e1c:	10801014 	ori	r2,r2,64
   50e20:	8080030d 	sth	r2,12(r16)
   50e24:	00800244 	movi	r2,9
   50e28:	88800015 	stw	r2,0(r17)
   50e2c:	003fd906 	br	50d94 <__alt_data_end+0xfffded94>

00050e30 <__swbuf>:
   50e30:	00c00174 	movhi	r3,5
   50e34:	18df5504 	addi	r3,r3,32084
   50e38:	2005883a 	mov	r2,r4
   50e3c:	19000017 	ldw	r4,0(r3)
   50e40:	280d883a 	mov	r6,r5
   50e44:	100b883a 	mov	r5,r2
   50e48:	0050cf41 	jmpi	50cf4 <__swbuf_r>

00050e4c <_write_r>:
   50e4c:	defffd04 	addi	sp,sp,-12
   50e50:	dc400115 	stw	r17,4(sp)
   50e54:	dc000015 	stw	r16,0(sp)
   50e58:	2023883a 	mov	r17,r4
   50e5c:	040001b4 	movhi	r16,6
   50e60:	84261a04 	addi	r16,r16,-26520
   50e64:	2809883a 	mov	r4,r5
   50e68:	300b883a 	mov	r5,r6
   50e6c:	380d883a 	mov	r6,r7
   50e70:	dfc00215 	stw	ra,8(sp)
   50e74:	80000015 	stw	zero,0(r16)
   50e78:	00546580 	call	54658 <write>
   50e7c:	00ffffc4 	movi	r3,-1
   50e80:	10c00526 	beq	r2,r3,50e98 <_write_r+0x4c>
   50e84:	dfc00217 	ldw	ra,8(sp)
   50e88:	dc400117 	ldw	r17,4(sp)
   50e8c:	dc000017 	ldw	r16,0(sp)
   50e90:	dec00304 	addi	sp,sp,12
   50e94:	f800283a 	ret
   50e98:	80c00017 	ldw	r3,0(r16)
   50e9c:	183ff926 	beq	r3,zero,50e84 <__alt_data_end+0xfffdee84>
   50ea0:	88c00015 	stw	r3,0(r17)
   50ea4:	dfc00217 	ldw	ra,8(sp)
   50ea8:	dc400117 	ldw	r17,4(sp)
   50eac:	dc000017 	ldw	r16,0(sp)
   50eb0:	dec00304 	addi	sp,sp,12
   50eb4:	f800283a 	ret

00050eb8 <_calloc_r>:
   50eb8:	314b383a 	mul	r5,r6,r5
   50ebc:	defffe04 	addi	sp,sp,-8
   50ec0:	dc000015 	stw	r16,0(sp)
   50ec4:	dfc00115 	stw	ra,4(sp)
   50ec8:	004bee00 	call	4bee0 <_malloc_r>
   50ecc:	1021883a 	mov	r16,r2
   50ed0:	10000c26 	beq	r2,zero,50f04 <_calloc_r+0x4c>
   50ed4:	11bfff17 	ldw	r6,-4(r2)
   50ed8:	00ffff04 	movi	r3,-4
   50edc:	00800904 	movi	r2,36
   50ee0:	30cc703a 	and	r6,r6,r3
   50ee4:	30cd883a 	add	r6,r6,r3
   50ee8:	11801436 	bltu	r2,r6,50f3c <_calloc_r+0x84>
   50eec:	00c004c4 	movi	r3,19
   50ef0:	19800936 	bltu	r3,r6,50f18 <_calloc_r+0x60>
   50ef4:	8005883a 	mov	r2,r16
   50ef8:	10000015 	stw	zero,0(r2)
   50efc:	10000115 	stw	zero,4(r2)
   50f00:	10000215 	stw	zero,8(r2)
   50f04:	8005883a 	mov	r2,r16
   50f08:	dfc00117 	ldw	ra,4(sp)
   50f0c:	dc000017 	ldw	r16,0(sp)
   50f10:	dec00204 	addi	sp,sp,8
   50f14:	f800283a 	ret
   50f18:	80000015 	stw	zero,0(r16)
   50f1c:	80000115 	stw	zero,4(r16)
   50f20:	00c006c4 	movi	r3,27
   50f24:	19800d2e 	bgeu	r3,r6,50f5c <_calloc_r+0xa4>
   50f28:	80000215 	stw	zero,8(r16)
   50f2c:	80000315 	stw	zero,12(r16)
   50f30:	30800c26 	beq	r6,r2,50f64 <_calloc_r+0xac>
   50f34:	80800404 	addi	r2,r16,16
   50f38:	003fef06 	br	50ef8 <__alt_data_end+0xfffdeef8>
   50f3c:	8009883a 	mov	r4,r16
   50f40:	000b883a 	mov	r5,zero
   50f44:	004ca640 	call	4ca64 <memset>
   50f48:	8005883a 	mov	r2,r16
   50f4c:	dfc00117 	ldw	ra,4(sp)
   50f50:	dc000017 	ldw	r16,0(sp)
   50f54:	dec00204 	addi	sp,sp,8
   50f58:	f800283a 	ret
   50f5c:	80800204 	addi	r2,r16,8
   50f60:	003fe506 	br	50ef8 <__alt_data_end+0xfffdeef8>
   50f64:	80000415 	stw	zero,16(r16)
   50f68:	80000515 	stw	zero,20(r16)
   50f6c:	80800604 	addi	r2,r16,24
   50f70:	003fe106 	br	50ef8 <__alt_data_end+0xfffdeef8>

00050f74 <_close_r>:
   50f74:	defffd04 	addi	sp,sp,-12
   50f78:	dc400115 	stw	r17,4(sp)
   50f7c:	dc000015 	stw	r16,0(sp)
   50f80:	2023883a 	mov	r17,r4
   50f84:	040001b4 	movhi	r16,6
   50f88:	84261a04 	addi	r16,r16,-26520
   50f8c:	2809883a 	mov	r4,r5
   50f90:	dfc00215 	stw	ra,8(sp)
   50f94:	80000015 	stw	zero,0(r16)
   50f98:	00541680 	call	54168 <close>
   50f9c:	00ffffc4 	movi	r3,-1
   50fa0:	10c00526 	beq	r2,r3,50fb8 <_close_r+0x44>
   50fa4:	dfc00217 	ldw	ra,8(sp)
   50fa8:	dc400117 	ldw	r17,4(sp)
   50fac:	dc000017 	ldw	r16,0(sp)
   50fb0:	dec00304 	addi	sp,sp,12
   50fb4:	f800283a 	ret
   50fb8:	80c00017 	ldw	r3,0(r16)
   50fbc:	183ff926 	beq	r3,zero,50fa4 <__alt_data_end+0xfffdefa4>
   50fc0:	88c00015 	stw	r3,0(r17)
   50fc4:	dfc00217 	ldw	ra,8(sp)
   50fc8:	dc400117 	ldw	r17,4(sp)
   50fcc:	dc000017 	ldw	r16,0(sp)
   50fd0:	dec00304 	addi	sp,sp,12
   50fd4:	f800283a 	ret

00050fd8 <_fclose_r>:
   50fd8:	defffc04 	addi	sp,sp,-16
   50fdc:	dc400115 	stw	r17,4(sp)
   50fe0:	dc000015 	stw	r16,0(sp)
   50fe4:	dfc00315 	stw	ra,12(sp)
   50fe8:	dc800215 	stw	r18,8(sp)
   50fec:	2821883a 	mov	r16,r5
   50ff0:	2023883a 	mov	r17,r4
   50ff4:	28003426 	beq	r5,zero,510c8 <_fclose_r+0xf0>
   50ff8:	004af280 	call	4af28 <__sfp_lock_acquire>
   50ffc:	88000226 	beq	r17,zero,51008 <_fclose_r+0x30>
   51000:	88800e17 	ldw	r2,56(r17)
   51004:	10003826 	beq	r2,zero,510e8 <_fclose_r+0x110>
   51008:	8080030f 	ldh	r2,12(r16)
   5100c:	10002526 	beq	r2,zero,510a4 <_fclose_r+0xcc>
   51010:	8809883a 	mov	r4,r17
   51014:	800b883a 	mov	r5,r16
   51018:	004aa780 	call	4aa78 <_fflush_r>
   5101c:	1025883a 	mov	r18,r2
   51020:	80800b17 	ldw	r2,44(r16)
   51024:	10000426 	beq	r2,zero,51038 <_fclose_r+0x60>
   51028:	81400717 	ldw	r5,28(r16)
   5102c:	8809883a 	mov	r4,r17
   51030:	103ee83a 	callr	r2
   51034:	10003516 	blt	r2,zero,5110c <_fclose_r+0x134>
   51038:	8080030b 	ldhu	r2,12(r16)
   5103c:	1080200c 	andi	r2,r2,128
   51040:	10bfffcc 	andi	r2,r2,65535
   51044:	10a0001c 	xori	r2,r2,32768
   51048:	10a00004 	addi	r2,r2,-32768
   5104c:	10002b1e 	bne	r2,zero,510fc <_fclose_r+0x124>
   51050:	81400c17 	ldw	r5,48(r16)
   51054:	28000526 	beq	r5,zero,5106c <_fclose_r+0x94>
   51058:	80801004 	addi	r2,r16,64
   5105c:	28800226 	beq	r5,r2,51068 <_fclose_r+0x90>
   51060:	8809883a 	mov	r4,r17
   51064:	004b3100 	call	4b310 <_free_r>
   51068:	80000c15 	stw	zero,48(r16)
   5106c:	81401117 	ldw	r5,68(r16)
   51070:	28000326 	beq	r5,zero,51080 <_fclose_r+0xa8>
   51074:	8809883a 	mov	r4,r17
   51078:	004b3100 	call	4b310 <_free_r>
   5107c:	80001115 	stw	zero,68(r16)
   51080:	8000030d 	sth	zero,12(r16)
   51084:	004af2c0 	call	4af2c <__sfp_lock_release>
   51088:	9005883a 	mov	r2,r18
   5108c:	dfc00317 	ldw	ra,12(sp)
   51090:	dc800217 	ldw	r18,8(sp)
   51094:	dc400117 	ldw	r17,4(sp)
   51098:	dc000017 	ldw	r16,0(sp)
   5109c:	dec00404 	addi	sp,sp,16
   510a0:	f800283a 	ret
   510a4:	004af2c0 	call	4af2c <__sfp_lock_release>
   510a8:	0025883a 	mov	r18,zero
   510ac:	9005883a 	mov	r2,r18
   510b0:	dfc00317 	ldw	ra,12(sp)
   510b4:	dc800217 	ldw	r18,8(sp)
   510b8:	dc400117 	ldw	r17,4(sp)
   510bc:	dc000017 	ldw	r16,0(sp)
   510c0:	dec00404 	addi	sp,sp,16
   510c4:	f800283a 	ret
   510c8:	0025883a 	mov	r18,zero
   510cc:	9005883a 	mov	r2,r18
   510d0:	dfc00317 	ldw	ra,12(sp)
   510d4:	dc800217 	ldw	r18,8(sp)
   510d8:	dc400117 	ldw	r17,4(sp)
   510dc:	dc000017 	ldw	r16,0(sp)
   510e0:	dec00404 	addi	sp,sp,16
   510e4:	f800283a 	ret
   510e8:	8809883a 	mov	r4,r17
   510ec:	004ad200 	call	4ad20 <__sinit>
   510f0:	8080030f 	ldh	r2,12(r16)
   510f4:	103fc61e 	bne	r2,zero,51010 <__alt_data_end+0xfffdf010>
   510f8:	003fea06 	br	510a4 <__alt_data_end+0xfffdf0a4>
   510fc:	81400417 	ldw	r5,16(r16)
   51100:	8809883a 	mov	r4,r17
   51104:	004b3100 	call	4b310 <_free_r>
   51108:	003fd106 	br	51050 <__alt_data_end+0xfffdf050>
   5110c:	04bfffc4 	movi	r18,-1
   51110:	003fc906 	br	51038 <__alt_data_end+0xfffdf038>

00051114 <fclose>:
   51114:	00800174 	movhi	r2,5
   51118:	109f5504 	addi	r2,r2,32084
   5111c:	200b883a 	mov	r5,r4
   51120:	11000017 	ldw	r4,0(r2)
   51124:	0050fd81 	jmpi	50fd8 <_fclose_r>

00051128 <_fstat_r>:
   51128:	defffd04 	addi	sp,sp,-12
   5112c:	dc400115 	stw	r17,4(sp)
   51130:	dc000015 	stw	r16,0(sp)
   51134:	2023883a 	mov	r17,r4
   51138:	040001b4 	movhi	r16,6
   5113c:	84261a04 	addi	r16,r16,-26520
   51140:	2809883a 	mov	r4,r5
   51144:	300b883a 	mov	r5,r6
   51148:	dfc00215 	stw	ra,8(sp)
   5114c:	80000015 	stw	zero,0(r16)
   51150:	00542340 	call	54234 <fstat>
   51154:	00ffffc4 	movi	r3,-1
   51158:	10c00526 	beq	r2,r3,51170 <_fstat_r+0x48>
   5115c:	dfc00217 	ldw	ra,8(sp)
   51160:	dc400117 	ldw	r17,4(sp)
   51164:	dc000017 	ldw	r16,0(sp)
   51168:	dec00304 	addi	sp,sp,12
   5116c:	f800283a 	ret
   51170:	80c00017 	ldw	r3,0(r16)
   51174:	183ff926 	beq	r3,zero,5115c <__alt_data_end+0xfffdf15c>
   51178:	88c00015 	stw	r3,0(r17)
   5117c:	dfc00217 	ldw	ra,8(sp)
   51180:	dc400117 	ldw	r17,4(sp)
   51184:	dc000017 	ldw	r16,0(sp)
   51188:	dec00304 	addi	sp,sp,12
   5118c:	f800283a 	ret

00051190 <rshift>:
   51190:	2805d17a 	srai	r2,r5,5
   51194:	20c00417 	ldw	r3,16(r4)
   51198:	22800504 	addi	r10,r4,20
   5119c:	10c0270e 	bge	r2,r3,5123c <rshift+0xac>
   511a0:	19800144 	addi	r6,r3,5
   511a4:	12c00144 	addi	r11,r2,5
   511a8:	318d883a 	add	r6,r6,r6
   511ac:	5ad7883a 	add	r11,r11,r11
   511b0:	318d883a 	add	r6,r6,r6
   511b4:	5ad7883a 	add	r11,r11,r11
   511b8:	294007cc 	andi	r5,r5,31
   511bc:	218d883a 	add	r6,r4,r6
   511c0:	22d7883a 	add	r11,r4,r11
   511c4:	28002026 	beq	r5,zero,51248 <rshift+0xb8>
   511c8:	59c00017 	ldw	r7,0(r11)
   511cc:	02400804 	movi	r9,32
   511d0:	58800104 	addi	r2,r11,4
   511d4:	4953c83a 	sub	r9,r9,r5
   511d8:	394ed83a 	srl	r7,r7,r5
   511dc:	11802e2e 	bgeu	r2,r6,51298 <rshift+0x108>
   511e0:	5007883a 	mov	r3,r10
   511e4:	12000017 	ldw	r8,0(r2)
   511e8:	18c00104 	addi	r3,r3,4
   511ec:	10800104 	addi	r2,r2,4
   511f0:	4250983a 	sll	r8,r8,r9
   511f4:	3a0eb03a 	or	r7,r7,r8
   511f8:	19ffff15 	stw	r7,-4(r3)
   511fc:	11ffff17 	ldw	r7,-4(r2)
   51200:	394ed83a 	srl	r7,r7,r5
   51204:	11bff736 	bltu	r2,r6,511e4 <__alt_data_end+0xfffdf1e4>
   51208:	32c5c83a 	sub	r2,r6,r11
   5120c:	10bffec4 	addi	r2,r2,-5
   51210:	1004d0ba 	srli	r2,r2,2
   51214:	10800184 	addi	r2,r2,6
   51218:	1085883a 	add	r2,r2,r2
   5121c:	1085883a 	add	r2,r2,r2
   51220:	2085883a 	add	r2,r4,r2
   51224:	11c00015 	stw	r7,0(r2)
   51228:	38001626 	beq	r7,zero,51284 <rshift+0xf4>
   5122c:	10800104 	addi	r2,r2,4
   51230:	1295c83a 	sub	r10,r2,r10
   51234:	5015d0ba 	srai	r10,r10,2
   51238:	00001406 	br	5128c <rshift+0xfc>
   5123c:	20000415 	stw	zero,16(r4)
   51240:	20000515 	stw	zero,20(r4)
   51244:	f800283a 	ret
   51248:	59bffc2e 	bgeu	r11,r6,5123c <__alt_data_end+0xfffdf23c>
   5124c:	5007883a 	mov	r3,r10
   51250:	5805883a 	mov	r2,r11
   51254:	11400017 	ldw	r5,0(r2)
   51258:	18c00104 	addi	r3,r3,4
   5125c:	10800104 	addi	r2,r2,4
   51260:	197fff15 	stw	r5,-4(r3)
   51264:	11bffb36 	bltu	r2,r6,51254 <__alt_data_end+0xfffdf254>
   51268:	02c4303a 	nor	r2,zero,r11
   5126c:	1185883a 	add	r2,r2,r6
   51270:	1004d0ba 	srli	r2,r2,2
   51274:	10800184 	addi	r2,r2,6
   51278:	1085883a 	add	r2,r2,r2
   5127c:	1085883a 	add	r2,r2,r2
   51280:	2085883a 	add	r2,r4,r2
   51284:	1295c83a 	sub	r10,r2,r10
   51288:	5015d0ba 	srai	r10,r10,2
   5128c:	22800415 	stw	r10,16(r4)
   51290:	503feb26 	beq	r10,zero,51240 <__alt_data_end+0xfffdf240>
   51294:	f800283a 	ret
   51298:	5005883a 	mov	r2,r10
   5129c:	003fe106 	br	51224 <__alt_data_end+0xfffdf224>

000512a0 <__hexdig_init>:
   512a0:	01400174 	movhi	r5,5
   512a4:	29587244 	addi	r5,r5,25033
   512a8:	01000404 	movi	r4,16
   512ac:	00c00c04 	movi	r3,48
   512b0:	008001b4 	movhi	r2,6
   512b4:	10a62b04 	addi	r2,r2,-26452
   512b8:	29800003 	ldbu	r6,0(r5)
   512bc:	10c7883a 	add	r3,r2,r3
   512c0:	19000005 	stb	r4,0(r3)
   512c4:	29400044 	addi	r5,r5,1
   512c8:	3007883a 	mov	r3,r6
   512cc:	21000044 	addi	r4,r4,1
   512d0:	303ff91e 	bne	r6,zero,512b8 <__alt_data_end+0xfffdf2b8>
   512d4:	01400174 	movhi	r5,5
   512d8:	29587044 	addi	r5,r5,25025
   512dc:	01000684 	movi	r4,26
   512e0:	00c01844 	movi	r3,97
   512e4:	29800003 	ldbu	r6,0(r5)
   512e8:	10c7883a 	add	r3,r2,r3
   512ec:	19000005 	stb	r4,0(r3)
   512f0:	29400044 	addi	r5,r5,1
   512f4:	3007883a 	mov	r3,r6
   512f8:	21000044 	addi	r4,r4,1
   512fc:	303ff91e 	bne	r6,zero,512e4 <__alt_data_end+0xfffdf2e4>
   51300:	01400174 	movhi	r5,5
   51304:	29586e44 	addi	r5,r5,25017
   51308:	01000684 	movi	r4,26
   5130c:	00c01044 	movi	r3,65
   51310:	29800003 	ldbu	r6,0(r5)
   51314:	10c7883a 	add	r3,r2,r3
   51318:	19000005 	stb	r4,0(r3)
   5131c:	29400044 	addi	r5,r5,1
   51320:	3007883a 	mov	r3,r6
   51324:	21000044 	addi	r4,r4,1
   51328:	303ff91e 	bne	r6,zero,51310 <__alt_data_end+0xfffdf310>
   5132c:	f800283a 	ret

00051330 <__gethex>:
   51330:	defff504 	addi	sp,sp,-44
   51334:	dd800715 	stw	r22,28(sp)
   51338:	dcc00415 	stw	r19,16(sp)
   5133c:	dc800315 	stw	r18,12(sp)
   51340:	dc400215 	stw	r17,8(sp)
   51344:	dfc00a15 	stw	ra,40(sp)
   51348:	df000915 	stw	fp,36(sp)
   5134c:	ddc00815 	stw	r23,32(sp)
   51350:	dd400615 	stw	r21,24(sp)
   51354:	dd000515 	stw	r20,20(sp)
   51358:	dc000115 	stw	r16,4(sp)
   5135c:	058001b4 	movhi	r22,6
   51360:	b5a62b04 	addi	r22,r22,-26452
   51364:	b0800c03 	ldbu	r2,48(r22)
   51368:	2025883a 	mov	r18,r4
   5136c:	3023883a 	mov	r17,r6
   51370:	3827883a 	mov	r19,r7
   51374:	1000b126 	beq	r2,zero,5163c <__gethex+0x30c>
   51378:	29000017 	ldw	r4,0(r5)
   5137c:	00800c04 	movi	r2,48
   51380:	20c00083 	ldbu	r3,2(r4)
   51384:	25000084 	addi	r20,r4,2
   51388:	1881521e 	bne	r3,r2,518d4 <__gethex+0x5a4>
   5138c:	01bfff84 	movi	r6,-2
   51390:	208000c4 	addi	r2,r4,3
   51394:	310dc83a 	sub	r6,r6,r4
   51398:	1809883a 	mov	r4,r3
   5139c:	308f883a 	add	r7,r6,r2
   513a0:	1029883a 	mov	r20,r2
   513a4:	10800044 	addi	r2,r2,1
   513a8:	10ffffc3 	ldbu	r3,-1(r2)
   513ac:	193ffb26 	beq	r3,r4,5139c <__alt_data_end+0xfffdf39c>
   513b0:	b0c5883a 	add	r2,r22,r3
   513b4:	10800003 	ldbu	r2,0(r2)
   513b8:	018001b4 	movhi	r6,6
   513bc:	31a62b04 	addi	r6,r6,-26452
   513c0:	10002a26 	beq	r2,zero,5146c <__gethex+0x13c>
   513c4:	a0800003 	ldbu	r2,0(r20)
   513c8:	0009883a 	mov	r4,zero
   513cc:	308d883a 	add	r6,r6,r2
   513d0:	30c00003 	ldbu	r3,0(r6)
   513d4:	18015b26 	beq	r3,zero,51944 <__gethex+0x614>
   513d8:	a021883a 	mov	r16,r20
   513dc:	84000044 	addi	r16,r16,1
   513e0:	80800003 	ldbu	r2,0(r16)
   513e4:	b087883a 	add	r3,r22,r2
   513e8:	18c00003 	ldbu	r3,0(r3)
   513ec:	183ffb1e 	bne	r3,zero,513dc <__alt_data_end+0xfffdf3dc>
   513f0:	0011883a 	mov	r8,zero
   513f4:	00c00b84 	movi	r3,46
   513f8:	10c0e826 	beq	r2,r3,5179c <__gethex+0x46c>
   513fc:	80800003 	ldbu	r2,0(r16)
   51400:	20013626 	beq	r4,zero,518dc <__gethex+0x5ac>
   51404:	8109c83a 	sub	r4,r16,r4
   51408:	2109883a 	add	r4,r4,r4
   5140c:	2109883a 	add	r4,r4,r4
   51410:	012fc83a 	sub	r23,zero,r4
   51414:	00c01404 	movi	r3,80
   51418:	10c01c26 	beq	r2,r3,5148c <__gethex+0x15c>
   5141c:	00c01c04 	movi	r3,112
   51420:	10c01a26 	beq	r2,r3,5148c <__gethex+0x15c>
   51424:	8005883a 	mov	r2,r16
   51428:	28800015 	stw	r2,0(r5)
   5142c:	40003926 	beq	r8,zero,51514 <__gethex+0x1e4>
   51430:	3800fa1e 	bne	r7,zero,5181c <__gethex+0x4ec>
   51434:	04000184 	movi	r16,6
   51438:	8005883a 	mov	r2,r16
   5143c:	dfc00a17 	ldw	ra,40(sp)
   51440:	df000917 	ldw	fp,36(sp)
   51444:	ddc00817 	ldw	r23,32(sp)
   51448:	dd800717 	ldw	r22,28(sp)
   5144c:	dd400617 	ldw	r21,24(sp)
   51450:	dd000517 	ldw	r20,20(sp)
   51454:	dcc00417 	ldw	r19,16(sp)
   51458:	dc800317 	ldw	r18,12(sp)
   5145c:	dc400217 	ldw	r17,8(sp)
   51460:	dc000117 	ldw	r16,4(sp)
   51464:	dec00b04 	addi	sp,sp,44
   51468:	f800283a 	ret
   5146c:	00800b84 	movi	r2,46
   51470:	1880cd26 	beq	r3,r2,517a8 <__gethex+0x478>
   51474:	a0800003 	ldbu	r2,0(r20)
   51478:	00c01404 	movi	r3,80
   5147c:	a021883a 	mov	r16,r20
   51480:	002f883a 	mov	r23,zero
   51484:	02000044 	movi	r8,1
   51488:	10ffe41e 	bne	r2,r3,5141c <__alt_data_end+0xfffdf41c>
   5148c:	80c00043 	ldbu	r3,1(r16)
   51490:	00800ac4 	movi	r2,43
   51494:	1880e726 	beq	r3,r2,51834 <__gethex+0x504>
   51498:	00800b44 	movi	r2,45
   5149c:	1880e126 	beq	r3,r2,51824 <__gethex+0x4f4>
   514a0:	80800044 	addi	r2,r16,1
   514a4:	0015883a 	mov	r10,zero
   514a8:	b0c7883a 	add	r3,r22,r3
   514ac:	19000003 	ldbu	r4,0(r3)
   514b0:	203fdc26 	beq	r4,zero,51424 <__alt_data_end+0xfffdf424>
   514b4:	02400644 	movi	r9,25
   514b8:	493fda16 	blt	r9,r4,51424 <__alt_data_end+0xfffdf424>
   514bc:	10c00043 	ldbu	r3,1(r2)
   514c0:	018001b4 	movhi	r6,6
   514c4:	31a62b04 	addi	r6,r6,-26452
   514c8:	213ffc04 	addi	r4,r4,-16
   514cc:	30c7883a 	add	r3,r6,r3
   514d0:	18c00003 	ldbu	r3,0(r3)
   514d4:	10800044 	addi	r2,r2,1
   514d8:	18000926 	beq	r3,zero,51500 <__gethex+0x1d0>
   514dc:	48c00816 	blt	r9,r3,51500 <__gethex+0x1d0>
   514e0:	10800044 	addi	r2,r2,1
   514e4:	11800003 	ldbu	r6,0(r2)
   514e8:	210002a4 	muli	r4,r4,10
   514ec:	b18d883a 	add	r6,r22,r6
   514f0:	20c9883a 	add	r4,r4,r3
   514f4:	30c00003 	ldbu	r3,0(r6)
   514f8:	213ffc04 	addi	r4,r4,-16
   514fc:	183ff71e 	bne	r3,zero,514dc <__alt_data_end+0xfffdf4dc>
   51500:	50000126 	beq	r10,zero,51508 <__gethex+0x1d8>
   51504:	0109c83a 	sub	r4,zero,r4
   51508:	28800015 	stw	r2,0(r5)
   5150c:	b92f883a 	add	r23,r23,r4
   51510:	403fc71e 	bne	r8,zero,51430 <__alt_data_end+0xfffdf430>
   51514:	8505c83a 	sub	r2,r16,r20
   51518:	10bfffc4 	addi	r2,r2,-1
   5151c:	00c001c4 	movi	r3,7
   51520:	000b883a 	mov	r5,zero
   51524:	1880030e 	bge	r3,r2,51534 <__gethex+0x204>
   51528:	1005d07a 	srai	r2,r2,1
   5152c:	29400044 	addi	r5,r5,1
   51530:	18bffd16 	blt	r3,r2,51528 <__alt_data_end+0xfffdf528>
   51534:	9009883a 	mov	r4,r18
   51538:	004cb400 	call	4cb40 <_Balloc>
   5153c:	1039883a 	mov	fp,r2
   51540:	15400504 	addi	r21,r2,20
   51544:	a4001b2e 	bgeu	r20,r16,515b4 <__gethex+0x284>
   51548:	843fffc4 	addi	r16,r16,-1
   5154c:	a53fffc4 	addi	r20,r20,-1
   51550:	a805883a 	mov	r2,r21
   51554:	0009883a 	mov	r4,zero
   51558:	0007883a 	mov	r3,zero
   5155c:	02000b84 	movi	r8,46
   51560:	01400804 	movi	r5,32
   51564:	00000806 	br	51588 <__gethex+0x258>
   51568:	18c00104 	addi	r3,r3,4
   5156c:	b18d883a 	add	r6,r22,r6
   51570:	31800003 	ldbu	r6,0(r6)
   51574:	318003cc 	andi	r6,r6,15
   51578:	31ce983a 	sll	r7,r6,r7
   5157c:	21c8b03a 	or	r4,r4,r7
   51580:	843fffc4 	addi	r16,r16,-1
   51584:	85000d26 	beq	r16,r20,515bc <__gethex+0x28c>
   51588:	81800003 	ldbu	r6,0(r16)
   5158c:	180f883a 	mov	r7,r3
   51590:	323ffb26 	beq	r6,r8,51580 <__alt_data_end+0xfffdf580>
   51594:	197ff41e 	bne	r3,r5,51568 <__alt_data_end+0xfffdf568>
   51598:	11000015 	stw	r4,0(r2)
   5159c:	81800003 	ldbu	r6,0(r16)
   515a0:	0009883a 	mov	r4,zero
   515a4:	000f883a 	mov	r7,zero
   515a8:	10800104 	addi	r2,r2,4
   515ac:	00c00104 	movi	r3,4
   515b0:	003fee06 	br	5156c <__alt_data_end+0xfffdf56c>
   515b4:	a805883a 	mov	r2,r21
   515b8:	0009883a 	mov	r4,zero
   515bc:	10c00104 	addi	r3,r2,4
   515c0:	1d47c83a 	sub	r3,r3,r21
   515c4:	1807d0ba 	srai	r3,r3,2
   515c8:	11000015 	stw	r4,0(r2)
   515cc:	1820917a 	slli	r16,r3,5
   515d0:	e0c00415 	stw	r3,16(fp)
   515d4:	004ce280 	call	4ce28 <__hi0bits>
   515d8:	8d000017 	ldw	r20,0(r17)
   515dc:	8085c83a 	sub	r2,r16,r2
   515e0:	a0809616 	blt	r20,r2,5183c <__gethex+0x50c>
   515e4:	1500b116 	blt	r2,r20,518ac <__gethex+0x57c>
   515e8:	002d883a 	mov	r22,zero
   515ec:	88c00217 	ldw	r3,8(r17)
   515f0:	1dc06316 	blt	r3,r23,51780 <__gethex+0x450>
   515f4:	88800117 	ldw	r2,4(r17)
   515f8:	b8807f0e 	bge	r23,r2,517f8 <__gethex+0x4c8>
   515fc:	15efc83a 	sub	r23,r2,r23
   51600:	bd001216 	blt	r23,r20,5164c <__gethex+0x31c>
   51604:	88c00317 	ldw	r3,12(r17)
   51608:	01000084 	movi	r4,2
   5160c:	1900c326 	beq	r3,r4,5191c <__gethex+0x5ec>
   51610:	010000c4 	movi	r4,3
   51614:	1900eb26 	beq	r3,r4,519c4 <__gethex+0x694>
   51618:	01000044 	movi	r4,1
   5161c:	1900e126 	beq	r3,r4,519a4 <__gethex+0x674>
   51620:	9009883a 	mov	r4,r18
   51624:	e00b883a 	mov	r5,fp
   51628:	004cbe80 	call	4cbe8 <_Bfree>
   5162c:	d8c00b17 	ldw	r3,44(sp)
   51630:	04001404 	movi	r16,80
   51634:	18000015 	stw	zero,0(r3)
   51638:	003f7f06 	br	51438 <__alt_data_end+0xfffdf438>
   5163c:	d9400015 	stw	r5,0(sp)
   51640:	00512a00 	call	512a0 <__hexdig_init>
   51644:	d9400017 	ldw	r5,0(sp)
   51648:	003f4b06 	br	51378 <__alt_data_end+0xfffdf378>
   5164c:	bc3fffc4 	addi	r16,r23,-1
   51650:	b000a926 	beq	r22,zero,518f8 <__gethex+0x5c8>
   51654:	05800044 	movi	r22,1
   51658:	8005d17a 	srai	r2,r16,5
   5165c:	00c00044 	movi	r3,1
   51660:	840007cc 	andi	r16,r16,31
   51664:	1085883a 	add	r2,r2,r2
   51668:	1085883a 	add	r2,r2,r2
   5166c:	a885883a 	add	r2,r21,r2
   51670:	1c06983a 	sll	r3,r3,r16
   51674:	10800017 	ldw	r2,0(r2)
   51678:	1884703a 	and	r2,r3,r2
   5167c:	10000126 	beq	r2,zero,51684 <__gethex+0x354>
   51680:	b5800094 	ori	r22,r22,2
   51684:	b80b883a 	mov	r5,r23
   51688:	e009883a 	mov	r4,fp
   5168c:	00511900 	call	51190 <rshift>
   51690:	a5e9c83a 	sub	r20,r20,r23
   51694:	8dc00117 	ldw	r23,4(r17)
   51698:	04000084 	movi	r16,2
   5169c:	b0005b26 	beq	r22,zero,5180c <__gethex+0x4dc>
   516a0:	88800317 	ldw	r2,12(r17)
   516a4:	00c00084 	movi	r3,2
   516a8:	10c0ad26 	beq	r2,r3,51960 <__gethex+0x630>
   516ac:	00c000c4 	movi	r3,3
   516b0:	10c05326 	beq	r2,r3,51800 <__gethex+0x4d0>
   516b4:	00c00044 	movi	r3,1
   516b8:	10c0531e 	bne	r2,r3,51808 <__gethex+0x4d8>
   516bc:	b080008c 	andi	r2,r22,2
   516c0:	10005126 	beq	r2,zero,51808 <__gethex+0x4d8>
   516c4:	a8800017 	ldw	r2,0(r21)
   516c8:	b084b03a 	or	r2,r22,r2
   516cc:	10c4703a 	and	r2,r2,r3
   516d0:	10004d26 	beq	r2,zero,51808 <__gethex+0x4d8>
   516d4:	e5800417 	ldw	r22,16(fp)
   516d8:	00ffffc4 	movi	r3,-1
   516dc:	b1000144 	addi	r4,r22,5
   516e0:	2109883a 	add	r4,r4,r4
   516e4:	2109883a 	add	r4,r4,r4
   516e8:	e109883a 	add	r4,fp,r4
   516ec:	a8800017 	ldw	r2,0(r21)
   516f0:	10c0b71e 	bne	r2,r3,519d0 <__gethex+0x6a0>
   516f4:	a8000015 	stw	zero,0(r21)
   516f8:	ad400104 	addi	r21,r21,4
   516fc:	a93ffb36 	bltu	r21,r4,516ec <__alt_data_end+0xfffdf6ec>
   51700:	e0800217 	ldw	r2,8(fp)
   51704:	b080ba0e 	bge	r22,r2,519f0 <__gethex+0x6c0>
   51708:	b005883a 	mov	r2,r22
   5170c:	10c00144 	addi	r3,r2,5
   51710:	18c7883a 	add	r3,r3,r3
   51714:	18c7883a 	add	r3,r3,r3
   51718:	e0c7883a 	add	r3,fp,r3
   5171c:	10800044 	addi	r2,r2,1
   51720:	01000044 	movi	r4,1
   51724:	19000015 	stw	r4,0(r3)
   51728:	e0800415 	stw	r2,16(fp)
   5172c:	00800084 	movi	r2,2
   51730:	8080aa26 	beq	r16,r2,519dc <__gethex+0x6ac>
   51734:	e0800417 	ldw	r2,16(fp)
   51738:	b0800b16 	blt	r22,r2,51768 <__gethex+0x438>
   5173c:	a50007cc 	andi	r20,r20,31
   51740:	a0008326 	beq	r20,zero,51950 <__gethex+0x620>
   51744:	b5800104 	addi	r22,r22,4
   51748:	b5ad883a 	add	r22,r22,r22
   5174c:	b5ad883a 	add	r22,r22,r22
   51750:	e585883a 	add	r2,fp,r22
   51754:	11000017 	ldw	r4,0(r2)
   51758:	004ce280 	call	4ce28 <__hi0bits>
   5175c:	00c00804 	movi	r3,32
   51760:	1d29c83a 	sub	r20,r3,r20
   51764:	15007a0e 	bge	r2,r20,51950 <__gethex+0x620>
   51768:	e009883a 	mov	r4,fp
   5176c:	01400044 	movi	r5,1
   51770:	00511900 	call	51190 <rshift>
   51774:	88800217 	ldw	r2,8(r17)
   51778:	bdc00044 	addi	r23,r23,1
   5177c:	15c0740e 	bge	r2,r23,51950 <__gethex+0x620>
   51780:	9009883a 	mov	r4,r18
   51784:	e00b883a 	mov	r5,fp
   51788:	004cbe80 	call	4cbe8 <_Bfree>
   5178c:	d8800b17 	ldw	r2,44(sp)
   51790:	040028c4 	movi	r16,163
   51794:	10000015 	stw	zero,0(r2)
   51798:	003f2706 	br	51438 <__alt_data_end+0xfffdf438>
   5179c:	20007526 	beq	r4,zero,51974 <__gethex+0x644>
   517a0:	80800003 	ldbu	r2,0(r16)
   517a4:	003f1706 	br	51404 <__alt_data_end+0xfffdf404>
   517a8:	a0800043 	ldbu	r2,1(r20)
   517ac:	a4000044 	addi	r16,r20,1
   517b0:	308d883a 	add	r6,r6,r2
   517b4:	30c00003 	ldbu	r3,0(r6)
   517b8:	18004c26 	beq	r3,zero,518ec <__gethex+0x5bc>
   517bc:	00c00c04 	movi	r3,48
   517c0:	8029883a 	mov	r20,r16
   517c4:	10c0521e 	bne	r2,r3,51910 <__gethex+0x5e0>
   517c8:	1007883a 	mov	r3,r2
   517cc:	a5000044 	addi	r20,r20,1
   517d0:	a0800003 	ldbu	r2,0(r20)
   517d4:	10fffd26 	beq	r2,r3,517cc <__alt_data_end+0xfffdf7cc>
   517d8:	b087883a 	add	r3,r22,r2
   517dc:	18c00003 	ldbu	r3,0(r3)
   517e0:	18004b1e 	bne	r3,zero,51910 <__gethex+0x5e0>
   517e4:	02000044 	movi	r8,1
   517e8:	8009883a 	mov	r4,r16
   517ec:	400f883a 	mov	r7,r8
   517f0:	a021883a 	mov	r16,r20
   517f4:	003eff06 	br	513f4 <__alt_data_end+0xfffdf3f4>
   517f8:	04000044 	movi	r16,1
   517fc:	003fa706 	br	5169c <__alt_data_end+0xfffdf69c>
   51800:	d8800c17 	ldw	r2,48(sp)
   51804:	103fb31e 	bne	r2,zero,516d4 <__alt_data_end+0xfffdf6d4>
   51808:	84000414 	ori	r16,r16,16
   5180c:	d8800b17 	ldw	r2,44(sp)
   51810:	17000015 	stw	fp,0(r2)
   51814:	9dc00015 	stw	r23,0(r19)
   51818:	003f0706 	br	51438 <__alt_data_end+0xfffdf438>
   5181c:	0021883a 	mov	r16,zero
   51820:	003f0506 	br	51438 <__alt_data_end+0xfffdf438>
   51824:	02800044 	movi	r10,1
   51828:	80c00083 	ldbu	r3,2(r16)
   5182c:	80800084 	addi	r2,r16,2
   51830:	003f1d06 	br	514a8 <__alt_data_end+0xfffdf4a8>
   51834:	0015883a 	mov	r10,zero
   51838:	003ffb06 	br	51828 <__alt_data_end+0xfffdf828>
   5183c:	1521c83a 	sub	r16,r2,r20
   51840:	e009883a 	mov	r4,fp
   51844:	800b883a 	mov	r5,r16
   51848:	004da640 	call	4da64 <__any_on>
   5184c:	10002526 	beq	r2,zero,518e4 <__gethex+0x5b4>
   51850:	80bfffc4 	addi	r2,r16,-1
   51854:	1007d17a 	srai	r3,r2,5
   51858:	110007cc 	andi	r4,r2,31
   5185c:	05800044 	movi	r22,1
   51860:	18c00144 	addi	r3,r3,5
   51864:	18c7883a 	add	r3,r3,r3
   51868:	18c7883a 	add	r3,r3,r3
   5186c:	e0c7883a 	add	r3,fp,r3
   51870:	b108983a 	sll	r4,r22,r4
   51874:	18c00017 	ldw	r3,0(r3)
   51878:	20c6703a 	and	r3,r4,r3
   5187c:	18000626 	beq	r3,zero,51898 <__gethex+0x568>
   51880:	b080350e 	bge	r22,r2,51958 <__gethex+0x628>
   51884:	e009883a 	mov	r4,fp
   51888:	817fff84 	addi	r5,r16,-2
   5188c:	004da640 	call	4da64 <__any_on>
   51890:	10003126 	beq	r2,zero,51958 <__gethex+0x628>
   51894:	058000c4 	movi	r22,3
   51898:	e009883a 	mov	r4,fp
   5189c:	800b883a 	mov	r5,r16
   518a0:	00511900 	call	51190 <rshift>
   518a4:	bc2f883a 	add	r23,r23,r16
   518a8:	003f5006 	br	515ec <__alt_data_end+0xfffdf5ec>
   518ac:	a0a1c83a 	sub	r16,r20,r2
   518b0:	e00b883a 	mov	r5,fp
   518b4:	9009883a 	mov	r4,r18
   518b8:	800d883a 	mov	r6,r16
   518bc:	004d2880 	call	4d288 <__lshift>
   518c0:	1039883a 	mov	fp,r2
   518c4:	bc2fc83a 	sub	r23,r23,r16
   518c8:	15400504 	addi	r21,r2,20
   518cc:	002d883a 	mov	r22,zero
   518d0:	003f4606 	br	515ec <__alt_data_end+0xfffdf5ec>
   518d4:	000f883a 	mov	r7,zero
   518d8:	003eb506 	br	513b0 <__alt_data_end+0xfffdf3b0>
   518dc:	002f883a 	mov	r23,zero
   518e0:	003ecc06 	br	51414 <__alt_data_end+0xfffdf414>
   518e4:	002d883a 	mov	r22,zero
   518e8:	003feb06 	br	51898 <__alt_data_end+0xfffdf898>
   518ec:	002f883a 	mov	r23,zero
   518f0:	02000044 	movi	r8,1
   518f4:	003ec706 	br	51414 <__alt_data_end+0xfffdf414>
   518f8:	043f570e 	bge	zero,r16,51658 <__alt_data_end+0xfffdf658>
   518fc:	e009883a 	mov	r4,fp
   51900:	800b883a 	mov	r5,r16
   51904:	004da640 	call	4da64 <__any_on>
   51908:	102d883a 	mov	r22,r2
   5190c:	003f5206 	br	51658 <__alt_data_end+0xfffdf658>
   51910:	8009883a 	mov	r4,r16
   51914:	01c00044 	movi	r7,1
   51918:	003eaf06 	br	513d8 <__alt_data_end+0xfffdf3d8>
   5191c:	d8c00c17 	ldw	r3,48(sp)
   51920:	183f3f1e 	bne	r3,zero,51620 <__alt_data_end+0xfffdf620>
   51924:	98800015 	stw	r2,0(r19)
   51928:	00800044 	movi	r2,1
   5192c:	e0800415 	stw	r2,16(fp)
   51930:	a8800015 	stw	r2,0(r21)
   51934:	d8800b17 	ldw	r2,44(sp)
   51938:	04001884 	movi	r16,98
   5193c:	17000015 	stw	fp,0(r2)
   51940:	003ebd06 	br	51438 <__alt_data_end+0xfffdf438>
   51944:	a021883a 	mov	r16,r20
   51948:	0011883a 	mov	r8,zero
   5194c:	003ea906 	br	513f4 <__alt_data_end+0xfffdf3f4>
   51950:	04000844 	movi	r16,33
   51954:	003fad06 	br	5180c <__alt_data_end+0xfffdf80c>
   51958:	05800084 	movi	r22,2
   5195c:	003fce06 	br	51898 <__alt_data_end+0xfffdf898>
   51960:	d8c00c17 	ldw	r3,48(sp)
   51964:	00800044 	movi	r2,1
   51968:	10c5c83a 	sub	r2,r2,r3
   5196c:	103fa626 	beq	r2,zero,51808 <__alt_data_end+0xfffdf808>
   51970:	003f5806 	br	516d4 <__alt_data_end+0xfffdf6d4>
   51974:	80800043 	ldbu	r2,1(r16)
   51978:	81000044 	addi	r4,r16,1
   5197c:	2021883a 	mov	r16,r4
   51980:	b087883a 	add	r3,r22,r2
   51984:	18c00003 	ldbu	r3,0(r3)
   51988:	183e9d26 	beq	r3,zero,51400 <__alt_data_end+0xfffdf400>
   5198c:	84000044 	addi	r16,r16,1
   51990:	80800003 	ldbu	r2,0(r16)
   51994:	b087883a 	add	r3,r22,r2
   51998:	18c00003 	ldbu	r3,0(r3)
   5199c:	183ffb1e 	bne	r3,zero,5198c <__alt_data_end+0xfffdf98c>
   519a0:	003e9706 	br	51400 <__alt_data_end+0xfffdf400>
   519a4:	bd3f1e1e 	bne	r23,r20,51620 <__alt_data_end+0xfffdf620>
   519a8:	1d3fde0e 	bge	r3,r20,51924 <__alt_data_end+0xfffdf924>
   519ac:	e009883a 	mov	r4,fp
   519b0:	a17fffc4 	addi	r5,r20,-1
   519b4:	004da640 	call	4da64 <__any_on>
   519b8:	103f1926 	beq	r2,zero,51620 <__alt_data_end+0xfffdf620>
   519bc:	88800117 	ldw	r2,4(r17)
   519c0:	003fd806 	br	51924 <__alt_data_end+0xfffdf924>
   519c4:	d8c00c17 	ldw	r3,48(sp)
   519c8:	183f1526 	beq	r3,zero,51620 <__alt_data_end+0xfffdf620>
   519cc:	003fd506 	br	51924 <__alt_data_end+0xfffdf924>
   519d0:	10800044 	addi	r2,r2,1
   519d4:	a8800015 	stw	r2,0(r21)
   519d8:	003f5406 	br	5172c <__alt_data_end+0xfffdf72c>
   519dc:	88800017 	ldw	r2,0(r17)
   519e0:	10bfffc4 	addi	r2,r2,-1
   519e4:	15001426 	beq	r2,r20,51a38 <__gethex+0x708>
   519e8:	04000884 	movi	r16,34
   519ec:	003f8706 	br	5180c <__alt_data_end+0xfffdf80c>
   519f0:	e1400117 	ldw	r5,4(fp)
   519f4:	9009883a 	mov	r4,r18
   519f8:	29400044 	addi	r5,r5,1
   519fc:	004cb400 	call	4cb40 <_Balloc>
   51a00:	e1800417 	ldw	r6,16(fp)
   51a04:	e1400304 	addi	r5,fp,12
   51a08:	11000304 	addi	r4,r2,12
   51a0c:	31800084 	addi	r6,r6,2
   51a10:	318d883a 	add	r6,r6,r6
   51a14:	318d883a 	add	r6,r6,r6
   51a18:	102b883a 	mov	r21,r2
   51a1c:	004c8440 	call	4c844 <memcpy>
   51a20:	e00b883a 	mov	r5,fp
   51a24:	9009883a 	mov	r4,r18
   51a28:	004cbe80 	call	4cbe8 <_Bfree>
   51a2c:	a839883a 	mov	fp,r21
   51a30:	a8800417 	ldw	r2,16(r21)
   51a34:	003f3506 	br	5170c <__alt_data_end+0xfffdf70c>
   51a38:	a005d17a 	srai	r2,r20,5
   51a3c:	04000044 	movi	r16,1
   51a40:	a50007cc 	andi	r20,r20,31
   51a44:	10800144 	addi	r2,r2,5
   51a48:	1085883a 	add	r2,r2,r2
   51a4c:	1085883a 	add	r2,r2,r2
   51a50:	e085883a 	add	r2,fp,r2
   51a54:	10800017 	ldw	r2,0(r2)
   51a58:	8520983a 	sll	r16,r16,r20
   51a5c:	80a0703a 	and	r16,r16,r2
   51a60:	8020c03a 	cmpne	r16,r16,zero
   51a64:	00800884 	movi	r2,34
   51a68:	1421c83a 	sub	r16,r2,r16
   51a6c:	003f6706 	br	5180c <__alt_data_end+0xfffdf80c>

00051a70 <__hexnan>:
   51a70:	defff604 	addi	sp,sp,-40
   51a74:	dc000315 	stw	r16,12(sp)
   51a78:	040001b4 	movhi	r16,6
   51a7c:	84262b04 	addi	r16,r16,-26452
   51a80:	80800c03 	ldbu	r2,48(r16)
   51a84:	dfc00915 	stw	ra,36(sp)
   51a88:	dd400815 	stw	r21,32(sp)
   51a8c:	dd000715 	stw	r20,28(sp)
   51a90:	dcc00615 	stw	r19,24(sp)
   51a94:	dc800515 	stw	r18,20(sp)
   51a98:	dc400415 	stw	r17,16(sp)
   51a9c:	10006c26 	beq	r2,zero,51c50 <__hexnan+0x1e0>
   51aa0:	2d000017 	ldw	r20,0(r5)
   51aa4:	a025d17a 	srai	r18,r20,5
   51aa8:	a50007cc 	andi	r20,r20,31
   51aac:	94a5883a 	add	r18,r18,r18
   51ab0:	94a5883a 	add	r18,r18,r18
   51ab4:	34a5883a 	add	r18,r6,r18
   51ab8:	a0000126 	beq	r20,zero,51ac0 <__hexnan+0x50>
   51abc:	94800104 	addi	r18,r18,4
   51ac0:	20c00017 	ldw	r3,0(r4)
   51ac4:	903fff15 	stw	zero,-4(r18)
   51ac8:	947fff04 	addi	r17,r18,-4
   51acc:	18800043 	ldbu	r2,1(r3)
   51ad0:	8817883a 	mov	r11,r17
   51ad4:	880b883a 	mov	r5,r17
   51ad8:	0011883a 	mov	r8,zero
   51adc:	001b883a 	mov	r13,zero
   51ae0:	0015883a 	mov	r10,zero
   51ae4:	03c00204 	movi	r15,8
   51ae8:	03800804 	movi	r14,32
   51aec:	04c001c4 	movi	r19,7
   51af0:	10001b26 	beq	r2,zero,51b60 <__hexnan+0xf0>
   51af4:	808f883a 	add	r7,r16,r2
   51af8:	39c00003 	ldbu	r7,0(r7)
   51afc:	3a403fcc 	andi	r9,r7,255
   51b00:	4800301e 	bne	r9,zero,51bc4 <__hexnan+0x154>
   51b04:	70804636 	bltu	r14,r2,51c20 <__hexnan+0x1b0>
   51b08:	6a80120e 	bge	r13,r10,51b54 <__hexnan+0xe4>
   51b0c:	2ac00f2e 	bgeu	r5,r11,51b4c <__hexnan+0xdc>
   51b10:	9a000e16 	blt	r19,r8,51b4c <__hexnan+0xdc>
   51b14:	7a11c83a 	sub	r8,r15,r8
   51b18:	4211883a 	add	r8,r8,r8
   51b1c:	29c00017 	ldw	r7,0(r5)
   51b20:	4211883a 	add	r8,r8,r8
   51b24:	722bc83a 	sub	r21,r14,r8
   51b28:	2805883a 	mov	r2,r5
   51b2c:	12400117 	ldw	r9,4(r2)
   51b30:	10800104 	addi	r2,r2,4
   51b34:	4d58983a 	sll	r12,r9,r21
   51b38:	3b18b03a 	or	r12,r7,r12
   51b3c:	4a0ed83a 	srl	r7,r9,r8
   51b40:	133fff15 	stw	r12,-4(r2)
   51b44:	11c00015 	stw	r7,0(r2)
   51b48:	12fff836 	bltu	r2,r11,51b2c <__alt_data_end+0xfffdfb2c>
   51b4c:	31402d36 	bltu	r6,r5,51c04 <__hexnan+0x194>
   51b50:	02000204 	movi	r8,8
   51b54:	18c00044 	addi	r3,r3,1
   51b58:	18800043 	ldbu	r2,1(r3)
   51b5c:	103fe51e 	bne	r2,zero,51af4 <__alt_data_end+0xfffdfaf4>
   51b60:	50003126 	beq	r10,zero,51c28 <__hexnan+0x1b8>
   51b64:	2ac0022e 	bgeu	r5,r11,51b70 <__hexnan+0x100>
   51b68:	008001c4 	movi	r2,7
   51b6c:	1200520e 	bge	r2,r8,51cb8 <__hexnan+0x248>
   51b70:	31403f2e 	bgeu	r6,r5,51c70 <__hexnan+0x200>
   51b74:	3005883a 	mov	r2,r6
   51b78:	28c00017 	ldw	r3,0(r5)
   51b7c:	10800104 	addi	r2,r2,4
   51b80:	29400104 	addi	r5,r5,4
   51b84:	10ffff15 	stw	r3,-4(r2)
   51b88:	897ffb2e 	bgeu	r17,r5,51b78 <__alt_data_end+0xfffdfb78>
   51b8c:	10000015 	stw	zero,0(r2)
   51b90:	10800104 	addi	r2,r2,4
   51b94:	88bffd2e 	bgeu	r17,r2,51b8c <__alt_data_end+0xfffdfb8c>
   51b98:	90bfff17 	ldw	r2,-4(r18)
   51b9c:	1000071e 	bne	r2,zero,51bbc <__hexnan+0x14c>
   51ba0:	34403c26 	beq	r6,r17,51c94 <__hexnan+0x224>
   51ba4:	8805883a 	mov	r2,r17
   51ba8:	00000106 	br	51bb0 <__hexnan+0x140>
   51bac:	30803a26 	beq	r6,r2,51c98 <__hexnan+0x228>
   51bb0:	10bfff04 	addi	r2,r2,-4
   51bb4:	10c00017 	ldw	r3,0(r2)
   51bb8:	183ffc26 	beq	r3,zero,51bac <__alt_data_end+0xfffdfbac>
   51bbc:	00800144 	movi	r2,5
   51bc0:	00001a06 	br	51c2c <__hexnan+0x1bc>
   51bc4:	42000044 	addi	r8,r8,1
   51bc8:	52800044 	addi	r10,r10,1
   51bcc:	7a000716 	blt	r15,r8,51bec <__hexnan+0x17c>
   51bd0:	28800017 	ldw	r2,0(r5)
   51bd4:	1004913a 	slli	r2,r2,4
   51bd8:	39c003cc 	andi	r7,r7,15
   51bdc:	11ceb03a 	or	r7,r2,r7
   51be0:	29c00015 	stw	r7,0(r5)
   51be4:	18c00044 	addi	r3,r3,1
   51be8:	003fdb06 	br	51b58 <__alt_data_end+0xfffdfb58>
   51bec:	317fd92e 	bgeu	r6,r5,51b54 <__alt_data_end+0xfffdfb54>
   51bf0:	283fff15 	stw	zero,-4(r5)
   51bf4:	0005883a 	mov	r2,zero
   51bf8:	297fff04 	addi	r5,r5,-4
   51bfc:	02000044 	movi	r8,1
   51c00:	003ff506 	br	51bd8 <__alt_data_end+0xfffdfbd8>
   51c04:	283fff15 	stw	zero,-4(r5)
   51c08:	297fff04 	addi	r5,r5,-4
   51c0c:	501b883a 	mov	r13,r10
   51c10:	2817883a 	mov	r11,r5
   51c14:	0011883a 	mov	r8,zero
   51c18:	18c00044 	addi	r3,r3,1
   51c1c:	003fce06 	br	51b58 <__alt_data_end+0xfffdfb58>
   51c20:	01c00a44 	movi	r7,41
   51c24:	11c02026 	beq	r2,r7,51ca8 <__hexnan+0x238>
   51c28:	00800104 	movi	r2,4
   51c2c:	dfc00917 	ldw	ra,36(sp)
   51c30:	dd400817 	ldw	r21,32(sp)
   51c34:	dd000717 	ldw	r20,28(sp)
   51c38:	dcc00617 	ldw	r19,24(sp)
   51c3c:	dc800517 	ldw	r18,20(sp)
   51c40:	dc400417 	ldw	r17,16(sp)
   51c44:	dc000317 	ldw	r16,12(sp)
   51c48:	dec00a04 	addi	sp,sp,40
   51c4c:	f800283a 	ret
   51c50:	d9000015 	stw	r4,0(sp)
   51c54:	d9400115 	stw	r5,4(sp)
   51c58:	d9800215 	stw	r6,8(sp)
   51c5c:	00512a00 	call	512a0 <__hexdig_init>
   51c60:	d9800217 	ldw	r6,8(sp)
   51c64:	d9400117 	ldw	r5,4(sp)
   51c68:	d9000017 	ldw	r4,0(sp)
   51c6c:	003f8c06 	br	51aa0 <__alt_data_end+0xfffdfaa0>
   51c70:	a03fc926 	beq	r20,zero,51b98 <__alt_data_end+0xfffdfb98>
   51c74:	00800804 	movi	r2,32
   51c78:	1529c83a 	sub	r20,r2,r20
   51c7c:	00ffffc4 	movi	r3,-1
   51c80:	90bfff17 	ldw	r2,-4(r18)
   51c84:	1d06d83a 	srl	r3,r3,r20
   51c88:	1884703a 	and	r2,r3,r2
   51c8c:	90bfff15 	stw	r2,-4(r18)
   51c90:	003fc206 	br	51b9c <__alt_data_end+0xfffdfb9c>
   51c94:	3005883a 	mov	r2,r6
   51c98:	00c00044 	movi	r3,1
   51c9c:	10c00015 	stw	r3,0(r2)
   51ca0:	00800144 	movi	r2,5
   51ca4:	003fe106 	br	51c2c <__alt_data_end+0xfffdfc2c>
   51ca8:	503fdf26 	beq	r10,zero,51c28 <__alt_data_end+0xfffdfc28>
   51cac:	18c00084 	addi	r3,r3,2
   51cb0:	20c00015 	stw	r3,0(r4)
   51cb4:	003fab06 	br	51b64 <__alt_data_end+0xfffdfb64>
   51cb8:	00800204 	movi	r2,8
   51cbc:	1211c83a 	sub	r8,r2,r8
   51cc0:	4211883a 	add	r8,r8,r8
   51cc4:	28c00017 	ldw	r3,0(r5)
   51cc8:	4211883a 	add	r8,r8,r8
   51ccc:	02400804 	movi	r9,32
   51cd0:	4a13c83a 	sub	r9,r9,r8
   51cd4:	2805883a 	mov	r2,r5
   51cd8:	11000117 	ldw	r4,4(r2)
   51cdc:	10800104 	addi	r2,r2,4
   51ce0:	224e983a 	sll	r7,r4,r9
   51ce4:	19ceb03a 	or	r7,r3,r7
   51ce8:	2206d83a 	srl	r3,r4,r8
   51cec:	11ffff15 	stw	r7,-4(r2)
   51cf0:	10c00015 	stw	r3,0(r2)
   51cf4:	12fff836 	bltu	r2,r11,51cd8 <__alt_data_end+0xfffdfcd8>
   51cf8:	003f9d06 	br	51b70 <__alt_data_end+0xfffdfb70>

00051cfc <_isatty_r>:
   51cfc:	defffd04 	addi	sp,sp,-12
   51d00:	dc400115 	stw	r17,4(sp)
   51d04:	dc000015 	stw	r16,0(sp)
   51d08:	2023883a 	mov	r17,r4
   51d0c:	040001b4 	movhi	r16,6
   51d10:	84261a04 	addi	r16,r16,-26520
   51d14:	2809883a 	mov	r4,r5
   51d18:	dfc00215 	stw	ra,8(sp)
   51d1c:	80000015 	stw	zero,0(r16)
   51d20:	00542b40 	call	542b4 <isatty>
   51d24:	00ffffc4 	movi	r3,-1
   51d28:	10c00526 	beq	r2,r3,51d40 <_isatty_r+0x44>
   51d2c:	dfc00217 	ldw	ra,8(sp)
   51d30:	dc400117 	ldw	r17,4(sp)
   51d34:	dc000017 	ldw	r16,0(sp)
   51d38:	dec00304 	addi	sp,sp,12
   51d3c:	f800283a 	ret
   51d40:	80c00017 	ldw	r3,0(r16)
   51d44:	183ff926 	beq	r3,zero,51d2c <__alt_data_end+0xfffdfd2c>
   51d48:	88c00015 	stw	r3,0(r17)
   51d4c:	dfc00217 	ldw	ra,8(sp)
   51d50:	dc400117 	ldw	r17,4(sp)
   51d54:	dc000017 	ldw	r16,0(sp)
   51d58:	dec00304 	addi	sp,sp,12
   51d5c:	f800283a 	ret

00051d60 <_lseek_r>:
   51d60:	defffd04 	addi	sp,sp,-12
   51d64:	dc400115 	stw	r17,4(sp)
   51d68:	dc000015 	stw	r16,0(sp)
   51d6c:	2023883a 	mov	r17,r4
   51d70:	040001b4 	movhi	r16,6
   51d74:	84261a04 	addi	r16,r16,-26520
   51d78:	2809883a 	mov	r4,r5
   51d7c:	300b883a 	mov	r5,r6
   51d80:	380d883a 	mov	r6,r7
   51d84:	dfc00215 	stw	ra,8(sp)
   51d88:	80000015 	stw	zero,0(r16)
   51d8c:	00544380 	call	54438 <lseek>
   51d90:	00ffffc4 	movi	r3,-1
   51d94:	10c00526 	beq	r2,r3,51dac <_lseek_r+0x4c>
   51d98:	dfc00217 	ldw	ra,8(sp)
   51d9c:	dc400117 	ldw	r17,4(sp)
   51da0:	dc000017 	ldw	r16,0(sp)
   51da4:	dec00304 	addi	sp,sp,12
   51da8:	f800283a 	ret
   51dac:	80c00017 	ldw	r3,0(r16)
   51db0:	183ff926 	beq	r3,zero,51d98 <__alt_data_end+0xfffdfd98>
   51db4:	88c00015 	stw	r3,0(r17)
   51db8:	dfc00217 	ldw	ra,8(sp)
   51dbc:	dc400117 	ldw	r17,4(sp)
   51dc0:	dc000017 	ldw	r16,0(sp)
   51dc4:	dec00304 	addi	sp,sp,12
   51dc8:	f800283a 	ret

00051dcc <_read_r>:
   51dcc:	defffd04 	addi	sp,sp,-12
   51dd0:	dc400115 	stw	r17,4(sp)
   51dd4:	dc000015 	stw	r16,0(sp)
   51dd8:	2023883a 	mov	r17,r4
   51ddc:	040001b4 	movhi	r16,6
   51de0:	84261a04 	addi	r16,r16,-26520
   51de4:	2809883a 	mov	r4,r5
   51de8:	300b883a 	mov	r5,r6
   51dec:	380d883a 	mov	r6,r7
   51df0:	dfc00215 	stw	ra,8(sp)
   51df4:	80000015 	stw	zero,0(r16)
   51df8:	005453c0 	call	5453c <read>
   51dfc:	00ffffc4 	movi	r3,-1
   51e00:	10c00526 	beq	r2,r3,51e18 <_read_r+0x4c>
   51e04:	dfc00217 	ldw	ra,8(sp)
   51e08:	dc400117 	ldw	r17,4(sp)
   51e0c:	dc000017 	ldw	r16,0(sp)
   51e10:	dec00304 	addi	sp,sp,12
   51e14:	f800283a 	ret
   51e18:	80c00017 	ldw	r3,0(r16)
   51e1c:	183ff926 	beq	r3,zero,51e04 <__alt_data_end+0xfffdfe04>
   51e20:	88c00015 	stw	r3,0(r17)
   51e24:	dfc00217 	ldw	ra,8(sp)
   51e28:	dc400117 	ldw	r17,4(sp)
   51e2c:	dc000017 	ldw	r16,0(sp)
   51e30:	dec00304 	addi	sp,sp,12
   51e34:	f800283a 	ret

00051e38 <__muldi3>:
   51e38:	20bfffcc 	andi	r2,r4,65535
   51e3c:	2010d43a 	srli	r8,r4,16
   51e40:	30ffffcc 	andi	r3,r6,65535
   51e44:	3014d43a 	srli	r10,r6,16
   51e48:	1893383a 	mul	r9,r3,r2
   51e4c:	1a07383a 	mul	r3,r3,r8
   51e50:	5085383a 	mul	r2,r10,r2
   51e54:	4816d43a 	srli	r11,r9,16
   51e58:	5211383a 	mul	r8,r10,r8
   51e5c:	1885883a 	add	r2,r3,r2
   51e60:	12c5883a 	add	r2,r2,r11
   51e64:	10c0022e 	bgeu	r2,r3,51e70 <__muldi3+0x38>
   51e68:	00c00074 	movhi	r3,1
   51e6c:	40d1883a 	add	r8,r8,r3
   51e70:	1014d43a 	srli	r10,r2,16
   51e74:	21c9383a 	mul	r4,r4,r7
   51e78:	314d383a 	mul	r6,r6,r5
   51e7c:	1004943a 	slli	r2,r2,16
   51e80:	4291883a 	add	r8,r8,r10
   51e84:	4a7fffcc 	andi	r9,r9,65535
   51e88:	2187883a 	add	r3,r4,r6
   51e8c:	1245883a 	add	r2,r2,r9
   51e90:	1a07883a 	add	r3,r3,r8
   51e94:	f800283a 	ret

00051e98 <__fixunsdfsi>:
   51e98:	defffd04 	addi	sp,sp,-12
   51e9c:	000d883a 	mov	r6,zero
   51ea0:	01d07834 	movhi	r7,16864
   51ea4:	dc400115 	stw	r17,4(sp)
   51ea8:	dc000015 	stw	r16,0(sp)
   51eac:	dfc00215 	stw	ra,8(sp)
   51eb0:	2023883a 	mov	r17,r4
   51eb4:	2821883a 	mov	r16,r5
   51eb8:	00535300 	call	53530 <__gedf2>
   51ebc:	1000080e 	bge	r2,zero,51ee0 <__fixunsdfsi+0x48>
   51ec0:	8809883a 	mov	r4,r17
   51ec4:	800b883a 	mov	r5,r16
   51ec8:	00537200 	call	53720 <__fixdfsi>
   51ecc:	dfc00217 	ldw	ra,8(sp)
   51ed0:	dc400117 	ldw	r17,4(sp)
   51ed4:	dc000017 	ldw	r16,0(sp)
   51ed8:	dec00304 	addi	sp,sp,12
   51edc:	f800283a 	ret
   51ee0:	000d883a 	mov	r6,zero
   51ee4:	01d07834 	movhi	r7,16864
   51ee8:	8809883a 	mov	r4,r17
   51eec:	800b883a 	mov	r5,r16
   51ef0:	0052f1c0 	call	52f1c <__subdf3>
   51ef4:	180b883a 	mov	r5,r3
   51ef8:	1009883a 	mov	r4,r2
   51efc:	00537200 	call	53720 <__fixdfsi>
   51f00:	00e00034 	movhi	r3,32768
   51f04:	10c5883a 	add	r2,r2,r3
   51f08:	dfc00217 	ldw	ra,8(sp)
   51f0c:	dc400117 	ldw	r17,4(sp)
   51f10:	dc000017 	ldw	r16,0(sp)
   51f14:	dec00304 	addi	sp,sp,12
   51f18:	f800283a 	ret

00051f1c <__udivdi3>:
   51f1c:	defff504 	addi	sp,sp,-44
   51f20:	dd000515 	stw	r20,20(sp)
   51f24:	dcc00415 	stw	r19,16(sp)
   51f28:	dc800315 	stw	r18,12(sp)
   51f2c:	dc400215 	stw	r17,8(sp)
   51f30:	dc000115 	stw	r16,4(sp)
   51f34:	dfc00a15 	stw	ra,40(sp)
   51f38:	df000915 	stw	fp,36(sp)
   51f3c:	ddc00815 	stw	r23,32(sp)
   51f40:	dd800715 	stw	r22,28(sp)
   51f44:	dd400615 	stw	r21,24(sp)
   51f48:	2025883a 	mov	r18,r4
   51f4c:	2823883a 	mov	r17,r5
   51f50:	3021883a 	mov	r16,r6
   51f54:	2027883a 	mov	r19,r4
   51f58:	2829883a 	mov	r20,r5
   51f5c:	3800401e 	bne	r7,zero,52060 <__udivdi3+0x144>
   51f60:	2980602e 	bgeu	r5,r6,520e4 <__udivdi3+0x1c8>
   51f64:	00bfffd4 	movui	r2,65535
   51f68:	1180aa36 	bltu	r2,r6,52214 <__udivdi3+0x2f8>
   51f6c:	00803fc4 	movi	r2,255
   51f70:	11814436 	bltu	r2,r6,52484 <__udivdi3+0x568>
   51f74:	0005883a 	mov	r2,zero
   51f78:	0007883a 	mov	r3,zero
   51f7c:	3084d83a 	srl	r2,r6,r2
   51f80:	01000174 	movhi	r4,5
   51f84:	21187a04 	addi	r4,r4,25064
   51f88:	2085883a 	add	r2,r4,r2
   51f8c:	10800003 	ldbu	r2,0(r2)
   51f90:	10c7883a 	add	r3,r2,r3
   51f94:	00800804 	movi	r2,32
   51f98:	10c5c83a 	sub	r2,r2,r3
   51f9c:	10000526 	beq	r2,zero,51fb4 <__udivdi3+0x98>
   51fa0:	88a2983a 	sll	r17,r17,r2
   51fa4:	90c6d83a 	srl	r3,r18,r3
   51fa8:	30a0983a 	sll	r16,r6,r2
   51fac:	90a6983a 	sll	r19,r18,r2
   51fb0:	88e8b03a 	or	r20,r17,r3
   51fb4:	8022d43a 	srli	r17,r16,16
   51fb8:	a009883a 	mov	r4,r20
   51fbc:	857fffcc 	andi	r21,r16,65535
   51fc0:	880b883a 	mov	r5,r17
   51fc4:	00457dc0 	call	457dc <__umodsi3>
   51fc8:	a009883a 	mov	r4,r20
   51fcc:	880b883a 	mov	r5,r17
   51fd0:	102d883a 	mov	r22,r2
   51fd4:	00457d40 	call	457d4 <__udivsi3>
   51fd8:	b02c943a 	slli	r22,r22,16
   51fdc:	9806d43a 	srli	r3,r19,16
   51fe0:	1549383a 	mul	r4,r2,r21
   51fe4:	1025883a 	mov	r18,r2
   51fe8:	b0c6b03a 	or	r3,r22,r3
   51fec:	1900052e 	bgeu	r3,r4,52004 <__udivdi3+0xe8>
   51ff0:	1c07883a 	add	r3,r3,r16
   51ff4:	10bfffc4 	addi	r2,r2,-1
   51ff8:	1c000136 	bltu	r3,r16,52000 <__udivdi3+0xe4>
   51ffc:	19013636 	bltu	r3,r4,524d8 <__udivdi3+0x5bc>
   52000:	1025883a 	mov	r18,r2
   52004:	1929c83a 	sub	r20,r3,r4
   52008:	a009883a 	mov	r4,r20
   5200c:	880b883a 	mov	r5,r17
   52010:	00457dc0 	call	457dc <__umodsi3>
   52014:	102d883a 	mov	r22,r2
   52018:	a009883a 	mov	r4,r20
   5201c:	880b883a 	mov	r5,r17
   52020:	00457d40 	call	457d4 <__udivsi3>
   52024:	b02c943a 	slli	r22,r22,16
   52028:	156b383a 	mul	r21,r2,r21
   5202c:	9cffffcc 	andi	r19,r19,65535
   52030:	b4e6b03a 	or	r19,r22,r19
   52034:	1009883a 	mov	r4,r2
   52038:	9d40052e 	bgeu	r19,r21,52050 <__udivdi3+0x134>
   5203c:	9c27883a 	add	r19,r19,r16
   52040:	10bfffc4 	addi	r2,r2,-1
   52044:	9c00f736 	bltu	r19,r16,52424 <__udivdi3+0x508>
   52048:	9d40f62e 	bgeu	r19,r21,52424 <__udivdi3+0x508>
   5204c:	213fff84 	addi	r4,r4,-2
   52050:	9004943a 	slli	r2,r18,16
   52054:	0007883a 	mov	r3,zero
   52058:	2084b03a 	or	r2,r4,r2
   5205c:	00001506 	br	520b4 <__udivdi3+0x198>
   52060:	29c06536 	bltu	r5,r7,521f8 <__udivdi3+0x2dc>
   52064:	00bfffd4 	movui	r2,65535
   52068:	11c0652e 	bgeu	r2,r7,52200 <__udivdi3+0x2e4>
   5206c:	00804034 	movhi	r2,256
   52070:	10bfffc4 	addi	r2,r2,-1
   52074:	11c0f736 	bltu	r2,r7,52454 <__udivdi3+0x538>
   52078:	00c00404 	movi	r3,16
   5207c:	180b883a 	mov	r5,r3
   52080:	38c6d83a 	srl	r3,r7,r3
   52084:	01000174 	movhi	r4,5
   52088:	21187a04 	addi	r4,r4,25064
   5208c:	04000804 	movi	r16,32
   52090:	20c7883a 	add	r3,r4,r3
   52094:	18800003 	ldbu	r2,0(r3)
   52098:	1145883a 	add	r2,r2,r5
   5209c:	80a1c83a 	sub	r16,r16,r2
   520a0:	8000691e 	bne	r16,zero,52248 <__udivdi3+0x32c>
   520a4:	0007883a 	mov	r3,zero
   520a8:	3c406536 	bltu	r7,r17,52240 <__udivdi3+0x324>
   520ac:	9180642e 	bgeu	r18,r6,52240 <__udivdi3+0x324>
   520b0:	0005883a 	mov	r2,zero
   520b4:	dfc00a17 	ldw	ra,40(sp)
   520b8:	df000917 	ldw	fp,36(sp)
   520bc:	ddc00817 	ldw	r23,32(sp)
   520c0:	dd800717 	ldw	r22,28(sp)
   520c4:	dd400617 	ldw	r21,24(sp)
   520c8:	dd000517 	ldw	r20,20(sp)
   520cc:	dcc00417 	ldw	r19,16(sp)
   520d0:	dc800317 	ldw	r18,12(sp)
   520d4:	dc400217 	ldw	r17,8(sp)
   520d8:	dc000117 	ldw	r16,4(sp)
   520dc:	dec00b04 	addi	sp,sp,44
   520e0:	f800283a 	ret
   520e4:	3000041e 	bne	r6,zero,520f8 <__udivdi3+0x1dc>
   520e8:	01000044 	movi	r4,1
   520ec:	000b883a 	mov	r5,zero
   520f0:	00457d40 	call	457d4 <__udivsi3>
   520f4:	1021883a 	mov	r16,r2
   520f8:	00bfffd4 	movui	r2,65535
   520fc:	14004b2e 	bgeu	r2,r16,5222c <__udivdi3+0x310>
   52100:	00804034 	movhi	r2,256
   52104:	10bfffc4 	addi	r2,r2,-1
   52108:	1400d836 	bltu	r2,r16,5246c <__udivdi3+0x550>
   5210c:	00800404 	movi	r2,16
   52110:	1007883a 	mov	r3,r2
   52114:	8084d83a 	srl	r2,r16,r2
   52118:	01000174 	movhi	r4,5
   5211c:	21187a04 	addi	r4,r4,25064
   52120:	2085883a 	add	r2,r4,r2
   52124:	10800003 	ldbu	r2,0(r2)
   52128:	10c7883a 	add	r3,r2,r3
   5212c:	00800804 	movi	r2,32
   52130:	10c5c83a 	sub	r2,r2,r3
   52134:	1000891e 	bne	r2,zero,5235c <__udivdi3+0x440>
   52138:	8028d43a 	srli	r20,r16,16
   5213c:	8c23c83a 	sub	r17,r17,r16
   52140:	84bfffcc 	andi	r18,r16,65535
   52144:	00c00044 	movi	r3,1
   52148:	8809883a 	mov	r4,r17
   5214c:	a00b883a 	mov	r5,r20
   52150:	d8c00015 	stw	r3,0(sp)
   52154:	00457dc0 	call	457dc <__umodsi3>
   52158:	8809883a 	mov	r4,r17
   5215c:	a00b883a 	mov	r5,r20
   52160:	102b883a 	mov	r21,r2
   52164:	00457d40 	call	457d4 <__udivsi3>
   52168:	a82a943a 	slli	r21,r21,16
   5216c:	9808d43a 	srli	r4,r19,16
   52170:	148b383a 	mul	r5,r2,r18
   52174:	1023883a 	mov	r17,r2
   52178:	a908b03a 	or	r4,r21,r4
   5217c:	d8c00017 	ldw	r3,0(sp)
   52180:	2140052e 	bgeu	r4,r5,52198 <__udivdi3+0x27c>
   52184:	2409883a 	add	r4,r4,r16
   52188:	10bfffc4 	addi	r2,r2,-1
   5218c:	24000136 	bltu	r4,r16,52194 <__udivdi3+0x278>
   52190:	2140ce36 	bltu	r4,r5,524cc <__udivdi3+0x5b0>
   52194:	1023883a 	mov	r17,r2
   52198:	216bc83a 	sub	r21,r4,r5
   5219c:	a809883a 	mov	r4,r21
   521a0:	a00b883a 	mov	r5,r20
   521a4:	d8c00015 	stw	r3,0(sp)
   521a8:	00457dc0 	call	457dc <__umodsi3>
   521ac:	102d883a 	mov	r22,r2
   521b0:	a809883a 	mov	r4,r21
   521b4:	a00b883a 	mov	r5,r20
   521b8:	00457d40 	call	457d4 <__udivsi3>
   521bc:	b02c943a 	slli	r22,r22,16
   521c0:	14a5383a 	mul	r18,r2,r18
   521c4:	9cffffcc 	andi	r19,r19,65535
   521c8:	b4e6b03a 	or	r19,r22,r19
   521cc:	1009883a 	mov	r4,r2
   521d0:	d8c00017 	ldw	r3,0(sp)
   521d4:	9c80052e 	bgeu	r19,r18,521ec <__udivdi3+0x2d0>
   521d8:	9c27883a 	add	r19,r19,r16
   521dc:	10bfffc4 	addi	r2,r2,-1
   521e0:	9c009236 	bltu	r19,r16,5242c <__udivdi3+0x510>
   521e4:	9c80912e 	bgeu	r19,r18,5242c <__udivdi3+0x510>
   521e8:	213fff84 	addi	r4,r4,-2
   521ec:	8804943a 	slli	r2,r17,16
   521f0:	2084b03a 	or	r2,r4,r2
   521f4:	003faf06 	br	520b4 <__alt_data_end+0xfffe00b4>
   521f8:	0007883a 	mov	r3,zero
   521fc:	003fac06 	br	520b0 <__alt_data_end+0xfffe00b0>
   52200:	00803fc4 	movi	r2,255
   52204:	11c09636 	bltu	r2,r7,52460 <__udivdi3+0x544>
   52208:	0007883a 	mov	r3,zero
   5220c:	000b883a 	mov	r5,zero
   52210:	003f9b06 	br	52080 <__alt_data_end+0xfffe0080>
   52214:	00804034 	movhi	r2,256
   52218:	10bfffc4 	addi	r2,r2,-1
   5221c:	11809636 	bltu	r2,r6,52478 <__udivdi3+0x55c>
   52220:	00800404 	movi	r2,16
   52224:	1007883a 	mov	r3,r2
   52228:	003f5406 	br	51f7c <__alt_data_end+0xfffdff7c>
   5222c:	00803fc4 	movi	r2,255
   52230:	14009736 	bltu	r2,r16,52490 <__udivdi3+0x574>
   52234:	0005883a 	mov	r2,zero
   52238:	0007883a 	mov	r3,zero
   5223c:	003fb506 	br	52114 <__alt_data_end+0xfffe0114>
   52240:	00800044 	movi	r2,1
   52244:	003f9b06 	br	520b4 <__alt_data_end+0xfffe00b4>
   52248:	3086d83a 	srl	r3,r6,r2
   5224c:	3c0e983a 	sll	r7,r7,r16
   52250:	88aad83a 	srl	r21,r17,r2
   52254:	9084d83a 	srl	r2,r18,r2
   52258:	38e6b03a 	or	r19,r7,r3
   5225c:	9828d43a 	srli	r20,r19,16
   52260:	8c22983a 	sll	r17,r17,r16
   52264:	a809883a 	mov	r4,r21
   52268:	a00b883a 	mov	r5,r20
   5226c:	342c983a 	sll	r22,r6,r16
   52270:	88a2b03a 	or	r17,r17,r2
   52274:	00457dc0 	call	457dc <__umodsi3>
   52278:	a809883a 	mov	r4,r21
   5227c:	a00b883a 	mov	r5,r20
   52280:	1039883a 	mov	fp,r2
   52284:	00457d40 	call	457d4 <__udivsi3>
   52288:	102b883a 	mov	r21,r2
   5228c:	9dffffcc 	andi	r23,r19,65535
   52290:	e008943a 	slli	r4,fp,16
   52294:	8804d43a 	srli	r2,r17,16
   52298:	adcd383a 	mul	r6,r21,r23
   5229c:	2088b03a 	or	r4,r4,r2
   522a0:	2180042e 	bgeu	r4,r6,522b4 <__udivdi3+0x398>
   522a4:	24c9883a 	add	r4,r4,r19
   522a8:	a8bfffc4 	addi	r2,r21,-1
   522ac:	24c07f2e 	bgeu	r4,r19,524ac <__udivdi3+0x590>
   522b0:	102b883a 	mov	r21,r2
   522b4:	21b9c83a 	sub	fp,r4,r6
   522b8:	e009883a 	mov	r4,fp
   522bc:	a00b883a 	mov	r5,r20
   522c0:	00457dc0 	call	457dc <__umodsi3>
   522c4:	e009883a 	mov	r4,fp
   522c8:	a00b883a 	mov	r5,r20
   522cc:	d8800015 	stw	r2,0(sp)
   522d0:	00457d40 	call	457d4 <__udivsi3>
   522d4:	d8c00017 	ldw	r3,0(sp)
   522d8:	15cb383a 	mul	r5,r2,r23
   522dc:	8c7fffcc 	andi	r17,r17,65535
   522e0:	1806943a 	slli	r3,r3,16
   522e4:	1009883a 	mov	r4,r2
   522e8:	1c46b03a 	or	r3,r3,r17
   522ec:	1940042e 	bgeu	r3,r5,52300 <__udivdi3+0x3e4>
   522f0:	1cc7883a 	add	r3,r3,r19
   522f4:	10bfffc4 	addi	r2,r2,-1
   522f8:	1cc0682e 	bgeu	r3,r19,5249c <__udivdi3+0x580>
   522fc:	1009883a 	mov	r4,r2
   52300:	a804943a 	slli	r2,r21,16
   52304:	b1ffffcc 	andi	r7,r22,65535
   52308:	b02cd43a 	srli	r22,r22,16
   5230c:	2084b03a 	or	r2,r4,r2
   52310:	113fffcc 	andi	r4,r2,65535
   52314:	100cd43a 	srli	r6,r2,16
   52318:	21d1383a 	mul	r8,r4,r7
   5231c:	2589383a 	mul	r4,r4,r22
   52320:	31cf383a 	mul	r7,r6,r7
   52324:	4012d43a 	srli	r9,r8,16
   52328:	1947c83a 	sub	r3,r3,r5
   5232c:	3909883a 	add	r4,r7,r4
   52330:	2249883a 	add	r4,r4,r9
   52334:	35ad383a 	mul	r22,r6,r22
   52338:	21c0022e 	bgeu	r4,r7,52344 <__udivdi3+0x428>
   5233c:	01400074 	movhi	r5,1
   52340:	b16d883a 	add	r22,r22,r5
   52344:	200ad43a 	srli	r5,r4,16
   52348:	b16d883a 	add	r22,r22,r5
   5234c:	1d803e36 	bltu	r3,r22,52448 <__udivdi3+0x52c>
   52350:	1d803826 	beq	r3,r22,52434 <__udivdi3+0x518>
   52354:	0007883a 	mov	r3,zero
   52358:	003f5606 	br	520b4 <__alt_data_end+0xfffe00b4>
   5235c:	80a0983a 	sll	r16,r16,r2
   52360:	88ead83a 	srl	r21,r17,r3
   52364:	90c6d83a 	srl	r3,r18,r3
   52368:	8028d43a 	srli	r20,r16,16
   5236c:	88a2983a 	sll	r17,r17,r2
   52370:	a809883a 	mov	r4,r21
   52374:	a00b883a 	mov	r5,r20
   52378:	88ecb03a 	or	r22,r17,r3
   5237c:	90a6983a 	sll	r19,r18,r2
   52380:	00457dc0 	call	457dc <__umodsi3>
   52384:	a809883a 	mov	r4,r21
   52388:	a00b883a 	mov	r5,r20
   5238c:	1023883a 	mov	r17,r2
   52390:	00457d40 	call	457d4 <__udivsi3>
   52394:	102b883a 	mov	r21,r2
   52398:	84bfffcc 	andi	r18,r16,65535
   5239c:	8808943a 	slli	r4,r17,16
   523a0:	b004d43a 	srli	r2,r22,16
   523a4:	ac87383a 	mul	r3,r21,r18
   523a8:	2088b03a 	or	r4,r4,r2
   523ac:	20c0062e 	bgeu	r4,r3,523c8 <__udivdi3+0x4ac>
   523b0:	2409883a 	add	r4,r4,r16
   523b4:	a8bfffc4 	addi	r2,r21,-1
   523b8:	24004236 	bltu	r4,r16,524c4 <__udivdi3+0x5a8>
   523bc:	20c0412e 	bgeu	r4,r3,524c4 <__udivdi3+0x5a8>
   523c0:	ad7fff84 	addi	r21,r21,-2
   523c4:	2409883a 	add	r4,r4,r16
   523c8:	20efc83a 	sub	r23,r4,r3
   523cc:	b809883a 	mov	r4,r23
   523d0:	a00b883a 	mov	r5,r20
   523d4:	00457dc0 	call	457dc <__umodsi3>
   523d8:	1023883a 	mov	r17,r2
   523dc:	a00b883a 	mov	r5,r20
   523e0:	b809883a 	mov	r4,r23
   523e4:	00457d40 	call	457d4 <__udivsi3>
   523e8:	8822943a 	slli	r17,r17,16
   523ec:	148b383a 	mul	r5,r2,r18
   523f0:	b5bfffcc 	andi	r22,r22,65535
   523f4:	8da2b03a 	or	r17,r17,r22
   523f8:	8940062e 	bgeu	r17,r5,52414 <__udivdi3+0x4f8>
   523fc:	8c23883a 	add	r17,r17,r16
   52400:	10ffffc4 	addi	r3,r2,-1
   52404:	8c002d36 	bltu	r17,r16,524bc <__udivdi3+0x5a0>
   52408:	89402c2e 	bgeu	r17,r5,524bc <__udivdi3+0x5a0>
   5240c:	10bfff84 	addi	r2,r2,-2
   52410:	8c23883a 	add	r17,r17,r16
   52414:	a806943a 	slli	r3,r21,16
   52418:	8963c83a 	sub	r17,r17,r5
   5241c:	10c6b03a 	or	r3,r2,r3
   52420:	003f4906 	br	52148 <__alt_data_end+0xfffe0148>
   52424:	1009883a 	mov	r4,r2
   52428:	003f0906 	br	52050 <__alt_data_end+0xfffe0050>
   5242c:	1009883a 	mov	r4,r2
   52430:	003f6e06 	br	521ec <__alt_data_end+0xfffe01ec>
   52434:	2008943a 	slli	r4,r4,16
   52438:	9420983a 	sll	r16,r18,r16
   5243c:	423fffcc 	andi	r8,r8,65535
   52440:	2209883a 	add	r4,r4,r8
   52444:	813fc32e 	bgeu	r16,r4,52354 <__alt_data_end+0xfffe0354>
   52448:	10bfffc4 	addi	r2,r2,-1
   5244c:	0007883a 	mov	r3,zero
   52450:	003f1806 	br	520b4 <__alt_data_end+0xfffe00b4>
   52454:	00c00604 	movi	r3,24
   52458:	180b883a 	mov	r5,r3
   5245c:	003f0806 	br	52080 <__alt_data_end+0xfffe0080>
   52460:	00c00204 	movi	r3,8
   52464:	180b883a 	mov	r5,r3
   52468:	003f0506 	br	52080 <__alt_data_end+0xfffe0080>
   5246c:	00800604 	movi	r2,24
   52470:	1007883a 	mov	r3,r2
   52474:	003f2706 	br	52114 <__alt_data_end+0xfffe0114>
   52478:	00800604 	movi	r2,24
   5247c:	1007883a 	mov	r3,r2
   52480:	003ebe06 	br	51f7c <__alt_data_end+0xfffdff7c>
   52484:	00800204 	movi	r2,8
   52488:	1007883a 	mov	r3,r2
   5248c:	003ebb06 	br	51f7c <__alt_data_end+0xfffdff7c>
   52490:	00800204 	movi	r2,8
   52494:	1007883a 	mov	r3,r2
   52498:	003f1e06 	br	52114 <__alt_data_end+0xfffe0114>
   5249c:	197f972e 	bgeu	r3,r5,522fc <__alt_data_end+0xfffe02fc>
   524a0:	213fff84 	addi	r4,r4,-2
   524a4:	1cc7883a 	add	r3,r3,r19
   524a8:	003f9506 	br	52300 <__alt_data_end+0xfffe0300>
   524ac:	21bf802e 	bgeu	r4,r6,522b0 <__alt_data_end+0xfffe02b0>
   524b0:	ad7fff84 	addi	r21,r21,-2
   524b4:	24c9883a 	add	r4,r4,r19
   524b8:	003f7e06 	br	522b4 <__alt_data_end+0xfffe02b4>
   524bc:	1805883a 	mov	r2,r3
   524c0:	003fd406 	br	52414 <__alt_data_end+0xfffe0414>
   524c4:	102b883a 	mov	r21,r2
   524c8:	003fbf06 	br	523c8 <__alt_data_end+0xfffe03c8>
   524cc:	8c7fff84 	addi	r17,r17,-2
   524d0:	2409883a 	add	r4,r4,r16
   524d4:	003f3006 	br	52198 <__alt_data_end+0xfffe0198>
   524d8:	94bfff84 	addi	r18,r18,-2
   524dc:	1c07883a 	add	r3,r3,r16
   524e0:	003ec806 	br	52004 <__alt_data_end+0xfffe0004>

000524e4 <__umoddi3>:
   524e4:	defff504 	addi	sp,sp,-44
   524e8:	dd000515 	stw	r20,20(sp)
   524ec:	dcc00415 	stw	r19,16(sp)
   524f0:	dc800315 	stw	r18,12(sp)
   524f4:	dc400215 	stw	r17,8(sp)
   524f8:	dc000115 	stw	r16,4(sp)
   524fc:	dfc00a15 	stw	ra,40(sp)
   52500:	df000915 	stw	fp,36(sp)
   52504:	ddc00815 	stw	r23,32(sp)
   52508:	dd800715 	stw	r22,28(sp)
   5250c:	dd400615 	stw	r21,24(sp)
   52510:	2025883a 	mov	r18,r4
   52514:	2823883a 	mov	r17,r5
   52518:	3021883a 	mov	r16,r6
   5251c:	2027883a 	mov	r19,r4
   52520:	2829883a 	mov	r20,r5
   52524:	3800351e 	bne	r7,zero,525fc <__umoddi3+0x118>
   52528:	29804d2e 	bgeu	r5,r6,52660 <__umoddi3+0x17c>
   5252c:	00bfffd4 	movui	r2,65535
   52530:	11809a36 	bltu	r2,r6,5279c <__umoddi3+0x2b8>
   52534:	00803fc4 	movi	r2,255
   52538:	11813936 	bltu	r2,r6,52a20 <__umoddi3+0x53c>
   5253c:	0005883a 	mov	r2,zero
   52540:	0009883a 	mov	r4,zero
   52544:	3084d83a 	srl	r2,r6,r2
   52548:	00c00174 	movhi	r3,5
   5254c:	18d87a04 	addi	r3,r3,25064
   52550:	05400804 	movi	r21,32
   52554:	1885883a 	add	r2,r3,r2
   52558:	10800003 	ldbu	r2,0(r2)
   5255c:	1109883a 	add	r4,r2,r4
   52560:	a92bc83a 	sub	r21,r21,r4
   52564:	a800ec26 	beq	r21,zero,52918 <__umoddi3+0x434>
   52568:	8d62983a 	sll	r17,r17,r21
   5256c:	9108d83a 	srl	r4,r18,r4
   52570:	3560983a 	sll	r16,r6,r21
   52574:	9566983a 	sll	r19,r18,r21
   52578:	8928b03a 	or	r20,r17,r4
   5257c:	8022d43a 	srli	r17,r16,16
   52580:	a009883a 	mov	r4,r20
   52584:	84bfffcc 	andi	r18,r16,65535
   52588:	880b883a 	mov	r5,r17
   5258c:	00457dc0 	call	457dc <__umodsi3>
   52590:	a009883a 	mov	r4,r20
   52594:	880b883a 	mov	r5,r17
   52598:	102d883a 	mov	r22,r2
   5259c:	00457d40 	call	457d4 <__udivsi3>
   525a0:	b02c943a 	slli	r22,r22,16
   525a4:	9806d43a 	srli	r3,r19,16
   525a8:	1485383a 	mul	r2,r2,r18
   525ac:	b0c6b03a 	or	r3,r22,r3
   525b0:	1880042e 	bgeu	r3,r2,525c4 <__umoddi3+0xe0>
   525b4:	1c07883a 	add	r3,r3,r16
   525b8:	1c000236 	bltu	r3,r16,525c4 <__umoddi3+0xe0>
   525bc:	1880012e 	bgeu	r3,r2,525c4 <__umoddi3+0xe0>
   525c0:	1c07883a 	add	r3,r3,r16
   525c4:	18a9c83a 	sub	r20,r3,r2
   525c8:	a009883a 	mov	r4,r20
   525cc:	880b883a 	mov	r5,r17
   525d0:	00457dc0 	call	457dc <__umodsi3>
   525d4:	102d883a 	mov	r22,r2
   525d8:	a009883a 	mov	r4,r20
   525dc:	880b883a 	mov	r5,r17
   525e0:	00457d40 	call	457d4 <__udivsi3>
   525e4:	b02c943a 	slli	r22,r22,16
   525e8:	1485383a 	mul	r2,r2,r18
   525ec:	9cffffcc 	andi	r19,r19,65535
   525f0:	b4e6b03a 	or	r19,r22,r19
   525f4:	9880522e 	bgeu	r19,r2,52740 <__umoddi3+0x25c>
   525f8:	00004d06 	br	52730 <__umoddi3+0x24c>
   525fc:	29c05436 	bltu	r5,r7,52750 <__umoddi3+0x26c>
   52600:	00bfffd4 	movui	r2,65535
   52604:	11c0602e 	bgeu	r2,r7,52788 <__umoddi3+0x2a4>
   52608:	00804034 	movhi	r2,256
   5260c:	10bfffc4 	addi	r2,r2,-1
   52610:	11c0f736 	bltu	r2,r7,529f0 <__umoddi3+0x50c>
   52614:	00c00404 	movi	r3,16
   52618:	1827883a 	mov	r19,r3
   5261c:	38c6d83a 	srl	r3,r7,r3
   52620:	01000174 	movhi	r4,5
   52624:	21187a04 	addi	r4,r4,25064
   52628:	04000804 	movi	r16,32
   5262c:	20c7883a 	add	r3,r4,r3
   52630:	18800003 	ldbu	r2,0(r3)
   52634:	14e7883a 	add	r19,r2,r19
   52638:	84e1c83a 	sub	r16,r16,r19
   5263c:	8000621e 	bne	r16,zero,527c8 <__umoddi3+0x2e4>
   52640:	3c400136 	bltu	r7,r17,52648 <__umoddi3+0x164>
   52644:	91810336 	bltu	r18,r6,52a54 <__umoddi3+0x570>
   52648:	9185c83a 	sub	r2,r18,r6
   5264c:	89e3c83a 	sub	r17,r17,r7
   52650:	90a5803a 	cmpltu	r18,r18,r2
   52654:	8ca9c83a 	sub	r20,r17,r18
   52658:	a007883a 	mov	r3,r20
   5265c:	00003e06 	br	52758 <__umoddi3+0x274>
   52660:	3000041e 	bne	r6,zero,52674 <__umoddi3+0x190>
   52664:	01000044 	movi	r4,1
   52668:	000b883a 	mov	r5,zero
   5266c:	00457d40 	call	457d4 <__udivsi3>
   52670:	1021883a 	mov	r16,r2
   52674:	00bfffd4 	movui	r2,65535
   52678:	14004e2e 	bgeu	r2,r16,527b4 <__umoddi3+0x2d0>
   5267c:	00804034 	movhi	r2,256
   52680:	10bfffc4 	addi	r2,r2,-1
   52684:	1400e336 	bltu	r2,r16,52a14 <__umoddi3+0x530>
   52688:	00800404 	movi	r2,16
   5268c:	1007883a 	mov	r3,r2
   52690:	8084d83a 	srl	r2,r16,r2
   52694:	01000174 	movhi	r4,5
   52698:	21187a04 	addi	r4,r4,25064
   5269c:	05400804 	movi	r21,32
   526a0:	2085883a 	add	r2,r4,r2
   526a4:	10800003 	ldbu	r2,0(r2)
   526a8:	10c7883a 	add	r3,r2,r3
   526ac:	a8ebc83a 	sub	r21,r21,r3
   526b0:	a8009b1e 	bne	r21,zero,52920 <__umoddi3+0x43c>
   526b4:	8028d43a 	srli	r20,r16,16
   526b8:	8c23c83a 	sub	r17,r17,r16
   526bc:	85bfffcc 	andi	r22,r16,65535
   526c0:	8809883a 	mov	r4,r17
   526c4:	a00b883a 	mov	r5,r20
   526c8:	00457dc0 	call	457dc <__umodsi3>
   526cc:	8809883a 	mov	r4,r17
   526d0:	a00b883a 	mov	r5,r20
   526d4:	1025883a 	mov	r18,r2
   526d8:	00457d40 	call	457d4 <__udivsi3>
   526dc:	9024943a 	slli	r18,r18,16
   526e0:	9806d43a 	srli	r3,r19,16
   526e4:	1585383a 	mul	r2,r2,r22
   526e8:	90c6b03a 	or	r3,r18,r3
   526ec:	1880032e 	bgeu	r3,r2,526fc <__umoddi3+0x218>
   526f0:	1c07883a 	add	r3,r3,r16
   526f4:	1c000136 	bltu	r3,r16,526fc <__umoddi3+0x218>
   526f8:	1880d436 	bltu	r3,r2,52a4c <__umoddi3+0x568>
   526fc:	18a3c83a 	sub	r17,r3,r2
   52700:	8809883a 	mov	r4,r17
   52704:	a00b883a 	mov	r5,r20
   52708:	00457dc0 	call	457dc <__umodsi3>
   5270c:	1025883a 	mov	r18,r2
   52710:	8809883a 	mov	r4,r17
   52714:	a00b883a 	mov	r5,r20
   52718:	00457d40 	call	457d4 <__udivsi3>
   5271c:	9024943a 	slli	r18,r18,16
   52720:	1585383a 	mul	r2,r2,r22
   52724:	9cffffcc 	andi	r19,r19,65535
   52728:	94e6b03a 	or	r19,r18,r19
   5272c:	9880042e 	bgeu	r19,r2,52740 <__umoddi3+0x25c>
   52730:	9c27883a 	add	r19,r19,r16
   52734:	9c000236 	bltu	r19,r16,52740 <__umoddi3+0x25c>
   52738:	9880012e 	bgeu	r19,r2,52740 <__umoddi3+0x25c>
   5273c:	9c27883a 	add	r19,r19,r16
   52740:	98a7c83a 	sub	r19,r19,r2
   52744:	9d44d83a 	srl	r2,r19,r21
   52748:	0007883a 	mov	r3,zero
   5274c:	00000206 	br	52758 <__umoddi3+0x274>
   52750:	2005883a 	mov	r2,r4
   52754:	2807883a 	mov	r3,r5
   52758:	dfc00a17 	ldw	ra,40(sp)
   5275c:	df000917 	ldw	fp,36(sp)
   52760:	ddc00817 	ldw	r23,32(sp)
   52764:	dd800717 	ldw	r22,28(sp)
   52768:	dd400617 	ldw	r21,24(sp)
   5276c:	dd000517 	ldw	r20,20(sp)
   52770:	dcc00417 	ldw	r19,16(sp)
   52774:	dc800317 	ldw	r18,12(sp)
   52778:	dc400217 	ldw	r17,8(sp)
   5277c:	dc000117 	ldw	r16,4(sp)
   52780:	dec00b04 	addi	sp,sp,44
   52784:	f800283a 	ret
   52788:	00803fc4 	movi	r2,255
   5278c:	11c09536 	bltu	r2,r7,529e4 <__umoddi3+0x500>
   52790:	0007883a 	mov	r3,zero
   52794:	0027883a 	mov	r19,zero
   52798:	003fa006 	br	5261c <__alt_data_end+0xfffe061c>
   5279c:	00804034 	movhi	r2,256
   527a0:	10bfffc4 	addi	r2,r2,-1
   527a4:	11809536 	bltu	r2,r6,529fc <__umoddi3+0x518>
   527a8:	00800404 	movi	r2,16
   527ac:	1009883a 	mov	r4,r2
   527b0:	003f6406 	br	52544 <__alt_data_end+0xfffe0544>
   527b4:	00803fc4 	movi	r2,255
   527b8:	14009336 	bltu	r2,r16,52a08 <__umoddi3+0x524>
   527bc:	0005883a 	mov	r2,zero
   527c0:	0007883a 	mov	r3,zero
   527c4:	003fb206 	br	52690 <__alt_data_end+0xfffe0690>
   527c8:	34c4d83a 	srl	r2,r6,r19
   527cc:	3c0e983a 	sll	r7,r7,r16
   527d0:	8ceed83a 	srl	r23,r17,r19
   527d4:	8c22983a 	sll	r17,r17,r16
   527d8:	38a8b03a 	or	r20,r7,r2
   527dc:	a02ad43a 	srli	r21,r20,16
   527e0:	94c4d83a 	srl	r2,r18,r19
   527e4:	b809883a 	mov	r4,r23
   527e8:	a80b883a 	mov	r5,r21
   527ec:	88a2b03a 	or	r17,r17,r2
   527f0:	342c983a 	sll	r22,r6,r16
   527f4:	00457dc0 	call	457dc <__umodsi3>
   527f8:	b809883a 	mov	r4,r23
   527fc:	a80b883a 	mov	r5,r21
   52800:	d8800015 	stw	r2,0(sp)
   52804:	00457d40 	call	457d4 <__udivsi3>
   52808:	d8c00017 	ldw	r3,0(sp)
   5280c:	102f883a 	mov	r23,r2
   52810:	a73fffcc 	andi	fp,r20,65535
   52814:	180a943a 	slli	r5,r3,16
   52818:	8804d43a 	srli	r2,r17,16
   5281c:	bf09383a 	mul	r4,r23,fp
   52820:	9424983a 	sll	r18,r18,r16
   52824:	288ab03a 	or	r5,r5,r2
   52828:	2900042e 	bgeu	r5,r4,5283c <__umoddi3+0x358>
   5282c:	2d0b883a 	add	r5,r5,r20
   52830:	b8bfffc4 	addi	r2,r23,-1
   52834:	2d00812e 	bgeu	r5,r20,52a3c <__umoddi3+0x558>
   52838:	102f883a 	mov	r23,r2
   5283c:	2907c83a 	sub	r3,r5,r4
   52840:	1809883a 	mov	r4,r3
   52844:	a80b883a 	mov	r5,r21
   52848:	d8c00015 	stw	r3,0(sp)
   5284c:	00457dc0 	call	457dc <__umodsi3>
   52850:	d8c00017 	ldw	r3,0(sp)
   52854:	a80b883a 	mov	r5,r21
   52858:	d8800015 	stw	r2,0(sp)
   5285c:	1809883a 	mov	r4,r3
   52860:	00457d40 	call	457d4 <__udivsi3>
   52864:	d9800017 	ldw	r6,0(sp)
   52868:	8c7fffcc 	andi	r17,r17,65535
   5286c:	3008943a 	slli	r4,r6,16
   52870:	170d383a 	mul	r6,r2,fp
   52874:	2448b03a 	or	r4,r4,r17
   52878:	2180042e 	bgeu	r4,r6,5288c <__umoddi3+0x3a8>
   5287c:	2509883a 	add	r4,r4,r20
   52880:	10ffffc4 	addi	r3,r2,-1
   52884:	2500692e 	bgeu	r4,r20,52a2c <__umoddi3+0x548>
   52888:	1805883a 	mov	r2,r3
   5288c:	b82e943a 	slli	r23,r23,16
   52890:	b010d43a 	srli	r8,r22,16
   52894:	b1ffffcc 	andi	r7,r22,65535
   52898:	15eeb03a 	or	r23,r2,r23
   5289c:	b8bfffcc 	andi	r2,r23,65535
   528a0:	b82ed43a 	srli	r23,r23,16
   528a4:	11c7383a 	mul	r3,r2,r7
   528a8:	1205383a 	mul	r2,r2,r8
   528ac:	b9cf383a 	mul	r7,r23,r7
   528b0:	400b883a 	mov	r5,r8
   528b4:	1810d43a 	srli	r8,r3,16
   528b8:	3885883a 	add	r2,r7,r2
   528bc:	2189c83a 	sub	r4,r4,r6
   528c0:	1205883a 	add	r2,r2,r8
   528c4:	b94b383a 	mul	r5,r23,r5
   528c8:	11c0022e 	bgeu	r2,r7,528d4 <__umoddi3+0x3f0>
   528cc:	01800074 	movhi	r6,1
   528d0:	298b883a 	add	r5,r5,r6
   528d4:	100cd43a 	srli	r6,r2,16
   528d8:	1004943a 	slli	r2,r2,16
   528dc:	18ffffcc 	andi	r3,r3,65535
   528e0:	298b883a 	add	r5,r5,r6
   528e4:	10c5883a 	add	r2,r2,r3
   528e8:	21403836 	bltu	r4,r5,529cc <__umoddi3+0x4e8>
   528ec:	21405c26 	beq	r4,r5,52a60 <__umoddi3+0x57c>
   528f0:	2147c83a 	sub	r3,r4,r5
   528f4:	102d883a 	mov	r22,r2
   528f8:	95adc83a 	sub	r22,r18,r22
   528fc:	95a5803a 	cmpltu	r18,r18,r22
   52900:	1c87c83a 	sub	r3,r3,r18
   52904:	1cc4983a 	sll	r2,r3,r19
   52908:	b42cd83a 	srl	r22,r22,r16
   5290c:	1c06d83a 	srl	r3,r3,r16
   52910:	1584b03a 	or	r2,r2,r22
   52914:	003f9006 	br	52758 <__alt_data_end+0xfffe0758>
   52918:	002b883a 	mov	r21,zero
   5291c:	003f1706 	br	5257c <__alt_data_end+0xfffe057c>
   52920:	8560983a 	sll	r16,r16,r21
   52924:	88e6d83a 	srl	r19,r17,r3
   52928:	90c6d83a 	srl	r3,r18,r3
   5292c:	8028d43a 	srli	r20,r16,16
   52930:	8d62983a 	sll	r17,r17,r21
   52934:	9809883a 	mov	r4,r19
   52938:	a00b883a 	mov	r5,r20
   5293c:	88eeb03a 	or	r23,r17,r3
   52940:	00457dc0 	call	457dc <__umodsi3>
   52944:	9809883a 	mov	r4,r19
   52948:	a00b883a 	mov	r5,r20
   5294c:	1023883a 	mov	r17,r2
   52950:	00457d40 	call	457d4 <__udivsi3>
   52954:	85bfffcc 	andi	r22,r16,65535
   52958:	880a943a 	slli	r5,r17,16
   5295c:	b806d43a 	srli	r3,r23,16
   52960:	1585383a 	mul	r2,r2,r22
   52964:	9566983a 	sll	r19,r18,r21
   52968:	28cab03a 	or	r5,r5,r3
   5296c:	2880042e 	bgeu	r5,r2,52980 <__umoddi3+0x49c>
   52970:	2c0b883a 	add	r5,r5,r16
   52974:	2c000236 	bltu	r5,r16,52980 <__umoddi3+0x49c>
   52978:	2880012e 	bgeu	r5,r2,52980 <__umoddi3+0x49c>
   5297c:	2c0b883a 	add	r5,r5,r16
   52980:	28a5c83a 	sub	r18,r5,r2
   52984:	9009883a 	mov	r4,r18
   52988:	a00b883a 	mov	r5,r20
   5298c:	00457dc0 	call	457dc <__umodsi3>
   52990:	1023883a 	mov	r17,r2
   52994:	9009883a 	mov	r4,r18
   52998:	a00b883a 	mov	r5,r20
   5299c:	00457d40 	call	457d4 <__udivsi3>
   529a0:	8822943a 	slli	r17,r17,16
   529a4:	1585383a 	mul	r2,r2,r22
   529a8:	bdffffcc 	andi	r23,r23,65535
   529ac:	8de2b03a 	or	r17,r17,r23
   529b0:	8880042e 	bgeu	r17,r2,529c4 <__umoddi3+0x4e0>
   529b4:	8c23883a 	add	r17,r17,r16
   529b8:	8c000236 	bltu	r17,r16,529c4 <__umoddi3+0x4e0>
   529bc:	8880012e 	bgeu	r17,r2,529c4 <__umoddi3+0x4e0>
   529c0:	8c23883a 	add	r17,r17,r16
   529c4:	88a3c83a 	sub	r17,r17,r2
   529c8:	003f3d06 	br	526c0 <__alt_data_end+0xfffe06c0>
   529cc:	15adc83a 	sub	r22,r2,r22
   529d0:	2d07c83a 	sub	r3,r5,r20
   529d4:	1585803a 	cmpltu	r2,r2,r22
   529d8:	1887c83a 	sub	r3,r3,r2
   529dc:	20c7c83a 	sub	r3,r4,r3
   529e0:	003fc506 	br	528f8 <__alt_data_end+0xfffe08f8>
   529e4:	00c00204 	movi	r3,8
   529e8:	1827883a 	mov	r19,r3
   529ec:	003f0b06 	br	5261c <__alt_data_end+0xfffe061c>
   529f0:	00c00604 	movi	r3,24
   529f4:	1827883a 	mov	r19,r3
   529f8:	003f0806 	br	5261c <__alt_data_end+0xfffe061c>
   529fc:	00800604 	movi	r2,24
   52a00:	1009883a 	mov	r4,r2
   52a04:	003ecf06 	br	52544 <__alt_data_end+0xfffe0544>
   52a08:	00800204 	movi	r2,8
   52a0c:	1007883a 	mov	r3,r2
   52a10:	003f1f06 	br	52690 <__alt_data_end+0xfffe0690>
   52a14:	00800604 	movi	r2,24
   52a18:	1007883a 	mov	r3,r2
   52a1c:	003f1c06 	br	52690 <__alt_data_end+0xfffe0690>
   52a20:	00800204 	movi	r2,8
   52a24:	1009883a 	mov	r4,r2
   52a28:	003ec606 	br	52544 <__alt_data_end+0xfffe0544>
   52a2c:	21bf962e 	bgeu	r4,r6,52888 <__alt_data_end+0xfffe0888>
   52a30:	10bfff84 	addi	r2,r2,-2
   52a34:	2509883a 	add	r4,r4,r20
   52a38:	003f9406 	br	5288c <__alt_data_end+0xfffe088c>
   52a3c:	293f7e2e 	bgeu	r5,r4,52838 <__alt_data_end+0xfffe0838>
   52a40:	bdffff84 	addi	r23,r23,-2
   52a44:	2d0b883a 	add	r5,r5,r20
   52a48:	003f7c06 	br	5283c <__alt_data_end+0xfffe083c>
   52a4c:	1c07883a 	add	r3,r3,r16
   52a50:	003f2a06 	br	526fc <__alt_data_end+0xfffe06fc>
   52a54:	9005883a 	mov	r2,r18
   52a58:	a007883a 	mov	r3,r20
   52a5c:	003f3e06 	br	52758 <__alt_data_end+0xfffe0758>
   52a60:	90bfda36 	bltu	r18,r2,529cc <__alt_data_end+0xfffe09cc>
   52a64:	102d883a 	mov	r22,r2
   52a68:	0007883a 	mov	r3,zero
   52a6c:	003fa206 	br	528f8 <__alt_data_end+0xfffe08f8>

00052a70 <__nesf2>:
   52a70:	defff504 	addi	sp,sp,-44
   52a74:	d9000915 	stw	r4,36(sp)
   52a78:	d9400815 	stw	r5,32(sp)
   52a7c:	d9000904 	addi	r4,sp,36
   52a80:	d9400404 	addi	r5,sp,16
   52a84:	dfc00a15 	stw	ra,40(sp)
   52a88:	0053a0c0 	call	53a0c <__unpack_f>
   52a8c:	d9000804 	addi	r4,sp,32
   52a90:	d80b883a 	mov	r5,sp
   52a94:	0053a0c0 	call	53a0c <__unpack_f>
   52a98:	d8c00417 	ldw	r3,16(sp)
   52a9c:	00800044 	movi	r2,1
   52aa0:	10c0052e 	bgeu	r2,r3,52ab8 <__nesf2+0x48>
   52aa4:	d8c00017 	ldw	r3,0(sp)
   52aa8:	10c0032e 	bgeu	r2,r3,52ab8 <__nesf2+0x48>
   52aac:	d9000404 	addi	r4,sp,16
   52ab0:	d80b883a 	mov	r5,sp
   52ab4:	0053ad40 	call	53ad4 <__fpcmp_parts_f>
   52ab8:	dfc00a17 	ldw	ra,40(sp)
   52abc:	dec00b04 	addi	sp,sp,44
   52ac0:	f800283a 	ret

00052ac4 <__gtsf2>:
   52ac4:	defff504 	addi	sp,sp,-44
   52ac8:	d9000915 	stw	r4,36(sp)
   52acc:	d9400815 	stw	r5,32(sp)
   52ad0:	d9000904 	addi	r4,sp,36
   52ad4:	d9400404 	addi	r5,sp,16
   52ad8:	dfc00a15 	stw	ra,40(sp)
   52adc:	0053a0c0 	call	53a0c <__unpack_f>
   52ae0:	d9000804 	addi	r4,sp,32
   52ae4:	d80b883a 	mov	r5,sp
   52ae8:	0053a0c0 	call	53a0c <__unpack_f>
   52aec:	d8c00417 	ldw	r3,16(sp)
   52af0:	00800044 	movi	r2,1
   52af4:	10c0082e 	bgeu	r2,r3,52b18 <__gtsf2+0x54>
   52af8:	d8c00017 	ldw	r3,0(sp)
   52afc:	10c0062e 	bgeu	r2,r3,52b18 <__gtsf2+0x54>
   52b00:	d9000404 	addi	r4,sp,16
   52b04:	d80b883a 	mov	r5,sp
   52b08:	0053ad40 	call	53ad4 <__fpcmp_parts_f>
   52b0c:	dfc00a17 	ldw	ra,40(sp)
   52b10:	dec00b04 	addi	sp,sp,44
   52b14:	f800283a 	ret
   52b18:	00bfffc4 	movi	r2,-1
   52b1c:	003ffb06 	br	52b0c <__alt_data_end+0xfffe0b0c>

00052b20 <__ltsf2>:
   52b20:	defff504 	addi	sp,sp,-44
   52b24:	d9000915 	stw	r4,36(sp)
   52b28:	d9400815 	stw	r5,32(sp)
   52b2c:	d9000904 	addi	r4,sp,36
   52b30:	d9400404 	addi	r5,sp,16
   52b34:	dfc00a15 	stw	ra,40(sp)
   52b38:	0053a0c0 	call	53a0c <__unpack_f>
   52b3c:	d9000804 	addi	r4,sp,32
   52b40:	d80b883a 	mov	r5,sp
   52b44:	0053a0c0 	call	53a0c <__unpack_f>
   52b48:	d8c00417 	ldw	r3,16(sp)
   52b4c:	00800044 	movi	r2,1
   52b50:	10c0052e 	bgeu	r2,r3,52b68 <__ltsf2+0x48>
   52b54:	d8c00017 	ldw	r3,0(sp)
   52b58:	10c0032e 	bgeu	r2,r3,52b68 <__ltsf2+0x48>
   52b5c:	d9000404 	addi	r4,sp,16
   52b60:	d80b883a 	mov	r5,sp
   52b64:	0053ad40 	call	53ad4 <__fpcmp_parts_f>
   52b68:	dfc00a17 	ldw	ra,40(sp)
   52b6c:	dec00b04 	addi	sp,sp,44
   52b70:	f800283a 	ret

00052b74 <_fpadd_parts>:
   52b74:	2005883a 	mov	r2,r4
   52b78:	21000017 	ldw	r4,0(r4)
   52b7c:	01c00044 	movi	r7,1
   52b80:	3900622e 	bgeu	r7,r4,52d0c <_fpadd_parts+0x198>
   52b84:	28c00017 	ldw	r3,0(r5)
   52b88:	38c05f2e 	bgeu	r7,r3,52d08 <_fpadd_parts+0x194>
   52b8c:	01c00104 	movi	r7,4
   52b90:	21c0c626 	beq	r4,r7,52eac <_fpadd_parts+0x338>
   52b94:	19c05c26 	beq	r3,r7,52d08 <_fpadd_parts+0x194>
   52b98:	01c00084 	movi	r7,2
   52b9c:	19c06b26 	beq	r3,r7,52d4c <_fpadd_parts+0x1d8>
   52ba0:	21c05926 	beq	r4,r7,52d08 <_fpadd_parts+0x194>
   52ba4:	11c00217 	ldw	r7,8(r2)
   52ba8:	2ac00217 	ldw	r11,8(r5)
   52bac:	13000317 	ldw	r12,12(r2)
   52bb0:	13400417 	ldw	r13,16(r2)
   52bb4:	3ac9c83a 	sub	r4,r7,r11
   52bb8:	2a000317 	ldw	r8,12(r5)
   52bbc:	2a400417 	ldw	r9,16(r5)
   52bc0:	2015883a 	mov	r10,r4
   52bc4:	20007516 	blt	r4,zero,52d9c <_fpadd_parts+0x228>
   52bc8:	00c00fc4 	movi	r3,63
   52bcc:	1a805016 	blt	r3,r10,52d10 <_fpadd_parts+0x19c>
   52bd0:	0100870e 	bge	zero,r4,52df0 <_fpadd_parts+0x27c>
   52bd4:	50fff804 	addi	r3,r10,-32
   52bd8:	18009916 	blt	r3,zero,52e40 <_fpadd_parts+0x2cc>
   52bdc:	48d6d83a 	srl	r11,r9,r3
   52be0:	001d883a 	mov	r14,zero
   52be4:	18009e16 	blt	r3,zero,52e60 <_fpadd_parts+0x2ec>
   52be8:	01000044 	movi	r4,1
   52bec:	20c6983a 	sll	r3,r4,r3
   52bf0:	0015883a 	mov	r10,zero
   52bf4:	513fffc4 	addi	r4,r10,-1
   52bf8:	2295403a 	cmpgeu	r10,r4,r10
   52bfc:	1a87c83a 	sub	r3,r3,r10
   52c00:	1a52703a 	and	r9,r3,r9
   52c04:	2210703a 	and	r8,r4,r8
   52c08:	4250b03a 	or	r8,r8,r9
   52c0c:	4010c03a 	cmpne	r8,r8,zero
   52c10:	42d0b03a 	or	r8,r8,r11
   52c14:	7013883a 	mov	r9,r14
   52c18:	11000117 	ldw	r4,4(r2)
   52c1c:	28800117 	ldw	r2,4(r5)
   52c20:	20804126 	beq	r4,r2,52d28 <_fpadd_parts+0x1b4>
   52c24:	20006326 	beq	r4,zero,52db4 <_fpadd_parts+0x240>
   52c28:	4305c83a 	sub	r2,r8,r12
   52c2c:	4091803a 	cmpltu	r8,r8,r2
   52c30:	4b47c83a 	sub	r3,r9,r13
   52c34:	1a07c83a 	sub	r3,r3,r8
   52c38:	18006316 	blt	r3,zero,52dc8 <_fpadd_parts+0x254>
   52c3c:	30000115 	stw	zero,4(r6)
   52c40:	31c00215 	stw	r7,8(r6)
   52c44:	30800315 	stw	r2,12(r6)
   52c48:	30c00415 	stw	r3,16(r6)
   52c4c:	11ffffc4 	addi	r7,r2,-1
   52c50:	388b403a 	cmpgeu	r5,r7,r2
   52c54:	194bc83a 	sub	r5,r3,r5
   52c58:	01040034 	movhi	r4,4096
   52c5c:	213fffc4 	addi	r4,r4,-1
   52c60:	21401736 	bltu	r4,r5,52cc0 <_fpadd_parts+0x14c>
   52c64:	29008226 	beq	r5,r4,52e70 <_fpadd_parts+0x2fc>
   52c68:	31400217 	ldw	r5,8(r6)
   52c6c:	02840034 	movhi	r10,4096
   52c70:	52bfffc4 	addi	r10,r10,-1
   52c74:	033fff84 	movi	r12,-2
   52c78:	297fffc4 	addi	r5,r5,-1
   52c7c:	00000106 	br	52c84 <_fpadd_parts+0x110>
   52c80:	3a804a26 	beq	r7,r10,52dac <_fpadd_parts+0x238>
   52c84:	1089883a 	add	r4,r2,r2
   52c88:	2091803a 	cmpltu	r8,r4,r2
   52c8c:	18c7883a 	add	r3,r3,r3
   52c90:	227fffc4 	addi	r9,r4,-1
   52c94:	40d1883a 	add	r8,r8,r3
   52c98:	490f403a 	cmpgeu	r7,r9,r4
   52c9c:	41cfc83a 	sub	r7,r8,r7
   52ca0:	2817883a 	mov	r11,r5
   52ca4:	2005883a 	mov	r2,r4
   52ca8:	4007883a 	mov	r3,r8
   52cac:	297fffc4 	addi	r5,r5,-1
   52cb0:	51fff32e 	bgeu	r10,r7,52c80 <__alt_data_end+0xfffe0c80>
   52cb4:	31000315 	stw	r4,12(r6)
   52cb8:	32000415 	stw	r8,16(r6)
   52cbc:	32c00215 	stw	r11,8(r6)
   52cc0:	010000c4 	movi	r4,3
   52cc4:	31000015 	stw	r4,0(r6)
   52cc8:	01080034 	movhi	r4,8192
   52ccc:	213fffc4 	addi	r4,r4,-1
   52cd0:	20c00b2e 	bgeu	r4,r3,52d00 <_fpadd_parts+0x18c>
   52cd4:	180e97fa 	slli	r7,r3,31
   52cd8:	1008d07a 	srli	r4,r2,1
   52cdc:	31400217 	ldw	r5,8(r6)
   52ce0:	1806d07a 	srli	r3,r3,1
   52ce4:	1080004c 	andi	r2,r2,1
   52ce8:	3908b03a 	or	r4,r7,r4
   52cec:	1108b03a 	or	r4,r2,r4
   52cf0:	29400044 	addi	r5,r5,1
   52cf4:	31000315 	stw	r4,12(r6)
   52cf8:	30c00415 	stw	r3,16(r6)
   52cfc:	31400215 	stw	r5,8(r6)
   52d00:	3005883a 	mov	r2,r6
   52d04:	f800283a 	ret
   52d08:	2805883a 	mov	r2,r5
   52d0c:	f800283a 	ret
   52d10:	59c01e0e 	bge	r11,r7,52d8c <_fpadd_parts+0x218>
   52d14:	11000117 	ldw	r4,4(r2)
   52d18:	28800117 	ldw	r2,4(r5)
   52d1c:	0011883a 	mov	r8,zero
   52d20:	0013883a 	mov	r9,zero
   52d24:	20bfbf1e 	bne	r4,r2,52c24 <__alt_data_end+0xfffe0c24>
   52d28:	4305883a 	add	r2,r8,r12
   52d2c:	1207803a 	cmpltu	r3,r2,r8
   52d30:	4b53883a 	add	r9,r9,r13
   52d34:	1a47883a 	add	r3,r3,r9
   52d38:	31000115 	stw	r4,4(r6)
   52d3c:	31c00215 	stw	r7,8(r6)
   52d40:	30800315 	stw	r2,12(r6)
   52d44:	30c00415 	stw	r3,16(r6)
   52d48:	003fdd06 	br	52cc0 <__alt_data_end+0xfffe0cc0>
   52d4c:	20ffef1e 	bne	r4,r3,52d0c <__alt_data_end+0xfffe0d0c>
   52d50:	31000015 	stw	r4,0(r6)
   52d54:	10c00117 	ldw	r3,4(r2)
   52d58:	30c00115 	stw	r3,4(r6)
   52d5c:	10c00217 	ldw	r3,8(r2)
   52d60:	11000117 	ldw	r4,4(r2)
   52d64:	29400117 	ldw	r5,4(r5)
   52d68:	30c00215 	stw	r3,8(r6)
   52d6c:	10c00317 	ldw	r3,12(r2)
   52d70:	2908703a 	and	r4,r5,r4
   52d74:	30c00315 	stw	r3,12(r6)
   52d78:	10c00417 	ldw	r3,16(r2)
   52d7c:	31000115 	stw	r4,4(r6)
   52d80:	3005883a 	mov	r2,r6
   52d84:	30c00415 	stw	r3,16(r6)
   52d88:	f800283a 	ret
   52d8c:	580f883a 	mov	r7,r11
   52d90:	0019883a 	mov	r12,zero
   52d94:	001b883a 	mov	r13,zero
   52d98:	003f9f06 	br	52c18 <__alt_data_end+0xfffe0c18>
   52d9c:	0115c83a 	sub	r10,zero,r4
   52da0:	00c00fc4 	movi	r3,63
   52da4:	1abfda16 	blt	r3,r10,52d10 <__alt_data_end+0xfffe0d10>
   52da8:	003f8906 	br	52bd0 <__alt_data_end+0xfffe0bd0>
   52dac:	627fb52e 	bgeu	r12,r9,52c84 <__alt_data_end+0xfffe0c84>
   52db0:	003fc006 	br	52cb4 <__alt_data_end+0xfffe0cb4>
   52db4:	6205c83a 	sub	r2,r12,r8
   52db8:	6099803a 	cmpltu	r12,r12,r2
   52dbc:	6a47c83a 	sub	r3,r13,r9
   52dc0:	1b07c83a 	sub	r3,r3,r12
   52dc4:	183f9d0e 	bge	r3,zero,52c3c <__alt_data_end+0xfffe0c3c>
   52dc8:	0085c83a 	sub	r2,zero,r2
   52dcc:	1008c03a 	cmpne	r4,r2,zero
   52dd0:	00c7c83a 	sub	r3,zero,r3
   52dd4:	1907c83a 	sub	r3,r3,r4
   52dd8:	01000044 	movi	r4,1
   52ddc:	31000115 	stw	r4,4(r6)
   52de0:	31c00215 	stw	r7,8(r6)
   52de4:	30800315 	stw	r2,12(r6)
   52de8:	30c00415 	stw	r3,16(r6)
   52dec:	003f9706 	br	52c4c <__alt_data_end+0xfffe0c4c>
   52df0:	203f8926 	beq	r4,zero,52c18 <__alt_data_end+0xfffe0c18>
   52df4:	50fff804 	addi	r3,r10,-32
   52df8:	3a8f883a 	add	r7,r7,r10
   52dfc:	18002316 	blt	r3,zero,52e8c <_fpadd_parts+0x318>
   52e00:	68d6d83a 	srl	r11,r13,r3
   52e04:	001d883a 	mov	r14,zero
   52e08:	18001c16 	blt	r3,zero,52e7c <_fpadd_parts+0x308>
   52e0c:	01000044 	movi	r4,1
   52e10:	20c6983a 	sll	r3,r4,r3
   52e14:	0015883a 	mov	r10,zero
   52e18:	513fffc4 	addi	r4,r10,-1
   52e1c:	2295403a 	cmpgeu	r10,r4,r10
   52e20:	1a87c83a 	sub	r3,r3,r10
   52e24:	1b5a703a 	and	r13,r3,r13
   52e28:	2318703a 	and	r12,r4,r12
   52e2c:	6358b03a 	or	r12,r12,r13
   52e30:	6018c03a 	cmpne	r12,r12,zero
   52e34:	62d8b03a 	or	r12,r12,r11
   52e38:	701b883a 	mov	r13,r14
   52e3c:	003f7606 	br	52c18 <__alt_data_end+0xfffe0c18>
   52e40:	4808907a 	slli	r4,r9,1
   52e44:	02c007c4 	movi	r11,31
   52e48:	5a97c83a 	sub	r11,r11,r10
   52e4c:	22c8983a 	sll	r4,r4,r11
   52e50:	4296d83a 	srl	r11,r8,r10
   52e54:	4a9cd83a 	srl	r14,r9,r10
   52e58:	22d6b03a 	or	r11,r4,r11
   52e5c:	003f6106 	br	52be4 <__alt_data_end+0xfffe0be4>
   52e60:	00c00044 	movi	r3,1
   52e64:	1a94983a 	sll	r10,r3,r10
   52e68:	0007883a 	mov	r3,zero
   52e6c:	003f6106 	br	52bf4 <__alt_data_end+0xfffe0bf4>
   52e70:	013fff84 	movi	r4,-2
   52e74:	21ff7c2e 	bgeu	r4,r7,52c68 <__alt_data_end+0xfffe0c68>
   52e78:	003f9106 	br	52cc0 <__alt_data_end+0xfffe0cc0>
   52e7c:	00c00044 	movi	r3,1
   52e80:	1a94983a 	sll	r10,r3,r10
   52e84:	0007883a 	mov	r3,zero
   52e88:	003fe306 	br	52e18 <__alt_data_end+0xfffe0e18>
   52e8c:	6816907a 	slli	r11,r13,1
   52e90:	010007c4 	movi	r4,31
   52e94:	2289c83a 	sub	r4,r4,r10
   52e98:	5908983a 	sll	r4,r11,r4
   52e9c:	6296d83a 	srl	r11,r12,r10
   52ea0:	6a9cd83a 	srl	r14,r13,r10
   52ea4:	22d6b03a 	or	r11,r4,r11
   52ea8:	003fd706 	br	52e08 <__alt_data_end+0xfffe0e08>
   52eac:	193f971e 	bne	r3,r4,52d0c <__alt_data_end+0xfffe0d0c>
   52eb0:	11000117 	ldw	r4,4(r2)
   52eb4:	28c00117 	ldw	r3,4(r5)
   52eb8:	20ff9426 	beq	r4,r3,52d0c <__alt_data_end+0xfffe0d0c>
   52ebc:	00800174 	movhi	r2,5
   52ec0:	10987504 	addi	r2,r2,25044
   52ec4:	f800283a 	ret

00052ec8 <__adddf3>:
   52ec8:	deffec04 	addi	sp,sp,-80
   52ecc:	d9001115 	stw	r4,68(sp)
   52ed0:	d9401215 	stw	r5,72(sp)
   52ed4:	d9001104 	addi	r4,sp,68
   52ed8:	d9400a04 	addi	r5,sp,40
   52edc:	dfc01315 	stw	ra,76(sp)
   52ee0:	d9c01015 	stw	r7,64(sp)
   52ee4:	d9800f15 	stw	r6,60(sp)
   52ee8:	0053de00 	call	53de0 <__unpack_d>
   52eec:	d9000f04 	addi	r4,sp,60
   52ef0:	d9400504 	addi	r5,sp,20
   52ef4:	0053de00 	call	53de0 <__unpack_d>
   52ef8:	d9000a04 	addi	r4,sp,40
   52efc:	d9400504 	addi	r5,sp,20
   52f00:	d80d883a 	mov	r6,sp
   52f04:	0052b740 	call	52b74 <_fpadd_parts>
   52f08:	1009883a 	mov	r4,r2
   52f0c:	0053bbc0 	call	53bbc <__pack_d>
   52f10:	dfc01317 	ldw	ra,76(sp)
   52f14:	dec01404 	addi	sp,sp,80
   52f18:	f800283a 	ret

00052f1c <__subdf3>:
   52f1c:	deffec04 	addi	sp,sp,-80
   52f20:	d9001115 	stw	r4,68(sp)
   52f24:	d9401215 	stw	r5,72(sp)
   52f28:	d9001104 	addi	r4,sp,68
   52f2c:	d9400a04 	addi	r5,sp,40
   52f30:	dfc01315 	stw	ra,76(sp)
   52f34:	d9c01015 	stw	r7,64(sp)
   52f38:	d9800f15 	stw	r6,60(sp)
   52f3c:	0053de00 	call	53de0 <__unpack_d>
   52f40:	d9000f04 	addi	r4,sp,60
   52f44:	d9400504 	addi	r5,sp,20
   52f48:	0053de00 	call	53de0 <__unpack_d>
   52f4c:	d8800617 	ldw	r2,24(sp)
   52f50:	d9000a04 	addi	r4,sp,40
   52f54:	d9400504 	addi	r5,sp,20
   52f58:	d80d883a 	mov	r6,sp
   52f5c:	1080005c 	xori	r2,r2,1
   52f60:	d8800615 	stw	r2,24(sp)
   52f64:	0052b740 	call	52b74 <_fpadd_parts>
   52f68:	1009883a 	mov	r4,r2
   52f6c:	0053bbc0 	call	53bbc <__pack_d>
   52f70:	dfc01317 	ldw	ra,76(sp)
   52f74:	dec01404 	addi	sp,sp,80
   52f78:	f800283a 	ret

00052f7c <__muldf3>:
   52f7c:	deffe404 	addi	sp,sp,-112
   52f80:	d9001115 	stw	r4,68(sp)
   52f84:	d9401215 	stw	r5,72(sp)
   52f88:	d9001104 	addi	r4,sp,68
   52f8c:	d9400a04 	addi	r5,sp,40
   52f90:	dfc01b15 	stw	ra,108(sp)
   52f94:	d9800f15 	stw	r6,60(sp)
   52f98:	d9c01015 	stw	r7,64(sp)
   52f9c:	ddc01a15 	stw	r23,104(sp)
   52fa0:	dd801915 	stw	r22,100(sp)
   52fa4:	dd401815 	stw	r21,96(sp)
   52fa8:	dd001715 	stw	r20,92(sp)
   52fac:	dcc01615 	stw	r19,88(sp)
   52fb0:	dc801515 	stw	r18,84(sp)
   52fb4:	dc401415 	stw	r17,80(sp)
   52fb8:	dc001315 	stw	r16,76(sp)
   52fbc:	0053de00 	call	53de0 <__unpack_d>
   52fc0:	d9000f04 	addi	r4,sp,60
   52fc4:	d9400504 	addi	r5,sp,20
   52fc8:	0053de00 	call	53de0 <__unpack_d>
   52fcc:	d8c00a17 	ldw	r3,40(sp)
   52fd0:	00800044 	movi	r2,1
   52fd4:	10c01136 	bltu	r2,r3,5301c <__muldf3+0xa0>
   52fd8:	d8c00b17 	ldw	r3,44(sp)
   52fdc:	d8800617 	ldw	r2,24(sp)
   52fe0:	d9000a04 	addi	r4,sp,40
   52fe4:	1884c03a 	cmpne	r2,r3,r2
   52fe8:	d8800b15 	stw	r2,44(sp)
   52fec:	0053bbc0 	call	53bbc <__pack_d>
   52ff0:	dfc01b17 	ldw	ra,108(sp)
   52ff4:	ddc01a17 	ldw	r23,104(sp)
   52ff8:	dd801917 	ldw	r22,100(sp)
   52ffc:	dd401817 	ldw	r21,96(sp)
   53000:	dd001717 	ldw	r20,92(sp)
   53004:	dcc01617 	ldw	r19,88(sp)
   53008:	dc801517 	ldw	r18,84(sp)
   5300c:	dc401417 	ldw	r17,80(sp)
   53010:	dc001317 	ldw	r16,76(sp)
   53014:	dec01c04 	addi	sp,sp,112
   53018:	f800283a 	ret
   5301c:	d9000517 	ldw	r4,20(sp)
   53020:	11000636 	bltu	r2,r4,5303c <__muldf3+0xc0>
   53024:	d8800617 	ldw	r2,24(sp)
   53028:	d8c00b17 	ldw	r3,44(sp)
   5302c:	d9000504 	addi	r4,sp,20
   53030:	1884c03a 	cmpne	r2,r3,r2
   53034:	d8800615 	stw	r2,24(sp)
   53038:	003fec06 	br	52fec <__alt_data_end+0xfffe0fec>
   5303c:	00800104 	movi	r2,4
   53040:	1880051e 	bne	r3,r2,53058 <__muldf3+0xdc>
   53044:	00800084 	movi	r2,2
   53048:	20bfe31e 	bne	r4,r2,52fd8 <__alt_data_end+0xfffe0fd8>
   5304c:	01000174 	movhi	r4,5
   53050:	21187504 	addi	r4,r4,25044
   53054:	003fe506 	br	52fec <__alt_data_end+0xfffe0fec>
   53058:	2080031e 	bne	r4,r2,53068 <__muldf3+0xec>
   5305c:	00800084 	movi	r2,2
   53060:	18bffa26 	beq	r3,r2,5304c <__alt_data_end+0xfffe104c>
   53064:	003fef06 	br	53024 <__alt_data_end+0xfffe1024>
   53068:	00800084 	movi	r2,2
   5306c:	18bfda26 	beq	r3,r2,52fd8 <__alt_data_end+0xfffe0fd8>
   53070:	20bfec26 	beq	r4,r2,53024 <__alt_data_end+0xfffe1024>
   53074:	dc000d17 	ldw	r16,52(sp)
   53078:	dd000817 	ldw	r20,32(sp)
   5307c:	dc800917 	ldw	r18,36(sp)
   53080:	8009883a 	mov	r4,r16
   53084:	000b883a 	mov	r5,zero
   53088:	a00d883a 	mov	r6,r20
   5308c:	000f883a 	mov	r7,zero
   53090:	0051e380 	call	51e38 <__muldi3>
   53094:	dc400e17 	ldw	r17,56(sp)
   53098:	9009883a 	mov	r4,r18
   5309c:	800d883a 	mov	r6,r16
   530a0:	000b883a 	mov	r5,zero
   530a4:	000f883a 	mov	r7,zero
   530a8:	102f883a 	mov	r23,r2
   530ac:	1827883a 	mov	r19,r3
   530b0:	0051e380 	call	51e38 <__muldi3>
   530b4:	900d883a 	mov	r6,r18
   530b8:	8809883a 	mov	r4,r17
   530bc:	000b883a 	mov	r5,zero
   530c0:	000f883a 	mov	r7,zero
   530c4:	102b883a 	mov	r21,r2
   530c8:	1821883a 	mov	r16,r3
   530cc:	0051e380 	call	51e38 <__muldi3>
   530d0:	8809883a 	mov	r4,r17
   530d4:	000b883a 	mov	r5,zero
   530d8:	a00d883a 	mov	r6,r20
   530dc:	000f883a 	mov	r7,zero
   530e0:	102d883a 	mov	r22,r2
   530e4:	1825883a 	mov	r18,r3
   530e8:	0051e380 	call	51e38 <__muldi3>
   530ec:	154b883a 	add	r5,r2,r21
   530f0:	2889803a 	cmpltu	r4,r5,r2
   530f4:	1c07883a 	add	r3,r3,r16
   530f8:	20c9883a 	add	r4,r4,r3
   530fc:	24004b36 	bltu	r4,r16,5322c <__muldf3+0x2b0>
   53100:	8100011e 	bne	r16,r4,53108 <__muldf3+0x18c>
   53104:	2d404936 	bltu	r5,r21,5322c <__muldf3+0x2b0>
   53108:	0011883a 	mov	r8,zero
   5310c:	0007883a 	mov	r3,zero
   53110:	2ccb883a 	add	r5,r5,r19
   53114:	b80d883a 	mov	r6,r23
   53118:	2cc0012e 	bgeu	r5,r19,53120 <__muldf3+0x1a4>
   5311c:	02000044 	movi	r8,1
   53120:	258f883a 	add	r7,r4,r22
   53124:	3909803a 	cmpltu	r4,r7,r4
   53128:	da400c17 	ldw	r9,48(sp)
   5312c:	2489883a 	add	r4,r4,r18
   53130:	d8800717 	ldw	r2,28(sp)
   53134:	20c9883a 	add	r4,r4,r3
   53138:	da800b17 	ldw	r10,44(sp)
   5313c:	d8c00617 	ldw	r3,24(sp)
   53140:	3a11883a 	add	r8,r7,r8
   53144:	4885883a 	add	r2,r9,r2
   53148:	50c6c03a 	cmpne	r3,r10,r3
   5314c:	41cf803a 	cmpltu	r7,r8,r7
   53150:	12400104 	addi	r9,r2,4
   53154:	d8c00115 	stw	r3,4(sp)
   53158:	3909883a 	add	r4,r7,r4
   5315c:	da400215 	stw	r9,8(sp)
   53160:	03480034 	movhi	r13,8192
   53164:	6b7fffc4 	addi	r13,r13,-1
   53168:	4007883a 	mov	r3,r8
   5316c:	6900102e 	bgeu	r13,r4,531b0 <__muldf3+0x234>
   53170:	10800144 	addi	r2,r2,5
   53174:	180ed07a 	srli	r7,r3,1
   53178:	18c0004c 	andi	r3,r3,1
   5317c:	201097fa 	slli	r8,r4,31
   53180:	281697fa 	slli	r11,r5,31
   53184:	2008d07a 	srli	r4,r4,1
   53188:	3014d07a 	srli	r10,r6,1
   5318c:	2812d07a 	srli	r9,r5,1
   53190:	1019883a 	mov	r12,r2
   53194:	18000226 	beq	r3,zero,531a0 <__muldf3+0x224>
   53198:	5a8cb03a 	or	r6,r11,r10
   5319c:	49600034 	orhi	r5,r9,32768
   531a0:	41c6b03a 	or	r3,r8,r7
   531a4:	10800044 	addi	r2,r2,1
   531a8:	693ff236 	bltu	r13,r4,53174 <__alt_data_end+0xfffe1174>
   531ac:	db000215 	stw	r12,8(sp)
   531b0:	03440034 	movhi	r13,4096
   531b4:	6b7fffc4 	addi	r13,r13,-1
   531b8:	69001336 	bltu	r13,r4,53208 <__muldf3+0x28c>
   531bc:	d8800217 	ldw	r2,8(sp)
   531c0:	10bfffc4 	addi	r2,r2,-1
   531c4:	18d3883a 	add	r9,r3,r3
   531c8:	48c7803a 	cmpltu	r3,r9,r3
   531cc:	2109883a 	add	r4,r4,r4
   531d0:	190f883a 	add	r7,r3,r4
   531d4:	3191883a 	add	r8,r6,r6
   531d8:	4197803a 	cmpltu	r11,r8,r6
   531dc:	2955883a 	add	r10,r5,r5
   531e0:	1019883a 	mov	r12,r2
   531e4:	4807883a 	mov	r3,r9
   531e8:	3809883a 	mov	r4,r7
   531ec:	2800010e 	bge	r5,zero,531f4 <__muldf3+0x278>
   531f0:	48c00054 	ori	r3,r9,1
   531f4:	400d883a 	mov	r6,r8
   531f8:	5a8b883a 	add	r5,r11,r10
   531fc:	10bfffc4 	addi	r2,r2,-1
   53200:	69fff02e 	bgeu	r13,r7,531c4 <__alt_data_end+0xfffe11c4>
   53204:	db000215 	stw	r12,8(sp)
   53208:	18803fcc 	andi	r2,r3,255
   5320c:	01c02004 	movi	r7,128
   53210:	11c00926 	beq	r2,r7,53238 <__muldf3+0x2bc>
   53214:	008000c4 	movi	r2,3
   53218:	d9000415 	stw	r4,16(sp)
   5321c:	d8c00315 	stw	r3,12(sp)
   53220:	d8800015 	stw	r2,0(sp)
   53224:	d809883a 	mov	r4,sp
   53228:	003f7006 	br	52fec <__alt_data_end+0xfffe0fec>
   5322c:	0011883a 	mov	r8,zero
   53230:	00c00044 	movi	r3,1
   53234:	003fb606 	br	53110 <__alt_data_end+0xfffe1110>
   53238:	19c0400c 	andi	r7,r3,256
   5323c:	383ff51e 	bne	r7,zero,53214 <__alt_data_end+0xfffe1214>
   53240:	314ab03a 	or	r5,r6,r5
   53244:	283ff326 	beq	r5,zero,53214 <__alt_data_end+0xfffe1214>
   53248:	1885883a 	add	r2,r3,r2
   5324c:	10cb803a 	cmpltu	r5,r2,r3
   53250:	00ffc004 	movi	r3,-256
   53254:	10c6703a 	and	r3,r2,r3
   53258:	2909883a 	add	r4,r5,r4
   5325c:	003fed06 	br	53214 <__alt_data_end+0xfffe1214>

00053260 <__divdf3>:
   53260:	defff104 	addi	sp,sp,-60
   53264:	d9000c15 	stw	r4,48(sp)
   53268:	d9400d15 	stw	r5,52(sp)
   5326c:	d9000c04 	addi	r4,sp,48
   53270:	d9400504 	addi	r5,sp,20
   53274:	dfc00e15 	stw	ra,56(sp)
   53278:	d9800a15 	stw	r6,40(sp)
   5327c:	d9c00b15 	stw	r7,44(sp)
   53280:	0053de00 	call	53de0 <__unpack_d>
   53284:	d9000a04 	addi	r4,sp,40
   53288:	d80b883a 	mov	r5,sp
   5328c:	0053de00 	call	53de0 <__unpack_d>
   53290:	d8c00517 	ldw	r3,20(sp)
   53294:	00800044 	movi	r2,1
   53298:	10c00536 	bltu	r2,r3,532b0 <__divdf3+0x50>
   5329c:	d9000504 	addi	r4,sp,20
   532a0:	0053bbc0 	call	53bbc <__pack_d>
   532a4:	dfc00e17 	ldw	ra,56(sp)
   532a8:	dec00f04 	addi	sp,sp,60
   532ac:	f800283a 	ret
   532b0:	d9000017 	ldw	r4,0(sp)
   532b4:	11000536 	bltu	r2,r4,532cc <__divdf3+0x6c>
   532b8:	d809883a 	mov	r4,sp
   532bc:	0053bbc0 	call	53bbc <__pack_d>
   532c0:	dfc00e17 	ldw	ra,56(sp)
   532c4:	dec00f04 	addi	sp,sp,60
   532c8:	f800283a 	ret
   532cc:	d9800617 	ldw	r6,24(sp)
   532d0:	d9400117 	ldw	r5,4(sp)
   532d4:	00800104 	movi	r2,4
   532d8:	314af03a 	xor	r5,r6,r5
   532dc:	d9400615 	stw	r5,24(sp)
   532e0:	18800226 	beq	r3,r2,532ec <__divdf3+0x8c>
   532e4:	01400084 	movi	r5,2
   532e8:	1940041e 	bne	r3,r5,532fc <__divdf3+0x9c>
   532ec:	193feb1e 	bne	r3,r4,5329c <__alt_data_end+0xfffe129c>
   532f0:	01000174 	movhi	r4,5
   532f4:	21187504 	addi	r4,r4,25044
   532f8:	003fe906 	br	532a0 <__alt_data_end+0xfffe12a0>
   532fc:	20803326 	beq	r4,r2,533cc <__divdf3+0x16c>
   53300:	21403726 	beq	r4,r5,533e0 <__divdf3+0x180>
   53304:	d8800217 	ldw	r2,8(sp)
   53308:	d9000717 	ldw	r4,28(sp)
   5330c:	d8c00917 	ldw	r3,36(sp)
   53310:	da000417 	ldw	r8,16(sp)
   53314:	2089c83a 	sub	r4,r4,r2
   53318:	d9000715 	stw	r4,28(sp)
   5331c:	d8800817 	ldw	r2,32(sp)
   53320:	dbc00317 	ldw	r15,12(sp)
   53324:	1a000236 	bltu	r3,r8,53330 <__divdf3+0xd0>
   53328:	40c0081e 	bne	r8,r3,5334c <__divdf3+0xec>
   5332c:	13c0072e 	bgeu	r2,r15,5334c <__divdf3+0xec>
   53330:	108b883a 	add	r5,r2,r2
   53334:	288d803a 	cmpltu	r6,r5,r2
   53338:	18c7883a 	add	r3,r3,r3
   5333c:	213fffc4 	addi	r4,r4,-1
   53340:	2805883a 	mov	r2,r5
   53344:	30c7883a 	add	r3,r6,r3
   53348:	d9000715 	stw	r4,28(sp)
   5334c:	01400f44 	movi	r5,61
   53350:	000f883a 	mov	r7,zero
   53354:	01040034 	movhi	r4,4096
   53358:	0019883a 	mov	r12,zero
   5335c:	001b883a 	mov	r13,zero
   53360:	201697fa 	slli	r11,r4,31
   53364:	3814d07a 	srli	r10,r7,1
   53368:	297fffc4 	addi	r5,r5,-1
   5336c:	1a000936 	bltu	r3,r8,53394 <__divdf3+0x134>
   53370:	13cdc83a 	sub	r6,r2,r15
   53374:	1193803a 	cmpltu	r9,r2,r6
   53378:	1a1dc83a 	sub	r14,r3,r8
   5337c:	40c0011e 	bne	r8,r3,53384 <__divdf3+0x124>
   53380:	13c00436 	bltu	r2,r15,53394 <__divdf3+0x134>
   53384:	3005883a 	mov	r2,r6
   53388:	7247c83a 	sub	r3,r14,r9
   5338c:	61d8b03a 	or	r12,r12,r7
   53390:	691ab03a 	or	r13,r13,r4
   53394:	108d883a 	add	r6,r2,r2
   53398:	3093803a 	cmpltu	r9,r6,r2
   5339c:	18c7883a 	add	r3,r3,r3
   533a0:	5a8eb03a 	or	r7,r11,r10
   533a4:	2008d07a 	srli	r4,r4,1
   533a8:	3005883a 	mov	r2,r6
   533ac:	48c7883a 	add	r3,r9,r3
   533b0:	283feb1e 	bne	r5,zero,53360 <__alt_data_end+0xfffe1360>
   533b4:	61003fcc 	andi	r4,r12,255
   533b8:	01402004 	movi	r5,128
   533bc:	21400b26 	beq	r4,r5,533ec <__divdf3+0x18c>
   533c0:	db000815 	stw	r12,32(sp)
   533c4:	db400915 	stw	r13,36(sp)
   533c8:	003fb406 	br	5329c <__alt_data_end+0xfffe129c>
   533cc:	d8000815 	stw	zero,32(sp)
   533d0:	d8000915 	stw	zero,36(sp)
   533d4:	d8000715 	stw	zero,28(sp)
   533d8:	d9000504 	addi	r4,sp,20
   533dc:	003fb006 	br	532a0 <__alt_data_end+0xfffe12a0>
   533e0:	d8800515 	stw	r2,20(sp)
   533e4:	d9000504 	addi	r4,sp,20
   533e8:	003fad06 	br	532a0 <__alt_data_end+0xfffe12a0>
   533ec:	6140400c 	andi	r5,r12,256
   533f0:	283ff31e 	bne	r5,zero,533c0 <__alt_data_end+0xfffe13c0>
   533f4:	30c4b03a 	or	r2,r6,r3
   533f8:	103ff126 	beq	r2,zero,533c0 <__alt_data_end+0xfffe13c0>
   533fc:	6109883a 	add	r4,r12,r4
   53400:	2305803a 	cmpltu	r2,r4,r12
   53404:	033fc004 	movi	r12,-256
   53408:	2318703a 	and	r12,r4,r12
   5340c:	135b883a 	add	r13,r2,r13
   53410:	003feb06 	br	533c0 <__alt_data_end+0xfffe13c0>

00053414 <__eqdf2>:
   53414:	defff104 	addi	sp,sp,-60
   53418:	d9000c15 	stw	r4,48(sp)
   5341c:	d9400d15 	stw	r5,52(sp)
   53420:	d9000c04 	addi	r4,sp,48
   53424:	d9400504 	addi	r5,sp,20
   53428:	dfc00e15 	stw	ra,56(sp)
   5342c:	d9800a15 	stw	r6,40(sp)
   53430:	d9c00b15 	stw	r7,44(sp)
   53434:	0053de00 	call	53de0 <__unpack_d>
   53438:	d9000a04 	addi	r4,sp,40
   5343c:	d80b883a 	mov	r5,sp
   53440:	0053de00 	call	53de0 <__unpack_d>
   53444:	d8c00517 	ldw	r3,20(sp)
   53448:	00800044 	movi	r2,1
   5344c:	10c0052e 	bgeu	r2,r3,53464 <__eqdf2+0x50>
   53450:	d8c00017 	ldw	r3,0(sp)
   53454:	10c0032e 	bgeu	r2,r3,53464 <__eqdf2+0x50>
   53458:	d9000504 	addi	r4,sp,20
   5345c:	d80b883a 	mov	r5,sp
   53460:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   53464:	dfc00e17 	ldw	ra,56(sp)
   53468:	dec00f04 	addi	sp,sp,60
   5346c:	f800283a 	ret

00053470 <__nedf2>:
   53470:	defff104 	addi	sp,sp,-60
   53474:	d9000c15 	stw	r4,48(sp)
   53478:	d9400d15 	stw	r5,52(sp)
   5347c:	d9000c04 	addi	r4,sp,48
   53480:	d9400504 	addi	r5,sp,20
   53484:	dfc00e15 	stw	ra,56(sp)
   53488:	d9800a15 	stw	r6,40(sp)
   5348c:	d9c00b15 	stw	r7,44(sp)
   53490:	0053de00 	call	53de0 <__unpack_d>
   53494:	d9000a04 	addi	r4,sp,40
   53498:	d80b883a 	mov	r5,sp
   5349c:	0053de00 	call	53de0 <__unpack_d>
   534a0:	d8c00517 	ldw	r3,20(sp)
   534a4:	00800044 	movi	r2,1
   534a8:	10c0052e 	bgeu	r2,r3,534c0 <__nedf2+0x50>
   534ac:	d8c00017 	ldw	r3,0(sp)
   534b0:	10c0032e 	bgeu	r2,r3,534c0 <__nedf2+0x50>
   534b4:	d9000504 	addi	r4,sp,20
   534b8:	d80b883a 	mov	r5,sp
   534bc:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   534c0:	dfc00e17 	ldw	ra,56(sp)
   534c4:	dec00f04 	addi	sp,sp,60
   534c8:	f800283a 	ret

000534cc <__gtdf2>:
   534cc:	defff104 	addi	sp,sp,-60
   534d0:	d9000c15 	stw	r4,48(sp)
   534d4:	d9400d15 	stw	r5,52(sp)
   534d8:	d9000c04 	addi	r4,sp,48
   534dc:	d9400504 	addi	r5,sp,20
   534e0:	dfc00e15 	stw	ra,56(sp)
   534e4:	d9800a15 	stw	r6,40(sp)
   534e8:	d9c00b15 	stw	r7,44(sp)
   534ec:	0053de00 	call	53de0 <__unpack_d>
   534f0:	d9000a04 	addi	r4,sp,40
   534f4:	d80b883a 	mov	r5,sp
   534f8:	0053de00 	call	53de0 <__unpack_d>
   534fc:	d8c00517 	ldw	r3,20(sp)
   53500:	00800044 	movi	r2,1
   53504:	10c0082e 	bgeu	r2,r3,53528 <__gtdf2+0x5c>
   53508:	d8c00017 	ldw	r3,0(sp)
   5350c:	10c0062e 	bgeu	r2,r3,53528 <__gtdf2+0x5c>
   53510:	d9000504 	addi	r4,sp,20
   53514:	d80b883a 	mov	r5,sp
   53518:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   5351c:	dfc00e17 	ldw	ra,56(sp)
   53520:	dec00f04 	addi	sp,sp,60
   53524:	f800283a 	ret
   53528:	00bfffc4 	movi	r2,-1
   5352c:	003ffb06 	br	5351c <__alt_data_end+0xfffe151c>

00053530 <__gedf2>:
   53530:	defff104 	addi	sp,sp,-60
   53534:	d9000c15 	stw	r4,48(sp)
   53538:	d9400d15 	stw	r5,52(sp)
   5353c:	d9000c04 	addi	r4,sp,48
   53540:	d9400504 	addi	r5,sp,20
   53544:	dfc00e15 	stw	ra,56(sp)
   53548:	d9800a15 	stw	r6,40(sp)
   5354c:	d9c00b15 	stw	r7,44(sp)
   53550:	0053de00 	call	53de0 <__unpack_d>
   53554:	d9000a04 	addi	r4,sp,40
   53558:	d80b883a 	mov	r5,sp
   5355c:	0053de00 	call	53de0 <__unpack_d>
   53560:	d8c00517 	ldw	r3,20(sp)
   53564:	00800044 	movi	r2,1
   53568:	10c0082e 	bgeu	r2,r3,5358c <__gedf2+0x5c>
   5356c:	d8c00017 	ldw	r3,0(sp)
   53570:	10c0062e 	bgeu	r2,r3,5358c <__gedf2+0x5c>
   53574:	d9000504 	addi	r4,sp,20
   53578:	d80b883a 	mov	r5,sp
   5357c:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   53580:	dfc00e17 	ldw	ra,56(sp)
   53584:	dec00f04 	addi	sp,sp,60
   53588:	f800283a 	ret
   5358c:	00bfffc4 	movi	r2,-1
   53590:	003ffb06 	br	53580 <__alt_data_end+0xfffe1580>

00053594 <__ltdf2>:
   53594:	defff104 	addi	sp,sp,-60
   53598:	d9000c15 	stw	r4,48(sp)
   5359c:	d9400d15 	stw	r5,52(sp)
   535a0:	d9000c04 	addi	r4,sp,48
   535a4:	d9400504 	addi	r5,sp,20
   535a8:	dfc00e15 	stw	ra,56(sp)
   535ac:	d9800a15 	stw	r6,40(sp)
   535b0:	d9c00b15 	stw	r7,44(sp)
   535b4:	0053de00 	call	53de0 <__unpack_d>
   535b8:	d9000a04 	addi	r4,sp,40
   535bc:	d80b883a 	mov	r5,sp
   535c0:	0053de00 	call	53de0 <__unpack_d>
   535c4:	d8c00517 	ldw	r3,20(sp)
   535c8:	00800044 	movi	r2,1
   535cc:	10c0052e 	bgeu	r2,r3,535e4 <__ltdf2+0x50>
   535d0:	d8c00017 	ldw	r3,0(sp)
   535d4:	10c0032e 	bgeu	r2,r3,535e4 <__ltdf2+0x50>
   535d8:	d9000504 	addi	r4,sp,20
   535dc:	d80b883a 	mov	r5,sp
   535e0:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   535e4:	dfc00e17 	ldw	ra,56(sp)
   535e8:	dec00f04 	addi	sp,sp,60
   535ec:	f800283a 	ret

000535f0 <__ledf2>:
   535f0:	defff104 	addi	sp,sp,-60
   535f4:	d9000c15 	stw	r4,48(sp)
   535f8:	d9400d15 	stw	r5,52(sp)
   535fc:	d9000c04 	addi	r4,sp,48
   53600:	d9400504 	addi	r5,sp,20
   53604:	dfc00e15 	stw	ra,56(sp)
   53608:	d9800a15 	stw	r6,40(sp)
   5360c:	d9c00b15 	stw	r7,44(sp)
   53610:	0053de00 	call	53de0 <__unpack_d>
   53614:	d9000a04 	addi	r4,sp,40
   53618:	d80b883a 	mov	r5,sp
   5361c:	0053de00 	call	53de0 <__unpack_d>
   53620:	d8c00517 	ldw	r3,20(sp)
   53624:	00800044 	movi	r2,1
   53628:	10c0052e 	bgeu	r2,r3,53640 <__ledf2+0x50>
   5362c:	d8c00017 	ldw	r3,0(sp)
   53630:	10c0032e 	bgeu	r2,r3,53640 <__ledf2+0x50>
   53634:	d9000504 	addi	r4,sp,20
   53638:	d80b883a 	mov	r5,sp
   5363c:	0053ee40 	call	53ee4 <__fpcmp_parts_d>
   53640:	dfc00e17 	ldw	ra,56(sp)
   53644:	dec00f04 	addi	sp,sp,60
   53648:	f800283a 	ret

0005364c <__floatsidf>:
   5364c:	2004d7fa 	srli	r2,r4,31
   53650:	defff904 	addi	sp,sp,-28
   53654:	00c000c4 	movi	r3,3
   53658:	dfc00615 	stw	ra,24(sp)
   5365c:	dc000515 	stw	r16,20(sp)
   53660:	d8c00015 	stw	r3,0(sp)
   53664:	d8800115 	stw	r2,4(sp)
   53668:	2000081e 	bne	r4,zero,5368c <__floatsidf+0x40>
   5366c:	00800084 	movi	r2,2
   53670:	d8800015 	stw	r2,0(sp)
   53674:	d809883a 	mov	r4,sp
   53678:	0053bbc0 	call	53bbc <__pack_d>
   5367c:	dfc00617 	ldw	ra,24(sp)
   53680:	dc000517 	ldw	r16,20(sp)
   53684:	dec00704 	addi	sp,sp,28
   53688:	f800283a 	ret
   5368c:	00c00f04 	movi	r3,60
   53690:	d8c00215 	stw	r3,8(sp)
   53694:	10000f1e 	bne	r2,zero,536d4 <__floatsidf+0x88>
   53698:	2021883a 	mov	r16,r4
   5369c:	8009883a 	mov	r4,r16
   536a0:	00539600 	call	53960 <__clzsi2>
   536a4:	11000744 	addi	r4,r2,29
   536a8:	0100110e 	bge	zero,r4,536f0 <__floatsidf+0xa4>
   536ac:	10ffff44 	addi	r3,r2,-3
   536b0:	18001216 	blt	r3,zero,536fc <__floatsidf+0xb0>
   536b4:	80c6983a 	sll	r3,r16,r3
   536b8:	0009883a 	mov	r4,zero
   536bc:	014007c4 	movi	r5,31
   536c0:	2885c83a 	sub	r2,r5,r2
   536c4:	d9000315 	stw	r4,12(sp)
   536c8:	d8c00415 	stw	r3,16(sp)
   536cc:	d8800215 	stw	r2,8(sp)
   536d0:	003fe806 	br	53674 <__alt_data_end+0xfffe1674>
   536d4:	00a00034 	movhi	r2,32768
   536d8:	20800e26 	beq	r4,r2,53714 <__floatsidf+0xc8>
   536dc:	0121c83a 	sub	r16,zero,r4
   536e0:	8009883a 	mov	r4,r16
   536e4:	00539600 	call	53960 <__clzsi2>
   536e8:	11000744 	addi	r4,r2,29
   536ec:	013fef16 	blt	zero,r4,536ac <__alt_data_end+0xfffe16ac>
   536f0:	dc000315 	stw	r16,12(sp)
   536f4:	d8000415 	stw	zero,16(sp)
   536f8:	003fde06 	br	53674 <__alt_data_end+0xfffe1674>
   536fc:	800ad07a 	srli	r5,r16,1
   53700:	00c007c4 	movi	r3,31
   53704:	1907c83a 	sub	r3,r3,r4
   53708:	28c6d83a 	srl	r3,r5,r3
   5370c:	8108983a 	sll	r4,r16,r4
   53710:	003fea06 	br	536bc <__alt_data_end+0xfffe16bc>
   53714:	0005883a 	mov	r2,zero
   53718:	00f07834 	movhi	r3,49632
   5371c:	003fd706 	br	5367c <__alt_data_end+0xfffe167c>

00053720 <__fixdfsi>:
   53720:	defff804 	addi	sp,sp,-32
   53724:	d9000515 	stw	r4,20(sp)
   53728:	d9400615 	stw	r5,24(sp)
   5372c:	d9000504 	addi	r4,sp,20
   53730:	d80b883a 	mov	r5,sp
   53734:	dfc00715 	stw	ra,28(sp)
   53738:	0053de00 	call	53de0 <__unpack_d>
   5373c:	d8800017 	ldw	r2,0(sp)
   53740:	00c00084 	movi	r3,2
   53744:	10c01c26 	beq	r2,r3,537b8 <__fixdfsi+0x98>
   53748:	00c00044 	movi	r3,1
   5374c:	18801a2e 	bgeu	r3,r2,537b8 <__fixdfsi+0x98>
   53750:	00c00104 	movi	r3,4
   53754:	10c01126 	beq	r2,r3,5379c <__fixdfsi+0x7c>
   53758:	d8800217 	ldw	r2,8(sp)
   5375c:	10001616 	blt	r2,zero,537b8 <__fixdfsi+0x98>
   53760:	00c00784 	movi	r3,30
   53764:	18800d16 	blt	r3,r2,5379c <__fixdfsi+0x7c>
   53768:	00c00f04 	movi	r3,60
   5376c:	1885c83a 	sub	r2,r3,r2
   53770:	10fff804 	addi	r3,r2,-32
   53774:	d9400317 	ldw	r5,12(sp)
   53778:	d9000417 	ldw	r4,16(sp)
   5377c:	18001216 	blt	r3,zero,537c8 <__fixdfsi+0xa8>
   53780:	20c4d83a 	srl	r2,r4,r3
   53784:	d8c00117 	ldw	r3,4(sp)
   53788:	18000826 	beq	r3,zero,537ac <__fixdfsi+0x8c>
   5378c:	0085c83a 	sub	r2,zero,r2
   53790:	dfc00717 	ldw	ra,28(sp)
   53794:	dec00804 	addi	sp,sp,32
   53798:	f800283a 	ret
   5379c:	d8800117 	ldw	r2,4(sp)
   537a0:	00e00034 	movhi	r3,32768
   537a4:	1005003a 	cmpeq	r2,r2,zero
   537a8:	1885c83a 	sub	r2,r3,r2
   537ac:	dfc00717 	ldw	ra,28(sp)
   537b0:	dec00804 	addi	sp,sp,32
   537b4:	f800283a 	ret
   537b8:	0005883a 	mov	r2,zero
   537bc:	dfc00717 	ldw	ra,28(sp)
   537c0:	dec00804 	addi	sp,sp,32
   537c4:	f800283a 	ret
   537c8:	2008907a 	slli	r4,r4,1
   537cc:	018007c4 	movi	r6,31
   537d0:	308dc83a 	sub	r6,r6,r2
   537d4:	2188983a 	sll	r4,r4,r6
   537d8:	2884d83a 	srl	r2,r5,r2
   537dc:	2084b03a 	or	r2,r4,r2
   537e0:	003fe806 	br	53784 <__alt_data_end+0xfffe1784>

000537e4 <__truncdfsf2>:
   537e4:	defff804 	addi	sp,sp,-32
   537e8:	d9000515 	stw	r4,20(sp)
   537ec:	d9400615 	stw	r5,24(sp)
   537f0:	d9000504 	addi	r4,sp,20
   537f4:	d80b883a 	mov	r5,sp
   537f8:	dfc00715 	stw	ra,28(sp)
   537fc:	0053de00 	call	53de0 <__unpack_d>
   53800:	d8800317 	ldw	r2,12(sp)
   53804:	d8c00417 	ldw	r3,16(sp)
   53808:	01100034 	movhi	r4,16384
   5380c:	213fffc4 	addi	r4,r4,-1
   53810:	100ed7ba 	srli	r7,r2,30
   53814:	180690ba 	slli	r3,r3,2
   53818:	1104703a 	and	r2,r2,r4
   5381c:	19ceb03a 	or	r7,r3,r7
   53820:	10000126 	beq	r2,zero,53828 <__truncdfsf2+0x44>
   53824:	39c00054 	ori	r7,r7,1
   53828:	d9000017 	ldw	r4,0(sp)
   5382c:	d9400117 	ldw	r5,4(sp)
   53830:	d9800217 	ldw	r6,8(sp)
   53834:	0053b900 	call	53b90 <__make_fp>
   53838:	dfc00717 	ldw	ra,28(sp)
   5383c:	dec00804 	addi	sp,sp,32
   53840:	f800283a 	ret

00053844 <__floatunsidf>:
   53844:	defff904 	addi	sp,sp,-28
   53848:	dc000515 	stw	r16,20(sp)
   5384c:	dfc00615 	stw	ra,24(sp)
   53850:	d8000115 	stw	zero,4(sp)
   53854:	2021883a 	mov	r16,r4
   53858:	20001726 	beq	r4,zero,538b8 <__floatunsidf+0x74>
   5385c:	008000c4 	movi	r2,3
   53860:	d8800015 	stw	r2,0(sp)
   53864:	00800f04 	movi	r2,60
   53868:	d8800215 	stw	r2,8(sp)
   5386c:	00539600 	call	53960 <__clzsi2>
   53870:	10c00744 	addi	r3,r2,29
   53874:	18001816 	blt	r3,zero,538d8 <__floatunsidf+0x94>
   53878:	18002d26 	beq	r3,zero,53930 <__floatunsidf+0xec>
   5387c:	113fff44 	addi	r4,r2,-3
   53880:	20002e16 	blt	r4,zero,5393c <__floatunsidf+0xf8>
   53884:	8108983a 	sll	r4,r16,r4
   53888:	0021883a 	mov	r16,zero
   5388c:	014007c4 	movi	r5,31
   53890:	2885c83a 	sub	r2,r5,r2
   53894:	dc000315 	stw	r16,12(sp)
   53898:	d9000415 	stw	r4,16(sp)
   5389c:	d8800215 	stw	r2,8(sp)
   538a0:	d809883a 	mov	r4,sp
   538a4:	0053bbc0 	call	53bbc <__pack_d>
   538a8:	dfc00617 	ldw	ra,24(sp)
   538ac:	dc000517 	ldw	r16,20(sp)
   538b0:	dec00704 	addi	sp,sp,28
   538b4:	f800283a 	ret
   538b8:	00800084 	movi	r2,2
   538bc:	d809883a 	mov	r4,sp
   538c0:	d8800015 	stw	r2,0(sp)
   538c4:	0053bbc0 	call	53bbc <__pack_d>
   538c8:	dfc00617 	ldw	ra,24(sp)
   538cc:	dc000517 	ldw	r16,20(sp)
   538d0:	dec00704 	addi	sp,sp,28
   538d4:	f800283a 	ret
   538d8:	00c7c83a 	sub	r3,zero,r3
   538dc:	193ff804 	addi	r4,r3,-32
   538e0:	20001c16 	blt	r4,zero,53954 <__floatunsidf+0x110>
   538e4:	000b883a 	mov	r5,zero
   538e8:	2009d7fa 	srai	r4,r4,31
   538ec:	80c6d83a 	srl	r3,r16,r3
   538f0:	297fffc4 	addi	r5,r5,-1
   538f4:	2c20703a 	and	r16,r5,r16
   538f8:	8020c03a 	cmpne	r16,r16,zero
   538fc:	1906703a 	and	r3,r3,r4
   53900:	010007c4 	movi	r4,31
   53904:	80c6b03a 	or	r3,r16,r3
   53908:	2085c83a 	sub	r2,r4,r2
   5390c:	d809883a 	mov	r4,sp
   53910:	d8c00315 	stw	r3,12(sp)
   53914:	d8000415 	stw	zero,16(sp)
   53918:	d8800215 	stw	r2,8(sp)
   5391c:	0053bbc0 	call	53bbc <__pack_d>
   53920:	dfc00617 	ldw	ra,24(sp)
   53924:	dc000517 	ldw	r16,20(sp)
   53928:	dec00704 	addi	sp,sp,28
   5392c:	f800283a 	ret
   53930:	dc000315 	stw	r16,12(sp)
   53934:	d8000415 	stw	zero,16(sp)
   53938:	003fd906 	br	538a0 <__alt_data_end+0xfffe18a0>
   5393c:	800ad07a 	srli	r5,r16,1
   53940:	010007c4 	movi	r4,31
   53944:	20c9c83a 	sub	r4,r4,r3
   53948:	2908d83a 	srl	r4,r5,r4
   5394c:	80e0983a 	sll	r16,r16,r3
   53950:	003fce06 	br	5388c <__alt_data_end+0xfffe188c>
   53954:	01400044 	movi	r5,1
   53958:	28ca983a 	sll	r5,r5,r3
   5395c:	003fe206 	br	538e8 <__alt_data_end+0xfffe18e8>

00053960 <__clzsi2>:
   53960:	00bfffd4 	movui	r2,65535
   53964:	11000b36 	bltu	r2,r4,53994 <__clzsi2+0x34>
   53968:	00803fc4 	movi	r2,255
   5396c:	11001e2e 	bgeu	r2,r4,539e8 <__clzsi2+0x88>
   53970:	00c00204 	movi	r3,8
   53974:	20c8d83a 	srl	r4,r4,r3
   53978:	00c00174 	movhi	r3,5
   5397c:	18d87a04 	addi	r3,r3,25064
   53980:	00800604 	movi	r2,24
   53984:	1909883a 	add	r4,r3,r4
   53988:	20c00003 	ldbu	r3,0(r4)
   5398c:	10c5c83a 	sub	r2,r2,r3
   53990:	f800283a 	ret
   53994:	00804034 	movhi	r2,256
   53998:	10bfffc4 	addi	r2,r2,-1
   5399c:	11000936 	bltu	r2,r4,539c4 <__clzsi2+0x64>
   539a0:	00800404 	movi	r2,16
   539a4:	1007883a 	mov	r3,r2
   539a8:	20c8d83a 	srl	r4,r4,r3
   539ac:	00c00174 	movhi	r3,5
   539b0:	18d87a04 	addi	r3,r3,25064
   539b4:	1909883a 	add	r4,r3,r4
   539b8:	20c00003 	ldbu	r3,0(r4)
   539bc:	10c5c83a 	sub	r2,r2,r3
   539c0:	f800283a 	ret
   539c4:	00c00604 	movi	r3,24
   539c8:	20c8d83a 	srl	r4,r4,r3
   539cc:	00c00174 	movhi	r3,5
   539d0:	18d87a04 	addi	r3,r3,25064
   539d4:	00800204 	movi	r2,8
   539d8:	1909883a 	add	r4,r3,r4
   539dc:	20c00003 	ldbu	r3,0(r4)
   539e0:	10c5c83a 	sub	r2,r2,r3
   539e4:	f800283a 	ret
   539e8:	0007883a 	mov	r3,zero
   539ec:	20c8d83a 	srl	r4,r4,r3
   539f0:	00c00174 	movhi	r3,5
   539f4:	18d87a04 	addi	r3,r3,25064
   539f8:	00800804 	movi	r2,32
   539fc:	1909883a 	add	r4,r3,r4
   53a00:	20c00003 	ldbu	r3,0(r4)
   53a04:	10c5c83a 	sub	r2,r2,r3
   53a08:	f800283a 	ret

00053a0c <__unpack_f>:
   53a0c:	20c00017 	ldw	r3,0(r4)
   53a10:	00802034 	movhi	r2,128
   53a14:	10bfffc4 	addi	r2,r2,-1
   53a18:	1808d5fa 	srli	r4,r3,23
   53a1c:	180cd7fa 	srli	r6,r3,31
   53a20:	1884703a 	and	r2,r3,r2
   53a24:	21003fcc 	andi	r4,r4,255
   53a28:	29800115 	stw	r6,4(r5)
   53a2c:	2000111e 	bne	r4,zero,53a74 <__unpack_f+0x68>
   53a30:	10001a26 	beq	r2,zero,53a9c <__unpack_f+0x90>
   53a34:	00ffe084 	movi	r3,-126
   53a38:	100491fa 	slli	r2,r2,7
   53a3c:	28c00215 	stw	r3,8(r5)
   53a40:	00c000c4 	movi	r3,3
   53a44:	28c00015 	stw	r3,0(r5)
   53a48:	01900034 	movhi	r6,16384
   53a4c:	31bfffc4 	addi	r6,r6,-1
   53a50:	30801036 	bltu	r6,r2,53a94 <__unpack_f+0x88>
   53a54:	00ffe044 	movi	r3,-127
   53a58:	1085883a 	add	r2,r2,r2
   53a5c:	1809883a 	mov	r4,r3
   53a60:	18ffffc4 	addi	r3,r3,-1
   53a64:	30bffc2e 	bgeu	r6,r2,53a58 <__alt_data_end+0xfffe1a58>
   53a68:	29000215 	stw	r4,8(r5)
   53a6c:	28800315 	stw	r2,12(r5)
   53a70:	f800283a 	ret
   53a74:	01803fc4 	movi	r6,255
   53a78:	21800b26 	beq	r4,r6,53aa8 <__unpack_f+0x9c>
   53a7c:	100491fa 	slli	r2,r2,7
   53a80:	213fe044 	addi	r4,r4,-127
   53a84:	00c000c4 	movi	r3,3
   53a88:	10900034 	orhi	r2,r2,16384
   53a8c:	29000215 	stw	r4,8(r5)
   53a90:	28c00015 	stw	r3,0(r5)
   53a94:	28800315 	stw	r2,12(r5)
   53a98:	f800283a 	ret
   53a9c:	00800084 	movi	r2,2
   53aa0:	28800015 	stw	r2,0(r5)
   53aa4:	f800283a 	ret
   53aa8:	10000526 	beq	r2,zero,53ac0 <__unpack_f+0xb4>
   53aac:	18c0042c 	andhi	r3,r3,16
   53ab0:	18000626 	beq	r3,zero,53acc <__unpack_f+0xc0>
   53ab4:	00c00044 	movi	r3,1
   53ab8:	28c00015 	stw	r3,0(r5)
   53abc:	003ff506 	br	53a94 <__alt_data_end+0xfffe1a94>
   53ac0:	00800104 	movi	r2,4
   53ac4:	28800015 	stw	r2,0(r5)
   53ac8:	f800283a 	ret
   53acc:	28000015 	stw	zero,0(r5)
   53ad0:	003ff006 	br	53a94 <__alt_data_end+0xfffe1a94>

00053ad4 <__fpcmp_parts_f>:
   53ad4:	20c00017 	ldw	r3,0(r4)
   53ad8:	00800044 	movi	r2,1
   53adc:	10c0172e 	bgeu	r2,r3,53b3c <__fpcmp_parts_f+0x68>
   53ae0:	29800017 	ldw	r6,0(r5)
   53ae4:	1180152e 	bgeu	r2,r6,53b3c <__fpcmp_parts_f+0x68>
   53ae8:	01c00104 	movi	r7,4
   53aec:	19c02326 	beq	r3,r7,53b7c <__fpcmp_parts_f+0xa8>
   53af0:	31c00926 	beq	r6,r7,53b18 <__fpcmp_parts_f+0x44>
   53af4:	01c00084 	movi	r7,2
   53af8:	19c00626 	beq	r3,r7,53b14 <__fpcmp_parts_f+0x40>
   53afc:	31c01126 	beq	r6,r7,53b44 <__fpcmp_parts_f+0x70>
   53b00:	20c00117 	ldw	r3,4(r4)
   53b04:	29800117 	ldw	r6,4(r5)
   53b08:	19801226 	beq	r3,r6,53b54 <__fpcmp_parts_f+0x80>
   53b0c:	1800041e 	bne	r3,zero,53b20 <__fpcmp_parts_f+0x4c>
   53b10:	f800283a 	ret
   53b14:	30c01526 	beq	r6,r3,53b6c <__fpcmp_parts_f+0x98>
   53b18:	28800117 	ldw	r2,4(r5)
   53b1c:	1000071e 	bne	r2,zero,53b3c <__fpcmp_parts_f+0x68>
   53b20:	00bfffc4 	movi	r2,-1
   53b24:	f800283a 	ret
   53b28:	39801216 	blt	r7,r6,53b74 <__fpcmp_parts_f+0xa0>
   53b2c:	21000317 	ldw	r4,12(r4)
   53b30:	28800317 	ldw	r2,12(r5)
   53b34:	11000c2e 	bgeu	r2,r4,53b68 <__fpcmp_parts_f+0x94>
   53b38:	183ff91e 	bne	r3,zero,53b20 <__alt_data_end+0xfffe1b20>
   53b3c:	00800044 	movi	r2,1
   53b40:	f800283a 	ret
   53b44:	20800117 	ldw	r2,4(r4)
   53b48:	103ff51e 	bne	r2,zero,53b20 <__alt_data_end+0xfffe1b20>
   53b4c:	00800044 	movi	r2,1
   53b50:	f800283a 	ret
   53b54:	21c00217 	ldw	r7,8(r4)
   53b58:	29800217 	ldw	r6,8(r5)
   53b5c:	31fff20e 	bge	r6,r7,53b28 <__alt_data_end+0xfffe1b28>
   53b60:	183fef1e 	bne	r3,zero,53b20 <__alt_data_end+0xfffe1b20>
   53b64:	f800283a 	ret
   53b68:	20800236 	bltu	r4,r2,53b74 <__fpcmp_parts_f+0xa0>
   53b6c:	0005883a 	mov	r2,zero
   53b70:	f800283a 	ret
   53b74:	183fea26 	beq	r3,zero,53b20 <__alt_data_end+0xfffe1b20>
   53b78:	003ff006 	br	53b3c <__alt_data_end+0xfffe1b3c>
   53b7c:	30fff11e 	bne	r6,r3,53b44 <__alt_data_end+0xfffe1b44>
   53b80:	28c00117 	ldw	r3,4(r5)
   53b84:	20800117 	ldw	r2,4(r4)
   53b88:	1885c83a 	sub	r2,r3,r2
   53b8c:	f800283a 	ret

00053b90 <__make_fp>:
   53b90:	defffb04 	addi	sp,sp,-20
   53b94:	d9000015 	stw	r4,0(sp)
   53b98:	d809883a 	mov	r4,sp
   53b9c:	dfc00415 	stw	ra,16(sp)
   53ba0:	d9400115 	stw	r5,4(sp)
   53ba4:	d9800215 	stw	r6,8(sp)
   53ba8:	d9c00315 	stw	r7,12(sp)
   53bac:	005403c0 	call	5403c <__pack_f>
   53bb0:	dfc00417 	ldw	ra,16(sp)
   53bb4:	dec00504 	addi	sp,sp,20
   53bb8:	f800283a 	ret

00053bbc <__pack_d>:
   53bbc:	20800017 	ldw	r2,0(r4)
   53bc0:	defff804 	addi	sp,sp,-32
   53bc4:	dcc00315 	stw	r19,12(sp)
   53bc8:	dc800215 	stw	r18,8(sp)
   53bcc:	dfc00715 	stw	ra,28(sp)
   53bd0:	dd800615 	stw	r22,24(sp)
   53bd4:	dd400515 	stw	r21,20(sp)
   53bd8:	dd000415 	stw	r20,16(sp)
   53bdc:	dc400115 	stw	r17,4(sp)
   53be0:	dc000015 	stw	r16,0(sp)
   53be4:	04800044 	movi	r18,1
   53be8:	24400317 	ldw	r17,12(r4)
   53bec:	24000417 	ldw	r16,16(r4)
   53bf0:	24c00117 	ldw	r19,4(r4)
   53bf4:	9080422e 	bgeu	r18,r2,53d00 <__pack_d+0x144>
   53bf8:	00c00104 	movi	r3,4
   53bfc:	10c03c26 	beq	r2,r3,53cf0 <__pack_d+0x134>
   53c00:	00c00084 	movi	r3,2
   53c04:	10c01926 	beq	r2,r3,53c6c <__pack_d+0xb0>
   53c08:	8c04b03a 	or	r2,r17,r16
   53c0c:	10001726 	beq	r2,zero,53c6c <__pack_d+0xb0>
   53c10:	21000217 	ldw	r4,8(r4)
   53c14:	00bf0084 	movi	r2,-1022
   53c18:	20804016 	blt	r4,r2,53d1c <__pack_d+0x160>
   53c1c:	0080ffc4 	movi	r2,1023
   53c20:	11003316 	blt	r2,r4,53cf0 <__pack_d+0x134>
   53c24:	88803fcc 	andi	r2,r17,255
   53c28:	00c02004 	movi	r3,128
   53c2c:	10c02926 	beq	r2,r3,53cd4 <__pack_d+0x118>
   53c30:	88801fc4 	addi	r2,r17,127
   53c34:	1463803a 	cmpltu	r17,r2,r17
   53c38:	8c21883a 	add	r16,r17,r16
   53c3c:	1023883a 	mov	r17,r2
   53c40:	00880034 	movhi	r2,8192
   53c44:	10bfffc4 	addi	r2,r2,-1
   53c48:	14001c36 	bltu	r2,r16,53cbc <__pack_d+0x100>
   53c4c:	2100ffc4 	addi	r4,r4,1023
   53c50:	8006963a 	slli	r3,r16,24
   53c54:	8804d23a 	srli	r2,r17,8
   53c58:	8020913a 	slli	r16,r16,4
   53c5c:	2101ffcc 	andi	r4,r4,2047
   53c60:	1884b03a 	or	r2,r3,r2
   53c64:	8020d33a 	srli	r16,r16,12
   53c68:	00000306 	br	53c78 <__pack_d+0xbc>
   53c6c:	0009883a 	mov	r4,zero
   53c70:	0005883a 	mov	r2,zero
   53c74:	0021883a 	mov	r16,zero
   53c78:	2008953a 	slli	r4,r4,20
   53c7c:	982697fa 	slli	r19,r19,31
   53c80:	00c00434 	movhi	r3,16
   53c84:	18ffffc4 	addi	r3,r3,-1
   53c88:	80e0703a 	and	r16,r16,r3
   53c8c:	8106b03a 	or	r3,r16,r4
   53c90:	1cc6b03a 	or	r3,r3,r19
   53c94:	dfc00717 	ldw	ra,28(sp)
   53c98:	dd800617 	ldw	r22,24(sp)
   53c9c:	dd400517 	ldw	r21,20(sp)
   53ca0:	dd000417 	ldw	r20,16(sp)
   53ca4:	dcc00317 	ldw	r19,12(sp)
   53ca8:	dc800217 	ldw	r18,8(sp)
   53cac:	dc400117 	ldw	r17,4(sp)
   53cb0:	dc000017 	ldw	r16,0(sp)
   53cb4:	dec00804 	addi	sp,sp,32
   53cb8:	f800283a 	ret
   53cbc:	800697fa 	slli	r3,r16,31
   53cc0:	8804d07a 	srli	r2,r17,1
   53cc4:	21010004 	addi	r4,r4,1024
   53cc8:	8020d07a 	srli	r16,r16,1
   53ccc:	18a2b03a 	or	r17,r3,r2
   53cd0:	003fdf06 	br	53c50 <__alt_data_end+0xfffe1c50>
   53cd4:	88c0400c 	andi	r3,r17,256
   53cd8:	183fd926 	beq	r3,zero,53c40 <__alt_data_end+0xfffe1c40>
   53cdc:	8885883a 	add	r2,r17,r2
   53ce0:	1463803a 	cmpltu	r17,r2,r17
   53ce4:	8c21883a 	add	r16,r17,r16
   53ce8:	1023883a 	mov	r17,r2
   53cec:	003fd406 	br	53c40 <__alt_data_end+0xfffe1c40>
   53cf0:	0101ffc4 	movi	r4,2047
   53cf4:	0005883a 	mov	r2,zero
   53cf8:	0021883a 	mov	r16,zero
   53cfc:	003fde06 	br	53c78 <__alt_data_end+0xfffe1c78>
   53d00:	84000234 	orhi	r16,r16,8
   53d04:	00c00434 	movhi	r3,16
   53d08:	18ffffc4 	addi	r3,r3,-1
   53d0c:	8805883a 	mov	r2,r17
   53d10:	80e0703a 	and	r16,r16,r3
   53d14:	0101ffc4 	movi	r4,2047
   53d18:	003fd706 	br	53c78 <__alt_data_end+0xfffe1c78>
   53d1c:	1129c83a 	sub	r20,r2,r4
   53d20:	00800e04 	movi	r2,56
   53d24:	15002716 	blt	r2,r20,53dc4 <__pack_d+0x208>
   53d28:	800b883a 	mov	r5,r16
   53d2c:	a00d883a 	mov	r6,r20
   53d30:	8809883a 	mov	r4,r17
   53d34:	0053fb40 	call	53fb4 <__lshrdi3>
   53d38:	9009883a 	mov	r4,r18
   53d3c:	000b883a 	mov	r5,zero
   53d40:	a00d883a 	mov	r6,r20
   53d44:	102d883a 	mov	r22,r2
   53d48:	182b883a 	mov	r21,r3
   53d4c:	0053ff80 	call	53ff8 <__ashldi3>
   53d50:	1009003a 	cmpeq	r4,r2,zero
   53d54:	1907c83a 	sub	r3,r3,r4
   53d58:	10bfffc4 	addi	r2,r2,-1
   53d5c:	1c20703a 	and	r16,r3,r16
   53d60:	1444703a 	and	r2,r2,r17
   53d64:	1404b03a 	or	r2,r2,r16
   53d68:	1004c03a 	cmpne	r2,r2,zero
   53d6c:	1584b03a 	or	r2,r2,r22
   53d70:	11003fcc 	andi	r4,r2,255
   53d74:	01402004 	movi	r5,128
   53d78:	a807883a 	mov	r3,r21
   53d7c:	2140131e 	bne	r4,r5,53dcc <__pack_d+0x210>
   53d80:	1140400c 	andi	r5,r2,256
   53d84:	28000426 	beq	r5,zero,53d98 <__pack_d+0x1dc>
   53d88:	1109883a 	add	r4,r2,r4
   53d8c:	2085803a 	cmpltu	r2,r4,r2
   53d90:	1547883a 	add	r3,r2,r21
   53d94:	2005883a 	mov	r2,r4
   53d98:	1808963a 	slli	r4,r3,24
   53d9c:	1004d23a 	srli	r2,r2,8
   53da0:	1820913a 	slli	r16,r3,4
   53da4:	01440034 	movhi	r5,4096
   53da8:	297fffc4 	addi	r5,r5,-1
   53dac:	2084b03a 	or	r2,r4,r2
   53db0:	8020d33a 	srli	r16,r16,12
   53db4:	01000044 	movi	r4,1
   53db8:	28ffaf36 	bltu	r5,r3,53c78 <__alt_data_end+0xfffe1c78>
   53dbc:	0009883a 	mov	r4,zero
   53dc0:	003fad06 	br	53c78 <__alt_data_end+0xfffe1c78>
   53dc4:	0005883a 	mov	r2,zero
   53dc8:	0007883a 	mov	r3,zero
   53dcc:	11001fc4 	addi	r4,r2,127
   53dd0:	2085803a 	cmpltu	r2,r4,r2
   53dd4:	10c7883a 	add	r3,r2,r3
   53dd8:	2005883a 	mov	r2,r4
   53ddc:	003fee06 	br	53d98 <__alt_data_end+0xfffe1d98>

00053de0 <__unpack_d>:
   53de0:	21800117 	ldw	r6,4(r4)
   53de4:	20c00017 	ldw	r3,0(r4)
   53de8:	3004d7fa 	srli	r2,r6,31
   53dec:	3008d53a 	srli	r4,r6,20
   53df0:	28800115 	stw	r2,4(r5)
   53df4:	2101ffcc 	andi	r4,r4,2047
   53df8:	00800434 	movhi	r2,16
   53dfc:	10bfffc4 	addi	r2,r2,-1
   53e00:	3084703a 	and	r2,r6,r2
   53e04:	20001a1e 	bne	r4,zero,53e70 <__unpack_d+0x90>
   53e08:	1888b03a 	or	r4,r3,r2
   53e0c:	20002626 	beq	r4,zero,53ea8 <__unpack_d+0xc8>
   53e10:	1808d63a 	srli	r4,r3,24
   53e14:	1004923a 	slli	r2,r2,8
   53e18:	01bf0084 	movi	r6,-1022
   53e1c:	29800215 	stw	r6,8(r5)
   53e20:	2084b03a 	or	r2,r4,r2
   53e24:	010000c4 	movi	r4,3
   53e28:	29000015 	stw	r4,0(r5)
   53e2c:	02040034 	movhi	r8,4096
   53e30:	423fffc4 	addi	r8,r8,-1
   53e34:	1806923a 	slli	r3,r3,8
   53e38:	40801836 	bltu	r8,r2,53e9c <__unpack_d+0xbc>
   53e3c:	013f0044 	movi	r4,-1023
   53e40:	18cd883a 	add	r6,r3,r3
   53e44:	30c7803a 	cmpltu	r3,r6,r3
   53e48:	1085883a 	add	r2,r2,r2
   53e4c:	1885883a 	add	r2,r3,r2
   53e50:	200f883a 	mov	r7,r4
   53e54:	3007883a 	mov	r3,r6
   53e58:	213fffc4 	addi	r4,r4,-1
   53e5c:	40bff82e 	bgeu	r8,r2,53e40 <__alt_data_end+0xfffe1e40>
   53e60:	29c00215 	stw	r7,8(r5)
   53e64:	28c00315 	stw	r3,12(r5)
   53e68:	28800415 	stw	r2,16(r5)
   53e6c:	f800283a 	ret
   53e70:	01c1ffc4 	movi	r7,2047
   53e74:	21c00f26 	beq	r4,r7,53eb4 <__unpack_d+0xd4>
   53e78:	180cd63a 	srli	r6,r3,24
   53e7c:	1004923a 	slli	r2,r2,8
   53e80:	213f0044 	addi	r4,r4,-1023
   53e84:	1806923a 	slli	r3,r3,8
   53e88:	3084b03a 	or	r2,r6,r2
   53e8c:	29000215 	stw	r4,8(r5)
   53e90:	010000c4 	movi	r4,3
   53e94:	10840034 	orhi	r2,r2,4096
   53e98:	29000015 	stw	r4,0(r5)
   53e9c:	28c00315 	stw	r3,12(r5)
   53ea0:	28800415 	stw	r2,16(r5)
   53ea4:	f800283a 	ret
   53ea8:	00800084 	movi	r2,2
   53eac:	28800015 	stw	r2,0(r5)
   53eb0:	f800283a 	ret
   53eb4:	1888b03a 	or	r4,r3,r2
   53eb8:	20000526 	beq	r4,zero,53ed0 <__unpack_d+0xf0>
   53ebc:	3180022c 	andhi	r6,r6,8
   53ec0:	30000626 	beq	r6,zero,53edc <__unpack_d+0xfc>
   53ec4:	01000044 	movi	r4,1
   53ec8:	29000015 	stw	r4,0(r5)
   53ecc:	003ff306 	br	53e9c <__alt_data_end+0xfffe1e9c>
   53ed0:	00800104 	movi	r2,4
   53ed4:	28800015 	stw	r2,0(r5)
   53ed8:	f800283a 	ret
   53edc:	28000015 	stw	zero,0(r5)
   53ee0:	003fee06 	br	53e9c <__alt_data_end+0xfffe1e9c>

00053ee4 <__fpcmp_parts_d>:
   53ee4:	20c00017 	ldw	r3,0(r4)
   53ee8:	00800044 	movi	r2,1
   53eec:	10c0142e 	bgeu	r2,r3,53f40 <__fpcmp_parts_d+0x5c>
   53ef0:	29800017 	ldw	r6,0(r5)
   53ef4:	1180122e 	bgeu	r2,r6,53f40 <__fpcmp_parts_d+0x5c>
   53ef8:	01c00104 	movi	r7,4
   53efc:	19c02826 	beq	r3,r7,53fa0 <__fpcmp_parts_d+0xbc>
   53f00:	31c00926 	beq	r6,r7,53f28 <__fpcmp_parts_d+0x44>
   53f04:	01c00084 	movi	r7,2
   53f08:	19c00626 	beq	r3,r7,53f24 <__fpcmp_parts_d+0x40>
   53f0c:	31c00a26 	beq	r6,r7,53f38 <__fpcmp_parts_d+0x54>
   53f10:	20c00117 	ldw	r3,4(r4)
   53f14:	29800117 	ldw	r6,4(r5)
   53f18:	19800b26 	beq	r3,r6,53f48 <__fpcmp_parts_d+0x64>
   53f1c:	1800041e 	bne	r3,zero,53f30 <__fpcmp_parts_d+0x4c>
   53f20:	f800283a 	ret
   53f24:	30c01a26 	beq	r6,r3,53f90 <__fpcmp_parts_d+0xac>
   53f28:	28800117 	ldw	r2,4(r5)
   53f2c:	1000041e 	bne	r2,zero,53f40 <__fpcmp_parts_d+0x5c>
   53f30:	00bfffc4 	movi	r2,-1
   53f34:	f800283a 	ret
   53f38:	20800117 	ldw	r2,4(r4)
   53f3c:	103ffc1e 	bne	r2,zero,53f30 <__alt_data_end+0xfffe1f30>
   53f40:	00800044 	movi	r2,1
   53f44:	f800283a 	ret
   53f48:	21c00217 	ldw	r7,8(r4)
   53f4c:	29800217 	ldw	r6,8(r5)
   53f50:	31c0020e 	bge	r6,r7,53f5c <__fpcmp_parts_d+0x78>
   53f54:	183ff61e 	bne	r3,zero,53f30 <__alt_data_end+0xfffe1f30>
   53f58:	f800283a 	ret
   53f5c:	39800a16 	blt	r7,r6,53f88 <__fpcmp_parts_d+0xa4>
   53f60:	20800417 	ldw	r2,16(r4)
   53f64:	29800417 	ldw	r6,16(r5)
   53f68:	21c00317 	ldw	r7,12(r4)
   53f6c:	29000317 	ldw	r4,12(r5)
   53f70:	30800936 	bltu	r6,r2,53f98 <__fpcmp_parts_d+0xb4>
   53f74:	1180011e 	bne	r2,r6,53f7c <__fpcmp_parts_d+0x98>
   53f78:	21c00736 	bltu	r4,r7,53f98 <__fpcmp_parts_d+0xb4>
   53f7c:	11800236 	bltu	r2,r6,53f88 <__fpcmp_parts_d+0xa4>
   53f80:	3080031e 	bne	r6,r2,53f90 <__fpcmp_parts_d+0xac>
   53f84:	3900022e 	bgeu	r7,r4,53f90 <__fpcmp_parts_d+0xac>
   53f88:	183fe926 	beq	r3,zero,53f30 <__alt_data_end+0xfffe1f30>
   53f8c:	003fec06 	br	53f40 <__alt_data_end+0xfffe1f40>
   53f90:	0005883a 	mov	r2,zero
   53f94:	f800283a 	ret
   53f98:	183fe926 	beq	r3,zero,53f40 <__alt_data_end+0xfffe1f40>
   53f9c:	003fe406 	br	53f30 <__alt_data_end+0xfffe1f30>
   53fa0:	30ffe51e 	bne	r6,r3,53f38 <__alt_data_end+0xfffe1f38>
   53fa4:	28c00117 	ldw	r3,4(r5)
   53fa8:	20800117 	ldw	r2,4(r4)
   53fac:	1885c83a 	sub	r2,r3,r2
   53fb0:	f800283a 	ret

00053fb4 <__lshrdi3>:
   53fb4:	2005883a 	mov	r2,r4
   53fb8:	2807883a 	mov	r3,r5
   53fbc:	30000826 	beq	r6,zero,53fe0 <__lshrdi3+0x2c>
   53fc0:	01000804 	movi	r4,32
   53fc4:	2189c83a 	sub	r4,r4,r6
   53fc8:	0100060e 	bge	zero,r4,53fe4 <__lshrdi3+0x30>
   53fcc:	1184d83a 	srl	r2,r2,r6
   53fd0:	2908983a 	sll	r4,r5,r4
   53fd4:	298cd83a 	srl	r6,r5,r6
   53fd8:	2084b03a 	or	r2,r4,r2
   53fdc:	3007883a 	mov	r3,r6
   53fe0:	f800283a 	ret
   53fe4:	0105c83a 	sub	r2,zero,r4
   53fe8:	000d883a 	mov	r6,zero
   53fec:	2884d83a 	srl	r2,r5,r2
   53ff0:	3007883a 	mov	r3,r6
   53ff4:	003ffa06 	br	53fe0 <__alt_data_end+0xfffe1fe0>

00053ff8 <__ashldi3>:
   53ff8:	2005883a 	mov	r2,r4
   53ffc:	2807883a 	mov	r3,r5
   54000:	30000826 	beq	r6,zero,54024 <__ashldi3+0x2c>
   54004:	01000804 	movi	r4,32
   54008:	2189c83a 	sub	r4,r4,r6
   5400c:	0100060e 	bge	zero,r4,54028 <__ashldi3+0x30>
   54010:	1108d83a 	srl	r4,r2,r4
   54014:	2986983a 	sll	r3,r5,r6
   54018:	118c983a 	sll	r6,r2,r6
   5401c:	20c6b03a 	or	r3,r4,r3
   54020:	3005883a 	mov	r2,r6
   54024:	f800283a 	ret
   54028:	0107c83a 	sub	r3,zero,r4
   5402c:	000d883a 	mov	r6,zero
   54030:	10c6983a 	sll	r3,r2,r3
   54034:	3005883a 	mov	r2,r6
   54038:	003ffa06 	br	54024 <__alt_data_end+0xfffe2024>

0005403c <__pack_f>:
   5403c:	21400017 	ldw	r5,0(r4)
   54040:	01800044 	movi	r6,1
   54044:	20c00317 	ldw	r3,12(r4)
   54048:	21c00117 	ldw	r7,4(r4)
   5404c:	3140282e 	bgeu	r6,r5,540f0 <__pack_f+0xb4>
   54050:	00800104 	movi	r2,4
   54054:	28802326 	beq	r5,r2,540e4 <__pack_f+0xa8>
   54058:	00800084 	movi	r2,2
   5405c:	28800f26 	beq	r5,r2,5409c <__pack_f+0x60>
   54060:	18000e26 	beq	r3,zero,5409c <__pack_f+0x60>
   54064:	21000217 	ldw	r4,8(r4)
   54068:	00bfe084 	movi	r2,-126
   5406c:	20802616 	blt	r4,r2,54108 <__pack_f+0xcc>
   54070:	00801fc4 	movi	r2,127
   54074:	11001b16 	blt	r2,r4,540e4 <__pack_f+0xa8>
   54078:	188a703a 	and	r5,r3,r2
   5407c:	00801004 	movi	r2,64
   54080:	28801126 	beq	r5,r2,540c8 <__pack_f+0x8c>
   54084:	18c00fc4 	addi	r3,r3,63
   54088:	18001316 	blt	r3,zero,540d8 <__pack_f+0x9c>
   5408c:	21001fc4 	addi	r4,r4,127
   54090:	180690ba 	slli	r3,r3,2
   54094:	1806d27a 	srli	r3,r3,9
   54098:	00000206 	br	540a4 <__pack_f+0x68>
   5409c:	0009883a 	mov	r4,zero
   540a0:	0007883a 	mov	r3,zero
   540a4:	21003fcc 	andi	r4,r4,255
   540a8:	200895fa 	slli	r4,r4,23
   540ac:	380a97fa 	slli	r5,r7,31
   540b0:	00802034 	movhi	r2,128
   540b4:	10bfffc4 	addi	r2,r2,-1
   540b8:	1886703a 	and	r3,r3,r2
   540bc:	1904b03a 	or	r2,r3,r4
   540c0:	1144b03a 	or	r2,r2,r5
   540c4:	f800283a 	ret
   540c8:	1880200c 	andi	r2,r3,128
   540cc:	103fee26 	beq	r2,zero,54088 <__alt_data_end+0xfffe2088>
   540d0:	18c01004 	addi	r3,r3,64
   540d4:	183fed0e 	bge	r3,zero,5408c <__alt_data_end+0xfffe208c>
   540d8:	1806d07a 	srli	r3,r3,1
   540dc:	21002004 	addi	r4,r4,128
   540e0:	003feb06 	br	54090 <__alt_data_end+0xfffe2090>
   540e4:	013fffc4 	movi	r4,-1
   540e8:	0007883a 	mov	r3,zero
   540ec:	003fed06 	br	540a4 <__alt_data_end+0xfffe20a4>
   540f0:	18c00434 	orhi	r3,r3,16
   540f4:	00802034 	movhi	r2,128
   540f8:	10bfffc4 	addi	r2,r2,-1
   540fc:	1886703a 	and	r3,r3,r2
   54100:	013fffc4 	movi	r4,-1
   54104:	003fe706 	br	540a4 <__alt_data_end+0xfffe20a4>
   54108:	1105c83a 	sub	r2,r2,r4
   5410c:	01000644 	movi	r4,25
   54110:	20801216 	blt	r4,r2,5415c <__pack_f+0x120>
   54114:	3088983a 	sll	r4,r6,r2
   54118:	1884d83a 	srl	r2,r3,r2
   5411c:	213fffc4 	addi	r4,r4,-1
   54120:	20c6703a 	and	r3,r4,r3
   54124:	1806c03a 	cmpne	r3,r3,zero
   54128:	1884b03a 	or	r2,r3,r2
   5412c:	11001fcc 	andi	r4,r2,127
   54130:	00c01004 	movi	r3,64
   54134:	20c00a1e 	bne	r4,r3,54160 <__pack_f+0x124>
   54138:	10c0200c 	andi	r3,r2,128
   5413c:	18000126 	beq	r3,zero,54144 <__pack_f+0x108>
   54140:	10801004 	addi	r2,r2,64
   54144:	100690ba 	slli	r3,r2,2
   54148:	01100034 	movhi	r4,16384
   5414c:	1105403a 	cmpgeu	r2,r2,r4
   54150:	1806d27a 	srli	r3,r3,9
   54154:	1009883a 	mov	r4,r2
   54158:	003fd206 	br	540a4 <__alt_data_end+0xfffe20a4>
   5415c:	0005883a 	mov	r2,zero
   54160:	10800fc4 	addi	r2,r2,63
   54164:	003ff706 	br	54144 <__alt_data_end+0xfffe2144>

00054168 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   54168:	defffd04 	addi	sp,sp,-12
   5416c:	dc400115 	stw	r17,4(sp)
   54170:	dfc00215 	stw	ra,8(sp)
   54174:	dc000015 	stw	r16,0(sp)
   54178:	2023883a 	mov	r17,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   5417c:	20001f16 	blt	r4,zero,541fc <close+0x94>
   54180:	21000324 	muli	r4,r4,12
   54184:	00800174 	movhi	r2,5
   54188:	109ad004 	addi	r2,r2,27456
   5418c:	2089883a 	add	r4,r4,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   54190:	20800017 	ldw	r2,0(r4)
   54194:	10800417 	ldw	r2,16(r2)
   54198:	10000326 	beq	r2,zero,541a8 <close+0x40>
   5419c:	103ee83a 	callr	r2
   541a0:	1021883a 	mov	r16,r2
   541a4:	00000106 	br	541ac <close+0x44>
   541a8:	0021883a 	mov	r16,zero

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   541ac:	8809883a 	mov	r4,r17
   541b0:	00545c40 	call	545c4 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   541b4:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   541b8:	8000170e 	bge	r16,zero,54218 <close+0xb0>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   541bc:	00800174 	movhi	r2,5
   541c0:	109f5f04 	addi	r2,r2,32124
   541c4:	10800017 	ldw	r2,0(r2)
   541c8:	10000226 	beq	r2,zero,541d4 <close+0x6c>
   541cc:	103ee83a 	callr	r2
   541d0:	00000206 	br	541dc <close+0x74>
   541d4:	008001b4 	movhi	r2,6
   541d8:	10a61a04 	addi	r2,r2,-26520
    {
      ALT_ERRNO = -rval;
   541dc:	0421c83a 	sub	r16,zero,r16
   541e0:	14000015 	stw	r16,0(r2)
   541e4:	00000306 	br	541f4 <close+0x8c>
   541e8:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   541ec:	00c01444 	movi	r3,81
   541f0:	10c00015 	stw	r3,0(r2)
    return -1;
   541f4:	00bfffc4 	movi	r2,-1
   541f8:	00000706 	br	54218 <close+0xb0>
   541fc:	00800174 	movhi	r2,5
   54200:	109f5f04 	addi	r2,r2,32124
   54204:	10800017 	ldw	r2,0(r2)
   54208:	103ff71e 	bne	r2,zero,541e8 <__alt_data_end+0xfffe21e8>
   5420c:	008001b4 	movhi	r2,6
   54210:	10a61a04 	addi	r2,r2,-26520
   54214:	003ff506 	br	541ec <__alt_data_end+0xfffe21ec>
  }
}
   54218:	dfc00217 	ldw	ra,8(sp)
   5421c:	dc400117 	ldw	r17,4(sp)
   54220:	dc000017 	ldw	r16,0(sp)
   54224:	dec00304 	addi	sp,sp,12
   54228:	f800283a 	ret

0005422c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   5422c:	3005883a 	mov	r2,r6
   54230:	f800283a 	ret

00054234 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   54234:	deffff04 	addi	sp,sp,-4
   54238:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5423c:	20001316 	blt	r4,zero,5428c <fstat+0x58>
   54240:	21000324 	muli	r4,r4,12
   54244:	00800174 	movhi	r2,5
   54248:	109ad004 	addi	r2,r2,27456
   5424c:	2089883a 	add	r4,r4,r2
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   54250:	20800017 	ldw	r2,0(r4)
   54254:	10800817 	ldw	r2,32(r2)
   54258:	10000326 	beq	r2,zero,54268 <fstat+0x34>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   5425c:	dfc00017 	ldw	ra,0(sp)
   54260:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
   54264:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   54268:	00880004 	movi	r2,8192
   5426c:	28800115 	stw	r2,4(r5)
      return 0;
   54270:	0005883a 	mov	r2,zero
   54274:	00000c06 	br	542a8 <fstat+0x74>
   54278:	103ee83a 	callr	r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   5427c:	00c01444 	movi	r3,81
   54280:	10c00015 	stw	r3,0(r2)
    return -1;
   54284:	00bfffc4 	movi	r2,-1
   54288:	00000706 	br	542a8 <fstat+0x74>
   5428c:	00800174 	movhi	r2,5
   54290:	109f5f04 	addi	r2,r2,32124
   54294:	10800017 	ldw	r2,0(r2)
   54298:	103ff71e 	bne	r2,zero,54278 <__alt_data_end+0xfffe2278>
   5429c:	008001b4 	movhi	r2,6
   542a0:	10a61a04 	addi	r2,r2,-26520
   542a4:	003ff506 	br	5427c <__alt_data_end+0xfffe227c>
  }
}
   542a8:	dfc00017 	ldw	ra,0(sp)
   542ac:	dec00104 	addi	sp,sp,4
   542b0:	f800283a 	ret

000542b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   542b4:	defff004 	addi	sp,sp,-64
   542b8:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   542bc:	20001316 	blt	r4,zero,5430c <isatty+0x58>
   542c0:	20800324 	muli	r2,r4,12
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   542c4:	00c00174 	movhi	r3,5
   542c8:	18dad004 	addi	r3,r3,27456
   542cc:	10c5883a 	add	r2,r2,r3
   542d0:	10800017 	ldw	r2,0(r2)
   542d4:	10800817 	ldw	r2,32(r2)
   542d8:	10000a26 	beq	r2,zero,54304 <isatty+0x50>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   542dc:	d80b883a 	mov	r5,sp
   542e0:	00542340 	call	54234 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   542e4:	d8800117 	ldw	r2,4(sp)
   542e8:	10880020 	cmpeqi	r2,r2,8192
   542ec:	00000e06 	br	54328 <isatty+0x74>
   542f0:	103ee83a 	callr	r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   542f4:	00c01444 	movi	r3,81
   542f8:	10c00015 	stw	r3,0(r2)
    return 0;
   542fc:	0005883a 	mov	r2,zero
   54300:	00000906 	br	54328 <isatty+0x74>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   54304:	00800044 	movi	r2,1
   54308:	00000706 	br	54328 <isatty+0x74>
   5430c:	00800174 	movhi	r2,5
   54310:	109f5f04 	addi	r2,r2,32124
   54314:	10800017 	ldw	r2,0(r2)
   54318:	103ff51e 	bne	r2,zero,542f0 <__alt_data_end+0xfffe22f0>
   5431c:	008001b4 	movhi	r2,6
   54320:	10a61a04 	addi	r2,r2,-26520
   54324:	003ff306 	br	542f4 <__alt_data_end+0xfffe22f4>
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   54328:	dfc00f17 	ldw	ra,60(sp)
   5432c:	dec01004 	addi	sp,sp,64
   54330:	f800283a 	ret

00054334 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   54334:	deffff04 	addi	sp,sp,-4
   54338:	dfc00015 	stw	ra,0(sp)
   5433c:	00c00174 	movhi	r3,5
   54340:	18d8c104 	addi	r3,r3,25348
   54344:	01000174 	movhi	r4,5
   54348:	211f6404 	addi	r4,r4,32144

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   5434c:	1900061e 	bne	r3,r4,54368 <alt_load+0x34>
   54350:	00c00134 	movhi	r3,4
   54354:	18c00804 	addi	r3,r3,32
   54358:	01000134 	movhi	r4,4
   5435c:	21000804 	addi	r4,r4,32
   54360:	1900151e 	bne	r3,r4,543b8 <alt_load+0x84>
   54364:	00000e06 	br	543a0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
   54368:	01400174 	movhi	r5,5
   5436c:	295f6404 	addi	r5,r5,32144
   54370:	00bfff04 	movi	r2,-4
   54374:	28cbc83a 	sub	r5,r5,r3
   54378:	288a703a 	and	r5,r5,r2
   5437c:	0005883a 	mov	r2,zero
   54380:	00000506 	br	54398 <alt_load+0x64>
   54384:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
   54388:	39c00017 	ldw	r7,0(r7)
   5438c:	188d883a 	add	r6,r3,r2
   54390:	10800104 	addi	r2,r2,4
   54394:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   54398:	117ffa1e 	bne	r2,r5,54384 <__alt_data_end+0xfffe2384>
   5439c:	003fec06 	br	54350 <__alt_data_end+0xfffe2350>
   543a0:	00c00174 	movhi	r3,5
   543a4:	18d5a204 	addi	r3,r3,22152
   543a8:	01000174 	movhi	r4,5
   543ac:	2115a204 	addi	r4,r4,22152

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   543b0:	1900131e 	bne	r3,r4,54400 <alt_load+0xcc>
   543b4:	00000e06 	br	543f0 <alt_load+0xbc>
   543b8:	01400134 	movhi	r5,4
   543bc:	29405404 	addi	r5,r5,336
   543c0:	00bfff04 	movi	r2,-4
   543c4:	28cbc83a 	sub	r5,r5,r3
   543c8:	288a703a 	and	r5,r5,r2
   543cc:	0005883a 	mov	r2,zero
   543d0:	00000506 	br	543e8 <alt_load+0xb4>
   543d4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
   543d8:	39c00017 	ldw	r7,0(r7)
   543dc:	188d883a 	add	r6,r3,r2
   543e0:	10800104 	addi	r2,r2,4
   543e4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   543e8:	117ffa1e 	bne	r2,r5,543d4 <__alt_data_end+0xfffe23d4>
   543ec:	003fec06 	br	543a0 <__alt_data_end+0xfffe23a0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   543f0:	0054d9c0 	call	54d9c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   543f4:	dfc00017 	ldw	ra,0(sp)
   543f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   543fc:	0054e201 	jmpi	54e20 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
   54400:	01400174 	movhi	r5,5
   54404:	2958c104 	addi	r5,r5,25348
   54408:	00bfff04 	movi	r2,-4
   5440c:	28cbc83a 	sub	r5,r5,r3
   54410:	288a703a 	and	r5,r5,r2
   54414:	0005883a 	mov	r2,zero
   54418:	00000506 	br	54430 <alt_load+0xfc>
   5441c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
   54420:	39c00017 	ldw	r7,0(r7)
   54424:	188d883a 	add	r6,r3,r2
   54428:	10800104 	addi	r2,r2,4
   5442c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   54430:	117ffa1e 	bne	r2,r5,5441c <__alt_data_end+0xfffe241c>
   54434:	003fee06 	br	543f0 <__alt_data_end+0xfffe23f0>

00054438 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   54438:	defffe04 	addi	sp,sp,-8
   5443c:	dfc00115 	stw	ra,4(sp)
   54440:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54444:	20001616 	blt	r4,zero,544a0 <lseek+0x68>
   54448:	21000324 	muli	r4,r4,12
   5444c:	00800174 	movhi	r2,5
   54450:	109ad004 	addi	r2,r2,27456
   54454:	2089883a 	add	r4,r4,r2
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   54458:	20800017 	ldw	r2,0(r4)
   5445c:	10800717 	ldw	r2,28(r2)
   54460:	10001126 	beq	r2,zero,544a8 <lseek+0x70>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   54464:	103ee83a 	callr	r2
   54468:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   5446c:	1000100e 	bge	r2,zero,544b0 <lseek+0x78>
   54470:	00800174 	movhi	r2,5
   54474:	109f5f04 	addi	r2,r2,32124
   54478:	10800017 	ldw	r2,0(r2)
   5447c:	10000226 	beq	r2,zero,54488 <lseek+0x50>
   54480:	103ee83a 	callr	r2
   54484:	00000206 	br	54490 <lseek+0x58>
   54488:	008001b4 	movhi	r2,6
   5448c:	10a61a04 	addi	r2,r2,-26520
  {
    ALT_ERRNO = -rc;
   54490:	0421c83a 	sub	r16,zero,r16
   54494:	14000015 	stw	r16,0(r2)
    rc = -1;
   54498:	043fffc4 	movi	r16,-1
   5449c:	00000406 	br	544b0 <lseek+0x78>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   544a0:	043febc4 	movi	r16,-81
   544a4:	003ff206 	br	54470 <__alt_data_end+0xfffe2470>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   544a8:	043fde84 	movi	r16,-134
   544ac:	003ff006 	br	54470 <__alt_data_end+0xfffe2470>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   544b0:	8005883a 	mov	r2,r16
   544b4:	dfc00117 	ldw	ra,4(sp)
   544b8:	dc000017 	ldw	r16,0(sp)
   544bc:	dec00204 	addi	sp,sp,8
   544c0:	f800283a 	ret

000544c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   544c4:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   544c8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   544cc:	dfc00115 	stw	ra,4(sp)
   544d0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   544d4:	00546dc0 	call	546dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   544d8:	00546fc0 	call	546fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   544dc:	01000174 	movhi	r4,5
   544e0:	2118bd04 	addi	r4,r4,25332
   544e4:	200b883a 	mov	r5,r4
   544e8:	200d883a 	mov	r6,r4
   544ec:	0054fa00 	call	54fa0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   544f0:	d126cb17 	ldw	r4,-25812(gp)
   544f4:	d166ca17 	ldw	r5,-25816(gp)
   544f8:	d1a6c917 	ldw	r6,-25820(gp)
   544fc:	00412e40 	call	412e4 <main>
  close(STDOUT_FILENO);
   54500:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   54504:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   54508:	00541680 	call	54168 <close>
  exit (result);
   5450c:	8009883a 	mov	r4,r16
   54510:	00554200 	call	55420 <exit>

00054514 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   54514:	f800283a 	ret

00054518 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   54518:	f800283a 	ret

0005451c <alt_get_errno>:
   5451c:	00800174 	movhi	r2,5
   54520:	109f5f04 	addi	r2,r2,32124
   54524:	10800017 	ldw	r2,0(r2)
   54528:	10000126 	beq	r2,zero,54530 <alt_get_errno+0x14>
   5452c:	1000683a 	jmp	r2
}
   54530:	008001b4 	movhi	r2,6
   54534:	10a61a04 	addi	r2,r2,-26520
   54538:	f800283a 	ret

0005453c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   5453c:	defffe04 	addi	sp,sp,-8
   54540:	dfc00115 	stw	ra,4(sp)
   54544:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54548:	20001516 	blt	r4,zero,545a0 <read+0x64>
   5454c:	21000324 	muli	r4,r4,12
   54550:	00800174 	movhi	r2,5
   54554:	109ad004 	addi	r2,r2,27456
   54558:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5455c:	20c00217 	ldw	r3,8(r4)
   54560:	00800044 	movi	r2,1
   54564:	18c000cc 	andi	r3,r3,3
   54568:	18800a26 	beq	r3,r2,54594 <read+0x58>
        (fd->dev->read))
   5456c:	20800017 	ldw	r2,0(r4)
   54570:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   54574:	10000726 	beq	r2,zero,54594 <read+0x58>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   54578:	103ee83a 	callr	r2
   5457c:	1021883a 	mov	r16,r2
   54580:	10000b0e 	bge	r2,zero,545b0 <read+0x74>
        {
          ALT_ERRNO = -rval;
   54584:	005451c0 	call	5451c <alt_get_errno>
   54588:	0421c83a 	sub	r16,zero,r16
   5458c:	14000015 	stw	r16,0(r2)
   54590:	00000606 	br	545ac <read+0x70>
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   54594:	005451c0 	call	5451c <alt_get_errno>
   54598:	00c00344 	movi	r3,13
   5459c:	00000206 	br	545a8 <read+0x6c>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   545a0:	005451c0 	call	5451c <alt_get_errno>
   545a4:	00c01444 	movi	r3,81
   545a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   545ac:	043fffc4 	movi	r16,-1
}
   545b0:	8005883a 	mov	r2,r16
   545b4:	dfc00117 	ldw	ra,4(sp)
   545b8:	dc000017 	ldw	r16,0(sp)
   545bc:	dec00204 	addi	sp,sp,8
   545c0:	f800283a 	ret

000545c4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   545c4:	00800084 	movi	r2,2
   545c8:	1100060e 	bge	r2,r4,545e4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   545cc:	21000324 	muli	r4,r4,12
   545d0:	00800174 	movhi	r2,5
   545d4:	109ad004 	addi	r2,r2,27456
   545d8:	1109883a 	add	r4,r2,r4
   545dc:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
   545e0:	20000015 	stw	zero,0(r4)
   545e4:	f800283a 	ret

000545e8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   545e8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   545ec:	00bfff84 	movi	r2,-2
   545f0:	1884703a 	and	r2,r3,r2
   545f4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   545f8:	d0a00e17 	ldw	r2,-32712(gp)
   545fc:	017fff04 	movi	r5,-4
   54600:	108000c4 	addi	r2,r2,3
   54604:	1144703a 	and	r2,r2,r5
   54608:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   5460c:	1109883a 	add	r4,r2,r4
   54610:	014001f4 	movhi	r5,7
   54614:	29480004 	addi	r5,r5,8192
   54618:	2900032e 	bgeu	r5,r4,54628 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5461c:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   54620:	00bfffc4 	movi	r2,-1
   54624:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   54628:	d1200e15 	stw	r4,-32712(gp)
   5462c:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   54630:	f800283a 	ret

00054634 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   54634:	0054d241 	jmpi	54d24 <alt_busy_sleep>

00054638 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   54638:	00800174 	movhi	r2,5
   5463c:	109f5f04 	addi	r2,r2,32124
   54640:	10800017 	ldw	r2,0(r2)
   54644:	10000126 	beq	r2,zero,5464c <alt_get_errno+0x14>
   54648:	1000683a 	jmp	r2
}
   5464c:	008001b4 	movhi	r2,6
   54650:	10a61a04 	addi	r2,r2,-26520
   54654:	f800283a 	ret

00054658 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   54658:	defffe04 	addi	sp,sp,-8
   5465c:	dfc00115 	stw	ra,4(sp)
   54660:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   54664:	20001416 	blt	r4,zero,546b8 <write+0x60>
   54668:	21000324 	muli	r4,r4,12
   5466c:	00800174 	movhi	r2,5
   54670:	109ad004 	addi	r2,r2,27456
   54674:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   54678:	20800217 	ldw	r2,8(r4)
   5467c:	108000cc 	andi	r2,r2,3
   54680:	10000a26 	beq	r2,zero,546ac <write+0x54>
   54684:	20800017 	ldw	r2,0(r4)
   54688:	10800617 	ldw	r2,24(r2)
   5468c:	10000726 	beq	r2,zero,546ac <write+0x54>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   54690:	103ee83a 	callr	r2
   54694:	1021883a 	mov	r16,r2
   54698:	10000b0e 	bge	r2,zero,546c8 <write+0x70>
      {
        ALT_ERRNO = -rval;
   5469c:	00546380 	call	54638 <alt_get_errno>
   546a0:	0421c83a 	sub	r16,zero,r16
   546a4:	14000015 	stw	r16,0(r2)
   546a8:	00000606 	br	546c4 <write+0x6c>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   546ac:	00546380 	call	54638 <alt_get_errno>
   546b0:	00c00344 	movi	r3,13
   546b4:	00000206 	br	546c0 <write+0x68>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   546b8:	00546380 	call	54638 <alt_get_errno>
   546bc:	00c01444 	movi	r3,81
   546c0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   546c4:	043fffc4 	movi	r16,-1
}
   546c8:	8005883a 	mov	r2,r16
   546cc:	dfc00117 	ldw	ra,4(sp)
   546d0:	dc000017 	ldw	r16,0(sp)
   546d4:	dec00204 	addi	sp,sp,8
   546d8:	f800283a 	ret

000546dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   546dc:	deffff04 	addi	sp,sp,-4
   546e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
   546e4:	005527c0 	call	5527c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   546e8:	00800044 	movi	r2,1
   546ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   546f0:	dfc00017 	ldw	ra,0(sp)
   546f4:	dec00104 	addi	sp,sp,4
   546f8:	f800283a 	ret

000546fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   546fc:	defffe04 	addi	sp,sp,-8
   54700:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   54704:	04000174 	movhi	r16,5
   54708:	841b4404 	addi	r16,r16,27920
   5470c:	8009883a 	mov	r4,r16
   54710:	000b883a 	mov	r5,zero
   54714:	01800144 	movi	r6,5
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   54718:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   5471c:	00548bc0 	call	548bc <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   54720:	813ff604 	addi	r4,r16,-40
   54724:	01400174 	movhi	r5,5
   54728:	295f5b04 	addi	r5,r5,32108
}
   5472c:	dfc00117 	ldw	ra,4(sp)
   54730:	dc000017 	ldw	r16,0(sp)
   54734:	dec00204 	addi	sp,sp,8
   54738:	0054db41 	jmpi	54db4 <alt_dev_llist_insert>

0005473c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   5473c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   54740:	21000017 	ldw	r4,0(r4)
   54744:	11c00217 	ldw	r7,8(r2)
   54748:	21000a04 	addi	r4,r4,40
   5474c:	00549e81 	jmpi	549e8 <altera_avalon_jtag_uart_read>

00054750 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   54750:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   54754:	21000017 	ldw	r4,0(r4)
   54758:	11c00217 	ldw	r7,8(r2)
   5475c:	21000a04 	addi	r4,r4,40
   54760:	0054b241 	jmpi	54b24 <altera_avalon_jtag_uart_write>

00054764 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   54764:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   54768:	21000017 	ldw	r4,0(r4)
   5476c:	11400217 	ldw	r5,8(r2)
   54770:	21000a04 	addi	r4,r4,40
   54774:	005493c1 	jmpi	5493c <altera_avalon_jtag_uart_close>

00054778 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   54778:	21000017 	ldw	r4,0(r4)
   5477c:	21000a04 	addi	r4,r4,40
   54780:	00549741 	jmpi	54974 <altera_avalon_jtag_uart_ioctl>

00054784 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   54784:	20800017 	ldw	r2,0(r4)
   54788:	10800104 	addi	r2,r2,4
   5478c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   54790:	18c1000c 	andi	r3,r3,1024
   54794:	18000526 	beq	r3,zero,547ac <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   54798:	20c00817 	ldw	r3,32(r4)
   5479c:	18c10014 	ori	r3,r3,1024
   547a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   547a4:	20000915 	stw	zero,36(r4)
   547a8:	00000606 	br	547c4 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   547ac:	20800917 	ldw	r2,36(r4)
   547b0:	00e00034 	movhi	r3,32768
   547b4:	18ffff04 	addi	r3,r3,-4
   547b8:	18800236 	bltu	r3,r2,547c4 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   547bc:	10800044 	addi	r2,r2,1
   547c0:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   547c4:	008001b4 	movhi	r2,6
   547c8:	10a62004 	addi	r2,r2,-26496
   547cc:	10800017 	ldw	r2,0(r2)
   547d0:	f800283a 	ret

000547d4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   547d4:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   547d8:	023fff84 	movi	r8,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   547dc:	01ffff44 	movi	r7,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   547e0:	30800104 	addi	r2,r6,4
   547e4:	10c00037 	ldwio	r3,0(r2)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   547e8:	1940c00c 	andi	r5,r3,768
   547ec:	28003226 	beq	r5,zero,548b8 <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   547f0:	1940400c 	andi	r5,r3,256
   547f4:	28001826 	beq	r5,zero,54858 <altera_avalon_jtag_uart_irq+0x84>
   547f8:	01400074 	movhi	r5,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   547fc:	22800a17 	ldw	r10,40(r4)
        if (next == sp->rx_out)
   54800:	22400b17 	ldw	r9,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54804:	52800044 	addi	r10,r10,1
   54808:	5281ffcc 	andi	r10,r10,2047
        if (next == sp->rx_out)
   5480c:	52400b26 	beq	r10,r9,5483c <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   54810:	31400037 	ldwio	r5,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   54814:	2a60000c 	andi	r9,r5,32768
   54818:	48000826 	beq	r9,zero,5483c <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   5481c:	22400a17 	ldw	r9,40(r4)
   54820:	2253883a 	add	r9,r4,r9
   54824:	49400e05 	stb	r5,56(r9)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54828:	22400a17 	ldw	r9,40(r4)
   5482c:	4a400044 	addi	r9,r9,1
   54830:	4a41ffcc 	andi	r9,r9,2047
   54834:	22400a15 	stw	r9,40(r4)
   54838:	003ff006 	br	547fc <__alt_data_end+0xfffe27fc>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   5483c:	297fffec 	andhi	r5,r5,65535
   54840:	28000526 	beq	r5,zero,54858 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54844:	21400817 	ldw	r5,32(r4)
   54848:	2a0a703a 	and	r5,r5,r8
   5484c:	21400815 	stw	r5,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   54850:	11400035 	stwio	r5,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   54854:	11400037 	ldwio	r5,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   54858:	1940800c 	andi	r5,r3,512
   5485c:	283fe126 	beq	r5,zero,547e4 <__alt_data_end+0xfffe27e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   54860:	1806d43a 	srli	r3,r3,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   54864:	00000906 	br	5488c <altera_avalon_jtag_uart_irq+0xb8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   54868:	21400d17 	ldw	r5,52(r4)
   5486c:	214b883a 	add	r5,r4,r5
   54870:	29420e07 	ldb	r5,2104(r5)
   54874:	31400035 	stwio	r5,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54878:	21400d17 	ldw	r5,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   5487c:	18ffffc4 	addi	r3,r3,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54880:	29400044 	addi	r5,r5,1
   54884:	2941ffcc 	andi	r5,r5,2047
   54888:	21400d15 	stw	r5,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5488c:	183fd526 	beq	r3,zero,547e4 <__alt_data_end+0xfffe27e4>
   54890:	22400d17 	ldw	r9,52(r4)
   54894:	21400c17 	ldw	r5,48(r4)
   54898:	497ff31e 	bne	r9,r5,54868 <__alt_data_end+0xfffe2868>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5489c:	20c00817 	ldw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   548a0:	21400017 	ldw	r5,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   548a4:	19c6703a 	and	r3,r3,r7
   548a8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   548ac:	28c00135 	stwio	r3,4(r5)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   548b0:	10c00037 	ldwio	r3,0(r2)
   548b4:	003fcb06 	br	547e4 <__alt_data_end+0xfffe27e4>
   548b8:	f800283a 	ret

000548bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   548bc:	defffd04 	addi	sp,sp,-12
   548c0:	dc000115 	stw	r16,4(sp)
   548c4:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   548c8:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   548cc:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   548d0:	dfc00215 	stw	ra,8(sp)
   548d4:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   548d8:	80800815 	stw	r2,32(r16)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   548dc:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   548e0:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   548e4:	01800174 	movhi	r6,5
   548e8:	3191f504 	addi	r6,r6,18388
   548ec:	800f883a 	mov	r7,r16
   548f0:	d8000015 	stw	zero,0(sp)
   548f4:	0054e2c0 	call	54e2c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   548f8:	008001b4 	movhi	r2,6
   548fc:	10a62004 	addi	r2,r2,-26496
   54900:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   54904:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   54908:	81000204 	addi	r4,r16,8
   5490c:	01800174 	movhi	r6,5
   54910:	3191e104 	addi	r6,r6,18308
   54914:	800f883a 	mov	r7,r16
   54918:	0054c900 	call	54c90 <alt_alarm_start>
   5491c:	1000030e 	bge	r2,zero,5492c <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   54920:	00a00034 	movhi	r2,32768
   54924:	10bfffc4 	addi	r2,r2,-1
   54928:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   5492c:	dfc00217 	ldw	ra,8(sp)
   54930:	dc000117 	ldw	r16,4(sp)
   54934:	dec00304 	addi	sp,sp,12
   54938:	f800283a 	ret

0005493c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5493c:	20800c17 	ldw	r2,48(r4)
    if (flags & O_NONBLOCK) {
   54940:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   54944:	00000106 	br	5494c <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
   54948:	2800061e 	bne	r5,zero,54964 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5494c:	20c00d17 	ldw	r3,52(r4)
   54950:	18800626 	beq	r3,r2,5496c <altera_avalon_jtag_uart_close+0x30>
   54954:	21800917 	ldw	r6,36(r4)
   54958:	20c00117 	ldw	r3,4(r4)
   5495c:	30fffa36 	bltu	r6,r3,54948 <__alt_data_end+0xfffe2948>
   54960:	00000206 	br	5496c <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   54964:	00bffd44 	movi	r2,-11
   54968:	f800283a 	ret
    }
  }

  return 0;
   5496c:	0005883a 	mov	r2,zero
}
   54970:	f800283a 	ret

00054974 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   54974:	009a8044 	movi	r2,27137
   54978:	28800326 	beq	r5,r2,54988 <altera_avalon_jtag_uart_ioctl+0x14>
   5497c:	009a8084 	movi	r2,27138
   54980:	2880171e 	bne	r5,r2,549e0 <altera_avalon_jtag_uart_ioctl+0x6c>
   54984:	00000d06 	br	549bc <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   54988:	20c00117 	ldw	r3,4(r4)
   5498c:	00a00034 	movhi	r2,32768
   54990:	10bfffc4 	addi	r2,r2,-1
   54994:	18801226 	beq	r3,r2,549e0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   54998:	30800017 	ldw	r2,0(r6)
   5499c:	01600034 	movhi	r5,32768
   549a0:	297fff04 	addi	r5,r5,-4
   549a4:	10ffff84 	addi	r3,r2,-2
   549a8:	28c0022e 	bgeu	r5,r3,549b4 <altera_avalon_jtag_uart_ioctl+0x40>
   549ac:	00a00034 	movhi	r2,32768
   549b0:	10bfff84 	addi	r2,r2,-2
   549b4:	20800115 	stw	r2,4(r4)
   549b8:	00000706 	br	549d8 <altera_avalon_jtag_uart_ioctl+0x64>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   549bc:	20800117 	ldw	r2,4(r4)
   549c0:	00e00034 	movhi	r3,32768
   549c4:	18ffffc4 	addi	r3,r3,-1
   549c8:	10c00526 	beq	r2,r3,549e0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   549cc:	20c00917 	ldw	r3,36(r4)
   549d0:	1885803a 	cmpltu	r2,r3,r2
   549d4:	30800015 	stw	r2,0(r6)
      rc = 0;
   549d8:	0005883a 	mov	r2,zero
   549dc:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   549e0:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   549e4:	f800283a 	ret

000549e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   549e8:	defff604 	addi	sp,sp,-40
   549ec:	df000815 	stw	fp,32(sp)
   549f0:	ddc00715 	stw	r23,28(sp)
   549f4:	dd800615 	stw	r22,24(sp)
   549f8:	dd400515 	stw	r21,20(sp)
   549fc:	dc400115 	stw	r17,4(sp)
   54a00:	dc000015 	stw	r16,0(sp)
   54a04:	dfc00915 	stw	ra,36(sp)
   54a08:	dd000415 	stw	r20,16(sp)
   54a0c:	dcc00315 	stw	r19,12(sp)
   54a10:	dc800215 	stw	r18,8(sp)
   54a14:	2021883a 	mov	r16,r4
   54a18:	282b883a 	mov	r21,r5
   54a1c:	3023883a 	mov	r17,r6
   54a20:	382d883a 	mov	r22,r7
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   54a24:	05c20004 	movi	r23,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   54a28:	3f10000c 	andi	fp,r7,16384
   54a2c:	00001e06 	br	54aa8 <altera_avalon_jtag_uart_read+0xc0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54a30:	a807883a 	mov	r3,r21
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   54a34:	85000a17 	ldw	r20,40(r16)
      out = sp->rx_out;
   54a38:	84c00b17 	ldw	r19,44(r16)

      if (in >= out)
   54a3c:	a4c00236 	bltu	r20,r19,54a48 <altera_avalon_jtag_uart_read+0x60>
        n = in - out;
   54a40:	a4e5c83a 	sub	r18,r20,r19
   54a44:	00000106 	br	54a4c <altera_avalon_jtag_uart_read+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   54a48:	bce5c83a 	sub	r18,r23,r19

      if (n == 0)
   54a4c:	90000d26 	beq	r18,zero,54a84 <altera_avalon_jtag_uart_read+0x9c>
   54a50:	8c80012e 	bgeu	r17,r18,54a58 <altera_avalon_jtag_uart_read+0x70>
   54a54:	8825883a 	mov	r18,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   54a58:	99400e04 	addi	r5,r19,56
   54a5c:	1809883a 	mov	r4,r3
   54a60:	900d883a 	mov	r6,r18
   54a64:	814b883a 	add	r5,r16,r5
   54a68:	004c8440 	call	4c844 <memcpy>
      ptr   += n;
   54a6c:	1487883a 	add	r3,r2,r18
      space -= n;
   54a70:	8ca3c83a 	sub	r17,r17,r18

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54a74:	94e5883a 	add	r18,r18,r19
   54a78:	9481ffcc 	andi	r18,r18,2047
   54a7c:	84800b15 	stw	r18,44(r16)
    }
    while (space > 0);
   54a80:	047fec16 	blt	zero,r17,54a34 <__alt_data_end+0xfffe2a34>

    /* If we read any data then return it */
    if (ptr != buffer)
   54a84:	1d400a1e 	bne	r3,r21,54ab0 <altera_avalon_jtag_uart_read+0xc8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   54a88:	e000171e 	bne	fp,zero,54ae8 <altera_avalon_jtag_uart_read+0x100>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   54a8c:	80800a17 	ldw	r2,40(r16)
   54a90:	a080031e 	bne	r20,r2,54aa0 <altera_avalon_jtag_uart_read+0xb8>
   54a94:	80c00917 	ldw	r3,36(r16)
   54a98:	80800117 	ldw	r2,4(r16)
   54a9c:	18bffb36 	bltu	r3,r2,54a8c <__alt_data_end+0xfffe2a8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   54aa0:	80800a17 	ldw	r2,40(r16)
   54aa4:	a0801026 	beq	r20,r2,54ae8 <altera_avalon_jtag_uart_read+0x100>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   54aa8:	047fe116 	blt	zero,r17,54a30 <__alt_data_end+0xfffe2a30>
   54aac:	00000e06 	br	54ae8 <altera_avalon_jtag_uart_read+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54ab0:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54ab4:	013fff84 	movi	r4,-2
   54ab8:	1108703a 	and	r4,r2,r4
   54abc:	2001703a 	wrctl	status,r4

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54ac0:	81000817 	ldw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54ac4:	81400017 	ldw	r5,0(r16)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   54ac8:	21000054 	ori	r4,r4,1
   54acc:	81000815 	stw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54ad0:	29000135 	stwio	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   54ad8:	1d45c83a 	sub	r2,r3,r21
   54adc:	00000506 	br	54af4 <altera_avalon_jtag_uart_read+0x10c>
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   54ae0:	00bffec4 	movi	r2,-5
   54ae4:	00000306 	br	54af4 <altera_avalon_jtag_uart_read+0x10c>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   54ae8:	b590000c 	andi	r22,r22,16384
   54aec:	b03ffc26 	beq	r22,zero,54ae0 <__alt_data_end+0xfffe2ae0>
    return -EWOULDBLOCK;
   54af0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   54af4:	dfc00917 	ldw	ra,36(sp)
   54af8:	df000817 	ldw	fp,32(sp)
   54afc:	ddc00717 	ldw	r23,28(sp)
   54b00:	dd800617 	ldw	r22,24(sp)
   54b04:	dd400517 	ldw	r21,20(sp)
   54b08:	dd000417 	ldw	r20,16(sp)
   54b0c:	dcc00317 	ldw	r19,12(sp)
   54b10:	dc800217 	ldw	r18,8(sp)
   54b14:	dc400117 	ldw	r17,4(sp)
   54b18:	dc000017 	ldw	r16,0(sp)
   54b1c:	dec00a04 	addi	sp,sp,40
   54b20:	f800283a 	ret

00054b24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54b24:	defff304 	addi	sp,sp,-52
   54b28:	ddc00a15 	stw	r23,40(sp)
   54b2c:	382f883a 	mov	r23,r7
   54b30:	df000b15 	stw	fp,44(sp)
   54b34:	dd800915 	stw	r22,36(sp)
   54b38:	dd400815 	stw	r21,32(sp)
   54b3c:	dd000715 	stw	r20,28(sp)
   54b40:	dc400415 	stw	r17,16(sp)
   54b44:	dc000315 	stw	r16,12(sp)
   54b48:	dfc00c15 	stw	ra,48(sp)
   54b4c:	dcc00615 	stw	r19,24(sp)
   54b50:	dc800515 	stw	r18,20(sp)
   54b54:	2021883a 	mov	r16,r4
   54b58:	282d883a 	mov	r22,r5
   54b5c:	3023883a 	mov	r17,r6
   54b60:	2829883a 	mov	r20,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54b64:	002b883a 	mov	r21,zero
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   54b68:	0701ffc4 	movi	fp,2047
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   54b6c:	01c20004 	movi	r7,2048
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54b70:	023fff84 	movi	r8,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   54b74:	ba50000c 	andi	r9,r23,16384
   54b78:	00001d06 	br	54bf0 <altera_avalon_jtag_uart_write+0xcc>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54b7c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   54b80:	85400d17 	ldw	r21,52(r16)

      if (in < out)
   54b84:	9540032e 	bgeu	r18,r21,54b94 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
   54b88:	acffffc4 	addi	r19,r21,-1
   54b8c:	9ca7c83a 	sub	r19,r19,r18
   54b90:	00000406 	br	54ba4 <altera_avalon_jtag_uart_write+0x80>
      else if (out > 0)
   54b94:	a8000226 	beq	r21,zero,54ba0 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   54b98:	3ca7c83a 	sub	r19,r7,r18
   54b9c:	00000106 	br	54ba4 <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   54ba0:	e4a7c83a 	sub	r19,fp,r18

      if (n == 0)
   54ba4:	98001326 	beq	r19,zero,54bf4 <altera_avalon_jtag_uart_write+0xd0>
   54ba8:	8cc0012e 	bgeu	r17,r19,54bb0 <altera_avalon_jtag_uart_write+0x8c>
   54bac:	8827883a 	mov	r19,r17
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   54bb0:	91020e04 	addi	r4,r18,2104
   54bb4:	a00b883a 	mov	r5,r20
   54bb8:	8109883a 	add	r4,r16,r4
   54bbc:	980d883a 	mov	r6,r19
   54bc0:	d9c00015 	stw	r7,0(sp)
   54bc4:	da000115 	stw	r8,4(sp)
   54bc8:	da400215 	stw	r9,8(sp)
   54bcc:	004c8440 	call	4c844 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54bd0:	9ca5883a 	add	r18,r19,r18
   54bd4:	da400217 	ldw	r9,8(sp)
   54bd8:	da000117 	ldw	r8,4(sp)
   54bdc:	d9c00017 	ldw	r7,0(sp)
   54be0:	9481ffcc 	andi	r18,r18,2047

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
   54be4:	a4e9883a 	add	r20,r20,r19
      count -= n;
   54be8:	8ce3c83a 	sub	r17,r17,r19

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54bec:	84800c15 	stw	r18,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54bf0:	047fe216 	blt	zero,r17,54b7c <__alt_data_end+0xfffe2b7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54bf4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54bf8:	1206703a 	and	r3,r2,r8
   54bfc:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54c00:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54c04:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54c08:	18c00094 	ori	r3,r3,2
   54c0c:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54c10:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54c14:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   54c18:	04400216 	blt	zero,r17,54c24 <altera_avalon_jtag_uart_write+0x100>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54c1c:	a580091e 	bne	r20,r22,54c44 <altera_avalon_jtag_uart_write+0x120>
   54c20:	00000a06 	br	54c4c <altera_avalon_jtag_uart_write+0x128>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   54c24:	483ffd1e 	bne	r9,zero,54c1c <__alt_data_end+0xfffe2c1c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   54c28:	80c00d17 	ldw	r3,52(r16)
   54c2c:	80800917 	ldw	r2,36(r16)
   54c30:	a8c0021e 	bne	r21,r3,54c3c <altera_avalon_jtag_uart_write+0x118>
   54c34:	80c00117 	ldw	r3,4(r16)
   54c38:	10fffb36 	bltu	r2,r3,54c28 <__alt_data_end+0xfffe2c28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   54c3c:	103fec26 	beq	r2,zero,54bf0 <__alt_data_end+0xfffe2bf0>
   54c40:	003ff606 	br	54c1c <__alt_data_end+0xfffe2c1c>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   54c44:	a585c83a 	sub	r2,r20,r22
   54c48:	00000506 	br	54c60 <altera_avalon_jtag_uart_write+0x13c>
  else if (flags & O_NONBLOCK)
   54c4c:	bdd0000c 	andi	r23,r23,16384
   54c50:	b8000226 	beq	r23,zero,54c5c <altera_avalon_jtag_uart_write+0x138>
    return -EWOULDBLOCK;
   54c54:	00bffd44 	movi	r2,-11
   54c58:	00000106 	br	54c60 <altera_avalon_jtag_uart_write+0x13c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54c5c:	00bffec4 	movi	r2,-5
}
   54c60:	dfc00c17 	ldw	ra,48(sp)
   54c64:	df000b17 	ldw	fp,44(sp)
   54c68:	ddc00a17 	ldw	r23,40(sp)
   54c6c:	dd800917 	ldw	r22,36(sp)
   54c70:	dd400817 	ldw	r21,32(sp)
   54c74:	dd000717 	ldw	r20,28(sp)
   54c78:	dcc00617 	ldw	r19,24(sp)
   54c7c:	dc800517 	ldw	r18,20(sp)
   54c80:	dc400417 	ldw	r17,16(sp)
   54c84:	dc000317 	ldw	r16,12(sp)
   54c88:	dec00d04 	addi	sp,sp,52
   54c8c:	f800283a 	ret

00054c90 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   54c90:	008001b4 	movhi	r2,6
   54c94:	10a62004 	addi	r2,r2,-26496
   54c98:	10800017 	ldw	r2,0(r2)
   54c9c:	10001d26 	beq	r2,zero,54d14 <alt_alarm_start+0x84>
  {
    if (alarm)
   54ca0:	20001e26 	beq	r4,zero,54d1c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   54ca4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   54ca8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54cac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54cb0:	00bfff84 	movi	r2,-2
   54cb4:	1884703a 	and	r2,r3,r2
   54cb8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   54cbc:	008001b4 	movhi	r2,6
   54cc0:	10a61f04 	addi	r2,r2,-26500
   54cc4:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   54cc8:	11800044 	addi	r6,r2,1
   54ccc:	314b883a 	add	r5,r6,r5
   54cd0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   54cd4:	2880032e 	bgeu	r5,r2,54ce4 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
   54cd8:	00800044 	movi	r2,1
   54cdc:	20800405 	stb	r2,16(r4)
   54ce0:	00000106 	br	54ce8 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
   54ce4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54ce8:	00800174 	movhi	r2,5
   54cec:	109f6204 	addi	r2,r2,32136
  entry->next     = list->next;
   54cf0:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54cf4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   54cf8:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   54cfc:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
   54d00:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   54d04:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54d08:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   54d0c:	0005883a 	mov	r2,zero
   54d10:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   54d14:	00bfde84 	movi	r2,-134
   54d18:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   54d1c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   54d20:	f800283a 	ret

00054d24 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   54d24:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   54d28:	01420034 	movhi	r5,2048
   54d2c:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   54d30:	dc000015 	stw	r16,0(sp)
   54d34:	dfc00115 	stw	ra,4(sp)
   54d38:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   54d3c:	00457d40 	call	457d4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   54d40:	10000e26 	beq	r2,zero,54d7c <alt_busy_sleep+0x58>
   54d44:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   54d48:	01600034 	movhi	r5,32768
   54d4c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   54d50:	013e0034 	movhi	r4,63488
   54d54:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   54d58:	297fffc4 	addi	r5,r5,-1
   54d5c:	283ffe1e 	bne	r5,zero,54d58 <__alt_data_end+0xfffe2d58>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   54d60:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   54d64:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   54d68:	18bffb16 	blt	r3,r2,54d58 <__alt_data_end+0xfffe2d58>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54d6c:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   54d70:	843fffc4 	addi	r16,r16,-1
   54d74:	803ffe1e 	bne	r16,zero,54d70 <__alt_data_end+0xfffe2d70>
   54d78:	00000306 	br	54d88 <alt_busy_sleep+0x64>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54d7c:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   54d80:	843fffc4 	addi	r16,r16,-1
   54d84:	043ffe16 	blt	zero,r16,54d80 <__alt_data_end+0xfffe2d80>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   54d88:	0005883a 	mov	r2,zero
   54d8c:	dfc00117 	ldw	ra,4(sp)
   54d90:	dc000017 	ldw	r16,0(sp)
   54d94:	dec00204 	addi	sp,sp,8
   54d98:	f800283a 	ret

00054d9c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   54d9c:	0005883a 	mov	r2,zero
   54da0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   54da4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   54da8:	10800804 	addi	r2,r2,32
   54dac:	10fffd1e 	bne	r2,r3,54da4 <__alt_data_end+0xfffe2da4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   54db0:	f800283a 	ret

00054db4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   54db4:	deffff04 	addi	sp,sp,-4
   54db8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   54dbc:	20000226 	beq	r4,zero,54dc8 <alt_dev_llist_insert+0x14>
   54dc0:	20800217 	ldw	r2,8(r4)
   54dc4:	10000c1e 	bne	r2,zero,54df8 <alt_dev_llist_insert+0x44>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   54dc8:	00800174 	movhi	r2,5
   54dcc:	109f5f04 	addi	r2,r2,32124
   54dd0:	10800017 	ldw	r2,0(r2)
   54dd4:	10000226 	beq	r2,zero,54de0 <alt_dev_llist_insert+0x2c>
   54dd8:	103ee83a 	callr	r2
   54ddc:	00000206 	br	54de8 <alt_dev_llist_insert+0x34>
   54de0:	008001b4 	movhi	r2,6
   54de4:	10a61a04 	addi	r2,r2,-26520
  {
    ALT_ERRNO = EINVAL;
   54de8:	00c00584 	movi	r3,22
   54dec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   54df0:	00bffa84 	movi	r2,-22
   54df4:	00000706 	br	54e14 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   54df8:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54dfc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   54e00:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   54e04:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
   54e08:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   54e0c:	11000115 	stw	r4,4(r2)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   54e10:	0005883a 	mov	r2,zero
}
   54e14:	dfc00017 	ldw	ra,0(sp)
   54e18:	dec00104 	addi	sp,sp,4
   54e1c:	f800283a 	ret

00054e20 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   54e20:	0009883a 	mov	r4,zero
   54e24:	01440004 	movi	r5,4096
   54e28:	00553e81 	jmpi	553e8 <alt_icache_flush>

00054e2c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   54e2c:	0054ec81 	jmpi	54ec8 <alt_iic_isr_register>

00054e30 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54e30:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54e34:	00bfff84 	movi	r2,-2
   54e38:	1884703a 	and	r2,r3,r2
   54e3c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   54e40:	008001b4 	movhi	r2,6
   54e44:	10a61e04 	addi	r2,r2,-26504
   54e48:	01800044 	movi	r6,1
   54e4c:	11000017 	ldw	r4,0(r2)
   54e50:	314a983a 	sll	r5,r6,r5
   54e54:	290ab03a 	or	r5,r5,r4
   54e58:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54e5c:	10800017 	ldw	r2,0(r2)
   54e60:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54e64:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   54e68:	0005883a 	mov	r2,zero
   54e6c:	f800283a 	ret

00054e70 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54e70:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54e74:	00bfff84 	movi	r2,-2
   54e78:	1884703a 	and	r2,r3,r2
   54e7c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   54e80:	008001b4 	movhi	r2,6
   54e84:	10a61e04 	addi	r2,r2,-26504
   54e88:	01bfff84 	movi	r6,-2
   54e8c:	11000017 	ldw	r4,0(r2)
   54e90:	314a183a 	rol	r5,r6,r5
   54e94:	290a703a 	and	r5,r5,r4
   54e98:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54e9c:	10800017 	ldw	r2,0(r2)
   54ea0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54ea4:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   54ea8:	0005883a 	mov	r2,zero
   54eac:	f800283a 	ret

00054eb0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   54eb0:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   54eb4:	00c00044 	movi	r3,1
   54eb8:	194a983a 	sll	r5,r3,r5
   54ebc:	1144703a 	and	r2,r2,r5
}
   54ec0:	1004c03a 	cmpne	r2,r2,zero
   54ec4:	f800283a 	ret

00054ec8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54ec8:	defffe04 	addi	sp,sp,-8
   54ecc:	dfc00115 	stw	ra,4(sp)
   54ed0:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54ed4:	00c007c4 	movi	r3,31
   54ed8:	19401016 	blt	r3,r5,54f1c <alt_iic_isr_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54edc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54ee0:	00ffff84 	movi	r3,-2
   54ee4:	80c6703a 	and	r3,r16,r3
   54ee8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   54eec:	280490fa 	slli	r2,r5,3
   54ef0:	00c001b4 	movhi	r3,6
   54ef4:	18e66b04 	addi	r3,r3,-26196
   54ef8:	1885883a 	add	r2,r3,r2
   54efc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   54f00:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   54f04:	30000226 	beq	r6,zero,54f10 <alt_iic_isr_register+0x48>
   54f08:	0054e300 	call	54e30 <alt_ic_irq_enable>
   54f0c:	00000106 	br	54f14 <alt_iic_isr_register+0x4c>
   54f10:	0054e700 	call	54e70 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54f14:	8001703a 	wrctl	status,r16
   54f18:	00000106 	br	54f20 <alt_iic_isr_register+0x58>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   54f1c:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }

  return rc; 
}
   54f20:	dfc00117 	ldw	ra,4(sp)
   54f24:	dc000017 	ldw	r16,0(sp)
   54f28:	dec00204 	addi	sp,sp,8
   54f2c:	f800283a 	ret

00054f30 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   54f30:	defffe04 	addi	sp,sp,-8
   54f34:	dc000015 	stw	r16,0(sp)
   54f38:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
   54f3c:	2809883a 	mov	r4,r5
   54f40:	300b883a 	mov	r5,r6
   54f44:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   54f48:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
   54f4c:	00550180 	call	55018 <open>

  if (old >= 0)
   54f50:	10000f16 	blt	r2,zero,54f90 <alt_open_fd.constprop.0+0x60>
  {
    fd->dev      = alt_fd_list[old].dev;
   54f54:	10c00324 	muli	r3,r2,12
   54f58:	01000174 	movhi	r4,5
   54f5c:	211ad004 	addi	r4,r4,27456
   54f60:	20c7883a 	add	r3,r4,r3
   54f64:	19000017 	ldw	r4,0(r3)
   54f68:	81000015 	stw	r4,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   54f6c:	19000117 	ldw	r4,4(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   54f70:	18c00217 	ldw	r3,8(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
   54f74:	81000115 	stw	r4,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   54f78:	1009883a 	mov	r4,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
   54f7c:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
  }
} 
   54f80:	dfc00117 	ldw	ra,4(sp)
   54f84:	dc000017 	ldw	r16,0(sp)
   54f88:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   54f8c:	00545c41 	jmpi	545c4 <alt_release_fd>
  }
} 
   54f90:	dfc00117 	ldw	ra,4(sp)
   54f94:	dc000017 	ldw	r16,0(sp)
   54f98:	dec00204 	addi	sp,sp,8
   54f9c:	f800283a 	ret

00054fa0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54fa0:	defffb04 	addi	sp,sp,-20
   54fa4:	2005883a 	mov	r2,r4
   54fa8:	dc400115 	stw	r17,4(sp)
   54fac:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54fb0:	04400044 	movi	r17,1
   54fb4:	04000174 	movhi	r16,5
   54fb8:	841ad304 	addi	r16,r16,27468
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54fbc:	dcc00315 	stw	r19,12(sp)
   54fc0:	dc800215 	stw	r18,8(sp)
   54fc4:	2827883a 	mov	r19,r5
   54fc8:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54fcc:	100b883a 	mov	r5,r2
   54fd0:	8009883a 	mov	r4,r16
   54fd4:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54fd8:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54fdc:	0054f300 	call	54f30 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   54fe0:	813ffd04 	addi	r4,r16,-12
   54fe4:	980b883a 	mov	r5,r19
   54fe8:	000d883a 	mov	r6,zero
   54fec:	0054f300 	call	54f30 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54ff0:	81000304 	addi	r4,r16,12
   54ff4:	900b883a 	mov	r5,r18
   54ff8:	880d883a 	mov	r6,r17
}  
   54ffc:	dfc00417 	ldw	ra,16(sp)
   55000:	dcc00317 	ldw	r19,12(sp)
   55004:	dc800217 	ldw	r18,8(sp)
   55008:	dc400117 	ldw	r17,4(sp)
   5500c:	dc000017 	ldw	r16,0(sp)
   55010:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   55014:	0054f301 	jmpi	54f30 <alt_open_fd.constprop.0>

00055018 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   55018:	defff904 	addi	sp,sp,-28
   5501c:	dc800215 	stw	r18,8(sp)
   55020:	2825883a 	mov	r18,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   55024:	01400174 	movhi	r5,5
   55028:	295f5b04 	addi	r5,r5,32108
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   5502c:	dd400515 	stw	r21,20(sp)
   55030:	dd000415 	stw	r20,16(sp)
   55034:	dcc00315 	stw	r19,12(sp)
   55038:	dc400115 	stw	r17,4(sp)
   5503c:	dfc00615 	stw	ra,24(sp)
   55040:	dc000015 	stw	r16,0(sp)
   55044:	2027883a 	mov	r19,r4
   55048:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   5504c:	00552840 	call	55284 <alt_find_dev>
   55050:	1023883a 	mov	r17,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
   55054:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   55058:	1000051e 	bne	r2,zero,55070 <open+0x58>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   5505c:	9809883a 	mov	r4,r19
   55060:	00552f40 	call	552f4 <alt_find_file>
   55064:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   55068:	10003826 	beq	r2,zero,5514c <open+0x134>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
   5506c:	05400044 	movi	r21,1
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   55070:	8809883a 	mov	r4,r17
   55074:	005539c0 	call	5539c <alt_get_fd>
   55078:	1021883a 	mov	r16,r2
   5507c:	10003616 	blt	r2,zero,55158 <open+0x140>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   55080:	11000324 	muli	r4,r2,12
   55084:	01400174 	movhi	r5,5
   55088:	295ad004 	addi	r5,r5,27456
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   5508c:	00900034 	movhi	r2,16384
   55090:	10bfffc4 	addi	r2,r2,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   55094:	2149883a 	add	r4,r4,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   55098:	9084703a 	and	r2,r18,r2
   5509c:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   550a0:	a8000326 	beq	r21,zero,550b0 <open+0x98>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   550a4:	88800317 	ldw	r2,12(r17)
   550a8:	1000141e 	bne	r2,zero,550fc <open+0xe4>
   550ac:	00002e06 	br	55168 <open+0x150>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   550b0:	10900034 	orhi	r2,r2,16384
   550b4:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   550b8:	00800174 	movhi	r2,5
   550bc:	109f5a04 	addi	r2,r2,32104
   550c0:	11800017 	ldw	r6,0(r2)
   550c4:	28c00204 	addi	r3,r5,8
   550c8:	0005883a 	mov	r2,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   550cc:	1a3ffe17 	ldw	r8,-8(r3)
   550d0:	21c00017 	ldw	r7,0(r4)
   550d4:	41c0051e 	bne	r8,r7,550ec <open+0xd4>
   550d8:	19c00017 	ldw	r7,0(r3)
   550dc:	3800030e 	bge	r7,zero,550ec <open+0xd4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   550e0:	11c00324 	muli	r7,r2,12
   550e4:	29cf883a 	add	r7,r5,r7
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   550e8:	21c01d1e 	bne	r4,r7,55160 <open+0x148>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   550ec:	10800044 	addi	r2,r2,1
   550f0:	18c00304 	addi	r3,r3,12
   550f4:	30bff52e 	bgeu	r6,r2,550cc <__alt_data_end+0xfffe30cc>
   550f8:	003fea06 	br	550a4 <__alt_data_end+0xfffe30a4>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   550fc:	980b883a 	mov	r5,r19
   55100:	900d883a 	mov	r6,r18
   55104:	a00f883a 	mov	r7,r20
   55108:	103ee83a 	callr	r2
   5510c:	1023883a 	mov	r17,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   55110:	1000150e 	bge	r2,zero,55168 <open+0x150>
  {
    alt_release_fd (index);  
   55114:	8009883a 	mov	r4,r16
   55118:	00545c40 	call	545c4 <alt_release_fd>
   5511c:	00800174 	movhi	r2,5
   55120:	109f5f04 	addi	r2,r2,32124
   55124:	10800017 	ldw	r2,0(r2)
   55128:	10000226 	beq	r2,zero,55134 <open+0x11c>
   5512c:	103ee83a 	callr	r2
   55130:	00000206 	br	5513c <open+0x124>
   55134:	008001b4 	movhi	r2,6
   55138:	10a61a04 	addi	r2,r2,-26520
    ALT_ERRNO = -status;
   5513c:	0463c83a 	sub	r17,zero,r17
   55140:	14400015 	stw	r17,0(r2)
    return -1;
   55144:	043fffc4 	movi	r16,-1
   55148:	00000706 	br	55168 <open+0x150>
      }
    }
  }
  else
  {
    status = -ENODEV;
   5514c:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   55150:	043fffc4 	movi	r16,-1
   55154:	003fef06 	br	55114 <__alt_data_end+0xfffe3114>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   55158:	1023883a 	mov	r17,r2
   5515c:	003fed06 	br	55114 <__alt_data_end+0xfffe3114>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   55160:	047ffcc4 	movi	r17,-13
   55164:	003feb06 	br	55114 <__alt_data_end+0xfffe3114>
  }
  
  /* return the reference upon success */

  return index;
}
   55168:	8005883a 	mov	r2,r16
   5516c:	dfc00617 	ldw	ra,24(sp)
   55170:	dd400517 	ldw	r21,20(sp)
   55174:	dd000417 	ldw	r20,16(sp)
   55178:	dcc00317 	ldw	r19,12(sp)
   5517c:	dc800217 	ldw	r18,8(sp)
   55180:	dc400117 	ldw	r17,4(sp)
   55184:	dc000017 	ldw	r16,0(sp)
   55188:	dec00704 	addi	sp,sp,28
   5518c:	f800283a 	ret

00055190 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   55190:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55194:	00ffff84 	movi	r3,-2
   55198:	10c6703a 	and	r3,r2,r3
   5519c:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   551a0:	20c00017 	ldw	r3,0(r4)
   551a4:	21400117 	ldw	r5,4(r4)
   551a8:	19400115 	stw	r5,4(r3)
  entry->previous->next = entry->next;
   551ac:	21400117 	ldw	r5,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   551b0:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
   551b4:	28c00015 	stw	r3,0(r5)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
   551b8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   551bc:	1001703a 	wrctl	status,r2
   551c0:	f800283a 	ret

000551c4 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   551c4:	d0a6cd17 	ldw	r2,-25804(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   551c8:	defffb04 	addi	sp,sp,-20
   551cc:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   551d0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   551d4:	dc400115 	stw	r17,4(sp)
   551d8:	dc000015 	stw	r16,0(sp)
   551dc:	dfc00415 	stw	ra,16(sp)
   551e0:	dcc00315 	stw	r19,12(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   551e4:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   551e8:	d0a6cd15 	stw	r2,-25804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   551ec:	d4601004 	addi	r17,gp,-32704
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   551f0:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   551f4:	00001906 	br	5525c <alt_tick+0x98>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   551f8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   551fc:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   55200:	10000326 	beq	r2,zero,55210 <alt_tick+0x4c>
   55204:	d0a6cd17 	ldw	r2,-25804(gp)
   55208:	1000011e 	bne	r2,zero,55210 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   5520c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   55210:	d0e6cd17 	ldw	r3,-25804(gp)
   55214:	80800217 	ldw	r2,8(r16)
   55218:	18800f36 	bltu	r3,r2,55258 <alt_tick+0x94>
   5521c:	80800403 	ldbu	r2,16(r16)
   55220:	10000d1e 	bne	r2,zero,55258 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   55224:	80800317 	ldw	r2,12(r16)
   55228:	81000517 	ldw	r4,20(r16)
   5522c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   55230:	1000031e 	bne	r2,zero,55240 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   55234:	8009883a 	mov	r4,r16
   55238:	00551900 	call	55190 <alt_alarm_stop>
   5523c:	00000606 	br	55258 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   55240:	80c00217 	ldw	r3,8(r16)
   55244:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   55248:	d0e6cd17 	ldw	r3,-25804(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   5524c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   55250:	10c0012e 	bgeu	r2,r3,55258 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   55254:	84800405 	stb	r18,16(r16)
   55258:	9821883a 	mov	r16,r19

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5525c:	847fe61e 	bne	r16,r17,551f8 <__alt_data_end+0xfffe31f8>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   55260:	dfc00417 	ldw	ra,16(sp)
   55264:	dcc00317 	ldw	r19,12(sp)
   55268:	dc800217 	ldw	r18,8(sp)
   5526c:	dc400117 	ldw	r17,4(sp)
   55270:	dc000017 	ldw	r16,0(sp)
   55274:	dec00504 	addi	sp,sp,20
   55278:	f800283a 	ret

0005527c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   5527c:	000170fa 	wrctl	ienable,zero
   55280:	f800283a 	ret

00055284 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   55284:	defffb04 	addi	sp,sp,-20
   55288:	dcc00315 	stw	r19,12(sp)
   5528c:	dc800215 	stw	r18,8(sp)
   55290:	dc400115 	stw	r17,4(sp)
   55294:	dc000015 	stw	r16,0(sp)
   55298:	dfc00415 	stw	ra,16(sp)
   5529c:	2025883a 	mov	r18,r4
   552a0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   552a4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   552a8:	0045acc0 	call	45acc <strlen>
   552ac:	14c00044 	addi	r19,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   552b0:	00000606 	br	552cc <alt_find_dev+0x48>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   552b4:	81000217 	ldw	r4,8(r16)
   552b8:	900b883a 	mov	r5,r18
   552bc:	980d883a 	mov	r6,r19
   552c0:	00554580 	call	55458 <memcmp>
   552c4:	10000326 	beq	r2,zero,552d4 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   552c8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   552cc:	847ff91e 	bne	r16,r17,552b4 <__alt_data_end+0xfffe32b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   552d0:	0021883a 	mov	r16,zero
}
   552d4:	8005883a 	mov	r2,r16
   552d8:	dfc00417 	ldw	ra,16(sp)
   552dc:	dcc00317 	ldw	r19,12(sp)
   552e0:	dc800217 	ldw	r18,8(sp)
   552e4:	dc400117 	ldw	r17,4(sp)
   552e8:	dc000017 	ldw	r16,0(sp)
   552ec:	dec00504 	addi	sp,sp,20
   552f0:	f800283a 	ret

000552f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   552f4:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   552f8:	00800174 	movhi	r2,5
   552fc:	109f5d04 	addi	r2,r2,32116
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   55300:	dd000415 	stw	r20,16(sp)
   55304:	dcc00315 	stw	r19,12(sp)
   55308:	dc800215 	stw	r18,8(sp)
   5530c:	dc000015 	stw	r16,0(sp)
   55310:	dfc00515 	stw	ra,20(sp)
   55314:	dc400115 	stw	r17,4(sp)
   55318:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   5531c:	14000017 	ldw	r16,0(r2)
   55320:	1029883a 	mov	r20,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   55324:	04c00bc4 	movi	r19,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55328:	00001106 	br	55370 <alt_find_file+0x7c>
  {
    len = strlen(next->name);
   5532c:	84400217 	ldw	r17,8(r16)
   55330:	8809883a 	mov	r4,r17
   55334:	0045acc0 	call	45acc <strlen>
    
    if (next->name[len-1] == '/')
   55338:	8887883a 	add	r3,r17,r2
   5533c:	18ffffc7 	ldb	r3,-1(r3)
   55340:	1cc0011e 	bne	r3,r19,55348 <alt_find_file+0x54>
    {
      len -= 1;
   55344:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55348:	9087883a 	add	r3,r18,r2
   5534c:	18c00007 	ldb	r3,0(r3)
   55350:	1cc00126 	beq	r3,r19,55358 <alt_find_file+0x64>
   55354:	1800051e 	bne	r3,zero,5536c <alt_find_file+0x78>
        !memcmp (next->name, name, len))
   55358:	8809883a 	mov	r4,r17
   5535c:	900b883a 	mov	r5,r18
   55360:	100d883a 	mov	r6,r2
   55364:	00554580 	call	55458 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55368:	10000326 	beq	r2,zero,55378 <alt_find_file+0x84>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   5536c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55370:	853fee1e 	bne	r16,r20,5532c <__alt_data_end+0xfffe332c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   55374:	0021883a 	mov	r16,zero
}
   55378:	8005883a 	mov	r2,r16
   5537c:	dfc00517 	ldw	ra,20(sp)
   55380:	dd000417 	ldw	r20,16(sp)
   55384:	dcc00317 	ldw	r19,12(sp)
   55388:	dc800217 	ldw	r18,8(sp)
   5538c:	dc400117 	ldw	r17,4(sp)
   55390:	dc000017 	ldw	r16,0(sp)
   55394:	dec00604 	addi	sp,sp,24
   55398:	f800283a 	ret

0005539c <alt_get_fd>:
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5539c:	0005883a 	mov	r2,zero
 * The return value is the index of the file descriptor structure (i.e. 
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
   553a0:	01800174 	movhi	r6,5
   553a4:	319ad004 	addi	r6,r6,27456
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   553a8:	01400804 	movi	r5,32
 * The return value is the index of the file descriptor structure (i.e. 
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
   553ac:	10c00324 	muli	r3,r2,12
   553b0:	1987883a 	add	r3,r3,r6
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   553b4:	19c00017 	ldw	r7,0(r3)
   553b8:	3800071e 	bne	r7,zero,553d8 <alt_get_fd+0x3c>
    {
      alt_fd_list[i].dev = dev;
   553bc:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
   553c0:	00c00174 	movhi	r3,5
   553c4:	18df5a04 	addi	r3,r3,32104
   553c8:	19000017 	ldw	r4,0(r3)
   553cc:	2080050e 	bge	r4,r2,553e4 <alt_get_fd+0x48>
      {
        alt_max_fd = i;
   553d0:	18800015 	stw	r2,0(r3)
   553d4:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   553d8:	10800044 	addi	r2,r2,1
   553dc:	117ff31e 	bne	r2,r5,553ac <__alt_data_end+0xfffe33ac>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   553e0:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   553e4:	f800283a 	ret

000553e8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   553e8:	00840004 	movi	r2,4096
   553ec:	1140012e 	bgeu	r2,r5,553f4 <alt_icache_flush+0xc>
   553f0:	100b883a 	mov	r5,r2
   553f4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   553f8:	2005883a 	mov	r2,r4
   553fc:	00000206 	br	55408 <alt_icache_flush+0x20>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   55400:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   55404:	10800804 	addi	r2,r2,32
   55408:	117ffd36 	bltu	r2,r5,55400 <__alt_data_end+0xfffe3400>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   5540c:	210007cc 	andi	r4,r4,31
   55410:	20000126 	beq	r4,zero,55418 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   55414:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   55418:	0000203a 	flushp
   5541c:	f800283a 	ret

00055420 <exit>:
   55420:	defffe04 	addi	sp,sp,-8
   55424:	000b883a 	mov	r5,zero
   55428:	dc000015 	stw	r16,0(sp)
   5542c:	dfc00115 	stw	ra,4(sp)
   55430:	2021883a 	mov	r16,r4
   55434:	00554d40 	call	554d4 <__call_exitprocs>
   55438:	00800174 	movhi	r2,5
   5543c:	109f5404 	addi	r2,r2,32080
   55440:	11000017 	ldw	r4,0(r2)
   55444:	20800f17 	ldw	r2,60(r4)
   55448:	10000126 	beq	r2,zero,55450 <exit+0x30>
   5544c:	103ee83a 	callr	r2
   55450:	8009883a 	mov	r4,r16
   55454:	00556740 	call	55674 <_exit>

00055458 <memcmp>:
   55458:	01c000c4 	movi	r7,3
   5545c:	3980192e 	bgeu	r7,r6,554c4 <memcmp+0x6c>
   55460:	2904b03a 	or	r2,r5,r4
   55464:	11c4703a 	and	r2,r2,r7
   55468:	10000f26 	beq	r2,zero,554a8 <memcmp+0x50>
   5546c:	20c00003 	ldbu	r3,0(r4)
   55470:	28800003 	ldbu	r2,0(r5)
   55474:	1880151e 	bne	r3,r2,554cc <memcmp+0x74>
   55478:	31bfff84 	addi	r6,r6,-2
   5547c:	01ffffc4 	movi	r7,-1
   55480:	00000406 	br	55494 <memcmp+0x3c>
   55484:	20c00003 	ldbu	r3,0(r4)
   55488:	28800003 	ldbu	r2,0(r5)
   5548c:	31bfffc4 	addi	r6,r6,-1
   55490:	18800e1e 	bne	r3,r2,554cc <memcmp+0x74>
   55494:	21000044 	addi	r4,r4,1
   55498:	29400044 	addi	r5,r5,1
   5549c:	31fff91e 	bne	r6,r7,55484 <__alt_data_end+0xfffe3484>
   554a0:	0005883a 	mov	r2,zero
   554a4:	f800283a 	ret
   554a8:	20c00017 	ldw	r3,0(r4)
   554ac:	28800017 	ldw	r2,0(r5)
   554b0:	1880041e 	bne	r3,r2,554c4 <memcmp+0x6c>
   554b4:	31bfff04 	addi	r6,r6,-4
   554b8:	21000104 	addi	r4,r4,4
   554bc:	29400104 	addi	r5,r5,4
   554c0:	39bff936 	bltu	r7,r6,554a8 <__alt_data_end+0xfffe34a8>
   554c4:	303fe91e 	bne	r6,zero,5546c <__alt_data_end+0xfffe346c>
   554c8:	003ff506 	br	554a0 <__alt_data_end+0xfffe34a0>
   554cc:	1885c83a 	sub	r2,r3,r2
   554d0:	f800283a 	ret

000554d4 <__call_exitprocs>:
   554d4:	00800174 	movhi	r2,5
   554d8:	109f5404 	addi	r2,r2,32080
   554dc:	10800017 	ldw	r2,0(r2)
   554e0:	defff304 	addi	sp,sp,-52
   554e4:	df000b15 	stw	fp,44(sp)
   554e8:	d8800015 	stw	r2,0(sp)
   554ec:	10805204 	addi	r2,r2,328
   554f0:	dd400815 	stw	r21,32(sp)
   554f4:	dfc00c15 	stw	ra,48(sp)
   554f8:	ddc00a15 	stw	r23,40(sp)
   554fc:	dd800915 	stw	r22,36(sp)
   55500:	dd000715 	stw	r20,28(sp)
   55504:	dcc00615 	stw	r19,24(sp)
   55508:	dc800515 	stw	r18,20(sp)
   5550c:	dc400415 	stw	r17,16(sp)
   55510:	dc000315 	stw	r16,12(sp)
   55514:	d9000115 	stw	r4,4(sp)
   55518:	2839883a 	mov	fp,r5
   5551c:	d8800215 	stw	r2,8(sp)
   55520:	057fffc4 	movi	r21,-1
   55524:	d8800017 	ldw	r2,0(sp)
   55528:	ddc00217 	ldw	r23,8(sp)
   5552c:	14805217 	ldw	r18,328(r2)
   55530:	90001726 	beq	r18,zero,55590 <__call_exitprocs+0xbc>
   55534:	94400117 	ldw	r17,4(r18)
   55538:	8c3fffc4 	addi	r16,r17,-1
   5553c:	80001116 	blt	r16,zero,55584 <__call_exitprocs+0xb0>
   55540:	8c400044 	addi	r17,r17,1
   55544:	8427883a 	add	r19,r16,r16
   55548:	8c63883a 	add	r17,r17,r17
   5554c:	95802204 	addi	r22,r18,136
   55550:	9ce7883a 	add	r19,r19,r19
   55554:	8c63883a 	add	r17,r17,r17
   55558:	b4e7883a 	add	r19,r22,r19
   5555c:	9463883a 	add	r17,r18,r17
   55560:	e0001726 	beq	fp,zero,555c0 <__call_exitprocs+0xec>
   55564:	8c87c83a 	sub	r3,r17,r18
   55568:	b0c7883a 	add	r3,r22,r3
   5556c:	18c01e17 	ldw	r3,120(r3)
   55570:	1f001326 	beq	r3,fp,555c0 <__call_exitprocs+0xec>
   55574:	843fffc4 	addi	r16,r16,-1
   55578:	9cffff04 	addi	r19,r19,-4
   5557c:	8c7fff04 	addi	r17,r17,-4
   55580:	857ff71e 	bne	r16,r21,55560 <__alt_data_end+0xfffe3560>
   55584:	00800034 	movhi	r2,0
   55588:	10800004 	addi	r2,r2,0
   5558c:	10002a1e 	bne	r2,zero,55638 <__call_exitprocs+0x164>
   55590:	dfc00c17 	ldw	ra,48(sp)
   55594:	df000b17 	ldw	fp,44(sp)
   55598:	ddc00a17 	ldw	r23,40(sp)
   5559c:	dd800917 	ldw	r22,36(sp)
   555a0:	dd400817 	ldw	r21,32(sp)
   555a4:	dd000717 	ldw	r20,28(sp)
   555a8:	dcc00617 	ldw	r19,24(sp)
   555ac:	dc800517 	ldw	r18,20(sp)
   555b0:	dc400417 	ldw	r17,16(sp)
   555b4:	dc000317 	ldw	r16,12(sp)
   555b8:	dec00d04 	addi	sp,sp,52
   555bc:	f800283a 	ret
   555c0:	91000117 	ldw	r4,4(r18)
   555c4:	88c00017 	ldw	r3,0(r17)
   555c8:	213fffc4 	addi	r4,r4,-1
   555cc:	24001526 	beq	r4,r16,55624 <__call_exitprocs+0x150>
   555d0:	88000015 	stw	zero,0(r17)
   555d4:	183fe726 	beq	r3,zero,55574 <__alt_data_end+0xfffe3574>
   555d8:	00800044 	movi	r2,1
   555dc:	1408983a 	sll	r4,r2,r16
   555e0:	91406217 	ldw	r5,392(r18)
   555e4:	95000117 	ldw	r20,4(r18)
   555e8:	214a703a 	and	r5,r4,r5
   555ec:	28000b26 	beq	r5,zero,5561c <__call_exitprocs+0x148>
   555f0:	91406317 	ldw	r5,396(r18)
   555f4:	2148703a 	and	r4,r4,r5
   555f8:	20000c1e 	bne	r4,zero,5562c <__call_exitprocs+0x158>
   555fc:	99400017 	ldw	r5,0(r19)
   55600:	d9000117 	ldw	r4,4(sp)
   55604:	183ee83a 	callr	r3
   55608:	90c00117 	ldw	r3,4(r18)
   5560c:	1d3fc51e 	bne	r3,r20,55524 <__alt_data_end+0xfffe3524>
   55610:	b8c00017 	ldw	r3,0(r23)
   55614:	1cbfd726 	beq	r3,r18,55574 <__alt_data_end+0xfffe3574>
   55618:	003fc206 	br	55524 <__alt_data_end+0xfffe3524>
   5561c:	183ee83a 	callr	r3
   55620:	003ff906 	br	55608 <__alt_data_end+0xfffe3608>
   55624:	94000115 	stw	r16,4(r18)
   55628:	003fea06 	br	555d4 <__alt_data_end+0xfffe35d4>
   5562c:	99000017 	ldw	r4,0(r19)
   55630:	183ee83a 	callr	r3
   55634:	003ff406 	br	55608 <__alt_data_end+0xfffe3608>
   55638:	90c00117 	ldw	r3,4(r18)
   5563c:	1800071e 	bne	r3,zero,5565c <__call_exitprocs+0x188>
   55640:	90c00017 	ldw	r3,0(r18)
   55644:	18000926 	beq	r3,zero,5566c <__call_exitprocs+0x198>
   55648:	9009883a 	mov	r4,r18
   5564c:	b8c00015 	stw	r3,0(r23)
   55650:	00000000 	call	0 <__reset-0x40000>
   55654:	bc800017 	ldw	r18,0(r23)
   55658:	003fb506 	br	55530 <__alt_data_end+0xfffe3530>
   5565c:	90c00017 	ldw	r3,0(r18)
   55660:	902f883a 	mov	r23,r18
   55664:	1825883a 	mov	r18,r3
   55668:	003fb106 	br	55530 <__alt_data_end+0xfffe3530>
   5566c:	0007883a 	mov	r3,zero
   55670:	003ffb06 	br	55660 <__alt_data_end+0xfffe3660>

00055674 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   55674:	20000226 	beq	r4,zero,55680 <_exit+0xc>
    ALT_SIM_FAIL();
   55678:	002af070 	cmpltui	zero,zero,43969
   5567c:	00000106 	br	55684 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   55680:	002af0b0 	cmpltui	zero,zero,43970
   55684:	003fff06 	br	55684 <__alt_data_end+0xfffe3684>
