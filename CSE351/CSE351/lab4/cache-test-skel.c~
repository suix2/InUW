/*
Xinyu Sui
CSE 351 - Autumn 2015
Lab 4 - Mystery Caches

Mystery Cache Geometries:
mystery0:
    block size = 64
    cache size = 262144
    associativity = 1
mystery1:
    block size = 8
    cache size = 16384
    associativity = 4
mystery2:
    block size = 16
    cache size = 65536
    associativity = 16
mystery3:
    block size = 
    cache size =
    associativity =
*/

#include <stdlib.h>
#include <stdio.h>

#include "mystery-cache.h"

/*
 * NOTE: When using access_cache() you do not need to provide a "real" memory
 * addresses. You can use any convenient integer value as a memory address.
 * You should not be able to cause a segmentation fault by providing a memory
 * address out of your programs address space as the argument to access_cache.
 */

/*
   Returns the size (in B) of each block in the cache.
*/
int get_block_size(void) {
	/* YOUR CODE GOES HERE */
	int count = 0;
	flush_cache();
	access_cache(0);
	while(access_cache(count))
		count++;
	return count;
}

/*
   Returns the size (in B) of the cache.
*/
int get_cache_size(int block_size) {
	/* YOUR CODE GOES HERE */
	unsigned long count = 0;
	unsigned long i = 0;
	while(1){
		count += block_size;
		flush_cache();
		for(i = 0;i < count;i += block_size){
			access_cache(i);
		}
		if(!access_cache(0))
			return count - block_size;
	}
}

/*
   Returns the associativity of the cache.
*/
int get_cache_assoc(int cache_size) {
	/* YOUR CODE GOES HERE */
	int assoc = 0;
	int i;
	while(1){
		assoc++;
		for(i = 0;i <= assoc;i++)
			access_cache(i * cache_size);
		if(!access_cache(0))
			return assoc;
	}
}

int main(void) {
  int size;
  int assoc;
  int block_size;

  cache_init(0,0);

  block_size=get_block_size();
  size=get_cache_size(block_size);
  assoc=get_cache_assoc(size);

  printf("Cache block size: %d bytes\n", block_size);
  printf("Cache size: %d bytes\n", size);
  printf("Cache associativity: %d\n", assoc);

  return EXIT_SUCCESS;
}
