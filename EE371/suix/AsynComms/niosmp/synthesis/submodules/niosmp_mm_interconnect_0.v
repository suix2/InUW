// niosmp_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.12.06.20:51:25

`timescale 1 ps / 1 ps
module niosmp_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                       //                                     clk_0_clk.clk
		input  wire        jtag_uart_reset_reset_bridge_in_reset_reset,         //         jtag_uart_reset_reset_bridge_in_reset.reset
		input  wire        nios2_processor_reset_n_reset_bridge_in_reset_reset, // nios2_processor_reset_n_reset_bridge_in_reset.reset
		input  wire [19:0] nios2_processor_data_master_address,                 //                   nios2_processor_data_master.address
		output wire        nios2_processor_data_master_waitrequest,             //                                              .waitrequest
		input  wire [3:0]  nios2_processor_data_master_byteenable,              //                                              .byteenable
		input  wire        nios2_processor_data_master_read,                    //                                              .read
		output wire [31:0] nios2_processor_data_master_readdata,                //                                              .readdata
		output wire        nios2_processor_data_master_readdatavalid,           //                                              .readdatavalid
		input  wire        nios2_processor_data_master_write,                   //                                              .write
		input  wire [31:0] nios2_processor_data_master_writedata,               //                                              .writedata
		input  wire        nios2_processor_data_master_debugaccess,             //                                              .debugaccess
		input  wire [19:0] nios2_processor_instruction_master_address,          //            nios2_processor_instruction_master.address
		output wire        nios2_processor_instruction_master_waitrequest,      //                                              .waitrequest
		input  wire        nios2_processor_instruction_master_read,             //                                              .read
		output wire [31:0] nios2_processor_instruction_master_readdata,         //                                              .readdata
		output wire        nios2_processor_instruction_master_readdatavalid,    //                                              .readdatavalid
		output wire [1:0]  address_s1_address,                                  //                                    address_s1.address
		output wire        address_s1_write,                                    //                                              .write
		input  wire [31:0] address_s1_readdata,                                 //                                              .readdata
		output wire [31:0] address_s1_writedata,                                //                                              .writedata
		output wire        address_s1_chipselect,                               //                                              .chipselect
		output wire [1:0]  asoe_s1_address,                                     //                                       asoe_s1.address
		output wire        asoe_s1_write,                                       //                                              .write
		input  wire [31:0] asoe_s1_readdata,                                    //                                              .readdata
		output wire [31:0] asoe_s1_writedata,                                   //                                              .writedata
		output wire        asoe_s1_chipselect,                                  //                                              .chipselect
		output wire [1:0]  chrec_s1_address,                                    //                                      chrec_s1.address
		input  wire [31:0] chrec_s1_readdata,                                   //                                              .readdata
		output wire [1:0]  data_s1_address,                                     //                                       data_s1.address
		output wire        data_s1_write,                                       //                                              .write
		input  wire [31:0] data_s1_readdata,                                    //                                              .readdata
		output wire [31:0] data_s1_writedata,                                   //                                              .writedata
		output wire        data_s1_chipselect,                                  //                                              .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                 //                   jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                   //                                              .write
		output wire        jtag_uart_avalon_jtag_slave_read,                    //                                              .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                //                                              .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,               //                                              .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,             //                                              .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,              //                                              .chipselect
		output wire [1:0]  LEDs_s1_address,                                     //                                       LEDs_s1.address
		output wire        LEDs_s1_write,                                       //                                              .write
		input  wire [31:0] LEDs_s1_readdata,                                    //                                              .readdata
		output wire [31:0] LEDs_s1_writedata,                                   //                                              .writedata
		output wire        LEDs_s1_chipselect,                                  //                                              .chipselect
		output wire [1:0]  load_s1_address,                                     //                                       load_s1.address
		output wire        load_s1_write,                                       //                                              .write
		input  wire [31:0] load_s1_readdata,                                    //                                              .readdata
		output wire [31:0] load_s1_writedata,                                   //                                              .writedata
		output wire        load_s1_chipselect,                                  //                                              .chipselect
		output wire [1:0]  mpdatain_s1_address,                                 //                                   mpdatain_s1.address
		input  wire [31:0] mpdatain_s1_readdata,                                //                                              .readdata
		output wire [1:0]  mpdataout_s1_address,                                //                                  mpdataout_s1.address
		output wire        mpdataout_s1_write,                                  //                                              .write
		input  wire [31:0] mpdataout_s1_readdata,                               //                                              .readdata
		output wire [31:0] mpdataout_s1_writedata,                              //                                              .writedata
		output wire        mpdataout_s1_chipselect,                             //                                              .chipselect
		output wire [8:0]  nios2_processor_jtag_debug_module_address,           //             nios2_processor_jtag_debug_module.address
		output wire        nios2_processor_jtag_debug_module_write,             //                                              .write
		output wire        nios2_processor_jtag_debug_module_read,              //                                              .read
		input  wire [31:0] nios2_processor_jtag_debug_module_readdata,          //                                              .readdata
		output wire [31:0] nios2_processor_jtag_debug_module_writedata,         //                                              .writedata
		output wire [3:0]  nios2_processor_jtag_debug_module_byteenable,        //                                              .byteenable
		input  wire        nios2_processor_jtag_debug_module_waitrequest,       //                                              .waitrequest
		output wire        nios2_processor_jtag_debug_module_debugaccess,       //                                              .debugaccess
		output wire [1:0]  noe_s1_address,                                      //                                        noe_s1.address
		output wire        noe_s1_write,                                        //                                              .write
		input  wire [31:0] noe_s1_readdata,                                     //                                              .readdata
		output wire [31:0] noe_s1_writedata,                                    //                                              .writedata
		output wire        noe_s1_chipselect,                                   //                                              .chipselect
		output wire [15:0] onchip_memory_s1_address,                            //                              onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                              //                                              .write
		input  wire [31:0] onchip_memory_s1_readdata,                           //                                              .readdata
		output wire [31:0] onchip_memory_s1_writedata,                          //                                              .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                         //                                              .byteenable
		output wire        onchip_memory_s1_chipselect,                         //                                              .chipselect
		output wire        onchip_memory_s1_clken,                              //                                              .clken
		output wire [1:0]  rnw_s1_address,                                      //                                        rnw_s1.address
		output wire        rnw_s1_write,                                        //                                              .write
		input  wire [31:0] rnw_s1_readdata,                                     //                                              .readdata
		output wire [31:0] rnw_s1_writedata,                                    //                                              .writedata
		output wire        rnw_s1_chipselect,                                   //                                              .chipselect
		output wire [1:0]  sent_s1_address,                                     //                                       sent_s1.address
		input  wire [31:0] sent_s1_readdata,                                    //                                              .readdata
		output wire [1:0]  testin_s1_address,                                   //                                     testin_s1.address
		input  wire [31:0] testin_s1_readdata                                   //                                              .readdata
	);

	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_processor_instruction_master_agent:av_waitrequest -> nios2_processor_instruction_master_translator:uav_waitrequest
	wire   [2:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_processor_instruction_master_translator:uav_burstcount -> nios2_processor_instruction_master_agent:av_burstcount
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_processor_instruction_master_translator:uav_writedata -> nios2_processor_instruction_master_agent:av_writedata
	wire  [19:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_address;       // nios2_processor_instruction_master_translator:uav_address -> nios2_processor_instruction_master_agent:av_address
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_processor_instruction_master_translator:uav_lock -> nios2_processor_instruction_master_agent:av_lock
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_write;         // nios2_processor_instruction_master_translator:uav_write -> nios2_processor_instruction_master_agent:av_write
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_read;          // nios2_processor_instruction_master_translator:uav_read -> nios2_processor_instruction_master_agent:av_read
	wire  [31:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_processor_instruction_master_agent:av_readdata -> nios2_processor_instruction_master_translator:uav_readdata
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_processor_instruction_master_translator:uav_debugaccess -> nios2_processor_instruction_master_agent:av_debugaccess
	wire   [3:0] nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_processor_instruction_master_translator:uav_byteenable -> nios2_processor_instruction_master_agent:av_byteenable
	wire         nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_processor_instruction_master_agent:av_readdatavalid -> nios2_processor_instruction_master_translator:uav_readdatavalid
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_processor_data_master_agent:av_waitrequest -> nios2_processor_data_master_translator:uav_waitrequest
	wire   [2:0] nios2_processor_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_processor_data_master_translator:uav_burstcount -> nios2_processor_data_master_agent:av_burstcount
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_writedata;            // nios2_processor_data_master_translator:uav_writedata -> nios2_processor_data_master_agent:av_writedata
	wire  [19:0] nios2_processor_data_master_translator_avalon_universal_master_0_address;              // nios2_processor_data_master_translator:uav_address -> nios2_processor_data_master_agent:av_address
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_lock;                 // nios2_processor_data_master_translator:uav_lock -> nios2_processor_data_master_agent:av_lock
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_write;                // nios2_processor_data_master_translator:uav_write -> nios2_processor_data_master_agent:av_write
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_read;                 // nios2_processor_data_master_translator:uav_read -> nios2_processor_data_master_agent:av_read
	wire  [31:0] nios2_processor_data_master_translator_avalon_universal_master_0_readdata;             // nios2_processor_data_master_agent:av_readdata -> nios2_processor_data_master_translator:uav_readdata
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_processor_data_master_translator:uav_debugaccess -> nios2_processor_data_master_agent:av_debugaccess
	wire   [3:0] nios2_processor_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_processor_data_master_translator:uav_byteenable -> nios2_processor_data_master_agent:av_byteenable
	wire         nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_processor_data_master_agent:av_readdatavalid -> nios2_processor_data_master_translator:uav_readdatavalid
	wire         nios2_processor_jtag_debug_module_agent_m0_waitrequest;                                // nios2_processor_jtag_debug_module_translator:uav_waitrequest -> nios2_processor_jtag_debug_module_agent:m0_waitrequest
	wire   [2:0] nios2_processor_jtag_debug_module_agent_m0_burstcount;                                 // nios2_processor_jtag_debug_module_agent:m0_burstcount -> nios2_processor_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] nios2_processor_jtag_debug_module_agent_m0_writedata;                                  // nios2_processor_jtag_debug_module_agent:m0_writedata -> nios2_processor_jtag_debug_module_translator:uav_writedata
	wire  [19:0] nios2_processor_jtag_debug_module_agent_m0_address;                                    // nios2_processor_jtag_debug_module_agent:m0_address -> nios2_processor_jtag_debug_module_translator:uav_address
	wire         nios2_processor_jtag_debug_module_agent_m0_write;                                      // nios2_processor_jtag_debug_module_agent:m0_write -> nios2_processor_jtag_debug_module_translator:uav_write
	wire         nios2_processor_jtag_debug_module_agent_m0_lock;                                       // nios2_processor_jtag_debug_module_agent:m0_lock -> nios2_processor_jtag_debug_module_translator:uav_lock
	wire         nios2_processor_jtag_debug_module_agent_m0_read;                                       // nios2_processor_jtag_debug_module_agent:m0_read -> nios2_processor_jtag_debug_module_translator:uav_read
	wire  [31:0] nios2_processor_jtag_debug_module_agent_m0_readdata;                                   // nios2_processor_jtag_debug_module_translator:uav_readdata -> nios2_processor_jtag_debug_module_agent:m0_readdata
	wire         nios2_processor_jtag_debug_module_agent_m0_readdatavalid;                              // nios2_processor_jtag_debug_module_translator:uav_readdatavalid -> nios2_processor_jtag_debug_module_agent:m0_readdatavalid
	wire         nios2_processor_jtag_debug_module_agent_m0_debugaccess;                                // nios2_processor_jtag_debug_module_agent:m0_debugaccess -> nios2_processor_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] nios2_processor_jtag_debug_module_agent_m0_byteenable;                                 // nios2_processor_jtag_debug_module_agent:m0_byteenable -> nios2_processor_jtag_debug_module_translator:uav_byteenable
	wire         nios2_processor_jtag_debug_module_agent_rf_source_endofpacket;                         // nios2_processor_jtag_debug_module_agent:rf_source_endofpacket -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         nios2_processor_jtag_debug_module_agent_rf_source_valid;                               // nios2_processor_jtag_debug_module_agent:rf_source_valid -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_valid
	wire         nios2_processor_jtag_debug_module_agent_rf_source_startofpacket;                       // nios2_processor_jtag_debug_module_agent:rf_source_startofpacket -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [98:0] nios2_processor_jtag_debug_module_agent_rf_source_data;                                // nios2_processor_jtag_debug_module_agent:rf_source_data -> nios2_processor_jtag_debug_module_agent_rsp_fifo:in_data
	wire         nios2_processor_jtag_debug_module_agent_rf_source_ready;                               // nios2_processor_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_processor_jtag_debug_module_agent:rf_source_ready
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_processor_jtag_debug_module_agent:rf_sink_endofpacket
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_processor_jtag_debug_module_agent:rf_sink_valid
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_processor_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [98:0] nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios2_processor_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_processor_jtag_debug_module_agent:rf_sink_data
	wire         nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios2_processor_jtag_debug_module_agent:rf_sink_ready -> nios2_processor_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios2_processor_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios2_processor_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready;                          // nios2_processor_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_processor_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> nios2_processor_jtag_debug_module_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> nios2_processor_jtag_debug_module_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> nios2_processor_jtag_debug_module_agent:cp_startofpacket
	wire  [97:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> nios2_processor_jtag_debug_module_agent:cp_data
	wire  [14:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> nios2_processor_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_src_ready;                                                                     // nios2_processor_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire         onchip_memory_s1_agent_m0_waitrequest;                                                 // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire   [2:0] onchip_memory_s1_agent_m0_burstcount;                                                  // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire  [31:0] onchip_memory_s1_agent_m0_writedata;                                                   // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire  [19:0] onchip_memory_s1_agent_m0_address;                                                     // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire         onchip_memory_s1_agent_m0_write;                                                       // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire         onchip_memory_s1_agent_m0_lock;                                                        // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire         onchip_memory_s1_agent_m0_read;                                                        // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire  [31:0] onchip_memory_s1_agent_m0_readdata;                                                    // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire         onchip_memory_s1_agent_m0_readdatavalid;                                               // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire         onchip_memory_s1_agent_m0_debugaccess;                                                 // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire   [3:0] onchip_memory_s1_agent_m0_byteenable;                                                  // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire         onchip_memory_s1_agent_rf_source_endofpacket;                                          // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory_s1_agent_rf_source_valid;                                                // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire         onchip_memory_s1_agent_rf_source_startofpacket;                                        // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] onchip_memory_s1_agent_rf_source_data;                                                 // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire         onchip_memory_s1_agent_rf_source_ready;                                                // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire         onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                       // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_valid;                                             // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire         onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                     // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire  [98:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                              // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire         onchip_memory_s1_agent_rsp_fifo_out_ready;                                             // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory_s1_agent_rdata_fifo_src_valid;                                           // onchip_memory_s1_agent:rdata_fifo_src_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                            // onchip_memory_s1_agent:rdata_fifo_src_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire         onchip_memory_s1_agent_rdata_fifo_src_ready;                                           // onchip_memory_s1_agent:rdata_fifo_sink_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                                           // cmd_mux_001:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                                 // cmd_mux_001:src_valid -> onchip_memory_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                                         // cmd_mux_001:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_001_src_data;                                                                  // cmd_mux_001:src_data -> onchip_memory_s1_agent:cp_data
	wire  [14:0] cmd_mux_001_src_channel;                                                               // cmd_mux_001:src_channel -> onchip_memory_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                                 // onchip_memory_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         leds_s1_agent_m0_waitrequest;                                                          // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire   [2:0] leds_s1_agent_m0_burstcount;                                                           // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire  [31:0] leds_s1_agent_m0_writedata;                                                            // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire  [19:0] leds_s1_agent_m0_address;                                                              // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire         leds_s1_agent_m0_write;                                                                // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire         leds_s1_agent_m0_lock;                                                                 // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire         leds_s1_agent_m0_read;                                                                 // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire  [31:0] leds_s1_agent_m0_readdata;                                                             // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire         leds_s1_agent_m0_readdatavalid;                                                        // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire         leds_s1_agent_m0_debugaccess;                                                          // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [3:0] leds_s1_agent_m0_byteenable;                                                           // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire         leds_s1_agent_rf_source_endofpacket;                                                   // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire         leds_s1_agent_rf_source_valid;                                                         // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire         leds_s1_agent_rf_source_startofpacket;                                                 // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] leds_s1_agent_rf_source_data;                                                          // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire         leds_s1_agent_rf_source_ready;                                                         // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire         leds_s1_agent_rsp_fifo_out_endofpacket;                                                // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire         leds_s1_agent_rsp_fifo_out_valid;                                                      // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire         leds_s1_agent_rsp_fifo_out_startofpacket;                                              // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire  [98:0] leds_s1_agent_rsp_fifo_out_data;                                                       // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire         leds_s1_agent_rsp_fifo_out_ready;                                                      // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire         leds_s1_agent_rdata_fifo_src_valid;                                                    // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] leds_s1_agent_rdata_fifo_src_data;                                                     // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire         leds_s1_agent_rdata_fifo_src_ready;                                                    // LEDs_s1_agent:rdata_fifo_sink_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                                           // cmd_mux_002:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                                                 // cmd_mux_002:src_valid -> LEDs_s1_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                                         // cmd_mux_002:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_002_src_data;                                                                  // cmd_mux_002:src_data -> LEDs_s1_agent:cp_data
	wire  [14:0] cmd_mux_002_src_channel;                                                               // cmd_mux_002:src_channel -> LEDs_s1_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                                                 // LEDs_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                      // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                       // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                        // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire  [19:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                          // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                                            // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                             // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                             // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                         // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                      // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                       // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                             // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [98:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                      // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [98:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                  // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                 // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                                           // cmd_mux_003:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                                                 // cmd_mux_003:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                                         // cmd_mux_003:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire  [97:0] cmd_mux_003_src_data;                                                                  // cmd_mux_003:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire  [14:0] cmd_mux_003_src_channel;                                                               // cmd_mux_003:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                                                 // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire         data_s1_agent_m0_waitrequest;                                                          // data_s1_translator:uav_waitrequest -> data_s1_agent:m0_waitrequest
	wire   [2:0] data_s1_agent_m0_burstcount;                                                           // data_s1_agent:m0_burstcount -> data_s1_translator:uav_burstcount
	wire  [31:0] data_s1_agent_m0_writedata;                                                            // data_s1_agent:m0_writedata -> data_s1_translator:uav_writedata
	wire  [19:0] data_s1_agent_m0_address;                                                              // data_s1_agent:m0_address -> data_s1_translator:uav_address
	wire         data_s1_agent_m0_write;                                                                // data_s1_agent:m0_write -> data_s1_translator:uav_write
	wire         data_s1_agent_m0_lock;                                                                 // data_s1_agent:m0_lock -> data_s1_translator:uav_lock
	wire         data_s1_agent_m0_read;                                                                 // data_s1_agent:m0_read -> data_s1_translator:uav_read
	wire  [31:0] data_s1_agent_m0_readdata;                                                             // data_s1_translator:uav_readdata -> data_s1_agent:m0_readdata
	wire         data_s1_agent_m0_readdatavalid;                                                        // data_s1_translator:uav_readdatavalid -> data_s1_agent:m0_readdatavalid
	wire         data_s1_agent_m0_debugaccess;                                                          // data_s1_agent:m0_debugaccess -> data_s1_translator:uav_debugaccess
	wire   [3:0] data_s1_agent_m0_byteenable;                                                           // data_s1_agent:m0_byteenable -> data_s1_translator:uav_byteenable
	wire         data_s1_agent_rf_source_endofpacket;                                                   // data_s1_agent:rf_source_endofpacket -> data_s1_agent_rsp_fifo:in_endofpacket
	wire         data_s1_agent_rf_source_valid;                                                         // data_s1_agent:rf_source_valid -> data_s1_agent_rsp_fifo:in_valid
	wire         data_s1_agent_rf_source_startofpacket;                                                 // data_s1_agent:rf_source_startofpacket -> data_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] data_s1_agent_rf_source_data;                                                          // data_s1_agent:rf_source_data -> data_s1_agent_rsp_fifo:in_data
	wire         data_s1_agent_rf_source_ready;                                                         // data_s1_agent_rsp_fifo:in_ready -> data_s1_agent:rf_source_ready
	wire         data_s1_agent_rsp_fifo_out_endofpacket;                                                // data_s1_agent_rsp_fifo:out_endofpacket -> data_s1_agent:rf_sink_endofpacket
	wire         data_s1_agent_rsp_fifo_out_valid;                                                      // data_s1_agent_rsp_fifo:out_valid -> data_s1_agent:rf_sink_valid
	wire         data_s1_agent_rsp_fifo_out_startofpacket;                                              // data_s1_agent_rsp_fifo:out_startofpacket -> data_s1_agent:rf_sink_startofpacket
	wire  [98:0] data_s1_agent_rsp_fifo_out_data;                                                       // data_s1_agent_rsp_fifo:out_data -> data_s1_agent:rf_sink_data
	wire         data_s1_agent_rsp_fifo_out_ready;                                                      // data_s1_agent:rf_sink_ready -> data_s1_agent_rsp_fifo:out_ready
	wire         data_s1_agent_rdata_fifo_src_valid;                                                    // data_s1_agent:rdata_fifo_src_valid -> data_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] data_s1_agent_rdata_fifo_src_data;                                                     // data_s1_agent:rdata_fifo_src_data -> data_s1_agent:rdata_fifo_sink_data
	wire         data_s1_agent_rdata_fifo_src_ready;                                                    // data_s1_agent:rdata_fifo_sink_ready -> data_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                                           // cmd_mux_004:src_endofpacket -> data_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                                 // cmd_mux_004:src_valid -> data_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                                         // cmd_mux_004:src_startofpacket -> data_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_004_src_data;                                                                  // cmd_mux_004:src_data -> data_s1_agent:cp_data
	wire  [14:0] cmd_mux_004_src_channel;                                                               // cmd_mux_004:src_channel -> data_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                                 // data_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         address_s1_agent_m0_waitrequest;                                                       // address_s1_translator:uav_waitrequest -> address_s1_agent:m0_waitrequest
	wire   [2:0] address_s1_agent_m0_burstcount;                                                        // address_s1_agent:m0_burstcount -> address_s1_translator:uav_burstcount
	wire  [31:0] address_s1_agent_m0_writedata;                                                         // address_s1_agent:m0_writedata -> address_s1_translator:uav_writedata
	wire  [19:0] address_s1_agent_m0_address;                                                           // address_s1_agent:m0_address -> address_s1_translator:uav_address
	wire         address_s1_agent_m0_write;                                                             // address_s1_agent:m0_write -> address_s1_translator:uav_write
	wire         address_s1_agent_m0_lock;                                                              // address_s1_agent:m0_lock -> address_s1_translator:uav_lock
	wire         address_s1_agent_m0_read;                                                              // address_s1_agent:m0_read -> address_s1_translator:uav_read
	wire  [31:0] address_s1_agent_m0_readdata;                                                          // address_s1_translator:uav_readdata -> address_s1_agent:m0_readdata
	wire         address_s1_agent_m0_readdatavalid;                                                     // address_s1_translator:uav_readdatavalid -> address_s1_agent:m0_readdatavalid
	wire         address_s1_agent_m0_debugaccess;                                                       // address_s1_agent:m0_debugaccess -> address_s1_translator:uav_debugaccess
	wire   [3:0] address_s1_agent_m0_byteenable;                                                        // address_s1_agent:m0_byteenable -> address_s1_translator:uav_byteenable
	wire         address_s1_agent_rf_source_endofpacket;                                                // address_s1_agent:rf_source_endofpacket -> address_s1_agent_rsp_fifo:in_endofpacket
	wire         address_s1_agent_rf_source_valid;                                                      // address_s1_agent:rf_source_valid -> address_s1_agent_rsp_fifo:in_valid
	wire         address_s1_agent_rf_source_startofpacket;                                              // address_s1_agent:rf_source_startofpacket -> address_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] address_s1_agent_rf_source_data;                                                       // address_s1_agent:rf_source_data -> address_s1_agent_rsp_fifo:in_data
	wire         address_s1_agent_rf_source_ready;                                                      // address_s1_agent_rsp_fifo:in_ready -> address_s1_agent:rf_source_ready
	wire         address_s1_agent_rsp_fifo_out_endofpacket;                                             // address_s1_agent_rsp_fifo:out_endofpacket -> address_s1_agent:rf_sink_endofpacket
	wire         address_s1_agent_rsp_fifo_out_valid;                                                   // address_s1_agent_rsp_fifo:out_valid -> address_s1_agent:rf_sink_valid
	wire         address_s1_agent_rsp_fifo_out_startofpacket;                                           // address_s1_agent_rsp_fifo:out_startofpacket -> address_s1_agent:rf_sink_startofpacket
	wire  [98:0] address_s1_agent_rsp_fifo_out_data;                                                    // address_s1_agent_rsp_fifo:out_data -> address_s1_agent:rf_sink_data
	wire         address_s1_agent_rsp_fifo_out_ready;                                                   // address_s1_agent:rf_sink_ready -> address_s1_agent_rsp_fifo:out_ready
	wire         address_s1_agent_rdata_fifo_src_valid;                                                 // address_s1_agent:rdata_fifo_src_valid -> address_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] address_s1_agent_rdata_fifo_src_data;                                                  // address_s1_agent:rdata_fifo_src_data -> address_s1_agent:rdata_fifo_sink_data
	wire         address_s1_agent_rdata_fifo_src_ready;                                                 // address_s1_agent:rdata_fifo_sink_ready -> address_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_endofpacket;                                                           // cmd_mux_005:src_endofpacket -> address_s1_agent:cp_endofpacket
	wire         cmd_mux_005_src_valid;                                                                 // cmd_mux_005:src_valid -> address_s1_agent:cp_valid
	wire         cmd_mux_005_src_startofpacket;                                                         // cmd_mux_005:src_startofpacket -> address_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_005_src_data;                                                                  // cmd_mux_005:src_data -> address_s1_agent:cp_data
	wire  [14:0] cmd_mux_005_src_channel;                                                               // cmd_mux_005:src_channel -> address_s1_agent:cp_channel
	wire         cmd_mux_005_src_ready;                                                                 // address_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire         rnw_s1_agent_m0_waitrequest;                                                           // rnw_s1_translator:uav_waitrequest -> rnw_s1_agent:m0_waitrequest
	wire   [2:0] rnw_s1_agent_m0_burstcount;                                                            // rnw_s1_agent:m0_burstcount -> rnw_s1_translator:uav_burstcount
	wire  [31:0] rnw_s1_agent_m0_writedata;                                                             // rnw_s1_agent:m0_writedata -> rnw_s1_translator:uav_writedata
	wire  [19:0] rnw_s1_agent_m0_address;                                                               // rnw_s1_agent:m0_address -> rnw_s1_translator:uav_address
	wire         rnw_s1_agent_m0_write;                                                                 // rnw_s1_agent:m0_write -> rnw_s1_translator:uav_write
	wire         rnw_s1_agent_m0_lock;                                                                  // rnw_s1_agent:m0_lock -> rnw_s1_translator:uav_lock
	wire         rnw_s1_agent_m0_read;                                                                  // rnw_s1_agent:m0_read -> rnw_s1_translator:uav_read
	wire  [31:0] rnw_s1_agent_m0_readdata;                                                              // rnw_s1_translator:uav_readdata -> rnw_s1_agent:m0_readdata
	wire         rnw_s1_agent_m0_readdatavalid;                                                         // rnw_s1_translator:uav_readdatavalid -> rnw_s1_agent:m0_readdatavalid
	wire         rnw_s1_agent_m0_debugaccess;                                                           // rnw_s1_agent:m0_debugaccess -> rnw_s1_translator:uav_debugaccess
	wire   [3:0] rnw_s1_agent_m0_byteenable;                                                            // rnw_s1_agent:m0_byteenable -> rnw_s1_translator:uav_byteenable
	wire         rnw_s1_agent_rf_source_endofpacket;                                                    // rnw_s1_agent:rf_source_endofpacket -> rnw_s1_agent_rsp_fifo:in_endofpacket
	wire         rnw_s1_agent_rf_source_valid;                                                          // rnw_s1_agent:rf_source_valid -> rnw_s1_agent_rsp_fifo:in_valid
	wire         rnw_s1_agent_rf_source_startofpacket;                                                  // rnw_s1_agent:rf_source_startofpacket -> rnw_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] rnw_s1_agent_rf_source_data;                                                           // rnw_s1_agent:rf_source_data -> rnw_s1_agent_rsp_fifo:in_data
	wire         rnw_s1_agent_rf_source_ready;                                                          // rnw_s1_agent_rsp_fifo:in_ready -> rnw_s1_agent:rf_source_ready
	wire         rnw_s1_agent_rsp_fifo_out_endofpacket;                                                 // rnw_s1_agent_rsp_fifo:out_endofpacket -> rnw_s1_agent:rf_sink_endofpacket
	wire         rnw_s1_agent_rsp_fifo_out_valid;                                                       // rnw_s1_agent_rsp_fifo:out_valid -> rnw_s1_agent:rf_sink_valid
	wire         rnw_s1_agent_rsp_fifo_out_startofpacket;                                               // rnw_s1_agent_rsp_fifo:out_startofpacket -> rnw_s1_agent:rf_sink_startofpacket
	wire  [98:0] rnw_s1_agent_rsp_fifo_out_data;                                                        // rnw_s1_agent_rsp_fifo:out_data -> rnw_s1_agent:rf_sink_data
	wire         rnw_s1_agent_rsp_fifo_out_ready;                                                       // rnw_s1_agent:rf_sink_ready -> rnw_s1_agent_rsp_fifo:out_ready
	wire         rnw_s1_agent_rdata_fifo_src_valid;                                                     // rnw_s1_agent:rdata_fifo_src_valid -> rnw_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] rnw_s1_agent_rdata_fifo_src_data;                                                      // rnw_s1_agent:rdata_fifo_src_data -> rnw_s1_agent:rdata_fifo_sink_data
	wire         rnw_s1_agent_rdata_fifo_src_ready;                                                     // rnw_s1_agent:rdata_fifo_sink_ready -> rnw_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_endofpacket;                                                           // cmd_mux_006:src_endofpacket -> rnw_s1_agent:cp_endofpacket
	wire         cmd_mux_006_src_valid;                                                                 // cmd_mux_006:src_valid -> rnw_s1_agent:cp_valid
	wire         cmd_mux_006_src_startofpacket;                                                         // cmd_mux_006:src_startofpacket -> rnw_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_006_src_data;                                                                  // cmd_mux_006:src_data -> rnw_s1_agent:cp_data
	wire  [14:0] cmd_mux_006_src_channel;                                                               // cmd_mux_006:src_channel -> rnw_s1_agent:cp_channel
	wire         cmd_mux_006_src_ready;                                                                 // rnw_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire         noe_s1_agent_m0_waitrequest;                                                           // noe_s1_translator:uav_waitrequest -> noe_s1_agent:m0_waitrequest
	wire   [2:0] noe_s1_agent_m0_burstcount;                                                            // noe_s1_agent:m0_burstcount -> noe_s1_translator:uav_burstcount
	wire  [31:0] noe_s1_agent_m0_writedata;                                                             // noe_s1_agent:m0_writedata -> noe_s1_translator:uav_writedata
	wire  [19:0] noe_s1_agent_m0_address;                                                               // noe_s1_agent:m0_address -> noe_s1_translator:uav_address
	wire         noe_s1_agent_m0_write;                                                                 // noe_s1_agent:m0_write -> noe_s1_translator:uav_write
	wire         noe_s1_agent_m0_lock;                                                                  // noe_s1_agent:m0_lock -> noe_s1_translator:uav_lock
	wire         noe_s1_agent_m0_read;                                                                  // noe_s1_agent:m0_read -> noe_s1_translator:uav_read
	wire  [31:0] noe_s1_agent_m0_readdata;                                                              // noe_s1_translator:uav_readdata -> noe_s1_agent:m0_readdata
	wire         noe_s1_agent_m0_readdatavalid;                                                         // noe_s1_translator:uav_readdatavalid -> noe_s1_agent:m0_readdatavalid
	wire         noe_s1_agent_m0_debugaccess;                                                           // noe_s1_agent:m0_debugaccess -> noe_s1_translator:uav_debugaccess
	wire   [3:0] noe_s1_agent_m0_byteenable;                                                            // noe_s1_agent:m0_byteenable -> noe_s1_translator:uav_byteenable
	wire         noe_s1_agent_rf_source_endofpacket;                                                    // noe_s1_agent:rf_source_endofpacket -> noe_s1_agent_rsp_fifo:in_endofpacket
	wire         noe_s1_agent_rf_source_valid;                                                          // noe_s1_agent:rf_source_valid -> noe_s1_agent_rsp_fifo:in_valid
	wire         noe_s1_agent_rf_source_startofpacket;                                                  // noe_s1_agent:rf_source_startofpacket -> noe_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] noe_s1_agent_rf_source_data;                                                           // noe_s1_agent:rf_source_data -> noe_s1_agent_rsp_fifo:in_data
	wire         noe_s1_agent_rf_source_ready;                                                          // noe_s1_agent_rsp_fifo:in_ready -> noe_s1_agent:rf_source_ready
	wire         noe_s1_agent_rsp_fifo_out_endofpacket;                                                 // noe_s1_agent_rsp_fifo:out_endofpacket -> noe_s1_agent:rf_sink_endofpacket
	wire         noe_s1_agent_rsp_fifo_out_valid;                                                       // noe_s1_agent_rsp_fifo:out_valid -> noe_s1_agent:rf_sink_valid
	wire         noe_s1_agent_rsp_fifo_out_startofpacket;                                               // noe_s1_agent_rsp_fifo:out_startofpacket -> noe_s1_agent:rf_sink_startofpacket
	wire  [98:0] noe_s1_agent_rsp_fifo_out_data;                                                        // noe_s1_agent_rsp_fifo:out_data -> noe_s1_agent:rf_sink_data
	wire         noe_s1_agent_rsp_fifo_out_ready;                                                       // noe_s1_agent:rf_sink_ready -> noe_s1_agent_rsp_fifo:out_ready
	wire         noe_s1_agent_rdata_fifo_src_valid;                                                     // noe_s1_agent:rdata_fifo_src_valid -> noe_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] noe_s1_agent_rdata_fifo_src_data;                                                      // noe_s1_agent:rdata_fifo_src_data -> noe_s1_agent:rdata_fifo_sink_data
	wire         noe_s1_agent_rdata_fifo_src_ready;                                                     // noe_s1_agent:rdata_fifo_sink_ready -> noe_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_endofpacket;                                                           // cmd_mux_007:src_endofpacket -> noe_s1_agent:cp_endofpacket
	wire         cmd_mux_007_src_valid;                                                                 // cmd_mux_007:src_valid -> noe_s1_agent:cp_valid
	wire         cmd_mux_007_src_startofpacket;                                                         // cmd_mux_007:src_startofpacket -> noe_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_007_src_data;                                                                  // cmd_mux_007:src_data -> noe_s1_agent:cp_data
	wire  [14:0] cmd_mux_007_src_channel;                                                               // cmd_mux_007:src_channel -> noe_s1_agent:cp_channel
	wire         cmd_mux_007_src_ready;                                                                 // noe_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire         mpdatain_s1_agent_m0_waitrequest;                                                      // mpdatain_s1_translator:uav_waitrequest -> mpdatain_s1_agent:m0_waitrequest
	wire   [2:0] mpdatain_s1_agent_m0_burstcount;                                                       // mpdatain_s1_agent:m0_burstcount -> mpdatain_s1_translator:uav_burstcount
	wire  [31:0] mpdatain_s1_agent_m0_writedata;                                                        // mpdatain_s1_agent:m0_writedata -> mpdatain_s1_translator:uav_writedata
	wire  [19:0] mpdatain_s1_agent_m0_address;                                                          // mpdatain_s1_agent:m0_address -> mpdatain_s1_translator:uav_address
	wire         mpdatain_s1_agent_m0_write;                                                            // mpdatain_s1_agent:m0_write -> mpdatain_s1_translator:uav_write
	wire         mpdatain_s1_agent_m0_lock;                                                             // mpdatain_s1_agent:m0_lock -> mpdatain_s1_translator:uav_lock
	wire         mpdatain_s1_agent_m0_read;                                                             // mpdatain_s1_agent:m0_read -> mpdatain_s1_translator:uav_read
	wire  [31:0] mpdatain_s1_agent_m0_readdata;                                                         // mpdatain_s1_translator:uav_readdata -> mpdatain_s1_agent:m0_readdata
	wire         mpdatain_s1_agent_m0_readdatavalid;                                                    // mpdatain_s1_translator:uav_readdatavalid -> mpdatain_s1_agent:m0_readdatavalid
	wire         mpdatain_s1_agent_m0_debugaccess;                                                      // mpdatain_s1_agent:m0_debugaccess -> mpdatain_s1_translator:uav_debugaccess
	wire   [3:0] mpdatain_s1_agent_m0_byteenable;                                                       // mpdatain_s1_agent:m0_byteenable -> mpdatain_s1_translator:uav_byteenable
	wire         mpdatain_s1_agent_rf_source_endofpacket;                                               // mpdatain_s1_agent:rf_source_endofpacket -> mpdatain_s1_agent_rsp_fifo:in_endofpacket
	wire         mpdatain_s1_agent_rf_source_valid;                                                     // mpdatain_s1_agent:rf_source_valid -> mpdatain_s1_agent_rsp_fifo:in_valid
	wire         mpdatain_s1_agent_rf_source_startofpacket;                                             // mpdatain_s1_agent:rf_source_startofpacket -> mpdatain_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] mpdatain_s1_agent_rf_source_data;                                                      // mpdatain_s1_agent:rf_source_data -> mpdatain_s1_agent_rsp_fifo:in_data
	wire         mpdatain_s1_agent_rf_source_ready;                                                     // mpdatain_s1_agent_rsp_fifo:in_ready -> mpdatain_s1_agent:rf_source_ready
	wire         mpdatain_s1_agent_rsp_fifo_out_endofpacket;                                            // mpdatain_s1_agent_rsp_fifo:out_endofpacket -> mpdatain_s1_agent:rf_sink_endofpacket
	wire         mpdatain_s1_agent_rsp_fifo_out_valid;                                                  // mpdatain_s1_agent_rsp_fifo:out_valid -> mpdatain_s1_agent:rf_sink_valid
	wire         mpdatain_s1_agent_rsp_fifo_out_startofpacket;                                          // mpdatain_s1_agent_rsp_fifo:out_startofpacket -> mpdatain_s1_agent:rf_sink_startofpacket
	wire  [98:0] mpdatain_s1_agent_rsp_fifo_out_data;                                                   // mpdatain_s1_agent_rsp_fifo:out_data -> mpdatain_s1_agent:rf_sink_data
	wire         mpdatain_s1_agent_rsp_fifo_out_ready;                                                  // mpdatain_s1_agent:rf_sink_ready -> mpdatain_s1_agent_rsp_fifo:out_ready
	wire         mpdatain_s1_agent_rdata_fifo_src_valid;                                                // mpdatain_s1_agent:rdata_fifo_src_valid -> mpdatain_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] mpdatain_s1_agent_rdata_fifo_src_data;                                                 // mpdatain_s1_agent:rdata_fifo_src_data -> mpdatain_s1_agent:rdata_fifo_sink_data
	wire         mpdatain_s1_agent_rdata_fifo_src_ready;                                                // mpdatain_s1_agent:rdata_fifo_sink_ready -> mpdatain_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_endofpacket;                                                           // cmd_mux_008:src_endofpacket -> mpdatain_s1_agent:cp_endofpacket
	wire         cmd_mux_008_src_valid;                                                                 // cmd_mux_008:src_valid -> mpdatain_s1_agent:cp_valid
	wire         cmd_mux_008_src_startofpacket;                                                         // cmd_mux_008:src_startofpacket -> mpdatain_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_008_src_data;                                                                  // cmd_mux_008:src_data -> mpdatain_s1_agent:cp_data
	wire  [14:0] cmd_mux_008_src_channel;                                                               // cmd_mux_008:src_channel -> mpdatain_s1_agent:cp_channel
	wire         cmd_mux_008_src_ready;                                                                 // mpdatain_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire         chrec_s1_agent_m0_waitrequest;                                                         // chrec_s1_translator:uav_waitrequest -> chrec_s1_agent:m0_waitrequest
	wire   [2:0] chrec_s1_agent_m0_burstcount;                                                          // chrec_s1_agent:m0_burstcount -> chrec_s1_translator:uav_burstcount
	wire  [31:0] chrec_s1_agent_m0_writedata;                                                           // chrec_s1_agent:m0_writedata -> chrec_s1_translator:uav_writedata
	wire  [19:0] chrec_s1_agent_m0_address;                                                             // chrec_s1_agent:m0_address -> chrec_s1_translator:uav_address
	wire         chrec_s1_agent_m0_write;                                                               // chrec_s1_agent:m0_write -> chrec_s1_translator:uav_write
	wire         chrec_s1_agent_m0_lock;                                                                // chrec_s1_agent:m0_lock -> chrec_s1_translator:uav_lock
	wire         chrec_s1_agent_m0_read;                                                                // chrec_s1_agent:m0_read -> chrec_s1_translator:uav_read
	wire  [31:0] chrec_s1_agent_m0_readdata;                                                            // chrec_s1_translator:uav_readdata -> chrec_s1_agent:m0_readdata
	wire         chrec_s1_agent_m0_readdatavalid;                                                       // chrec_s1_translator:uav_readdatavalid -> chrec_s1_agent:m0_readdatavalid
	wire         chrec_s1_agent_m0_debugaccess;                                                         // chrec_s1_agent:m0_debugaccess -> chrec_s1_translator:uav_debugaccess
	wire   [3:0] chrec_s1_agent_m0_byteenable;                                                          // chrec_s1_agent:m0_byteenable -> chrec_s1_translator:uav_byteenable
	wire         chrec_s1_agent_rf_source_endofpacket;                                                  // chrec_s1_agent:rf_source_endofpacket -> chrec_s1_agent_rsp_fifo:in_endofpacket
	wire         chrec_s1_agent_rf_source_valid;                                                        // chrec_s1_agent:rf_source_valid -> chrec_s1_agent_rsp_fifo:in_valid
	wire         chrec_s1_agent_rf_source_startofpacket;                                                // chrec_s1_agent:rf_source_startofpacket -> chrec_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] chrec_s1_agent_rf_source_data;                                                         // chrec_s1_agent:rf_source_data -> chrec_s1_agent_rsp_fifo:in_data
	wire         chrec_s1_agent_rf_source_ready;                                                        // chrec_s1_agent_rsp_fifo:in_ready -> chrec_s1_agent:rf_source_ready
	wire         chrec_s1_agent_rsp_fifo_out_endofpacket;                                               // chrec_s1_agent_rsp_fifo:out_endofpacket -> chrec_s1_agent:rf_sink_endofpacket
	wire         chrec_s1_agent_rsp_fifo_out_valid;                                                     // chrec_s1_agent_rsp_fifo:out_valid -> chrec_s1_agent:rf_sink_valid
	wire         chrec_s1_agent_rsp_fifo_out_startofpacket;                                             // chrec_s1_agent_rsp_fifo:out_startofpacket -> chrec_s1_agent:rf_sink_startofpacket
	wire  [98:0] chrec_s1_agent_rsp_fifo_out_data;                                                      // chrec_s1_agent_rsp_fifo:out_data -> chrec_s1_agent:rf_sink_data
	wire         chrec_s1_agent_rsp_fifo_out_ready;                                                     // chrec_s1_agent:rf_sink_ready -> chrec_s1_agent_rsp_fifo:out_ready
	wire         chrec_s1_agent_rdata_fifo_src_valid;                                                   // chrec_s1_agent:rdata_fifo_src_valid -> chrec_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] chrec_s1_agent_rdata_fifo_src_data;                                                    // chrec_s1_agent:rdata_fifo_src_data -> chrec_s1_agent:rdata_fifo_sink_data
	wire         chrec_s1_agent_rdata_fifo_src_ready;                                                   // chrec_s1_agent:rdata_fifo_sink_ready -> chrec_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_endofpacket;                                                           // cmd_mux_009:src_endofpacket -> chrec_s1_agent:cp_endofpacket
	wire         cmd_mux_009_src_valid;                                                                 // cmd_mux_009:src_valid -> chrec_s1_agent:cp_valid
	wire         cmd_mux_009_src_startofpacket;                                                         // cmd_mux_009:src_startofpacket -> chrec_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_009_src_data;                                                                  // cmd_mux_009:src_data -> chrec_s1_agent:cp_data
	wire  [14:0] cmd_mux_009_src_channel;                                                               // cmd_mux_009:src_channel -> chrec_s1_agent:cp_channel
	wire         cmd_mux_009_src_ready;                                                                 // chrec_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire         mpdataout_s1_agent_m0_waitrequest;                                                     // mpdataout_s1_translator:uav_waitrequest -> mpdataout_s1_agent:m0_waitrequest
	wire   [2:0] mpdataout_s1_agent_m0_burstcount;                                                      // mpdataout_s1_agent:m0_burstcount -> mpdataout_s1_translator:uav_burstcount
	wire  [31:0] mpdataout_s1_agent_m0_writedata;                                                       // mpdataout_s1_agent:m0_writedata -> mpdataout_s1_translator:uav_writedata
	wire  [19:0] mpdataout_s1_agent_m0_address;                                                         // mpdataout_s1_agent:m0_address -> mpdataout_s1_translator:uav_address
	wire         mpdataout_s1_agent_m0_write;                                                           // mpdataout_s1_agent:m0_write -> mpdataout_s1_translator:uav_write
	wire         mpdataout_s1_agent_m0_lock;                                                            // mpdataout_s1_agent:m0_lock -> mpdataout_s1_translator:uav_lock
	wire         mpdataout_s1_agent_m0_read;                                                            // mpdataout_s1_agent:m0_read -> mpdataout_s1_translator:uav_read
	wire  [31:0] mpdataout_s1_agent_m0_readdata;                                                        // mpdataout_s1_translator:uav_readdata -> mpdataout_s1_agent:m0_readdata
	wire         mpdataout_s1_agent_m0_readdatavalid;                                                   // mpdataout_s1_translator:uav_readdatavalid -> mpdataout_s1_agent:m0_readdatavalid
	wire         mpdataout_s1_agent_m0_debugaccess;                                                     // mpdataout_s1_agent:m0_debugaccess -> mpdataout_s1_translator:uav_debugaccess
	wire   [3:0] mpdataout_s1_agent_m0_byteenable;                                                      // mpdataout_s1_agent:m0_byteenable -> mpdataout_s1_translator:uav_byteenable
	wire         mpdataout_s1_agent_rf_source_endofpacket;                                              // mpdataout_s1_agent:rf_source_endofpacket -> mpdataout_s1_agent_rsp_fifo:in_endofpacket
	wire         mpdataout_s1_agent_rf_source_valid;                                                    // mpdataout_s1_agent:rf_source_valid -> mpdataout_s1_agent_rsp_fifo:in_valid
	wire         mpdataout_s1_agent_rf_source_startofpacket;                                            // mpdataout_s1_agent:rf_source_startofpacket -> mpdataout_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] mpdataout_s1_agent_rf_source_data;                                                     // mpdataout_s1_agent:rf_source_data -> mpdataout_s1_agent_rsp_fifo:in_data
	wire         mpdataout_s1_agent_rf_source_ready;                                                    // mpdataout_s1_agent_rsp_fifo:in_ready -> mpdataout_s1_agent:rf_source_ready
	wire         mpdataout_s1_agent_rsp_fifo_out_endofpacket;                                           // mpdataout_s1_agent_rsp_fifo:out_endofpacket -> mpdataout_s1_agent:rf_sink_endofpacket
	wire         mpdataout_s1_agent_rsp_fifo_out_valid;                                                 // mpdataout_s1_agent_rsp_fifo:out_valid -> mpdataout_s1_agent:rf_sink_valid
	wire         mpdataout_s1_agent_rsp_fifo_out_startofpacket;                                         // mpdataout_s1_agent_rsp_fifo:out_startofpacket -> mpdataout_s1_agent:rf_sink_startofpacket
	wire  [98:0] mpdataout_s1_agent_rsp_fifo_out_data;                                                  // mpdataout_s1_agent_rsp_fifo:out_data -> mpdataout_s1_agent:rf_sink_data
	wire         mpdataout_s1_agent_rsp_fifo_out_ready;                                                 // mpdataout_s1_agent:rf_sink_ready -> mpdataout_s1_agent_rsp_fifo:out_ready
	wire         mpdataout_s1_agent_rdata_fifo_src_valid;                                               // mpdataout_s1_agent:rdata_fifo_src_valid -> mpdataout_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] mpdataout_s1_agent_rdata_fifo_src_data;                                                // mpdataout_s1_agent:rdata_fifo_src_data -> mpdataout_s1_agent:rdata_fifo_sink_data
	wire         mpdataout_s1_agent_rdata_fifo_src_ready;                                               // mpdataout_s1_agent:rdata_fifo_sink_ready -> mpdataout_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_endofpacket;                                                           // cmd_mux_010:src_endofpacket -> mpdataout_s1_agent:cp_endofpacket
	wire         cmd_mux_010_src_valid;                                                                 // cmd_mux_010:src_valid -> mpdataout_s1_agent:cp_valid
	wire         cmd_mux_010_src_startofpacket;                                                         // cmd_mux_010:src_startofpacket -> mpdataout_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_010_src_data;                                                                  // cmd_mux_010:src_data -> mpdataout_s1_agent:cp_data
	wire  [14:0] cmd_mux_010_src_channel;                                                               // cmd_mux_010:src_channel -> mpdataout_s1_agent:cp_channel
	wire         cmd_mux_010_src_ready;                                                                 // mpdataout_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire         asoe_s1_agent_m0_waitrequest;                                                          // asoe_s1_translator:uav_waitrequest -> asoe_s1_agent:m0_waitrequest
	wire   [2:0] asoe_s1_agent_m0_burstcount;                                                           // asoe_s1_agent:m0_burstcount -> asoe_s1_translator:uav_burstcount
	wire  [31:0] asoe_s1_agent_m0_writedata;                                                            // asoe_s1_agent:m0_writedata -> asoe_s1_translator:uav_writedata
	wire  [19:0] asoe_s1_agent_m0_address;                                                              // asoe_s1_agent:m0_address -> asoe_s1_translator:uav_address
	wire         asoe_s1_agent_m0_write;                                                                // asoe_s1_agent:m0_write -> asoe_s1_translator:uav_write
	wire         asoe_s1_agent_m0_lock;                                                                 // asoe_s1_agent:m0_lock -> asoe_s1_translator:uav_lock
	wire         asoe_s1_agent_m0_read;                                                                 // asoe_s1_agent:m0_read -> asoe_s1_translator:uav_read
	wire  [31:0] asoe_s1_agent_m0_readdata;                                                             // asoe_s1_translator:uav_readdata -> asoe_s1_agent:m0_readdata
	wire         asoe_s1_agent_m0_readdatavalid;                                                        // asoe_s1_translator:uav_readdatavalid -> asoe_s1_agent:m0_readdatavalid
	wire         asoe_s1_agent_m0_debugaccess;                                                          // asoe_s1_agent:m0_debugaccess -> asoe_s1_translator:uav_debugaccess
	wire   [3:0] asoe_s1_agent_m0_byteenable;                                                           // asoe_s1_agent:m0_byteenable -> asoe_s1_translator:uav_byteenable
	wire         asoe_s1_agent_rf_source_endofpacket;                                                   // asoe_s1_agent:rf_source_endofpacket -> asoe_s1_agent_rsp_fifo:in_endofpacket
	wire         asoe_s1_agent_rf_source_valid;                                                         // asoe_s1_agent:rf_source_valid -> asoe_s1_agent_rsp_fifo:in_valid
	wire         asoe_s1_agent_rf_source_startofpacket;                                                 // asoe_s1_agent:rf_source_startofpacket -> asoe_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] asoe_s1_agent_rf_source_data;                                                          // asoe_s1_agent:rf_source_data -> asoe_s1_agent_rsp_fifo:in_data
	wire         asoe_s1_agent_rf_source_ready;                                                         // asoe_s1_agent_rsp_fifo:in_ready -> asoe_s1_agent:rf_source_ready
	wire         asoe_s1_agent_rsp_fifo_out_endofpacket;                                                // asoe_s1_agent_rsp_fifo:out_endofpacket -> asoe_s1_agent:rf_sink_endofpacket
	wire         asoe_s1_agent_rsp_fifo_out_valid;                                                      // asoe_s1_agent_rsp_fifo:out_valid -> asoe_s1_agent:rf_sink_valid
	wire         asoe_s1_agent_rsp_fifo_out_startofpacket;                                              // asoe_s1_agent_rsp_fifo:out_startofpacket -> asoe_s1_agent:rf_sink_startofpacket
	wire  [98:0] asoe_s1_agent_rsp_fifo_out_data;                                                       // asoe_s1_agent_rsp_fifo:out_data -> asoe_s1_agent:rf_sink_data
	wire         asoe_s1_agent_rsp_fifo_out_ready;                                                      // asoe_s1_agent:rf_sink_ready -> asoe_s1_agent_rsp_fifo:out_ready
	wire         asoe_s1_agent_rdata_fifo_src_valid;                                                    // asoe_s1_agent:rdata_fifo_src_valid -> asoe_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] asoe_s1_agent_rdata_fifo_src_data;                                                     // asoe_s1_agent:rdata_fifo_src_data -> asoe_s1_agent:rdata_fifo_sink_data
	wire         asoe_s1_agent_rdata_fifo_src_ready;                                                    // asoe_s1_agent:rdata_fifo_sink_ready -> asoe_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_011_src_endofpacket;                                                           // cmd_mux_011:src_endofpacket -> asoe_s1_agent:cp_endofpacket
	wire         cmd_mux_011_src_valid;                                                                 // cmd_mux_011:src_valid -> asoe_s1_agent:cp_valid
	wire         cmd_mux_011_src_startofpacket;                                                         // cmd_mux_011:src_startofpacket -> asoe_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_011_src_data;                                                                  // cmd_mux_011:src_data -> asoe_s1_agent:cp_data
	wire  [14:0] cmd_mux_011_src_channel;                                                               // cmd_mux_011:src_channel -> asoe_s1_agent:cp_channel
	wire         cmd_mux_011_src_ready;                                                                 // asoe_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire         sent_s1_agent_m0_waitrequest;                                                          // sent_s1_translator:uav_waitrequest -> sent_s1_agent:m0_waitrequest
	wire   [2:0] sent_s1_agent_m0_burstcount;                                                           // sent_s1_agent:m0_burstcount -> sent_s1_translator:uav_burstcount
	wire  [31:0] sent_s1_agent_m0_writedata;                                                            // sent_s1_agent:m0_writedata -> sent_s1_translator:uav_writedata
	wire  [19:0] sent_s1_agent_m0_address;                                                              // sent_s1_agent:m0_address -> sent_s1_translator:uav_address
	wire         sent_s1_agent_m0_write;                                                                // sent_s1_agent:m0_write -> sent_s1_translator:uav_write
	wire         sent_s1_agent_m0_lock;                                                                 // sent_s1_agent:m0_lock -> sent_s1_translator:uav_lock
	wire         sent_s1_agent_m0_read;                                                                 // sent_s1_agent:m0_read -> sent_s1_translator:uav_read
	wire  [31:0] sent_s1_agent_m0_readdata;                                                             // sent_s1_translator:uav_readdata -> sent_s1_agent:m0_readdata
	wire         sent_s1_agent_m0_readdatavalid;                                                        // sent_s1_translator:uav_readdatavalid -> sent_s1_agent:m0_readdatavalid
	wire         sent_s1_agent_m0_debugaccess;                                                          // sent_s1_agent:m0_debugaccess -> sent_s1_translator:uav_debugaccess
	wire   [3:0] sent_s1_agent_m0_byteenable;                                                           // sent_s1_agent:m0_byteenable -> sent_s1_translator:uav_byteenable
	wire         sent_s1_agent_rf_source_endofpacket;                                                   // sent_s1_agent:rf_source_endofpacket -> sent_s1_agent_rsp_fifo:in_endofpacket
	wire         sent_s1_agent_rf_source_valid;                                                         // sent_s1_agent:rf_source_valid -> sent_s1_agent_rsp_fifo:in_valid
	wire         sent_s1_agent_rf_source_startofpacket;                                                 // sent_s1_agent:rf_source_startofpacket -> sent_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] sent_s1_agent_rf_source_data;                                                          // sent_s1_agent:rf_source_data -> sent_s1_agent_rsp_fifo:in_data
	wire         sent_s1_agent_rf_source_ready;                                                         // sent_s1_agent_rsp_fifo:in_ready -> sent_s1_agent:rf_source_ready
	wire         sent_s1_agent_rsp_fifo_out_endofpacket;                                                // sent_s1_agent_rsp_fifo:out_endofpacket -> sent_s1_agent:rf_sink_endofpacket
	wire         sent_s1_agent_rsp_fifo_out_valid;                                                      // sent_s1_agent_rsp_fifo:out_valid -> sent_s1_agent:rf_sink_valid
	wire         sent_s1_agent_rsp_fifo_out_startofpacket;                                              // sent_s1_agent_rsp_fifo:out_startofpacket -> sent_s1_agent:rf_sink_startofpacket
	wire  [98:0] sent_s1_agent_rsp_fifo_out_data;                                                       // sent_s1_agent_rsp_fifo:out_data -> sent_s1_agent:rf_sink_data
	wire         sent_s1_agent_rsp_fifo_out_ready;                                                      // sent_s1_agent:rf_sink_ready -> sent_s1_agent_rsp_fifo:out_ready
	wire         sent_s1_agent_rdata_fifo_src_valid;                                                    // sent_s1_agent:rdata_fifo_src_valid -> sent_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sent_s1_agent_rdata_fifo_src_data;                                                     // sent_s1_agent:rdata_fifo_src_data -> sent_s1_agent:rdata_fifo_sink_data
	wire         sent_s1_agent_rdata_fifo_src_ready;                                                    // sent_s1_agent:rdata_fifo_sink_ready -> sent_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_012_src_endofpacket;                                                           // cmd_mux_012:src_endofpacket -> sent_s1_agent:cp_endofpacket
	wire         cmd_mux_012_src_valid;                                                                 // cmd_mux_012:src_valid -> sent_s1_agent:cp_valid
	wire         cmd_mux_012_src_startofpacket;                                                         // cmd_mux_012:src_startofpacket -> sent_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_012_src_data;                                                                  // cmd_mux_012:src_data -> sent_s1_agent:cp_data
	wire  [14:0] cmd_mux_012_src_channel;                                                               // cmd_mux_012:src_channel -> sent_s1_agent:cp_channel
	wire         cmd_mux_012_src_ready;                                                                 // sent_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire         load_s1_agent_m0_waitrequest;                                                          // load_s1_translator:uav_waitrequest -> load_s1_agent:m0_waitrequest
	wire   [2:0] load_s1_agent_m0_burstcount;                                                           // load_s1_agent:m0_burstcount -> load_s1_translator:uav_burstcount
	wire  [31:0] load_s1_agent_m0_writedata;                                                            // load_s1_agent:m0_writedata -> load_s1_translator:uav_writedata
	wire  [19:0] load_s1_agent_m0_address;                                                              // load_s1_agent:m0_address -> load_s1_translator:uav_address
	wire         load_s1_agent_m0_write;                                                                // load_s1_agent:m0_write -> load_s1_translator:uav_write
	wire         load_s1_agent_m0_lock;                                                                 // load_s1_agent:m0_lock -> load_s1_translator:uav_lock
	wire         load_s1_agent_m0_read;                                                                 // load_s1_agent:m0_read -> load_s1_translator:uav_read
	wire  [31:0] load_s1_agent_m0_readdata;                                                             // load_s1_translator:uav_readdata -> load_s1_agent:m0_readdata
	wire         load_s1_agent_m0_readdatavalid;                                                        // load_s1_translator:uav_readdatavalid -> load_s1_agent:m0_readdatavalid
	wire         load_s1_agent_m0_debugaccess;                                                          // load_s1_agent:m0_debugaccess -> load_s1_translator:uav_debugaccess
	wire   [3:0] load_s1_agent_m0_byteenable;                                                           // load_s1_agent:m0_byteenable -> load_s1_translator:uav_byteenable
	wire         load_s1_agent_rf_source_endofpacket;                                                   // load_s1_agent:rf_source_endofpacket -> load_s1_agent_rsp_fifo:in_endofpacket
	wire         load_s1_agent_rf_source_valid;                                                         // load_s1_agent:rf_source_valid -> load_s1_agent_rsp_fifo:in_valid
	wire         load_s1_agent_rf_source_startofpacket;                                                 // load_s1_agent:rf_source_startofpacket -> load_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] load_s1_agent_rf_source_data;                                                          // load_s1_agent:rf_source_data -> load_s1_agent_rsp_fifo:in_data
	wire         load_s1_agent_rf_source_ready;                                                         // load_s1_agent_rsp_fifo:in_ready -> load_s1_agent:rf_source_ready
	wire         load_s1_agent_rsp_fifo_out_endofpacket;                                                // load_s1_agent_rsp_fifo:out_endofpacket -> load_s1_agent:rf_sink_endofpacket
	wire         load_s1_agent_rsp_fifo_out_valid;                                                      // load_s1_agent_rsp_fifo:out_valid -> load_s1_agent:rf_sink_valid
	wire         load_s1_agent_rsp_fifo_out_startofpacket;                                              // load_s1_agent_rsp_fifo:out_startofpacket -> load_s1_agent:rf_sink_startofpacket
	wire  [98:0] load_s1_agent_rsp_fifo_out_data;                                                       // load_s1_agent_rsp_fifo:out_data -> load_s1_agent:rf_sink_data
	wire         load_s1_agent_rsp_fifo_out_ready;                                                      // load_s1_agent:rf_sink_ready -> load_s1_agent_rsp_fifo:out_ready
	wire         load_s1_agent_rdata_fifo_src_valid;                                                    // load_s1_agent:rdata_fifo_src_valid -> load_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] load_s1_agent_rdata_fifo_src_data;                                                     // load_s1_agent:rdata_fifo_src_data -> load_s1_agent:rdata_fifo_sink_data
	wire         load_s1_agent_rdata_fifo_src_ready;                                                    // load_s1_agent:rdata_fifo_sink_ready -> load_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_endofpacket;                                                           // cmd_mux_013:src_endofpacket -> load_s1_agent:cp_endofpacket
	wire         cmd_mux_013_src_valid;                                                                 // cmd_mux_013:src_valid -> load_s1_agent:cp_valid
	wire         cmd_mux_013_src_startofpacket;                                                         // cmd_mux_013:src_startofpacket -> load_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_013_src_data;                                                                  // cmd_mux_013:src_data -> load_s1_agent:cp_data
	wire  [14:0] cmd_mux_013_src_channel;                                                               // cmd_mux_013:src_channel -> load_s1_agent:cp_channel
	wire         cmd_mux_013_src_ready;                                                                 // load_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire         testin_s1_agent_m0_waitrequest;                                                        // testin_s1_translator:uav_waitrequest -> testin_s1_agent:m0_waitrequest
	wire   [2:0] testin_s1_agent_m0_burstcount;                                                         // testin_s1_agent:m0_burstcount -> testin_s1_translator:uav_burstcount
	wire  [31:0] testin_s1_agent_m0_writedata;                                                          // testin_s1_agent:m0_writedata -> testin_s1_translator:uav_writedata
	wire  [19:0] testin_s1_agent_m0_address;                                                            // testin_s1_agent:m0_address -> testin_s1_translator:uav_address
	wire         testin_s1_agent_m0_write;                                                              // testin_s1_agent:m0_write -> testin_s1_translator:uav_write
	wire         testin_s1_agent_m0_lock;                                                               // testin_s1_agent:m0_lock -> testin_s1_translator:uav_lock
	wire         testin_s1_agent_m0_read;                                                               // testin_s1_agent:m0_read -> testin_s1_translator:uav_read
	wire  [31:0] testin_s1_agent_m0_readdata;                                                           // testin_s1_translator:uav_readdata -> testin_s1_agent:m0_readdata
	wire         testin_s1_agent_m0_readdatavalid;                                                      // testin_s1_translator:uav_readdatavalid -> testin_s1_agent:m0_readdatavalid
	wire         testin_s1_agent_m0_debugaccess;                                                        // testin_s1_agent:m0_debugaccess -> testin_s1_translator:uav_debugaccess
	wire   [3:0] testin_s1_agent_m0_byteenable;                                                         // testin_s1_agent:m0_byteenable -> testin_s1_translator:uav_byteenable
	wire         testin_s1_agent_rf_source_endofpacket;                                                 // testin_s1_agent:rf_source_endofpacket -> testin_s1_agent_rsp_fifo:in_endofpacket
	wire         testin_s1_agent_rf_source_valid;                                                       // testin_s1_agent:rf_source_valid -> testin_s1_agent_rsp_fifo:in_valid
	wire         testin_s1_agent_rf_source_startofpacket;                                               // testin_s1_agent:rf_source_startofpacket -> testin_s1_agent_rsp_fifo:in_startofpacket
	wire  [98:0] testin_s1_agent_rf_source_data;                                                        // testin_s1_agent:rf_source_data -> testin_s1_agent_rsp_fifo:in_data
	wire         testin_s1_agent_rf_source_ready;                                                       // testin_s1_agent_rsp_fifo:in_ready -> testin_s1_agent:rf_source_ready
	wire         testin_s1_agent_rsp_fifo_out_endofpacket;                                              // testin_s1_agent_rsp_fifo:out_endofpacket -> testin_s1_agent:rf_sink_endofpacket
	wire         testin_s1_agent_rsp_fifo_out_valid;                                                    // testin_s1_agent_rsp_fifo:out_valid -> testin_s1_agent:rf_sink_valid
	wire         testin_s1_agent_rsp_fifo_out_startofpacket;                                            // testin_s1_agent_rsp_fifo:out_startofpacket -> testin_s1_agent:rf_sink_startofpacket
	wire  [98:0] testin_s1_agent_rsp_fifo_out_data;                                                     // testin_s1_agent_rsp_fifo:out_data -> testin_s1_agent:rf_sink_data
	wire         testin_s1_agent_rsp_fifo_out_ready;                                                    // testin_s1_agent:rf_sink_ready -> testin_s1_agent_rsp_fifo:out_ready
	wire         testin_s1_agent_rdata_fifo_src_valid;                                                  // testin_s1_agent:rdata_fifo_src_valid -> testin_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] testin_s1_agent_rdata_fifo_src_data;                                                   // testin_s1_agent:rdata_fifo_src_data -> testin_s1_agent:rdata_fifo_sink_data
	wire         testin_s1_agent_rdata_fifo_src_ready;                                                  // testin_s1_agent:rdata_fifo_sink_ready -> testin_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_014_src_endofpacket;                                                           // cmd_mux_014:src_endofpacket -> testin_s1_agent:cp_endofpacket
	wire         cmd_mux_014_src_valid;                                                                 // cmd_mux_014:src_valid -> testin_s1_agent:cp_valid
	wire         cmd_mux_014_src_startofpacket;                                                         // cmd_mux_014:src_startofpacket -> testin_s1_agent:cp_startofpacket
	wire  [97:0] cmd_mux_014_src_data;                                                                  // cmd_mux_014:src_data -> testin_s1_agent:cp_data
	wire  [14:0] cmd_mux_014_src_channel;                                                               // cmd_mux_014:src_channel -> testin_s1_agent:cp_channel
	wire         cmd_mux_014_src_ready;                                                                 // testin_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire         nios2_processor_instruction_master_agent_cp_endofpacket;                               // nios2_processor_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         nios2_processor_instruction_master_agent_cp_valid;                                     // nios2_processor_instruction_master_agent:cp_valid -> router:sink_valid
	wire         nios2_processor_instruction_master_agent_cp_startofpacket;                             // nios2_processor_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [97:0] nios2_processor_instruction_master_agent_cp_data;                                      // nios2_processor_instruction_master_agent:cp_data -> router:sink_data
	wire         nios2_processor_instruction_master_agent_cp_ready;                                     // router:sink_ready -> nios2_processor_instruction_master_agent:cp_ready
	wire         nios2_processor_data_master_agent_cp_endofpacket;                                      // nios2_processor_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         nios2_processor_data_master_agent_cp_valid;                                            // nios2_processor_data_master_agent:cp_valid -> router_001:sink_valid
	wire         nios2_processor_data_master_agent_cp_startofpacket;                                    // nios2_processor_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [97:0] nios2_processor_data_master_agent_cp_data;                                             // nios2_processor_data_master_agent:cp_data -> router_001:sink_data
	wire         nios2_processor_data_master_agent_cp_ready;                                            // router_001:sink_ready -> nios2_processor_data_master_agent:cp_ready
	wire         nios2_processor_jtag_debug_module_agent_rp_endofpacket;                                // nios2_processor_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         nios2_processor_jtag_debug_module_agent_rp_valid;                                      // nios2_processor_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire         nios2_processor_jtag_debug_module_agent_rp_startofpacket;                              // nios2_processor_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [97:0] nios2_processor_jtag_debug_module_agent_rp_data;                                       // nios2_processor_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire         nios2_processor_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> nios2_processor_jtag_debug_module_agent:rp_ready
	wire         router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire         router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [97:0] router_002_src_data;                                                                   // router_002:src_data -> rsp_demux:sink_data
	wire  [14:0] router_002_src_channel;                                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_ready;                                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire         onchip_memory_s1_agent_rp_endofpacket;                                                 // onchip_memory_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         onchip_memory_s1_agent_rp_valid;                                                       // onchip_memory_s1_agent:rp_valid -> router_003:sink_valid
	wire         onchip_memory_s1_agent_rp_startofpacket;                                               // onchip_memory_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [97:0] onchip_memory_s1_agent_rp_data;                                                        // onchip_memory_s1_agent:rp_data -> router_003:sink_data
	wire         onchip_memory_s1_agent_rp_ready;                                                       // router_003:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                                            // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                                                  // router_003:src_valid -> rsp_demux_001:sink_valid
	wire         router_003_src_startofpacket;                                                          // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [97:0] router_003_src_data;                                                                   // router_003:src_data -> rsp_demux_001:sink_data
	wire  [14:0] router_003_src_channel;                                                                // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_ready;                                                                  // rsp_demux_001:sink_ready -> router_003:src_ready
	wire         leds_s1_agent_rp_endofpacket;                                                          // LEDs_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         leds_s1_agent_rp_valid;                                                                // LEDs_s1_agent:rp_valid -> router_004:sink_valid
	wire         leds_s1_agent_rp_startofpacket;                                                        // LEDs_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [97:0] leds_s1_agent_rp_data;                                                                 // LEDs_s1_agent:rp_data -> router_004:sink_data
	wire         leds_s1_agent_rp_ready;                                                                // router_004:sink_ready -> LEDs_s1_agent:rp_ready
	wire         router_004_src_endofpacket;                                                            // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_004_src_valid;                                                                  // router_004:src_valid -> rsp_demux_002:sink_valid
	wire         router_004_src_startofpacket;                                                          // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [97:0] router_004_src_data;                                                                   // router_004:src_data -> rsp_demux_002:sink_data
	wire  [14:0] router_004_src_channel;                                                                // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_ready;                                                                  // rsp_demux_002:sink_ready -> router_004:src_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                                            // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                    // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [97:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                             // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                                            // router_005:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         router_005_src_endofpacket;                                                            // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                                                  // router_005:src_valid -> rsp_demux_003:sink_valid
	wire         router_005_src_startofpacket;                                                          // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [97:0] router_005_src_data;                                                                   // router_005:src_data -> rsp_demux_003:sink_data
	wire  [14:0] router_005_src_channel;                                                                // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_ready;                                                                  // rsp_demux_003:sink_ready -> router_005:src_ready
	wire         data_s1_agent_rp_endofpacket;                                                          // data_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         data_s1_agent_rp_valid;                                                                // data_s1_agent:rp_valid -> router_006:sink_valid
	wire         data_s1_agent_rp_startofpacket;                                                        // data_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [97:0] data_s1_agent_rp_data;                                                                 // data_s1_agent:rp_data -> router_006:sink_data
	wire         data_s1_agent_rp_ready;                                                                // router_006:sink_ready -> data_s1_agent:rp_ready
	wire         router_006_src_endofpacket;                                                            // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_006_src_valid;                                                                  // router_006:src_valid -> rsp_demux_004:sink_valid
	wire         router_006_src_startofpacket;                                                          // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [97:0] router_006_src_data;                                                                   // router_006:src_data -> rsp_demux_004:sink_data
	wire  [14:0] router_006_src_channel;                                                                // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_ready;                                                                  // rsp_demux_004:sink_ready -> router_006:src_ready
	wire         address_s1_agent_rp_endofpacket;                                                       // address_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         address_s1_agent_rp_valid;                                                             // address_s1_agent:rp_valid -> router_007:sink_valid
	wire         address_s1_agent_rp_startofpacket;                                                     // address_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [97:0] address_s1_agent_rp_data;                                                              // address_s1_agent:rp_data -> router_007:sink_data
	wire         address_s1_agent_rp_ready;                                                             // router_007:sink_ready -> address_s1_agent:rp_ready
	wire         router_007_src_endofpacket;                                                            // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_007_src_valid;                                                                  // router_007:src_valid -> rsp_demux_005:sink_valid
	wire         router_007_src_startofpacket;                                                          // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [97:0] router_007_src_data;                                                                   // router_007:src_data -> rsp_demux_005:sink_data
	wire  [14:0] router_007_src_channel;                                                                // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_ready;                                                                  // rsp_demux_005:sink_ready -> router_007:src_ready
	wire         rnw_s1_agent_rp_endofpacket;                                                           // rnw_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         rnw_s1_agent_rp_valid;                                                                 // rnw_s1_agent:rp_valid -> router_008:sink_valid
	wire         rnw_s1_agent_rp_startofpacket;                                                         // rnw_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [97:0] rnw_s1_agent_rp_data;                                                                  // rnw_s1_agent:rp_data -> router_008:sink_data
	wire         rnw_s1_agent_rp_ready;                                                                 // router_008:sink_ready -> rnw_s1_agent:rp_ready
	wire         router_008_src_endofpacket;                                                            // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_008_src_valid;                                                                  // router_008:src_valid -> rsp_demux_006:sink_valid
	wire         router_008_src_startofpacket;                                                          // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [97:0] router_008_src_data;                                                                   // router_008:src_data -> rsp_demux_006:sink_data
	wire  [14:0] router_008_src_channel;                                                                // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_ready;                                                                  // rsp_demux_006:sink_ready -> router_008:src_ready
	wire         noe_s1_agent_rp_endofpacket;                                                           // noe_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         noe_s1_agent_rp_valid;                                                                 // noe_s1_agent:rp_valid -> router_009:sink_valid
	wire         noe_s1_agent_rp_startofpacket;                                                         // noe_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [97:0] noe_s1_agent_rp_data;                                                                  // noe_s1_agent:rp_data -> router_009:sink_data
	wire         noe_s1_agent_rp_ready;                                                                 // router_009:sink_ready -> noe_s1_agent:rp_ready
	wire         router_009_src_endofpacket;                                                            // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_009_src_valid;                                                                  // router_009:src_valid -> rsp_demux_007:sink_valid
	wire         router_009_src_startofpacket;                                                          // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [97:0] router_009_src_data;                                                                   // router_009:src_data -> rsp_demux_007:sink_data
	wire  [14:0] router_009_src_channel;                                                                // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_ready;                                                                  // rsp_demux_007:sink_ready -> router_009:src_ready
	wire         mpdatain_s1_agent_rp_endofpacket;                                                      // mpdatain_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         mpdatain_s1_agent_rp_valid;                                                            // mpdatain_s1_agent:rp_valid -> router_010:sink_valid
	wire         mpdatain_s1_agent_rp_startofpacket;                                                    // mpdatain_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [97:0] mpdatain_s1_agent_rp_data;                                                             // mpdatain_s1_agent:rp_data -> router_010:sink_data
	wire         mpdatain_s1_agent_rp_ready;                                                            // router_010:sink_ready -> mpdatain_s1_agent:rp_ready
	wire         router_010_src_endofpacket;                                                            // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         router_010_src_valid;                                                                  // router_010:src_valid -> rsp_demux_008:sink_valid
	wire         router_010_src_startofpacket;                                                          // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [97:0] router_010_src_data;                                                                   // router_010:src_data -> rsp_demux_008:sink_data
	wire  [14:0] router_010_src_channel;                                                                // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_ready;                                                                  // rsp_demux_008:sink_ready -> router_010:src_ready
	wire         chrec_s1_agent_rp_endofpacket;                                                         // chrec_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         chrec_s1_agent_rp_valid;                                                               // chrec_s1_agent:rp_valid -> router_011:sink_valid
	wire         chrec_s1_agent_rp_startofpacket;                                                       // chrec_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [97:0] chrec_s1_agent_rp_data;                                                                // chrec_s1_agent:rp_data -> router_011:sink_data
	wire         chrec_s1_agent_rp_ready;                                                               // router_011:sink_ready -> chrec_s1_agent:rp_ready
	wire         router_011_src_endofpacket;                                                            // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_011_src_valid;                                                                  // router_011:src_valid -> rsp_demux_009:sink_valid
	wire         router_011_src_startofpacket;                                                          // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [97:0] router_011_src_data;                                                                   // router_011:src_data -> rsp_demux_009:sink_data
	wire  [14:0] router_011_src_channel;                                                                // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_ready;                                                                  // rsp_demux_009:sink_ready -> router_011:src_ready
	wire         mpdataout_s1_agent_rp_endofpacket;                                                     // mpdataout_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         mpdataout_s1_agent_rp_valid;                                                           // mpdataout_s1_agent:rp_valid -> router_012:sink_valid
	wire         mpdataout_s1_agent_rp_startofpacket;                                                   // mpdataout_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [97:0] mpdataout_s1_agent_rp_data;                                                            // mpdataout_s1_agent:rp_data -> router_012:sink_data
	wire         mpdataout_s1_agent_rp_ready;                                                           // router_012:sink_ready -> mpdataout_s1_agent:rp_ready
	wire         router_012_src_endofpacket;                                                            // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         router_012_src_valid;                                                                  // router_012:src_valid -> rsp_demux_010:sink_valid
	wire         router_012_src_startofpacket;                                                          // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [97:0] router_012_src_data;                                                                   // router_012:src_data -> rsp_demux_010:sink_data
	wire  [14:0] router_012_src_channel;                                                                // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_ready;                                                                  // rsp_demux_010:sink_ready -> router_012:src_ready
	wire         asoe_s1_agent_rp_endofpacket;                                                          // asoe_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         asoe_s1_agent_rp_valid;                                                                // asoe_s1_agent:rp_valid -> router_013:sink_valid
	wire         asoe_s1_agent_rp_startofpacket;                                                        // asoe_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [97:0] asoe_s1_agent_rp_data;                                                                 // asoe_s1_agent:rp_data -> router_013:sink_data
	wire         asoe_s1_agent_rp_ready;                                                                // router_013:sink_ready -> asoe_s1_agent:rp_ready
	wire         router_013_src_endofpacket;                                                            // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_013_src_valid;                                                                  // router_013:src_valid -> rsp_demux_011:sink_valid
	wire         router_013_src_startofpacket;                                                          // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [97:0] router_013_src_data;                                                                   // router_013:src_data -> rsp_demux_011:sink_data
	wire  [14:0] router_013_src_channel;                                                                // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_ready;                                                                  // rsp_demux_011:sink_ready -> router_013:src_ready
	wire         sent_s1_agent_rp_endofpacket;                                                          // sent_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         sent_s1_agent_rp_valid;                                                                // sent_s1_agent:rp_valid -> router_014:sink_valid
	wire         sent_s1_agent_rp_startofpacket;                                                        // sent_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [97:0] sent_s1_agent_rp_data;                                                                 // sent_s1_agent:rp_data -> router_014:sink_data
	wire         sent_s1_agent_rp_ready;                                                                // router_014:sink_ready -> sent_s1_agent:rp_ready
	wire         router_014_src_endofpacket;                                                            // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         router_014_src_valid;                                                                  // router_014:src_valid -> rsp_demux_012:sink_valid
	wire         router_014_src_startofpacket;                                                          // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [97:0] router_014_src_data;                                                                   // router_014:src_data -> rsp_demux_012:sink_data
	wire  [14:0] router_014_src_channel;                                                                // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_ready;                                                                  // rsp_demux_012:sink_ready -> router_014:src_ready
	wire         load_s1_agent_rp_endofpacket;                                                          // load_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         load_s1_agent_rp_valid;                                                                // load_s1_agent:rp_valid -> router_015:sink_valid
	wire         load_s1_agent_rp_startofpacket;                                                        // load_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [97:0] load_s1_agent_rp_data;                                                                 // load_s1_agent:rp_data -> router_015:sink_data
	wire         load_s1_agent_rp_ready;                                                                // router_015:sink_ready -> load_s1_agent:rp_ready
	wire         router_015_src_endofpacket;                                                            // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         router_015_src_valid;                                                                  // router_015:src_valid -> rsp_demux_013:sink_valid
	wire         router_015_src_startofpacket;                                                          // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [97:0] router_015_src_data;                                                                   // router_015:src_data -> rsp_demux_013:sink_data
	wire  [14:0] router_015_src_channel;                                                                // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_ready;                                                                  // rsp_demux_013:sink_ready -> router_015:src_ready
	wire         testin_s1_agent_rp_endofpacket;                                                        // testin_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         testin_s1_agent_rp_valid;                                                              // testin_s1_agent:rp_valid -> router_016:sink_valid
	wire         testin_s1_agent_rp_startofpacket;                                                      // testin_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [97:0] testin_s1_agent_rp_data;                                                               // testin_s1_agent:rp_data -> router_016:sink_data
	wire         testin_s1_agent_rp_ready;                                                              // router_016:sink_ready -> testin_s1_agent:rp_ready
	wire         router_016_src_endofpacket;                                                            // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         router_016_src_valid;                                                                  // router_016:src_valid -> rsp_demux_014:sink_valid
	wire         router_016_src_startofpacket;                                                          // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [97:0] router_016_src_data;                                                                   // router_016:src_data -> rsp_demux_014:sink_data
	wire  [14:0] router_016_src_channel;                                                                // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_ready;                                                                  // rsp_demux_014:sink_ready -> router_016:src_ready
	wire         router_src_endofpacket;                                                                // router:src_endofpacket -> nios2_processor_instruction_master_limiter:cmd_sink_endofpacket
	wire         router_src_valid;                                                                      // router:src_valid -> nios2_processor_instruction_master_limiter:cmd_sink_valid
	wire         router_src_startofpacket;                                                              // router:src_startofpacket -> nios2_processor_instruction_master_limiter:cmd_sink_startofpacket
	wire  [97:0] router_src_data;                                                                       // router:src_data -> nios2_processor_instruction_master_limiter:cmd_sink_data
	wire  [14:0] router_src_channel;                                                                    // router:src_channel -> nios2_processor_instruction_master_limiter:cmd_sink_channel
	wire         router_src_ready;                                                                      // nios2_processor_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	wire         nios2_processor_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_processor_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         nios2_processor_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_processor_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [97:0] nios2_processor_instruction_master_limiter_cmd_src_data;                               // nios2_processor_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire  [14:0] nios2_processor_instruction_master_limiter_cmd_src_channel;                            // nios2_processor_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         nios2_processor_instruction_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> nios2_processor_instruction_master_limiter:cmd_src_ready
	wire         rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> nios2_processor_instruction_master_limiter:rsp_sink_endofpacket
	wire         rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> nios2_processor_instruction_master_limiter:rsp_sink_valid
	wire         rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> nios2_processor_instruction_master_limiter:rsp_sink_startofpacket
	wire  [97:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> nios2_processor_instruction_master_limiter:rsp_sink_data
	wire  [14:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> nios2_processor_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_src_ready;                                                                     // nios2_processor_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire         nios2_processor_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_processor_instruction_master_limiter:rsp_src_endofpacket -> nios2_processor_instruction_master_agent:rp_endofpacket
	wire         nios2_processor_instruction_master_limiter_rsp_src_valid;                              // nios2_processor_instruction_master_limiter:rsp_src_valid -> nios2_processor_instruction_master_agent:rp_valid
	wire         nios2_processor_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_processor_instruction_master_limiter:rsp_src_startofpacket -> nios2_processor_instruction_master_agent:rp_startofpacket
	wire  [97:0] nios2_processor_instruction_master_limiter_rsp_src_data;                               // nios2_processor_instruction_master_limiter:rsp_src_data -> nios2_processor_instruction_master_agent:rp_data
	wire  [14:0] nios2_processor_instruction_master_limiter_rsp_src_channel;                            // nios2_processor_instruction_master_limiter:rsp_src_channel -> nios2_processor_instruction_master_agent:rp_channel
	wire         nios2_processor_instruction_master_limiter_rsp_src_ready;                              // nios2_processor_instruction_master_agent:rp_ready -> nios2_processor_instruction_master_limiter:rsp_src_ready
	wire         router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> nios2_processor_data_master_limiter:cmd_sink_endofpacket
	wire         router_001_src_valid;                                                                  // router_001:src_valid -> nios2_processor_data_master_limiter:cmd_sink_valid
	wire         router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> nios2_processor_data_master_limiter:cmd_sink_startofpacket
	wire  [97:0] router_001_src_data;                                                                   // router_001:src_data -> nios2_processor_data_master_limiter:cmd_sink_data
	wire  [14:0] router_001_src_channel;                                                                // router_001:src_channel -> nios2_processor_data_master_limiter:cmd_sink_channel
	wire         router_001_src_ready;                                                                  // nios2_processor_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire         nios2_processor_data_master_limiter_cmd_src_endofpacket;                               // nios2_processor_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         nios2_processor_data_master_limiter_cmd_src_startofpacket;                             // nios2_processor_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [97:0] nios2_processor_data_master_limiter_cmd_src_data;                                      // nios2_processor_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire  [14:0] nios2_processor_data_master_limiter_cmd_src_channel;                                   // nios2_processor_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         nios2_processor_data_master_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> nios2_processor_data_master_limiter:cmd_src_ready
	wire         rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> nios2_processor_data_master_limiter:rsp_sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> nios2_processor_data_master_limiter:rsp_sink_valid
	wire         rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> nios2_processor_data_master_limiter:rsp_sink_startofpacket
	wire  [97:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> nios2_processor_data_master_limiter:rsp_sink_data
	wire  [14:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> nios2_processor_data_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_ready;                                                                 // nios2_processor_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire         nios2_processor_data_master_limiter_rsp_src_endofpacket;                               // nios2_processor_data_master_limiter:rsp_src_endofpacket -> nios2_processor_data_master_agent:rp_endofpacket
	wire         nios2_processor_data_master_limiter_rsp_src_valid;                                     // nios2_processor_data_master_limiter:rsp_src_valid -> nios2_processor_data_master_agent:rp_valid
	wire         nios2_processor_data_master_limiter_rsp_src_startofpacket;                             // nios2_processor_data_master_limiter:rsp_src_startofpacket -> nios2_processor_data_master_agent:rp_startofpacket
	wire  [97:0] nios2_processor_data_master_limiter_rsp_src_data;                                      // nios2_processor_data_master_limiter:rsp_src_data -> nios2_processor_data_master_agent:rp_data
	wire  [14:0] nios2_processor_data_master_limiter_rsp_src_channel;                                   // nios2_processor_data_master_limiter:rsp_src_channel -> nios2_processor_data_master_agent:rp_channel
	wire         nios2_processor_data_master_limiter_rsp_src_ready;                                     // nios2_processor_data_master_agent:rp_ready -> nios2_processor_data_master_limiter:rsp_src_ready
	wire         cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [97:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire  [14:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [97:0] cmd_demux_src1_data;                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire  [14:0] cmd_demux_src1_channel;                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire         cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [97:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire  [14:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_ready;                                                              // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire         cmd_demux_001_src1_endofpacket;                                                        // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                              // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire         cmd_demux_001_src1_startofpacket;                                                      // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [97:0] cmd_demux_001_src1_data;                                                               // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire  [14:0] cmd_demux_001_src1_channel;                                                            // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_ready;                                                              // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire         cmd_demux_001_src2_endofpacket;                                                        // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_001_src2_valid;                                                              // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_001_src2_startofpacket;                                                      // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src2_data;                                                               // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire  [14:0] cmd_demux_001_src2_channel;                                                            // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_001_src2_ready;                                                              // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire         cmd_demux_001_src3_endofpacket;                                                        // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src3_valid;                                                              // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_001_src3_startofpacket;                                                      // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src3_data;                                                               // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire  [14:0] cmd_demux_001_src3_channel;                                                            // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_001_src3_ready;                                                              // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire         cmd_demux_001_src4_endofpacket;                                                        // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_001_src4_valid;                                                              // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_001_src4_startofpacket;                                                      // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src4_data;                                                               // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire  [14:0] cmd_demux_001_src4_channel;                                                            // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_001_src4_ready;                                                              // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire         cmd_demux_001_src5_endofpacket;                                                        // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_001_src5_valid;                                                              // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire         cmd_demux_001_src5_startofpacket;                                                      // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src5_data;                                                               // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire  [14:0] cmd_demux_001_src5_channel;                                                            // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_001_src5_ready;                                                              // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire         cmd_demux_001_src6_endofpacket;                                                        // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_001_src6_valid;                                                              // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire         cmd_demux_001_src6_startofpacket;                                                      // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src6_data;                                                               // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire  [14:0] cmd_demux_001_src6_channel;                                                            // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_001_src6_ready;                                                              // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire         cmd_demux_001_src7_endofpacket;                                                        // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_001_src7_valid;                                                              // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire         cmd_demux_001_src7_startofpacket;                                                      // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src7_data;                                                               // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire  [14:0] cmd_demux_001_src7_channel;                                                            // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_001_src7_ready;                                                              // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire         cmd_demux_001_src8_endofpacket;                                                        // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_001_src8_valid;                                                              // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire         cmd_demux_001_src8_startofpacket;                                                      // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src8_data;                                                               // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire  [14:0] cmd_demux_001_src8_channel;                                                            // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_001_src8_ready;                                                              // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire         cmd_demux_001_src9_endofpacket;                                                        // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src9_valid;                                                              // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire         cmd_demux_001_src9_startofpacket;                                                      // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src9_data;                                                               // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire  [14:0] cmd_demux_001_src9_channel;                                                            // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_001_src9_ready;                                                              // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire         cmd_demux_001_src10_endofpacket;                                                       // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_001_src10_valid;                                                             // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire         cmd_demux_001_src10_startofpacket;                                                     // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src10_data;                                                              // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire  [14:0] cmd_demux_001_src10_channel;                                                           // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_001_src10_ready;                                                             // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire         cmd_demux_001_src11_endofpacket;                                                       // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_001_src11_valid;                                                             // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire         cmd_demux_001_src11_startofpacket;                                                     // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src11_data;                                                              // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire  [14:0] cmd_demux_001_src11_channel;                                                           // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_001_src11_ready;                                                             // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire         cmd_demux_001_src12_endofpacket;                                                       // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_001_src12_valid;                                                             // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire         cmd_demux_001_src12_startofpacket;                                                     // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src12_data;                                                              // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire  [14:0] cmd_demux_001_src12_channel;                                                           // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_001_src12_ready;                                                             // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire         cmd_demux_001_src13_endofpacket;                                                       // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_001_src13_valid;                                                             // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire         cmd_demux_001_src13_startofpacket;                                                     // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src13_data;                                                              // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire  [14:0] cmd_demux_001_src13_channel;                                                           // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_001_src13_ready;                                                             // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire         cmd_demux_001_src14_endofpacket;                                                       // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_001_src14_valid;                                                             // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire         cmd_demux_001_src14_startofpacket;                                                     // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [97:0] cmd_demux_001_src14_data;                                                              // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire  [14:0] cmd_demux_001_src14_channel;                                                           // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_001_src14_ready;                                                             // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire         rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [97:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire  [14:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_src1_endofpacket;                                                            // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                                  // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire         rsp_demux_src1_startofpacket;                                                          // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [97:0] rsp_demux_src1_data;                                                                   // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire  [14:0] rsp_demux_src1_channel;                                                                // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire         rsp_demux_001_src0_endofpacket;                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [97:0] rsp_demux_001_src0_data;                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire  [14:0] rsp_demux_001_src0_channel;                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_001_src1_endofpacket;                                                        // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                              // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire         rsp_demux_001_src1_startofpacket;                                                      // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [97:0] rsp_demux_001_src1_data;                                                               // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire  [14:0] rsp_demux_001_src1_channel;                                                            // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_ready;                                                              // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire         rsp_demux_002_src0_endofpacket;                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_002_src0_valid;                                                              // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire         rsp_demux_002_src0_startofpacket;                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [97:0] rsp_demux_002_src0_data;                                                               // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire  [14:0] rsp_demux_002_src0_channel;                                                            // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_002_src0_ready;                                                              // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         rsp_demux_003_src0_valid;                                                              // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire         rsp_demux_003_src0_startofpacket;                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [97:0] rsp_demux_003_src0_data;                                                               // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire  [14:0] rsp_demux_003_src0_channel;                                                            // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire         rsp_demux_003_src0_ready;                                                              // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_004_src0_valid;                                                              // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire         rsp_demux_004_src0_startofpacket;                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [97:0] rsp_demux_004_src0_data;                                                               // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire  [14:0] rsp_demux_004_src0_channel;                                                            // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_004_src0_ready;                                                              // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire         rsp_demux_005_src0_endofpacket;                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire         rsp_demux_005_src0_valid;                                                              // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire         rsp_demux_005_src0_startofpacket;                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [97:0] rsp_demux_005_src0_data;                                                               // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire  [14:0] rsp_demux_005_src0_channel;                                                            // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire         rsp_demux_005_src0_ready;                                                              // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire         rsp_demux_006_src0_endofpacket;                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire         rsp_demux_006_src0_valid;                                                              // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire         rsp_demux_006_src0_startofpacket;                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [97:0] rsp_demux_006_src0_data;                                                               // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire  [14:0] rsp_demux_006_src0_channel;                                                            // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire         rsp_demux_006_src0_ready;                                                              // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire         rsp_demux_007_src0_endofpacket;                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire         rsp_demux_007_src0_valid;                                                              // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire         rsp_demux_007_src0_startofpacket;                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [97:0] rsp_demux_007_src0_data;                                                               // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire  [14:0] rsp_demux_007_src0_channel;                                                            // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire         rsp_demux_007_src0_ready;                                                              // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire         rsp_demux_008_src0_endofpacket;                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire         rsp_demux_008_src0_valid;                                                              // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire         rsp_demux_008_src0_startofpacket;                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [97:0] rsp_demux_008_src0_data;                                                               // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire  [14:0] rsp_demux_008_src0_channel;                                                            // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire         rsp_demux_008_src0_ready;                                                              // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire         rsp_demux_009_src0_endofpacket;                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire         rsp_demux_009_src0_valid;                                                              // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire         rsp_demux_009_src0_startofpacket;                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire  [97:0] rsp_demux_009_src0_data;                                                               // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire  [14:0] rsp_demux_009_src0_channel;                                                            // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire         rsp_demux_009_src0_ready;                                                              // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire         rsp_demux_010_src0_endofpacket;                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire         rsp_demux_010_src0_valid;                                                              // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire         rsp_demux_010_src0_startofpacket;                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire  [97:0] rsp_demux_010_src0_data;                                                               // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire  [14:0] rsp_demux_010_src0_channel;                                                            // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire         rsp_demux_010_src0_ready;                                                              // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire         rsp_demux_011_src0_endofpacket;                                                        // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire         rsp_demux_011_src0_valid;                                                              // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire         rsp_demux_011_src0_startofpacket;                                                      // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire  [97:0] rsp_demux_011_src0_data;                                                               // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire  [14:0] rsp_demux_011_src0_channel;                                                            // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire         rsp_demux_011_src0_ready;                                                              // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire         rsp_demux_012_src0_endofpacket;                                                        // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire         rsp_demux_012_src0_valid;                                                              // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire         rsp_demux_012_src0_startofpacket;                                                      // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire  [97:0] rsp_demux_012_src0_data;                                                               // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire  [14:0] rsp_demux_012_src0_channel;                                                            // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire         rsp_demux_012_src0_ready;                                                              // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire         rsp_demux_013_src0_endofpacket;                                                        // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire         rsp_demux_013_src0_valid;                                                              // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire         rsp_demux_013_src0_startofpacket;                                                      // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire  [97:0] rsp_demux_013_src0_data;                                                               // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire  [14:0] rsp_demux_013_src0_channel;                                                            // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire         rsp_demux_013_src0_ready;                                                              // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire         rsp_demux_014_src0_endofpacket;                                                        // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire         rsp_demux_014_src0_valid;                                                              // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire         rsp_demux_014_src0_startofpacket;                                                      // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire  [97:0] rsp_demux_014_src0_data;                                                               // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire  [14:0] rsp_demux_014_src0_channel;                                                            // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire         rsp_demux_014_src0_ready;                                                              // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire  [14:0] nios2_processor_instruction_master_limiter_cmd_valid_data;                             // nios2_processor_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire  [14:0] nios2_processor_data_master_limiter_cmd_valid_data;                                    // nios2_processor_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_processor_instruction_master_translator (
		.clk                      (clk_0_clk_clk),                                                                         //                       clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_processor_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_processor_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios2_processor_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                                  //               (terminated)
		.av_byteenable            (4'b1111),                                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                                  //               (terminated)
		.av_begintransfer         (1'b0),                                                                                  //               (terminated)
		.av_chipselect            (1'b0),                                                                                  //               (terminated)
		.av_write                 (1'b0),                                                                                  //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                                  //               (terminated)
		.av_lock                  (1'b0),                                                                                  //               (terminated)
		.av_debugaccess           (1'b0),                                                                                  //               (terminated)
		.uav_clken                (),                                                                                      //               (terminated)
		.av_clken                 (1'b1),                                                                                  //               (terminated)
		.uav_response             (2'b00),                                                                                 //               (terminated)
		.av_response              (),                                                                                      //               (terminated)
		.uav_writeresponserequest (),                                                                                      //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                  //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                  //               (terminated)
		.av_writeresponsevalid    ()                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_processor_data_master_translator (
		.clk                      (clk_0_clk_clk),                                                                  //                       clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_processor_data_master_read),                                               //                          .read
		.av_readdata              (nios2_processor_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios2_processor_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (nios2_processor_data_master_write),                                              //                          .write
		.av_writedata             (nios2_processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                           //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                           //               (terminated)
		.av_begintransfer         (1'b0),                                                                           //               (terminated)
		.av_chipselect            (1'b0),                                                                           //               (terminated)
		.av_lock                  (1'b0),                                                                           //               (terminated)
		.uav_clken                (),                                                                               //               (terminated)
		.av_clken                 (1'b1),                                                                           //               (terminated)
		.uav_response             (2'b00),                                                                          //               (terminated)
		.av_response              (),                                                                               //               (terminated)
		.uav_writeresponserequest (),                                                                               //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                           //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid    ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_processor_jtag_debug_module_translator (
		.clk                      (clk_0_clk_clk),                                            //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (nios2_processor_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_processor_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_processor_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (nios2_processor_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_processor_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_processor_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_processor_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_processor_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_processor_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_processor_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_processor_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_processor_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (nios2_processor_jtag_debug_module_write),                  //                         .write
		.av_read                  (nios2_processor_jtag_debug_module_read),                   //                         .read
		.av_readdata              (nios2_processor_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (nios2_processor_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (nios2_processor_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (nios2_processor_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (nios2_processor_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                         //              (terminated)
		.av_burstcount            (),                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                     //              (terminated)
		.av_writebyteenable       (),                                                         //              (terminated)
		.av_lock                  (),                                                         //              (terminated)
		.av_chipselect            (),                                                         //              (terminated)
		.av_clken                 (),                                                         //              (terminated)
		.uav_clken                (1'b0),                                                     //              (terminated)
		.av_outputenable          (),                                                         //              (terminated)
		.uav_response             (),                                                         //              (terminated)
		.av_response              (2'b00),                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                         //              (terminated)
		.av_writeresponserequest  (),                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (onchip_memory_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (onchip_memory_s1_agent_m0_read),                      //                         .read
		.uav_write                (onchip_memory_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (onchip_memory_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (onchip_memory_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (onchip_memory_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (onchip_memory_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (onchip_memory_s1_address),                            //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory_s1_write),                              //                         .write
		.av_readdata              (onchip_memory_s1_readdata),                           //                         .readdata
		.av_writedata             (onchip_memory_s1_writedata),                          //                         .writedata
		.av_byteenable            (onchip_memory_s1_byteenable),                         //                         .byteenable
		.av_chipselect            (onchip_memory_s1_chipselect),                         //                         .chipselect
		.av_clken                 (onchip_memory_s1_clken),                              //                         .clken
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (leds_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount           (leds_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read                 (leds_s1_agent_m0_read),                               //                         .read
		.uav_write                (leds_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest          (leds_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid        (leds_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable           (leds_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata             (leds_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata            (leds_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock                 (leds_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess          (leds_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address               (LEDs_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write                 (LEDs_s1_write),                                       //                         .write
		.av_readdata              (LEDs_s1_readdata),                                    //                         .readdata
		.av_writedata             (LEDs_s1_writedata),                                   //                         .writedata
		.av_chipselect            (LEDs_s1_chipselect),                                  //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                      //                      clk.clk
		.reset                    (jtag_uart_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (data_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount           (data_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read                 (data_s1_agent_m0_read),                               //                         .read
		.uav_write                (data_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest          (data_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid        (data_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable           (data_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata             (data_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata            (data_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock                 (data_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess          (data_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address               (data_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write                 (data_s1_write),                                       //                         .write
		.av_readdata              (data_s1_readdata),                                    //                         .readdata
		.av_writedata             (data_s1_writedata),                                   //                         .writedata
		.av_chipselect            (data_s1_chipselect),                                  //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (address_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount           (address_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read                 (address_s1_agent_m0_read),                            //                         .read
		.uav_write                (address_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest          (address_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid        (address_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable           (address_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata             (address_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata            (address_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock                 (address_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess          (address_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address               (address_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write                 (address_s1_write),                                    //                         .write
		.av_readdata              (address_s1_readdata),                                 //                         .readdata
		.av_writedata             (address_s1_writedata),                                //                         .writedata
		.av_chipselect            (address_s1_chipselect),                               //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rnw_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (rnw_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount           (rnw_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read                 (rnw_s1_agent_m0_read),                                //                         .read
		.uav_write                (rnw_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest          (rnw_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid        (rnw_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable           (rnw_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata             (rnw_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata            (rnw_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock                 (rnw_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess          (rnw_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address               (rnw_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write                 (rnw_s1_write),                                        //                         .write
		.av_readdata              (rnw_s1_readdata),                                     //                         .readdata
		.av_writedata             (rnw_s1_writedata),                                    //                         .writedata
		.av_chipselect            (rnw_s1_chipselect),                                   //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) noe_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (noe_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount           (noe_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read                 (noe_s1_agent_m0_read),                                //                         .read
		.uav_write                (noe_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest          (noe_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid        (noe_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable           (noe_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata             (noe_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata            (noe_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock                 (noe_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess          (noe_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address               (noe_s1_address),                                      //      avalon_anti_slave_0.address
		.av_write                 (noe_s1_write),                                        //                         .write
		.av_readdata              (noe_s1_readdata),                                     //                         .readdata
		.av_writedata             (noe_s1_writedata),                                    //                         .writedata
		.av_chipselect            (noe_s1_chipselect),                                   //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mpdatain_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mpdatain_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount           (mpdatain_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read                 (mpdatain_s1_agent_m0_read),                           //                         .read
		.uav_write                (mpdatain_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest          (mpdatain_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid        (mpdatain_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable           (mpdatain_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata             (mpdatain_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata            (mpdatain_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock                 (mpdatain_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess          (mpdatain_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address               (mpdatain_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata              (mpdatain_s1_readdata),                                //                         .readdata
		.av_write                 (),                                                    //              (terminated)
		.av_read                  (),                                                    //              (terminated)
		.av_writedata             (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_chipselect            (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chrec_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (chrec_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount           (chrec_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read                 (chrec_s1_agent_m0_read),                              //                         .read
		.uav_write                (chrec_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest          (chrec_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid        (chrec_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable           (chrec_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata             (chrec_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata            (chrec_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock                 (chrec_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess          (chrec_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address               (chrec_s1_address),                                    //      avalon_anti_slave_0.address
		.av_readdata              (chrec_s1_readdata),                                   //                         .readdata
		.av_write                 (),                                                    //              (terminated)
		.av_read                  (),                                                    //              (terminated)
		.av_writedata             (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_chipselect            (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mpdataout_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mpdataout_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount           (mpdataout_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read                 (mpdataout_s1_agent_m0_read),                          //                         .read
		.uav_write                (mpdataout_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest          (mpdataout_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid        (mpdataout_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable           (mpdataout_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata             (mpdataout_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata            (mpdataout_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock                 (mpdataout_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess          (mpdataout_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address               (mpdataout_s1_address),                                //      avalon_anti_slave_0.address
		.av_write                 (mpdataout_s1_write),                                  //                         .write
		.av_readdata              (mpdataout_s1_readdata),                               //                         .readdata
		.av_writedata             (mpdataout_s1_writedata),                              //                         .writedata
		.av_chipselect            (mpdataout_s1_chipselect),                             //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) asoe_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (asoe_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount           (asoe_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read                 (asoe_s1_agent_m0_read),                               //                         .read
		.uav_write                (asoe_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest          (asoe_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid        (asoe_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable           (asoe_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata             (asoe_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata            (asoe_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock                 (asoe_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess          (asoe_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address               (asoe_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write                 (asoe_s1_write),                                       //                         .write
		.av_readdata              (asoe_s1_readdata),                                    //                         .readdata
		.av_writedata             (asoe_s1_writedata),                                   //                         .writedata
		.av_chipselect            (asoe_s1_chipselect),                                  //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sent_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sent_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount           (sent_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read                 (sent_s1_agent_m0_read),                               //                         .read
		.uav_write                (sent_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest          (sent_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid        (sent_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable           (sent_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata             (sent_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata            (sent_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock                 (sent_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess          (sent_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address               (sent_s1_address),                                     //      avalon_anti_slave_0.address
		.av_readdata              (sent_s1_readdata),                                    //                         .readdata
		.av_write                 (),                                                    //              (terminated)
		.av_read                  (),                                                    //              (terminated)
		.av_writedata             (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_chipselect            (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) load_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (load_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount           (load_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read                 (load_s1_agent_m0_read),                               //                         .read
		.uav_write                (load_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest          (load_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid        (load_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable           (load_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata             (load_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata            (load_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock                 (load_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess          (load_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address               (load_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write                 (load_s1_write),                                       //                         .write
		.av_readdata              (load_s1_readdata),                                    //                         .readdata
		.av_writedata             (load_s1_writedata),                                   //                         .writedata
		.av_chipselect            (load_s1_chipselect),                                  //                         .chipselect
		.av_read                  (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) testin_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (nios2_processor_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (testin_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount           (testin_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read                 (testin_s1_agent_m0_read),                             //                         .read
		.uav_write                (testin_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest          (testin_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid        (testin_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable           (testin_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata             (testin_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata            (testin_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock                 (testin_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess          (testin_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address               (testin_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata              (testin_s1_readdata),                                  //                         .readdata
		.av_write                 (),                                                    //              (terminated)
		.av_read                  (),                                                    //              (terminated)
		.av_writedata             (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_chipselect            (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BEGIN_BURST           (75),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_instruction_master_agent (
		.clk                     (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (nios2_processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios2_processor_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios2_processor_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios2_processor_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios2_processor_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios2_processor_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios2_processor_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                                      // (terminated)
		.av_writeresponserequest (1'b0),                                                                                  // (terminated)
		.av_writeresponsevalid   ()                                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BEGIN_BURST           (75),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (15),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_data_master_agent (
		.clk                     (clk_0_clk_clk),                                                                  //       clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (nios2_processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios2_processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios2_processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios2_processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios2_processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios2_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios2_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios2_processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios2_processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios2_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios2_processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios2_processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios2_processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios2_processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios2_processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios2_processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios2_processor_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios2_processor_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios2_processor_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios2_processor_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios2_processor_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios2_processor_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                               // (terminated)
		.av_writeresponserequest (1'b0),                                                                           // (terminated)
		.av_writeresponsevalid   ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_processor_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_processor_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_processor_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_processor_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_processor_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_processor_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_processor_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_processor_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_processor_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_processor_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_processor_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_processor_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_processor_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_processor_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_processor_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_processor_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_processor_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                //                .channel
		.rf_sink_ready           (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_processor_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_processor_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_processor_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_processor_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_processor_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_processor_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_processor_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_processor_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_processor_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_processor_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_processor_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_processor_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_processor_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                             //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (onchip_memory_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (onchip_memory_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),               //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) leds_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (leds_s1_agent_rdata_fifo_src_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (leds_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_sink_data    (leds_s1_agent_rdata_fifo_src_data),                   //                .data
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (jtag_uart_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (jtag_uart_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) data_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (data_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (data_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (data_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (data_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (data_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (data_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (data_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (data_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (data_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (data_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (data_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (data_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (data_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (data_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (data_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (data_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (data_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (data_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (data_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (data_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (data_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (data_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (data_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (data_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (data_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (data_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (data_s1_agent_rdata_fifo_src_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (data_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_sink_data    (data_s1_agent_rdata_fifo_src_data),                   //                .data
		.rdata_fifo_src_ready    (data_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (data_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (data_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (data_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (data_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (data_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (data_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (data_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (data_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (data_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (data_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (data_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) address_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (address_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (address_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (address_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (address_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (address_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (address_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (address_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (address_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (address_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (address_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (address_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (address_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (address_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (address_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (address_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (address_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (address_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (address_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (address_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (address_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (address_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (address_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (address_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (address_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (address_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (address_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (address_s1_agent_rdata_fifo_src_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (address_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_sink_data    (address_s1_agent_rdata_fifo_src_data),                //                .data
		.rdata_fifo_src_ready    (address_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (address_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (address_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (address_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (address_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (address_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (address_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (address_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (address_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (address_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (address_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (address_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rnw_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rnw_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (rnw_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (rnw_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (rnw_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (rnw_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (rnw_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (rnw_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (rnw_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (rnw_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (rnw_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (rnw_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (rnw_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (rnw_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (rnw_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (rnw_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (rnw_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                             //                .channel
		.rf_sink_ready           (rnw_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (rnw_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (rnw_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (rnw_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (rnw_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (rnw_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (rnw_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (rnw_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (rnw_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (rnw_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (rnw_s1_agent_rdata_fifo_src_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rnw_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_sink_data    (rnw_s1_agent_rdata_fifo_src_data),                    //                .data
		.rdata_fifo_src_ready    (rnw_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rnw_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (rnw_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rnw_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rnw_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (rnw_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (rnw_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (rnw_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (rnw_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (rnw_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (rnw_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (rnw_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (rnw_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (rnw_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) noe_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (noe_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (noe_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (noe_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (noe_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (noe_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (noe_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (noe_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (noe_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (noe_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (noe_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (noe_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (noe_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (noe_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (noe_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (noe_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (noe_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                             //                .channel
		.rf_sink_ready           (noe_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (noe_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (noe_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (noe_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (noe_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (noe_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (noe_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (noe_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (noe_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (noe_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (noe_s1_agent_rdata_fifo_src_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (noe_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_sink_data    (noe_s1_agent_rdata_fifo_src_data),                    //                .data
		.rdata_fifo_src_ready    (noe_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (noe_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (noe_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) noe_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (noe_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (noe_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (noe_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (noe_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (noe_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (noe_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (noe_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (noe_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (noe_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (noe_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mpdatain_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mpdatain_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (mpdatain_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (mpdatain_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (mpdatain_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (mpdatain_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (mpdatain_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (mpdatain_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (mpdatain_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (mpdatain_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (mpdatain_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (mpdatain_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (mpdatain_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (mpdatain_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (mpdatain_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (mpdatain_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (mpdatain_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                             //                .channel
		.rf_sink_ready           (mpdatain_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (mpdatain_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (mpdatain_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (mpdatain_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (mpdatain_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (mpdatain_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (mpdatain_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (mpdatain_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (mpdatain_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (mpdatain_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (mpdatain_s1_agent_rdata_fifo_src_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mpdatain_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_sink_data    (mpdatain_s1_agent_rdata_fifo_src_data),               //                .data
		.rdata_fifo_src_ready    (mpdatain_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mpdatain_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (mpdatain_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mpdatain_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mpdatain_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (mpdatain_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (mpdatain_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (mpdatain_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (mpdatain_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (mpdatain_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (mpdatain_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (mpdatain_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (mpdatain_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (mpdatain_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) chrec_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chrec_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (chrec_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (chrec_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (chrec_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (chrec_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (chrec_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (chrec_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (chrec_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (chrec_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (chrec_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (chrec_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (chrec_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (chrec_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (chrec_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (chrec_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (chrec_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                             //                .channel
		.rf_sink_ready           (chrec_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (chrec_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (chrec_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (chrec_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (chrec_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (chrec_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (chrec_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (chrec_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (chrec_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (chrec_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (chrec_s1_agent_rdata_fifo_src_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (chrec_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_sink_data    (chrec_s1_agent_rdata_fifo_src_data),                  //                .data
		.rdata_fifo_src_ready    (chrec_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chrec_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (chrec_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chrec_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chrec_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (chrec_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (chrec_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (chrec_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (chrec_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (chrec_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (chrec_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (chrec_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (chrec_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (chrec_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mpdataout_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mpdataout_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (mpdataout_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (mpdataout_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (mpdataout_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (mpdataout_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (mpdataout_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (mpdataout_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (mpdataout_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (mpdataout_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (mpdataout_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (mpdataout_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (mpdataout_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (mpdataout_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (mpdataout_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (mpdataout_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (mpdataout_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (mpdataout_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (mpdataout_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (mpdataout_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (mpdataout_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (mpdataout_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (mpdataout_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (mpdataout_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (mpdataout_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (mpdataout_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (mpdataout_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (mpdataout_s1_agent_rdata_fifo_src_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mpdataout_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_sink_data    (mpdataout_s1_agent_rdata_fifo_src_data),              //                .data
		.rdata_fifo_src_ready    (mpdataout_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mpdataout_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (mpdataout_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mpdataout_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mpdataout_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (mpdataout_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (mpdataout_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (mpdataout_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (mpdataout_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (mpdataout_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (mpdataout_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (mpdataout_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (mpdataout_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (mpdataout_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) asoe_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (asoe_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (asoe_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (asoe_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (asoe_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (asoe_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (asoe_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (asoe_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (asoe_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (asoe_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (asoe_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (asoe_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (asoe_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (asoe_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (asoe_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (asoe_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (asoe_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                             //                .channel
		.rf_sink_ready           (asoe_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (asoe_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (asoe_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (asoe_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (asoe_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (asoe_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (asoe_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (asoe_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (asoe_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (asoe_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (asoe_s1_agent_rdata_fifo_src_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (asoe_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_sink_data    (asoe_s1_agent_rdata_fifo_src_data),                   //                .data
		.rdata_fifo_src_ready    (asoe_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (asoe_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (asoe_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) asoe_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (asoe_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (asoe_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (asoe_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (asoe_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (asoe_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (asoe_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (asoe_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (asoe_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (asoe_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (asoe_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sent_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sent_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (sent_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (sent_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (sent_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (sent_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (sent_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (sent_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (sent_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (sent_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (sent_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (sent_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (sent_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (sent_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (sent_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (sent_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (sent_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                             //                .channel
		.rf_sink_ready           (sent_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (sent_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (sent_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (sent_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (sent_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (sent_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (sent_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (sent_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (sent_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (sent_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (sent_s1_agent_rdata_fifo_src_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sent_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_sink_data    (sent_s1_agent_rdata_fifo_src_data),                   //                .data
		.rdata_fifo_src_ready    (sent_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sent_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (sent_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sent_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sent_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (sent_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (sent_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (sent_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (sent_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (sent_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (sent_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (sent_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (sent_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (sent_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) load_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (load_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (load_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (load_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (load_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (load_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (load_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (load_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (load_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (load_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (load_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (load_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (load_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (load_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (load_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (load_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (load_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                             //                .channel
		.rf_sink_ready           (load_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (load_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (load_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (load_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (load_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (load_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (load_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (load_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (load_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (load_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (load_s1_agent_rdata_fifo_src_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (load_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_sink_data    (load_s1_agent_rdata_fifo_src_data),                   //                .data
		.rdata_fifo_src_ready    (load_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (load_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (load_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) load_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (load_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (load_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (load_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (load_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (load_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (load_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (load_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (load_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (load_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (load_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_TRANS_LOCK            (60),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_ORI_BURST_SIZE_H      (97),
		.ST_CHANNEL_W              (15),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) testin_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (nios2_processor_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (testin_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (testin_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (testin_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (testin_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (testin_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (testin_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (testin_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (testin_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (testin_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (testin_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (testin_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (testin_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (testin_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (testin_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (testin_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (testin_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                             //                .channel
		.rf_sink_ready           (testin_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (testin_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (testin_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (testin_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (testin_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (testin_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (testin_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (testin_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (testin_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (testin_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (testin_s1_agent_rdata_fifo_src_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (testin_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_sink_data    (testin_s1_agent_rdata_fifo_src_data),                 //                .data
		.rdata_fifo_src_ready    (testin_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (testin_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (testin_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) testin_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (testin_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (testin_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (testin_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (testin_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (testin_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (testin_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (testin_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (testin_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (testin_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (testin_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	niosmp_mm_interconnect_0_router router (
		.sink_ready         (nios2_processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_processor_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_processor_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_processor_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_processor_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_processor_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_processor_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_processor_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_processor_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_processor_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_processor_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                     //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (leds_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                              //          .valid
		.sink_data          (leds_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (data_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (data_s1_agent_rp_valid),                              //          .valid
		.sink_data          (data_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (data_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (data_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (address_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (address_s1_agent_rp_valid),                           //          .valid
		.sink_data          (address_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (address_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (address_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (rnw_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (rnw_s1_agent_rp_valid),                               //          .valid
		.sink_data          (rnw_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (rnw_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (rnw_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                //       src.ready
		.src_valid          (router_008_src_valid),                                //          .valid
		.src_data           (router_008_src_data),                                 //          .data
		.src_channel        (router_008_src_channel),                              //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (noe_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (noe_s1_agent_rp_valid),                               //          .valid
		.sink_data          (noe_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (noe_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (noe_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                //       src.ready
		.src_valid          (router_009_src_valid),                                //          .valid
		.src_data           (router_009_src_data),                                 //          .data
		.src_channel        (router_009_src_channel),                              //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (mpdatain_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (mpdatain_s1_agent_rp_valid),                          //          .valid
		.sink_data          (mpdatain_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (mpdatain_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (mpdatain_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                //       src.ready
		.src_valid          (router_010_src_valid),                                //          .valid
		.src_data           (router_010_src_data),                                 //          .data
		.src_channel        (router_010_src_channel),                              //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (chrec_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (chrec_s1_agent_rp_valid),                             //          .valid
		.sink_data          (chrec_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (chrec_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (chrec_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (mpdataout_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (mpdataout_s1_agent_rp_valid),                         //          .valid
		.sink_data          (mpdataout_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (mpdataout_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (mpdataout_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (asoe_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (asoe_s1_agent_rp_valid),                              //          .valid
		.sink_data          (asoe_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (asoe_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (asoe_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (sent_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (sent_s1_agent_rp_valid),                              //          .valid
		.sink_data          (sent_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (sent_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (sent_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                //       src.ready
		.src_valid          (router_014_src_valid),                                //          .valid
		.src_data           (router_014_src_data),                                 //          .data
		.src_channel        (router_014_src_channel),                              //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (load_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (load_s1_agent_rp_valid),                              //          .valid
		.sink_data          (load_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (load_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (load_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                //       src.ready
		.src_valid          (router_015_src_valid),                                //          .valid
		.src_data           (router_015_src_data),                                 //          .data
		.src_channel        (router_015_src_channel),                              //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_router_004 router_016 (
		.sink_ready         (testin_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (testin_s1_agent_rp_valid),                            //          .valid
		.sink_data          (testin_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (testin_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (testin_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                //       src.ready
		.src_valid          (router_016_src_valid),                                //          .valid
		.src_data           (router_016_src_data),                                 //          .data
		.src_channel        (router_016_src_channel),                              //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (15),
		.VALID_WIDTH               (15),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios2_processor_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (nios2_processor_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_processor_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_processor_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_processor_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_processor_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (nios2_processor_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_processor_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_processor_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_processor_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_processor_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_processor_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_processor_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (15),
		.VALID_WIDTH               (15),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios2_processor_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                             //       clk.clk
		.reset                  (nios2_processor_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                      //          .valid
		.cmd_sink_data          (router_001_src_data),                                       //          .data
		.cmd_sink_channel       (router_001_src_channel),                                    //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.cmd_src_ready          (nios2_processor_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_processor_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_processor_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_processor_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_processor_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                     //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                   //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                               //          .endofpacket
		.rsp_src_ready          (nios2_processor_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_processor_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_processor_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_processor_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_processor_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_processor_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_processor_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	niosmp_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (nios2_processor_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_processor_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_processor_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_processor_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_processor_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_processor_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                        //           .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                             //        clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready          (nios2_processor_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_processor_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_processor_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_processor_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_processor_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_processor_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                  //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                  //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                   //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                          //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                            //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                  //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                  //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                   //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                          //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                            //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                  //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                  //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                   //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                          //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                            //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                  //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                  //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                   //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                          //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                            //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                  //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                  //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                   //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                          //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                            //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                  //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                  //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                   //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                          //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                            //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                  //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                  //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                   //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                          //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                            //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                  //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                  //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                   //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                          //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                            //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                  //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                  //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                   //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                          //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                            //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                  //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                  //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                   //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                          //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                            //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                 //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                 //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                  //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                               //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                         //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                           //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                 //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                 //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                  //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                               //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                         //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                           //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                 //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                 //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                  //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                               //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                         //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                           //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                 //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                 //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                  //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                               //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                         //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                           //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                 //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                 //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                  //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                               //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                         //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket)                            //           .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //          .valid
		.src_data            (cmd_mux_003_src_data),                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)               //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                               //          .valid
		.src_data            (cmd_mux_007_src_data),                                //          .data
		.src_channel         (cmd_mux_007_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                               //          .valid
		.src_data            (cmd_mux_008_src_data),                                //          .data
		.src_channel         (cmd_mux_008_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                               //          .valid
		.src_data            (cmd_mux_009_src_data),                                //          .data
		.src_channel         (cmd_mux_009_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                               //          .valid
		.src_data            (cmd_mux_010_src_data),                                //          .data
		.src_channel         (cmd_mux_010_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                      //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)                      //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                               //          .valid
		.src_data            (cmd_mux_012_src_data),                                //          .data
		.src_channel         (cmd_mux_012_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)                      //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                               //          .valid
		.src_data            (cmd_mux_013_src_data),                                //          .data
		.src_channel         (cmd_mux_013_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)                      //          .endofpacket
	);

	niosmp_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                               //          .valid
		.src_data            (cmd_mux_014_src_data),                                //          .data
		.src_channel         (cmd_mux_014_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)                      //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //      sink.ready
		.sink_channel       (router_002_src_channel),                              //          .channel
		.sink_data          (router_002_src_data),                                 //          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_002_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                           //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (jtag_uart_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                        //      sink.ready
		.sink_channel       (router_005_src_channel),                      //          .channel
		.sink_data          (router_005_src_data),                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)               //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //      sink.ready
		.sink_channel       (router_007_src_channel),                              //          .channel
		.sink_data          (router_007_src_data),                                 //          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_007_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                //      sink.ready
		.sink_channel       (router_008_src_channel),                              //          .channel
		.sink_data          (router_008_src_data),                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                //      sink.ready
		.sink_channel       (router_009_src_channel),                              //          .channel
		.sink_data          (router_009_src_data),                                 //          .data
		.sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_009_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_007_src0_data),                             //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                //      sink.ready
		.sink_channel       (router_010_src_channel),                              //          .channel
		.sink_data          (router_010_src_data),                                 //          .data
		.sink_startofpacket (router_010_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_010_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_008_src0_data),                             //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                //      sink.ready
		.sink_channel       (router_011_src_channel),                              //          .channel
		.sink_data          (router_011_src_data),                                 //          .data
		.sink_startofpacket (router_011_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_011_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_009_src0_data),                             //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                //      sink.ready
		.sink_channel       (router_012_src_channel),                              //          .channel
		.sink_data          (router_012_src_data),                                 //          .data
		.sink_startofpacket (router_012_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_012_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_010_src0_data),                             //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                //      sink.ready
		.sink_channel       (router_013_src_channel),                              //          .channel
		.sink_data          (router_013_src_data),                                 //          .data
		.sink_startofpacket (router_013_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_013_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_011_src0_data),                             //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                //      sink.ready
		.sink_channel       (router_014_src_channel),                              //          .channel
		.sink_data          (router_014_src_data),                                 //          .data
		.sink_startofpacket (router_014_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_014_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_012_src0_data),                             //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                //      sink.ready
		.sink_channel       (router_015_src_channel),                              //          .channel
		.sink_data          (router_015_src_data),                                 //          .data
		.sink_startofpacket (router_015_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_015_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_013_src0_data),                             //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_demux_002 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                //      sink.ready
		.sink_channel       (router_016_src_channel),                              //          .channel
		.sink_data          (router_016_src_data),                                 //          .data
		.sink_startofpacket (router_016_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_016_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_014_src0_data),                             //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //          .valid
		.src_data            (rsp_mux_src_data),                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	niosmp_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (nios2_processor_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                               //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                               //          .valid
		.src_data             (rsp_mux_001_src_data),                                //          .data
		.src_channel          (rsp_mux_001_src_channel),                             //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                              //          .channel
		.sink0_data           (rsp_demux_src1_data),                                 //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                            //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                          //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                             //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                            //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                          //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                             //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                      //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                            //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                            //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                          //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                             //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket)                       //          .endofpacket
	);

endmodule
